# 1 "../btadp_int/include/bluetooth_trc.h"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "../btadp_int/include/bluetooth_trc.h"
# 907 "../btadp_int/include/bluetooth_trc.h"
# 1 "../btadp_int/include/bt_adp_log.h" 1
# 134 "../btadp_int/include/bt_adp_log.h"
typedef enum
{
   TRACE_FUNC,
   TRACE_STATE,
   TRACE_INFO,
   TRACE_WARNING,
   TRACE_ERROR,
   TRACE_GROUP_1,
   TRACE_GROUP_2,
   TRACE_GROUP_3,
   TRACE_GROUP_4,
   TRACE_GROUP_5,
   TRACE_GROUP_6,
   TRACE_GROUP_7,
   TRACE_GROUP_8,
   TRACE_GROUP_9,
   TRACE_GROUP_10,
   TRACE_PEER
}trace_class_enum;


typedef enum {
   INVALID_SAP = 0,

   BCHS_L4C_SAP,
   BCHS_MMI_SAP,
   BT_A2DP_SAP,
   BT_APP_SAP,
   BT_AVRCP_SAP,
   BT_HFG_SAP,
   BT_BPP_SAP,
   BT_BIP_SAP,
   BT_PBAP_SAP,
   BT_OBEX_SAP,

   PS_SIM_SAP,

   LAST_SAP_CODE = 0xFFFFFFFF
} sap_type;

typedef struct
{
   kal_uint32 frame_number;
   kal_uint32 time_stamp;
   kal_uint32 msg_index;
   trace_class_enum trace_class;
   kal_uint16 buf_length;
} tst_index_trace_header_struct;

typedef struct
{
   kal_uint32 frame_number;
   kal_uint32 time_stamp;
   module_type module_id;
   kal_uint16 buf_length;
} tst_prompt_trace_header_struct;

typedef struct
{
 const kal_uint8* pTraceHeader;
 const kal_uint8* pData;
 const kal_uint8* pData2;
 kal_uint32 lenTraceHeader;
 kal_uint32 lenData;
 kal_uint32 lenData2;
 kal_uint32 frameMessageType;
} tst_trace_frame_arg;

typedef struct
{
   kal_uint32 frame_number;
   kal_uint32 time_stamp;
   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   kal_uint16 local_len;
   kal_uint16 peer_len;
   kal_uint32 local_addr;
   kal_uint32 peer_addr;
} tst_log_prim_header_struct;

void bt_trace( trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type,...);



void bt_prompt_trace(module_type mod_id, const char *fmt,...);
void bt_log_primitive(ilm_struct* ilm_ptr);
void bt_assert(char* expr, char* file, kal_uint32 line);
void bt_assert_reset(char* expr, char* file, kal_uint32 line);
void bt_log_setting(kal_uint32 trace, kal_uint8 primitive, kal_uint8 prompt);
# 908 "../btadp_int/include/bluetooth_trc.h" 2
# 1033 "../btadp_int/include/bluetooth_trc.h"
START_MODULE_MSG MOD_BT 20





    BT_SEC_ACCESS_REQ_FIND_ONE "BT_LOG_SEC_Access_Req Find a matched security record"
    BT_LOG_SEC_ACCESS_REQ_TOKEN_LEVEL "BT_LOG_SEC_Access_Req: case=0x%02x tok_level=0x%02x"
    BT_LOG_BTBM_AUTH_CFM_DEL_DEV_RECORD_STATUS "BtbmAuthenticatedCfm():Delete Device Record status=%d"

    BT_AVTP_TX_TIMEOUT "AVTP:  TX Timeout and aclTxPacketsLeft=%d"

    BT_DDB4W_DB_NOT_EXIST "DeviceDB: Device Database file does not exist"
    BT_DDB4W_DB_OPENED "DeviceDB: Device database file opened"
    BT_DDB4W_DB_NUMBER "DeviceDB: Database contains %d records"
    BT_DDB4W_DB_FLUSHED "DeviceDB: DDB FLUSH"
    BT_DDB4W_DB_NUMBER_WRITE "DeviceDB: Database write %d records"
    BT_DDB4W_DB_SAVEING_ERROR "DeviceDB: DDB Saving error:%d"
    BT_DDB4W_DB_FIND_RECORD "DeviceDB: DDB find record:%02x,%02x,%02x"
    BT_DDB4W_DB_STORED_RECORD "DeviceDB: DDB stored record:%02x,%02x,%02x"
    BT_DDB4W_DB_LINK_KEY "DeviceDB: DDB link key:%02x,%02x,%02x,%02x,  %02x,%02x,%02x,%02x,  %02x,%02x,%02x,%02x,  %02x,%02x,%02x,%02x"
    BT_DDB4W_COD_NOT_EXIST "DeviceDB: Device Database file does not exist"
    BT_DDB4W_COD_OPENED "DeviceDB: COD database file opened"
    BT_DDB4W_COD_NUMBER "DeviceDB: COD contains %d records"
    BT_DDB4W_COD_FLUSHED "DeviceDB: DDB COD FLUSH"
    BT_DDB4W_COD_FLUSHED_ERROR "DeviceDB: DDB COD FLUSH Error"
    BT_DDB4W_COD_NUMBER_WRITE "DeviceDB: COD write %d records"
    BT_DDB4W_COD_SAVEING_ERROR "DeviceDB: DDB COD Saving error:%d"
    BT_DDB4W_COD_FIND_RECORD "DeviceDB: DDB COD find record:%02x,%02x,%02x,%02x"
    BT_DDB4W_COD_STORED_RECORD "DeviceDB: DDB COD stored record:%02x,%02x,%02x,%02x"

    BT_BTBM_ENTER_REJECT_HANDLER "BTBM Message enter reject handler"
    BT_BTBM_ERROR_MESSAGE "BMA Error Message!"
    BT_BTBM_DISCOVERY_COMPLETE "Discovery complete with total_num:%02x"
    BT_BTBM_DISCOVERY_CANCEL "Discovery cancel with total_num:%02x"
    BT_BTBM_DISCOVERY_COD "Discovery result with cod:%08x"
    BT_BTBM_DISCOVERY_NAME_LEN "Discovery result with name len:%d"
    BT_BTBM_DISCOVERY_BDADDR "Discovery result with bdaddr:%08x, %02x, %08x"
    BT_BTBM_POWEROFF "BTBM Send Power Off msg"
    BT_BTBM_TIMEOUT "BTBMTimerHandler timeout"
    BT_BTBM_TIMESTART "BTBMTimerStart"
    BT_BTBM_TIMECANCEL "BTBMTimerCancel"
    BT_BTBM_PREVIOUS_ONGOING "Prevous operation is ongoing, activity is 0x%02x"
    BT_BTBM_DEVICE_MOTO820 "Remote Device MOTO820"
    BT_BTBM_DEVICE_WI_REVO "Remote Device WI_REVO"
    BT_BTBM_DEVICE_HP "Remote Device HP"
    BT_BTBM_DEVICE_GENERAL "Remote Device General"
    BT_BTBM_INQUIRY_CMD "Inq cmd cod:%08x, type:%08x,number:%08x"
    BT_BTBM_NAMEREQ_BDADDR "Name Req bdaddr:%02x, %02x, %02x"
    BT_BTBM_RESTORE_ERROR "Restore setting error"
    BT_BTBM_DISCONNECT_ALL_LINK "BTBM will disconnect all link"
    BT_BTBM_SHOW_BDADDR "Bdaddr:%02x, %02x, %02x"
    BT_BTBM_CON_ALLOCATED_RELEASE "BTBM Conn Allocated. release it!"
    BT_BTBM_CON_NOT_ALLOCATED_RELEASE "BTBM Conn not Allocated,can not release"
    BT_BTBM_CON_RELEASE_VALUE_LARGE "BTBM Conn Release index larger than max value"
    BT_BTBM_DUMMY_LINK_CONN_REQ "DummyLinkCallback BTEVENT_LINK_CONNECT_REQ"
    BT_BTBM_LINK_CONN_REQ "BTEVENT_LINK_CONNECT_REQ"
    BT_BTBM_RUN_MULTIPLE_NAME_QUERY "btbmMultipleNameQuery"
    BT_BTBM_NAME_REQ "btbmUtilNameReq: token=%d"
    BTLOG_DEVICE_IN_CONNECTING_MOD "Device in connecting mode, ignore the name req"
    BT_BTBM_UNABLE_TO_GET_NAME "Unable to get the name for device"
    BT_BTBM_NAME_SEARCH_COMPLETED "name search completed"
    BT_BTBM_NAME_SEARCH_CANCELED "name search canceled"
    BT_BTBM_PSI_INFO_NOT_IN_DDB "PSI information not in DB"
    BT_BTBM_NOT_AUTH_NAME_FAILED "Search remote name failed in btbmHandlerRemoteNameQueryAtNoAuthEnabled"
    BT_BTBM_REMOTE_NAME "Name in char:%c"
    BT_BTBM_LINK_EXISTS_CONFIRM "link exists, WriteConfirm"
    BT_BTBM_MATCH_COD "btbmMatchCoD: filter=0x%x, cod=0x%x"
    BT_BTBM_INQ_RESULT_TOO_MUCH "MTK BTBM Inquiry result number larger than MMI assigned number"
    BT_BTBM_ADD_INQUIRED_DEVICE "btbmUtilAddInquiredDevice"
    BT_BTBM_ADD_INQUIRED_DEVICE_DUPLICATE "btbmUtilAddInquiredDevice: duplicate device"
    BT_BTBM_INQ_RESULT_DDB_FULL "MTK BTBM Inquiry result with DB %d full. return"
    BT_BTBM_INQ_COMPLETED "MTKBTBM Inquiry complete"
    BT_BTBM_INQ_NO_TIME_NAME_QUERY "We don't still have time to do the name discovery"
    BT_BTBM_LINK_DEVICE_TABLE_FULL "DevRemNameTbl is full in BTBMGetFreeEntryFromDevRemoteNameTbl()"
    BT_BTBM_LINK_FREE_TABLE_ENTRY "Free an entry from DevRemNameTbl"
    BT_BTBM_EVENT_CONNECT_IND "MTKBTBM BTEVENT_LINK_CONNECT_IND"
    BT_BTBM_EVENT_CONNECT_IND_LEVEL3 "MTKBTBM BTEVENT_LINK_CONNECT_IND BSM_SEC_LEVEL_3"
    BT_BTBM_FORCE_DISCONNECT "MTKBTBM Force Disconnect"
    BT_BTBM_CONNECT_FAILED "Connect Failed"
    BT_BTBM_EVENT_CONNECT_CNF "MTKBTBM BTEVENT_LINK_CONNECT_CNF"
    BT_BTBM_CHANGE_NAME_SUCCESS "Local Name change success"
    BT_BTBM_PIN_CODE_REQ "MTKBTBM BTEVENT_PIN_REQ:%02x"
    BT_BTBM_BONDING_PIN_REQ "MTKBTBM BM_BONDING_PINCODE_REQ"
    BT_BTBM_BDC_IS_ZERO "(bdc ==0)"
    BT_BTBM_PIN_REJECT "MTKBTBM Pin Reject"
    BT_BTBM_OP_NONE_REJECT_BMOPACTIVITY "MTKBTBM BM_OP_NONE Pin Reject bm_opactivity=0x%02x"
    BT_BTBM_REMOTE_PIN_REQ "MTK BTBM remote device Pin request"
    BT_BTBM_EVENT_PAIRING_COMPLETED "MTKBTBM BTEVENT_PAIRING_COMPLETE %08x,%08x,%02x,%02x,"
    BT_BTBM_PAIRING_WRONG_TIME "MTKBTBM PAIRING in wrong timing, delete the stored link key"
    BT_BTBM_EVENT_AUTHENTICATION_CNF "MTKBTBM BTEVENT_AUTHENTICATE_CNF"
    BT_BTBM_BONDING_CANCELED "No link exists, BM_BONDING_CANCELED"
    BT_BTBM_EVENT_INQ_CANCELED "MTKBTBM BTEVENT_INQUIRY_CANCELED"
    BT_BTBM_LINK_AS_MASTER "MTKBTBM Put link as master"
    BT_BTBM_START_NAMETOKEN "Start anothe NameTok2 req"
    BT_BTBM_FREE_NAME_ENTRY_FAILED "Entry not on list, free failed"
    BT_BTBM_DISCONNECT_LINK "Try to disconnect"

    BT_GAPTS_INIT "GAP tester Init"
    BT_GAPTS_NONDISCOVERY "GAP tester Nondiscovery"
    BT_GAPTS_LIMITEDDISCOVERY "GAP tester Limited discovery"
    BT_GAPTS_GENERALDISCOVERY "GAP tester General discovery"
    BT_GAPTS_NONCONNECTABLE "GAP tester Non Connected"
    BT_GAPTS_NONPAIRED "GAP tester Non Paired"
    BT_GAPTS_PAIRED "GAP tester Paired"
    BT_GAPTS_SECLEVEL1 "GAP tester Sec Level1"
    BT_GAPTS_SECLEVEL2 "GAP tester Sec Level2"
    BT_GAPTS_SECLEVEL3 "GAP tester Sec Level3"
    BT_GAPTS_LIMITEDINQUIRY "GAP tester Limited inquiry"
    BT_GAPTS_GENERALINQUIRY "GAP tester General inquiry"
    BT_GAPTS_DEVICEDISCOVERY "GAP tester Device discovery"
    BT_GAPTS_BONDING "GAP tester Device bonding"
    BT_GAPTS_DELETEKEY "GAP tester Delete link key"
    BT_GAPTS_CREATELINK "GAP tester create link"
    BT_GAPTS_CREATECHNL "GAP tester create channel"
    BT_GAPTS_NAME_LEN "Name len:%d"
    BT_GAPTS_DISCOVERY_BDADDR "Discovery result with bdaddr:%08x, %02x, %08x, cod:%08x"
    BT_GAPTS_DISCOVERY_COMPLETE "Discovery complete result:%02x with total_num:%02x"
    BT_GAPTS_DISCOVERY_CANCEL "Discovery cancel result:%02x with total_num:%02x"
    BT_GAPTS_WRITE_LOCAL_NAME "Write Local Name result:%02x"
    BT_GAPTS_BDADDR "Bdaddr:%08x, %02x, %08x"
    BT_GAPTS_DISCOVERY_RESULT_NAME_LEN "Discovery result :%02x with name len:%d"
    BT_GAPTS_DISCOVERY_NAME_CHAR "Name char :%02x"
    BT_GAPTS_BONDING_CNF_RESULT "Bonding cfm result:%02x"
    BT_GAPTS_BONDING_RESULT_IND "Bonding result ind:%02x, cod:%08x"
    BT_GAPTS_READ_WRITESCAN_RESULT "Read WriteScan result:%02x, modeA:%02x, modeB:%02x"
    BT_GAPTS_SET_WRITESCAN_RESULT "Set WriteScan result:%02x"
    BT_GAPTS_SAVE_SETTING_RESULT "Save Setting cnf result:%02x"
    BT_GAPTS_RESTORE_SETTING_RESULT "Restore Setting cnf result:%02x"
    BT_GAPTS_DELETE_TRUST_RESULT "Delete Trust List cnf result:%02x"
    BT_GAPTS_BONDING_CANCEL_RESULT "Bonding cancel result:%02x"
    BT_GAPTS_PAIRING_CANCEL_RESULT "Pairing cancel result:%02x"
    BT_GAPTS_SUPPORTED_UUID "Supported UUID:%04x"
    BT_GAPTS_SEARCHED_COMPLETE_RESULT "SDP service search result:%02x, number:%02x"
    BT_GAPTS_READ_LOCAL_COD_RESULT "Read Local COD result:%02x, cod:%08x"
    BT_GAPTS_SET_AUTHENTICATION_RESULT "Set enter authentication result:%02x"
    BT_GAPTS_READ_LOCAL_ADDR_RESULT "Read local addr result:%02x"
    GAP_TESTER_SET_TO_GENERAL_INQUIRY "gap tester set to general inquiry"

    BT_ME_CREATELINK_CASE "BT_LOG_ME_CreateLink_case=%d"
    BT_ME_EVENT "ME rx event :%02x"
    BT_ME_NO_EVENT_HDL "ME: HCI Handle event with no task handler, event = %02x"
    BT_ME_INQUIRY_COMPLETE "ME Report Inquiry Completed"
    BT_ME_INQUIRY_CANCELED "ME Report Inquiry Canceled"
    BT_ME_READ_ADDR "MeCon: Automatic Read BD_ADDR command"
    BT_ME_OPEN_DDB_FAILED "ME: DDB_Open failed"
    BT_ME_WRITE_PAGE_TIMEOUT "ME: RadioParms wrote page timeout"
    BT_ME_STORE_PAGE_TIMEOUT "ME: RadioParms store page timeout:%08x"
    BT_ME_READ_VERSION_INFO "ME: Received Bluetooth version info"
    BT_ME_RECEIVED_FEATURE_INFO "ME: Received Bluetooth features info"
    BT_ME_STORING_ADDR "ME: RadioParms storing BD_ADDR."
    BT_ME_ERROR_CODE "ME: RadioParms error opcode = %02x, errCode = %02x"
    BT_ME_WAIT_PENDING_CMD "ME: Waiting for pending commands"

    IN_TEST_MODE_RFEVENT_OPEN_CALL_MECHANGEPACKETTYPE "In test mode RFEVENT_OPEN: call MeChangePacketType()"
    SEND_GROUP_DATA "Send Group Data"
    RADIOMGR_TRANSPORT_INITIALIZED "RADIOMGR:  Transport initialized"
    MESEC_RECEIVED_PIN_CODE_REQUEST_EVENT "MeSec: Received Pin Code Request Event"
    MESCO_SCO_CONNECTION_COMPLETE_HCIHANDLE__xX "MeSco: SCO Connection Complete hciHandle=0x%x"
    MEACC_INQSCANACTIVITY_COMPLETE "MeAcc: InqScanActivity complete"
    RADIOMGR_RADIO_INITIALIZED "RADIOMGR:  Radio initialized"
    MESEC_KEY_EXISTS__SENDING_LINK_KEY_REQUEST_REPLY_COMMAND "MeSec: Key exists - sending Link Key Request Reply command"
    RADIOMGR_TRANSPORT_IS_DOWN "RADIOMGR:  Transport is down"
    MESEC_SENDING_ENCYRPTION_MODE_COMMAND "MeSec: Sending encyrption mode command"
    ME_START_OPERATION_BUSY "MeStartOperation() HCI command busy"
    ME_START_OPERATION "MeStartOperation(): curOp = 0x%x"
    ME_START_OPERATION_FAIL_STATE "MeStartOperation() busy, stackState = %d, curOp = 0x%x"
    ME_INQUIRY_OPERATION_COMPLETED_WITH_ERROR__xX "ME: Inquiry operation completed with error=0x%x"
    MECON_SETTING_ERROR_FOR_LINK_REJECT_OLD_ERROR__0XxX "MeCon: Setting error for link reject. Old error = 0x%x"
    MESEC_REMOTE_DEVICE_PERFORMING_AUTHENTICATION "MeSec: remote device performing authentication"
    SCO_CONNECTION_RSULT_BT_DEBUGx02X "SCO connection result:%02x"
    MESEC_ENABLING_AUTHENTICATION_FOR_ALL_CONNECTIONS "MeSec: Enabling Authentication for all connections"
    SNIFF_END "sniff end"
    MESEC_HANDLESECURITYCOMMANDCOMPLETE_OPCODE_MISMATCHOPCODE__xX_CURTASK__xX "MeSec: HandleSecurityCommandComplete opcode mismatchopcode=0x%x, curTask=0x%x"
    EVENT_0XFCC1 "event 0xFCC1"
    ME_SET_HCI_EVENT_MASK_COMPLETED_STATUS__xX "ME: Set Hci Event Mask completed status=0x%x"
    MESEC_CREATING_OPERATION_FOR_LINK_KEY_RESPONSE "MeSec: Creating operation for link key response"
    MECON_ACL_CONNECT_COMPLETE_INTERNAL_REJECT "MeCon: ACL Connect Complete internal reject"
    RADIOMGR_RMGRHCICALLBACK_VALID_EVENT "RADIOMGR:  RmgrHciCallback: valid event."
    MESEC_SENDING_AUTHENTICATION_ENABLE_COMMAND "MeSec: Sending Authentication enable command"
    ME_MEHANDLECOMPLETETASK_OPCODE_MISMATCH_OPCODE__xX_CURTASK__xX "ME: MeHandleCompleteTask opcode mismatch opcode=0x%x, curTask=0x%x"
    SNIFF_REQ "sniff req"
    MESCO_VOICESETTINGS_DONE_STATUS_xX "MeSco: VoiceSettings done. Status=0x%x"
    RADIOMGR_BEGINNING_INITIALIZATION "RADIOMGR:  Beginning Initialization"
    FLUSH_OCCURED "flush occured"
    RADIOMGR_RESET_FAILED "RADIOMGR:  Reset failed"
    MESEC_NUM_LINK_KEYS__xD_BDADDR_xX_xX_xX_xX_xX_xX "MeSec: num link keys =%d, bdaddr=0x%x %x %x %x %x %x"
    MESEC_ACCESS_REQUEST_NEEDS_ENCRYPTION "MeSec: Access request needs encryption"
    STARTING_RTXBT_DEBUGx04X "Starting RTX(%04x)"
    BOP_SWITCH_ROLE_IS_REPORTED_AS_ROLExD "BOP_SWITCH_ROLE is reported as role=%d"
    MESEC_SECURITY_TOKEN_LIST_IS_EMPTY "MeSec: Security token list is empty"
    FORCEDISCONNECT "!forceDisconnect"
    MESEC_STARTING_AUTHENTICATION_REQUESTED_COMMAND "MeSec: Starting Authentication_Requested command"
    MECON_EXIT_PARK_MODE_TO_HCIHANDLE_xX "MeCon: Exit Park mode to hciHandle=0x%x"
    MESEC_DISABLING_AUTHENTICATION_FOR_ALL_CONNECTIONS "MeSec: Disabling Authentication for all connections"
    POWER_OFF_REJECT_IT "Power off, reject it"
    MESEC_RECEIVED_AUTHENTICATE_COMPLETE_EVENT_ERR__xD "MeSec: Received Authenticate Complete event. err = 0x%02x"
    MECON_RECEIVED_SCO_CONNECT_REQUEST "MeCon: Received SCO Connect Request"
    MESEC_RECEIVED_ENCRYPTION_CHANGE_ERR__xD "MeSec: Received encryption change err = 0x%02x"
    ME_EXIT_SNIFF_MODE_OPERATION_ERROR_STATUS__xX "ME: Exit Sniff mode operation error. Status=0x%x"
    MECONLINKREJECTERROR__xX "MeCon:LinkRejectError=0x%x"
    MECON_STARTING_LOCAL_NAME_CHANGE_COMMAND_LEN__xD "MeCon: Starting Local name change command, len = %d"
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__NO_OP_ON_QUEUE "MeAcc: Auto access mode switch on first connect - no op on queue"
    MECON_STARTING_DISCONNECT_TO_HCIHANDLE_xX "MeCon: Starting disconnect to hciHandle=0x%x"
    ME_HCI_INIT_COMPLETE_STATUS_xD "ME: HCI Init complete status: %d"
    RXBUFF_INVALID_BUFFER_TYPE_ON_FREE "RXBUFF:  Invalid buffer type on free"
    RADIOMGR_INITIALIZING_TRANSPORT "RADIOMGR:  Initializing Transport"
    WRITESCANxD "WriteScan:%d"
    MECON_DISCONNECT_COMPLETE_EVENT_FOR_HCIHANDLE__xD "MeCon: Disconnect complete event for hciHandle = %d"
    MELINKREADYTOSEND_START_TIMER "MeLinkReadyToSend Start Timer"
    RADIOMGR_TRANSPORT_INIT_FAILED_GIVING_UP "RADIOMGR:  Transport init failed (giving up)"
    MECON_INTERNAL_LINK_REJECT__xX "MeCon: Internal link reject=0x%x"
    MECONLINKACCEPTERROR__xX "MeCon:LinkAcceptError=0x%x"
    MESCO_LINKREJECTERROR__xX "MeSco: LinkRejectError=0x%x"
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__UP_OP_ON_QUEUE "MeAcc: Auto access mode switch on first connect - up op on queue"
    SCO_SENDDATABT_DEBUGx04X_SENT_xD_BYTE_DATA_PACKET "SCO: SendData(%04x) Sent %d byte Data Packet."
    MESEC_NO_AUTHORIZATION_HANDLE_OR_PREVIOUS_ATTEMPT_FAILED "MeSec: No authorization handle or previous attempt failed"
    ME_LOCAL_NAME_CHANGE_OPERATION_COMPLETED_STATUS__0XxX "ME: Local Name Change operation completed. Status = 0x%x"
    MESEC_DISABLING_ENCRYPTION_FOR_ALL_CONNECTIONS "MeSec: Disabling Encryption for all connections"
    MESEC_NO_PAIRING_HANDLER "MeSec: No pairing handler"
    MECON_MEHANDLELINKDISCONNECTOP_TASK_END_ERRCODE__xX "MeCon: MeHandleLinkDisconnectOp task End errcode = 0x%x"
    MESCO_SETTING_ERROR_FOR_LINK_REJECT_OLD_ERROR__0XxX "MeSco: Setting error for link reject. Old error = 0x%x"
    MESEC_SENDING_PIN_CODE_REQUEST_REPLY_COMMAND "MeSec: Sending Pin Code Request Reply command"
    IN_TEST_MODE_CHANGE_DATA_PKT_TYPE_TO_BAPT_DH3 "In test mode, change data pkt type to BAPT_DH3"
    MECON_RECEIVED_ACL_CONNECT_REQUEST "MeCon: Received ACL Connect Request"
    MECON_STARTING_REMOTE_NAME_REQUEST_COMMAND_CLOCK_OFFSET_SR_MODE "MeCon: Starting Remote name request command, clock offset=0x%02x%02x, SR mode=0x%02x"
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__DOWN_OP_ON_QUEUE "MeAcc: Auto access mode switch on first connect - down op on queue"
    MESEC_LINK_KEY_IS_SAVED_DEVICE_TRUSTED "MeSec: Link key is saved. Device trusted"
    STOP5 "stop5"
    ME_MEHANDLEDISCOVERROLETASK_OPCODE_MISMATCH_OPCODE__xX_CURTASK__xX "ME: MeHandleDiscoverRoleTask opcode mismatch opcode=0x%x, curTask=0x%x"
    MESCO_ESCO_CONNECTION_CHANGED_HCIHANDLE__xX "MeSco: eSCO Connection Changed hciHandle=0x%x"
    ME_GET_REMOTE_DEVICE_NAME_CANCEL_OPERATION_COMPLETE_STATUS__xX "ME: Get Remote Device Name Cancel operation complete. Status=0x%x"
    ME_WRITE_DEFAULT_LINK_POLICY_OPERATION_COMPLETED_ERROR__0XxX "ME: Write Default Link Policy operation completed error = 0x%x"
    MEACC_STARTING_WRITE_SCAN_ACTIVITY_COMMAND "MeAcc: Starting Write Scan Activity command"
    ME_FORCEDISCONNECTLINKWITHREASONxD "ME_ForceDisconnectLinkWithReason:%d"
    ME_CREATE_LINK_CANCEL_OPERATION_COMPLETE_STATUS__xX "ME: Create Link Cancel operation complete. Status=0x%x"
    MESEC_ADDING_CANCEL_AUTHENTICATION_OPERATION_TO_QUEUE "MeSec: Adding cancel authentication operation to queue"
    ME_SWITCH_ROLE_OPERATION_ERROR_STATUS__xX "ME: Switch Role operation error. Status=0x%x"
    MECON_CHANGE_PACKET_TYPE_TO_HCIHANDLE_xX "MeCon: Change Packet Type to  hciHandle=0x%x"
    ME_HOLD_MODE_OPERATION_ERROR_STATUS__xX "ME: Hold mode operation error. Status=0x%x"
    EVENT_0XFCC0 "event 0xFCC0"
    MECACCMODENC_BT_DEBUGx04X "MEC(accModeNC) :%04X"
    MECON_PARK_MODE_TO_HCIHANDLE_xX "MeCon: Park mode to hciHandle=0x%x"
    RADIOMGR_TRANSPORT_SHUTTING_DOWN "RADIOMGR:  Transport shutting down"
    MESEC_ADDING_AUTHORIZE_OPERATION_TO_QUEUE "MeSec: Adding authorize operation to queue"
    MESEC_ADDING_AUTHENTICATE_OPERATION_TO_QUEUE "MeSec: Adding authenticate operation to queue"
    SERIOUS_ERROR "Serious Error"
    COD_NOT_MATCH "Cod not match"
    SET_ME_SETACCESSIBLEMODENCBT_DEBUGx02X "Set ME_SetAccessibleModeNC:%02x"
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNECT__EXISTING_OP_ON_QUEUE "MeAcc: Auto access mode switch on last disconnect - existing op on queue"
    RADIOMGR_RMGRTRANCALLBACK_xX "RADIOMGR:  RmgrTranCallback: %#x"
    MESEC_SENDING_LINK_KEY_REQUEST_NEGATIVE_REPLY_COMMAND "MeSec: Sending Link Key Request Negative Reply command"
    MESEC_SECPROCESSALLSECURITYTOKENS_REMOVING_TOKEN "MeSec: SecProcessAllSecurityTokens: removing token"
    MESCO_ESCO_CONNECTION_CHANGED_EVENT "MeSco: eSCO Connection Changed event"
    MECON_STARTING_CREATE_LINK_CANCEL_COMMAND "MeCon: Starting Create Link Cancel command"
    MEINQUIRY_RESULT_CLOCKOFFSET__xX "ME:Inquiry result clockOffset=0x%x"
    REMDEV_0 "remDev ==0"
    BDCLINKSTATEBT_DEBUGx02X "bdc->link->state:%02x"
    MESEC_REMOTE_DEVICE_PERFORMING_PAIRING "MeSec: Remote device performing pairing"
    MESCO_STARTING_SCO_LINK_TO_ACL_LINK_xX "MeSco: Starting SCO link to ACL link=0x%x"
    MESEC_NO_AUTHORIZATION_HANDLER "MeSec: No authorization handler"
    RADIOMGR_INTIALIZING_RADIO "RADIOMGR:  Intializing Radio"
    MESCO_STARTING_DISCONNECT_TO_SCO_HCIHANDLE_xX "MeSco: Starting disconnect to SCO hciHandle=0x%x"
    RADIOMGR_INITIALIZING_HCI "RADIOMGR:  Initializing HCI"
    MESEC_SECURITY_COMMAND_STATUS_EVENT_RECEIVED_ERR__xX "MeSec: Security Command status event received. Err=0x%x"
    MESEC_SENDING_PIN_CODE_REQUEST_NEGATIVE_REPLY_COMMAND "MeSec: Sending Pin Code Request Negative Reply command"
    MESEC_ACCESS_REQUEST_NEEDS_AUTHENTICATION "MeSec: Access Request needs authentication"
    ISNODEONLISTREMDEVHANDLERS_HANDLERNODE "IsNodeOnList(&(remDev->handlers), &(handler->node))"
    CALLANDREMOVEHANDLERS_1 "CallAndRemoveHandlers 1"
    MEACC_PAGESCANACTIVITY_COMPLETE "MeAcc: PageScanActivity complete"
    MEACC_PAGESCANACTIVITY_EVENT "MeAcc: PageScanActivity event:%02x"
    MEACC_PAGESCANACTIVITY_ACTIVITY "MeAcc: PageScanActivity operation index:%02x"
    RADIOMGR_RMGR_RADIOINIT "RADIOMGR:  RMGR_RadioInit"
    MESEC_ENABLING_ENCRYPTION_FOR_ALL_CONNECTIONS "MeSec: Enabling Encryption for all connections"
    MESEC_ERROR_SAVING_LINK_KEY "MeSec: Error saving link key"
    BT_MEIF_SEC_PASSKEYENTRY "SEC_PasskeyEntry(): accept=%d, passkey=%d"
    MODE_CHANGE "mode change"
    CALLANDREMOVEHANDLERS "CallAndRemoveHandlers"
    MESEC_CALLING_PAIRING_HANDLER_INDICATING_PAIRING_COMPLETE "MeSec: Calling pairing handler indicating pairing complete"
    DS_ADDDEVICE_NO_RESOURCE "DS_AddDevice no resource"
    ME_INQUIRY_CANCEL_OPERATION_COMPLETED_ERROR__xX "ME: Inquiry cancel operation completed error=0x%x"
    RELEASE_PREVIOUS_ONE "Release previous one."
    MEACC_STARTING_WRITE_CURRENT_IAC_LAP "MeAcc: Starting Write_Current_IAC_LAP"
    MEACC_WRITE_SCAN_OP__xD_INT__xD_WIN__xD "MeAcc: Write Scan op = %d, int = %d, win = %d"
    MECON_CONNECTION_COMPLETE_EVENT_STATUS__0XxX "MeCon: Connection complete event. Status = 0x%x"
    MESCO_SCO_DISCONNECT_COMPLETE_EVENT_FOR_HCIHANDLE__xD "MeSco: SCO Disconnect complete event for hciHandle = %d"
    MESCO_SCOHANDLELINKDISCONNECTOP_TASK_END_ERRCODE__xX "MeSco: ScoHandleLinkDisconnectOp task End errcode=0x%x"
    MECREATELINK_INSERT_HANDLER_2 "MeCreateLink insert handler 2"
    RADIOMGR_RMGR_RADIOSHUTDOWN "RADIOMGR:  RMGR_RadioShutdown"
    RMGR_RADIO_INIT_STATUS "RMGR:  RADIO_INIT_STATUS"
    MEACC_STARTING_WRITE_SCAN_ENABLE "MeAcc: Starting Write_Scan_Enable"
    RADIOMGR_INITIALIZATION_FAILED "RADIOMGR:  Initialization failed"
    WRITESCAN1xD "WriteScan1:%d"
    RADIOMGR_TRANSPORT_INITIALIZING "RADIOMGR:  Transport initializing"
    MESEC_IGNORING_SECOND_PIN_REQUEST "MeSec: ignoring second PIN request"
    MTK_NUM_KNOWN_DEVICES_FULL "MTK NUM_KNOWN_DEVICES full"
    RADIOMGR_RESET_INITIATED "RADIOMGR:  Reset initiated"
    MESEC_ADDING_ENCRYPTION_OPERATION_TO_QUEUE "MeSec: Adding encryption operation to queue"
    RADIOMGR_COULD_NOT_INIT_TRANSPORT_DURING_RESET "RADIOMGR:  Could not init transport during reset"
    MESEC_REMOTE_DEVICE_DOES_NOT_EXIST_FOR_PAIRING "MeSec: Remote device does not exist for pairing"
    MECON_ACL_CONNECT_COMPLETE_HCIHANDLE__xX "MeCon: ACL Connect Complete hciHandle=0x%x"
    MESEC_CALLING_PAIRING_HANDLER_FOR_A_PIN_CODE "MeSec: Calling pairing handler for a pin code"
    PACKETDATAOFFSETBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "packet->data+offset:%02x,%02x,%02x,%02x,"
    ME_PARK_MODE_OPERATION_ERROR_STATUS__xX "ME: Park mode operation error. Status=0x%x"
    MECON_STARTING_LINK_REJECT_COMMAND "MeCon: Starting Link Reject command"
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__EXISTING_OP_ON_QUEUE "MeAcc: Auto access mode switch on first connect - existing op on queue"
    ME_DISCOVER_ROLE_OPERATION_COMPLETED_ERROR__0XxX "ME: Discover Role operation completed error = 0x%x"
    STOP_4 "stop 4"
    RADIOMGR_RESET_DURING_SHUTDOWN "RADIOMGR:  Reset during shutdown"
    MESCO_SCO_CONNECTION_COMPLETE_INTERNAL_REJECT "MeSco: SCO connection complete internal reject"
    MESEC_SECPROCESSALLSECURITYTOKENS_PROCESSING_A_TOKEN "MeSec: SecProcessAllSecurityTokens: processing a token"
    RADIOMGR_RMGR_HCIRESET "RADIOMGR:  RMGR_HciReset"
    MESCO_DETECTED_RACE_CONDITION "MeSco: Detected race condition."
    MESEC_CANCELING_PIN_CODE_REQUEST "MeSec: Canceling pin code request"
    ME_MEHANDLECONNECTIONSTATUSONLY_OPCODE_MISMATCHOPCODE__xX_CURTASK__xX "ME: MeHandleConnectionStatusOnly opcode mismatchopcode=0x%x, curTask=0x%x"
    MELINKREADYTOSENDBT_DEBUGx02X "MeLinkReadyToSend:%02x"
    MECON_SCO_CONNECT_COMPLETE_EVENT "MeCon: SCO Connect complete event."
    RADIOMGR_SHUTDOWN_FAILED_ALREADY_DOWN_OR_INTIALIZING "RADIOMGR:  Shutdown failed (already down or intializing)"
    MESCO_STARTING_SCO_VOICE_SETTINGS_COMMAND "MeSco: Starting SCO Voice Settings command"
    MESEC_TIMEOUT_ON_SECURITY_ACCESS_REQUEST "MeSec: Timeout on security access request"
    MEHANDLEDISCONNECTCOMPLETE_REPORT_TO_UPERxX "MeHandleDisconnectComplete report to uper=0x%x"
    MESCO_RECONFIGURING_ESCO_LINK_xX "MeSco: Re-configuring eSCO link=0x%x"
    MESCO_STARTING_SCO_LINK_ACCEPT_COMMAND "MeSco: Starting SCO Link Accept command"
    MECON_STARTING_GENERAL_COMMAND "MeCon: Starting General command"
    MEDEV_CALLING_SELECT_DEVICE_HANDLER "MeDev: Calling select device handler."
    RADIOMGR_TRANSPORT_INIT_FAILED_RETRYING "RADIOMGR:  Transport init failed (retrying)"
    RADIOMGR_INIT_CALLED_DURING_INIT "RADIOMGR:  Init called during init"
    MECON_SWITCH_ROLE_TO_HCIHANDLE_xX "MeCon: Switch role to hciHandle=0x%x"
    ME_HCI_TRANSPORT_ERROR "ME: HCI transport error"
    START_INQUIRY_LOOP "Start Inquiry Loop"
    RADIOMGR_RADIODEINIT "RADIOMGR:  RadioDeinit"
    ME_EXIT_PARK_MODE_OPERATION_ERROR_STATUS__xX "ME: Exit Park mode operation error. Status=0x%x"
    MESCO_RECEIVED_SCO_LINK_CONNECT_REQUEST "MeSco: Received SCO Link Connect Request"
    RADIOMGR_RMGRHCICALLBACK_xX "RADIOMGR:  RmgrHciCallback: %#x"
    MECON_COD__0XxX "MeCon: COD = 0x%x"
    MESCO_ESCO_CONNECTION_CHANGED_UNKNOWN_HCIHANDLE__xX "MeSco: eSCO connection changed unknown hciHandle=0x%x"
    RADIOMGR_TRANSPORT_DEINITIALIZATION_FAILED "RADIOMGR:  Transport deinitialization failed"
    RADIOMGR_RADIO_INIT_FAILED_RETRYING "RADIOMGR:  Radio init failed (retrying)"
    RADIOMGR_TRANSPORT_FAILED_SHUTDOWN "RADIOMGR:  Transport failed shutdown"
    RADIOMGR_RADIO_IS_DOWN "RADIOMGR:  Radio is down"
    ME_WRITE_LINK_POLICY_STATUS__xX "ME: Write Link Policy Status=0x%x"
    ME_HCI_DEINIT_COMPLETE_STATUS_xD "ME: HCI deinit complete status: %d"
    MECON_STARTING_LINK_CONNECT_COMMAND_CLOCK_OFFSET__0XxX_ALLOWROLECHANGE__xD "MeCon: Starting Link Connect command clock offset = 0x%x allowRoleChange = %d"
    MESCO_RECEIVED_SCO_LINK_CONNECT_REQUEST_REJECT "MeSco: Received SCO Link Connect Request (Reject)"
    ME_HCI_COMMAND_SENT "ME: HCI Command sent"
    INQUIRY_RESULT "Inquiry result (already found:0x%02x)"
    ME_RECEIVED_INQUIRY_COMPLETE_EVENT "ME: Received Inquiry complete event. Status = 0x%x"
    MECON_STARTING_LINK_ACCEPT_COMMAND_ACCEPT_ROLE__xD "MeCon: Starting Link Accept command. Accept Role = %d"
    MESEC_LINK_KEY_IS_SAVED_DEVICE_NOT_TRUSTED "MeSec: Link key is saved. Device not trusted"
    ME_HANDLEGENERALTASK_OPCODE_MISMATCH "ME: HandleGeneralTask opcode mismatch"
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__EXISTING_OP_EXECUTING "MeAcc: Auto access mode switch on first connect - existing op executing"
    ME_GENERAL_COMMAND_COMPLETED_STATUS__0XxX "ME: General Command completed. Status = 0x%x"
    ME_WRITE_CLASS_OF_DEVICE_OPERATION_COMPLETED_ERROR__xX "ME: Write Class of Device operation completed error=0x%x"
    RADIOMGR_RMGRRADIOCALLBACK_xX "RADIOMGR:  RmgrRadioCallback: %#x"
    RADIOMGR_RADIO_MODULE_IS_DOWN "RADIOMGR:  Radio Module is down"
    MECACCINFONC_BT_DEBUGx04X "MEC(accInfoNC) :%04X"
    MESEC_NO_PAIRING_HANDLER_TO_REPORT_PAIRING_COMPLETE "MeSec: No pairing handler to report pairing complete"
    MECREATELINK_INSERT_HANDLER_1 "MeCreateLink insert handler 1"
    MESEC_STARTING_SET_CONNECTION_ENCRYPTION_COMMAND "MeSec: Starting Set Connection Encryption command"
    RADIOMGR_INITIALIZING_TRANSPORT_DURING_RESET "RADIOMGR:  Initializing transport during reset"
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNET__EXISTING_OP_EXECUTING "MeAcc: Auto access mode switch on last disconnet - existing op executing"
    MECON_ACL_CONNECT_COMPLETE_EVENT "MeCon: ACL Connect complete event."
    MESCO_STARTING_ESCO_LINK_TO_ACL_LINK_xX "MeSco: Starting eSCO link to ACL link=0x%x"
    HANDLER__0 "handler == 0"
    RFCOMM_NEGOTIATION_SENT_SUCCESSFULLY_TO_DLCI_xD_ON_MUX_xD "RFCOMM:  Negotiation sent successfully to DLCI=0x%02x on Mux=0x%02x"
    ME_SNIFF_MODE_OPERATION_ERROR_STATUS__xX "ME: Sniff mode operation error. Status=0x%x"
    MECON_DISCONNECT_COMPLETE_EVENT_STATUS__0XxX "MeCon: Disconnect complete event. Status = 0x%x"
    MECON_HOLD_MODE_TO_HCIHANDLE_xX "MeCon: Hold mode to hciHandle=0x%x"
    RADIOMGR_TRANSPORT_INITIATED "RADIOMGR:  Transport initiated"
    ACCOPNC_IS_BT_DEBUGx04X "ACCOP->nc is :%04X,%04X,%04X"
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNECT__NO_OP_ON_QUEUE "MeAcc: Auto access mode switch on last disconnect - no op on queue"
    MECON_REMOTE_NAME_REQUEST_COMPLETE_STATUS__0XxX "MeCon: Remote name request complete status = 0x%02x"
    ME_WRITE_AFH_COMPLETED_ERROR__xX "ME: Write AFH completed error=0x%x"
    MESCO_SCO_CONNECTION_COMPLETE_EVENT "MeSco: SCO Connection complete event"
    MESEC_LINK_KEY_NOTIFY_EVENT "MeSec: Link key notify event"
    RADIOMGR_HCI_DEINIT_STARTED "RADIOMGR:  HCI deinit started"
    ME_CHANGE_PACKET_TYPE__xX "ME: Change Packet Type=0x%x"
    MUXCHANNELMUXIDNUMTXPACKETSxD "MUX(Channel->muxId).numTxPackets++:%d, insert on DLCI=0x%02x, pktInTransmit=%d"
    BOP_DISCOVER_ROLE_IS_REPORTED_AS_ROLExD "BOP_DISCOVER_ROLE is reported as role=%d"
    MESEC_ADDING_CANCEL_AUTHORIZE_OPERATION_TO_QUEUE "MeSec: Adding cancel authorize operation to queue"
    ME_REMOTE_NAME_REQUEST_OPERATION_ERROR_STATUS__xX "ME: Remote Name Request operation error. Status=0x%x"
    MESEC_RECEIVED_ENCRYPTION_CHANGE_EVENT__NO_REMOTE_DEVICE "MeSec: Received encryption change event - no remote device"
    RECEIVE_EVENT_FOR_GENERAL_COMMAND_EVENT__0XxX "Receive event for general command. Event = 0x%x"
    MECON_WRITE_LINK_POLICY_TO_HCIHANDLE_xX "MeCon: Write Link policy to hciHandle=0x%x"
    MECON_QOS_SETUP "MeHandleQoSSetupOp(): handle=0x%x, flag=%d, type=%d, tr=0x%x, pb=0x%x, lat=0x%x, dv=0x%x"
    MECON_QOS_SETUP_ERROR_STATUS__xX "MeHandleQoSSetupOp(): error status=0x%x"
    RADIOMGR_HCI_INIT_FAILED_RETRYING "RADIOMGR:  HCI init failed (retrying)"
    MEACC_WRITE_IAC_LAP_COMPLETE "MeAcc: Write IAC Lap complete"
    MESEC_RECEIVED_AUTHENTICATE_COMPLETE_EVENT__NO_REMOTE_DEVICE "MeSec: Received Authenticate complete event - no remote device"
    ME_SET_CHANNEL_CLASSIFICATION_OPERATION_COMPLETED_ERROR__0XxX "ME: Set Channel Classification operation completed error = 0x%x"
    RADIOMGR_RADIO_SHUTTING_DOWN "RADIOMGR:  Radio shutting down"
    MEACC_WRITE_SCAN_ENABLE_COMPLETE "MeAcc: Write Scan Enable complete"
    MEGETFREEREMOTEDEVICE "MeGetFreeRemoteDevice"
    MEGETFREEREMOTEDEVICENULL "MeGetFreeRemoteDevice(): No available free entry"
    RADIO_WAITING_FOR_EVENT_xX "RADIO: Waiting for event=0x%x"
    MESEC_CALLING_AUTHORIZATION_HANDLER "MeSec: Calling authorization handler"
    MESEC_ACCESS_REQUEST_NEEDS_AUTHORIZATION "MeSec: Access request needs authorization"
    MESEC_SECURITY_COMMAND_COMPLETE_EVENT_RECEIVED_ERR__xX "MeSec: Security Command complete event received. Err=0x%x"
    MESEC_LINK_KEY_REQ_FOR_INVALID_BD_ADDR__LINK_KEY_NEG_RSP "MeSec: Link key req for invalid BD_ADDR - link key neg rsp"
    RADIOMGR_HCI_INIT_ERROR "RADIOMGR:  HCI init error"
    MEACC_THE_SETACCESSIBLEMODE_OPERATION_FAILED "MeAcc: The SetAccessibleMode Operation failed=0x%x"
    MEHCI_COMMAND_COMPLETE_ERROR "HCI_Command_Complete(Status) error=%02x"
    ME_SWITCH_ROLE_OPERATION_ENDED_STATUSxX "ME: Switch Role operation ended. Status=0x%x"
    MESEC_NO_LINK_KEY__NEED_A_PIN_CODE "MeSec: No link key - need a pin code"
    MESCO_STARTING_SCO_LINK_REJECT_COMMAND "MeSco: Starting SCO Link Reject command"
    MECSEC_ERROR_SETTING_ENCRYPTION_MODE_ERR__xD "MecSec: Error setting encryption mode. Err = %d"
    MESEC_SECURITY_TOKEN_LIST_IS_NOT_EMPTY "MeSec: Security token list is not empty"
    RADIOMGR_SHUTDOWN_INITIATED "RADIOMGR:  Shutdown initiated"
    ME_INIT_FAILED "ME_Init(): failed."
    MESCOLINKACCEPTERROR__xX "MeSco:LinkAcceptError=0x%x"
    RADIOMGR_HCI_IS_DOWN "RADIOMGR:  HCI is down"
    AVCTP_MISSING_PARAMETERS_DISCONNECTING "AVCTP: Missing parameters, disconnecting"
    AVCTP_UNABLE_TO_REGISTER_WITH_L2CAP "AVCTP:  Unable to register with L2CAP."
    AVCTP_INVALID_PID_DISCONNECTING "AVCTP: Invalid PID, disconnecting"
    AVCTP_ERROR_SENDING_MESSAGE "AVCTP: Error Sending Message"
    AVCTP_INVALID_PROFILE_ID "AVCTP: Invalid Profile ID"
    RELEASE_THE_SPACE_ALLOCATED_IN_AVDT_WRITE_DATA "Release the space allocated in AVDT_Write_Data()"
    AVDTP_AVDT_CONNECTREQ "AVDTP AVDT_ConnectReq"
    AVDTP_AVDT_DISCOVER_REQ "AVDTP AVDT_Discover_Req"
    AVDTP_AVDT_SET_CONFIGURATION_REQ "AVDTP AVDT_Set_Configuration_Req"
    AVDT_CONNECTREQ "AVDT_ConnectReq"
    AVDTP_AVDT_GET_CAPABILITIES_REQ "AVDTP AVDT_Get_Capabilities_Req"
    AVDTP_INIT "AVDTP Init"
    IN_CMGR_SETDEVICEASMASTER_CALL_ME_SWITCHROLE "In CMGR_SetDeviceAsMaster(): call ME_SwitchRole"
    CMGR_ATTEMPTING_MS_SWITCH "CMGR: Attempting M/S switch..."
    CMGR_ROLE_IS_MASTER "CMGR: Role is Master"
    CMGR_ROLE_IS_SLAVE "CMGR: Role is Slave"
    CMGR_SETQOS "CMGR: QoS level=%d"
    BTBT_DEBUGx02X "%02x"
    IN_CMGR_SETDEVICEASMASTER_ALREADY_MASTER "In CMGR_SetDeviceAsMaster(): already Master!"
    x1C "%02x"
    ACL_LINK_CONNECTION_EXISTS_DO_SERVICE_SEARCH_DIRECTLY "ACL link connection exists, do service search directly."
    ACL_LINK_CONNECTION_EXISTS_DO_SERVICE_SEARCH_ATTRIBUTE_DIRECTLY "ACL link connection exists, do service search attribute directly."
    SPP_RFEVENT_CLOSED "SPP: RFEVENT_CLOSED"
    SPP_DEVICE_STATE_CLOSED "SPP: DEVICE_STATE_CLOSED"
    ADD_SERVICE_RECORD_FAILED "Add service record failed"
    SPP_RFEVENT_CLOSE_IND "SPP: RFEVENT_CLOSE_IND"
    SPP_PASSTHRU_EVENT__xD "SPP: pass-thru event - %d"
    SPP_RF_ACCEPTCHANNEL_FAILED_xD "SPP: RF_AcceptChannel failed: %d"
    RF_xD "->RF %d/"
    SENDING_PORT_SETTINGS "SENDING port settings"
    TX_RATExD "Tx rate:%d"
    SPP_CHANNEL_OPEN "SPP: channel open."
    SPP_RF_SENDDATA_FAILED_xD "SPP: RF_SendData failed: %d"
    SPP_SDP_QUERY_FAILED "SPP: SDP Query Failed"
    SPP_UNKNOWN_EVENT__xD "SPP: unknown event - %d"
    xD "%d"
    SPP_SDP_CONNECT_RETURNED_xD "SPP: SDP_Connect() returned %d"
    RX_xD_SAVED_xD "rx %d, saved %d"
    TX_FINISHED_STARTxD_ENDxD "Tx finished, start:%d, end:%d"
    TXSLEEPCOUNT "> txSleepCount"
    SPP_OPEN_SERVICE_AVAILABLE_ON_RFCOMM_CHANNEL_xD "SPP_Open: service available on RFCOMM channel %d"

    BTLOG_RFCHC_RFCOUNT "RFCH Rfservice=0x%X RFcount%u"
    BTLOG_RFCH_GET_SDP_ATTRIBS "RFCH Get SDP attributes for server%u"
    BTLOG_RFCH_ASSIGN_SRV_AND_SDP "RFCH Assign RfService and SDP record for SPP server%u"


    BTBM_ADD_LINK_CALLBACK "BTBM Add Link Callback"
    BTBM_REMOVE_LINK_CALLBACK "BTBM Remove Link Callback."
    BTBM_REMOVE_LINK_CALLBACK_LINK_NOT_EXISTED "BTBM Remove Link Callback: no callback due to link already removed"
    BTBM_CREATE_CONNECTION "BTBM create connection:%d."
    BTBM_REMOVE_CONNECTION "BTBM remove connection:%d."
    CONNMGR_BTEVENT_READ_RSSI_COMPLETED "ConnMgr: BTEVENT_READ_RSSI_COMPLETED"
    ME_START_RSSIOP "MeHandleReadRSSIOp():hicHandle=%04X"
    ME_END_RSSIOP "ERR or END MeHandleReadRSSIOp"
    BTBM_BONDING_NOT_SEND_AUTH_CMD_AUTHSTATE_ENCRYPTSTATE "Bonding Procedure: Not send auth cmd and link_authstate=%d,encrypt_state=%d"
    BT_FATAL "BT fatal index=%d"

    BTEVENT_SCO_CONNECT_CNF_ESCO_FAILED "BTEVENT_SCO_CONNECT_CNF ESCO failed"
    BT_TRY_TO_OPEN_SCO "Try to open SCO"
    SCOCONNECTSCOLINKTYPEx02X "scoConnect->scoLinkType:%02x"
    CONNMGRACCEPTAUDIOLINK_SCOCONNECTSCOTXPARMSESCOPKTTYPEx02X "ConnMgrAcceptAudioLink scoConnect->scoTxParms.eScoPktType:%02x"
    STARTSCOLINKSETUPTASK "StartScoLinkSetupTask"
    STARTSCOLINKACCEPTTASK "StartScoLinkAcceptTask"
    BT_TRY_TO_OPEN_ESCO "Try to open eSCO"
    BTTRANSMITBANDWIDTHx08X "transmitBandwidth:%08x"
    BTRETRANSMISSIONEFFORTx02X "retransmissionEffort:%02x"
    BTVOICESETTINGx04X "voiceSetting:%04x"
    BTESCOPKTTYPEx04X "eScoPktType:%04x"
    BTCURRENT_SCOPARMSx02X "Current ScoParms:%02x"
    BTRECEIVEBANDWIDTHx08X "receiveBandwidth:%08x"
    BTEVENT_SCO_CONNECT_CNF_SCO_FAILED "BTEVENT_SCO_CONNECT_CNF SCO failed"
    BTMAXLATENCYx04X "maxLatency:%04x"
    BT_PROFILES_TYPE_FROM_MMIx02X "BT profiles type from MMI:%02x"
    SUPPORT_ESCO_STATUSx02X "Support eSCO status:%02x"
    BT_PROFILES_ESCO_TYPEx02X "BT profiles eSCO_type:%02x"
    WRITE_FLUSHED_TIMEOUT "write flushed timeout"
    LINK_FLUSHED_TIMEOUT_DEBUGx02X "flush timeout hdl:%02x"
    LINK_FLUSHED_TIMEOUT_ERROR_CODE "flush timeout error code:%04x"
    BTLOG_ENHANCED_FLUSHED_COMMAND_COMPLETED_HDL "BTlog The enhanced flushed command is completed with hdlr:0x%04x, value=0x%04x"
    BTLOG_SUPERVISION_TIMEOUT_CHANGE_EVENT "BTlog The link supervision timeout event:%04x"
    BTLOG_POWERON_SET_EVENT_MASK "BTlog Set event mask"
    BTLOG_SET_EVENT_MASK_COMMAND_COMPLETED "BTlog Set event mask command completed"
    BTLOG_SET_SNIFF_SUBRATING_OP_IN_QUEUE "BTlog The sniff subrating operation is in remote queue"
    LINK_SNIFF_SUBRATING_ERROR_CODE "sniff subrating command with error code:%04x"
    BTLOG_WRITE_EIR_RESPONSE "write extended inquiry response with error code:%04x"
    BTLOG_WRITE_INQUIRY_MODE_COMPLETED "write Inquiry mode command completed"
    BTLOG_WRITE_INQUIRY_MODE_PARM "write Inquiry mode command :%02x"
    BTLOG_CREATE_AUDIOLINK_SCO_HANDLER "ConnMgrCreateAudioLink remDevice->scoHandler:%08x"
    BTLOG_CREATE_AUDIOLINK_SCO_HANDLER1 "ConnMgrCreateAudioLinkscoConnect:%08x"
    BTLOG_CREATE_AUDIOLINK_SCO_STATUS "ConnMgrCreateAudioLinkscoConnect status:%02x"
    BT_LOG_NOTIFY_MMI_SIMAP_ISSUE_16_DIGITS "btbmHandlePinReqTimeout(): Notify MMI promots 16digits PIN CODE INPUT due to simap issue"
    BT_LOG_CHECK_SIMAP_SRV_STATE_PIN_CODE_IND "btbmHandlePinReqTimeout(): Check SIMAP Srv state=%d"
    BT_LOG_CHECK_SIMAP_PIN_CODE_LEN_IN_RECV_SABM_CASE "RFChnl DISC state:Recv SABM to check SIMAP PIN LEN case=%d"
    BT_LOG_LINK_KEY_RSP_TASK_PAIRED_LEN "LinkKeyRspTask: Find record, paired_with_simap=%d,pin_code_len=%d"
    BT_LOG_SEC_PIN_CODE_REQ_ISSUED_BY_SIMAP "SecHandlePinCodeReq(): This pin code request is issued by our SIMAP server"
    BT_LOG_SEC_AUTH_COMPLETE_RESET_SIMAP_ISSUE_AUTH_PROCEDURE "SecHandleAuthComplete(): reset simap_issue_auth_procedure to FALSE"
    BT_LOG_SEC_LINK_KEY_NOTIFY_RESET_FALGS_CASE "SecHandleLinkKeyNotify():reset simap_issue_auth_procedure and set record_paired_with_simap TRUE,case=%d"
    BT_LOG_SEC_LINK_KEY_NOTIFY_PIN_CODE_LEN_CASE "SecHandleLinkKeyNotify(): store link key with pin code len to database_case=%d,len=%d"
    BT_LOG_START_PIN_CODE_RSP_TASK_PIN_LEN "StartPinCodeRspTask():Reply to this exchange with pin_code_len=%d"
    BT_LOG_START_PIN_CODE_RSP_BY_ADDR_TASK_LEN "StartPinCodeRspByAddrTask():pin_code_len=%d"
    BT_LOG_REMDEV_REFCOUNT_DLCCOUNT "RfDlcDisconnected(): refCount=%d,Muxid=0x%02x,dlcCount=%d for link=%08X"
    BT_LOG_NEEDS_HIGHER_SECURITY_BUT_EXISTED_ACTIVE_CON_REJECT_THIS_CHNL "RfDlcDisconnected():Reject this higher security chnl due to existed other active cons: can not reset auth states"
    BT_LOG_HANDLE_LINK_KEY_NOTIFY_CHECK_PAIRED_SIMAP_FLAG "BT_SecHandleLinkKeyNotify: case=%d,record paired_with_simap flag=%d"
    BT_LOG_BTBM_REPORT_LINK_STATE_DEBUG_INFO "BTBMAdpReportLinkState(): operation_ongoing=%d,src_module=%d,last_cmd=%d"
    BT_LOG_BTBM_CAN_NOT_RESET_OP_ONGOING_FLAG "BTBMAdpReportLinkState():Can not reset operation_ongoing"
    BT_LOG_BM_REJECT_WRITE_SCAN_MODE_SAVE_MODE_AND_STATUS "bm_reject_hdlr: save write_scan_value: bm_save_mode=%d, status=%d"
    BT_LOG_SDAP_REJECT_SECOND_A2DP_SDP_DUE_TO_ONE_PENDING "sdap_search_multiple_ssa():reject 2nd a2dp sdp request"
    BT_LOG_NAMETOK_CBFUNC "PinCodeAskNameQueryHandler()"
    BT_LOG_NAMETOK2_CBFUNC "btbmHandlerRemoteNameQueryAtNoAuthEnabled()"
    BT_LOG_NAMETOK3_CBFUNC "btbmHandlerRemoteNameQueryAtNoAuthEnabled()"
    BT_LOG_MULTIPLE_NAME_CBFUNC "btbmHandlerRunMultipleNameQuery"
    BT_LOG_EXISTING_NAMETOK2_NOT_RESET "NameTok2 is used, can not ask name in btbmRemoteNameRequestAtNoAuthEnabled"
    BTLOG_WRITE_SIMPLE_PAIRING_MODE_PARM "write simple pairing mode command :%02x"
    BTLOG_WRITE_SIMPLE_PAIRING_MODE_COMPLETED "write simple pairing mode command completed"
    MESEC_SENDING_IO_CAPABILITY_NEGATIVE_REPLY_COMMAND "MeSec: Sending Io Capability Request Negative Reply command"
    BTLOG_BTBM_BONDING_RX_USER_CONFIRM_REQUEST "BTBM Bonding received the user confirm request event"
    BTLOG_BTBM_PAIRING_RX_USER_CONFIRM_REQUEST "BTBM pairing received the user confirm request event"
    BTLOG_BTBM_BONDING_RX_PASSKEY_ENTRY_REQUEST "BTBM Bonding received the passkey entry notification event"
    BTLOG_BTBM_PAIRING_RX_PASSKEY_ENTRY_REQUEST "BTBM pairing received the passkey entry notification event"
    BTLOG_BTBM_READRSSI_STATUS "BTBMReadRSSI(): returned status=%d from ME_ReadRSSI()"
    BTLOG_BTBM_READRSSI_NOT_FIND_REMDEV_WITH_ADDR "BTBMReadRSSI(): Can not find remDev with passed addr"
    BTLOG_BTBM_REPORT_READRSSI_RESULT "In btbmReportReadRSSIResult(): rssi_op_ongoing=%d,errCode=%d,rssi_value=%d,lap=%08X,uap=%02X,nap=%04X"
    BTLOG_CONNMANAGER_RSSI_VAL "Get RSSI value=%d in ConnManager()"
    MESEC_SENDING_USER_CONFIRM_COMMAND "MeSec: Sending User Confirm Reply command"
    MESEC_SENDING_USER_CONFIRM_NEG_COMMAND "MeSec: Sending User Confirm Negative Reply command"
    BTLOG_CMGR_CREATE_LINK_WITH_DIFF_ADDR "CMGR_CreateDataLink(): ACL connected but different BT addr"
    BT_LOG_MPR_CANCEL_TIMER_IN_AUTHSTATE_CASE "BT MPR: Cancel timer in authState=%d and case=%d"
    BT_LOG_START_MPR_TIMER_CASE "BT MPR: Start a timer for pair result in case=%d"
    BT_LOG_MPR_TIMEOUT_LINKSTATE_AUTHSTATE "BT MPR timeout: linkstate=%d,authState=%d"
    BT_LOG_MPR_TIMEOUT_LINK_NOT_CONNECTED "BT MPR timeout: Link is not connected"
    BT_LOG_AUTHEVENT_ERRCODE_LINKSTATE_ORG_AUTHSTATE "Auth Event with errCode=%d,linkstate=%d,org_authState=%d"
    BT_LOG_AUTHEVENT_ERR_DISC_LINK "Auth event with error: Disc ACL link"
    BT_LOG_AVDTP_RECV_SIGRSP_CURRENT_STATE "Recv AVDTP SIG RSP=%d,now_stream_state=%d,state_flag=%d"
    BT_LOG_AVDTP_RECV_RSP_BUT_STREAM_ALREADY_DISC "AVDTP stream already disc but recv SIG RSP with type=%d"
    BT_LOG_AVDTP_CHANGE_TO_STREAMING_STATE "AVDTP Recv Start Stream Rsp change to STREAMING state"


    BTLOG_BLOCK_LIST_NOxD "Block list no:%d"
    BTLOG_BLOCK_LIST_Ix02Xx02Xx02Xx02Xx02Xx02X "Block List %02d:%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_INPUT_ADDRx02Xx02Xx02Xx02Xx02Xx02X "input addr    :%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_SSP_MTKBMCBONDING_STATEx02X "SSP MTKBMC(bonding_state):%02x"
    BTLOG_BTBMHANDLEPASSKEYENTRYNOTIFICATIONxD "btbmHandlePasskeyEntryNotification:%d"
    BTLOG_MTKBMCPIN_BDCx08X "MTKBMC(pin_bdc):%08x"
    BTLOG_SERVICE_LISTx02Xx02Xx02X "Service list:%02x,%02x,%02x"
    BTLOG_BTBMHANDLEIOCAPABILITYRESPONSEx02Xx02Xx02Xx02Xx02Xx02X "btbmHandleIoCapabilityResponse:%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE "BTEVENT_IO_CAPABILITY_RESPONSE"
    BTLOG_BTBMHANDLEIOCAPABILITYRESPONSEx02Xx02Xx02X "btbmHandleIoCapabilityResponse:%02x,%02x,%02x"
    BTLOG_UUID16x04X "uuid16:%04x"
    BTLOG_RSSIx02X "RSSI:%02x"
    BTLOG_EVENTERRCODEx02X "Event->errCode:%02x"
    BTLOG_EVENTPBTBMHANDLEPASSKEYENTRYNOTIFICATIONREMDEVBDADDRADDRx02Xx02Xx02Xx02Xx02Xx02X "Event->p.btbmHandlePasskeyEntryNotification.remDev->bdAddr.addr:%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_FIND_DEVICE_NEWx02Xx02Xx02Xx02Xx02Xx02X "Find device new:%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_PASSKEY_ENTRY_NOTIFICATION_WRONG_STATE_IGNORE_IT "PASSKEY Entry notification wrong state, ignore it."
    BTLOG_EIR_VALUEx02X "eir_value:%02x"
    BTLOG_MTKBMCBM_OPACTIVITYx02X "MTKBMC(bm_opactivity):%02x"
    BTLOG_REMDEVSTATEx02X "remDev->state:%02x"
    BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_AUTHREQUIREMENTSxD "BTEVENT_IO_CAPABILITY_RESPONSE authRequirements:%d"
    BTLOG_EVENTPUSERCONFIRMREQUESTREMDEVBDADDRADDRx02Xx02Xx02Xx02Xx02Xx02X "Event->p.userConfirmRequest.remDev->bdAddr.addr:%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_IOCAPABILITYxD "BTEVENT_IO_CAPABILITY_RESPONSE ioCapability:%d"
    BTLOG_x02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X "%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_CURRENT_BM_OPACTIVITY "Current bm_opactivity %02x"
    BTLOG_EIR_LENGTHxD "EIR Length:%d"
    BTLOG_SIMPLE_PAIRING_PROCEDURE_IS_COMPLETED "Simple Pairing procedure is completed %08x,%08x,%02x,%02x"
    BTLOG_EIR_RESPONSE "EIR Response"
    BTLOG_BTEVENT_IO_CAPABILITY_REQUEST "BTEVENT_IO_CAPABILITY_REQUEST"
    BTLOG_BDCSUPPORT_SERVICE_LISTxD "bdc->support_service_list:%d"
    BTLOG_KEYPRESSEVENTREPORTINGxD "keyPressEventReporting:%d"
    BTLOG_BTBMHANDLE_CURRENT_KEY_PRESSxD "btbmHandle Current key press:%d"
    BTLOG_UUID_OFFSETxD "uuid_offset:%d"
    BTLOG_FIND_DEVICE_AGAINx02Xx02Xx02Xx02Xx02Xx02X "Find device again:%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_IN_BLOCK_LIST_DISCONNECT "In block list, disconnect"
    BTLOG_BDCx08X "bdc:%08x"
    BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_OOBDATAPRESENTxD "BTEVENT_IO_CAPABILITY_RESPONSE OOBDataPresent:%d"
    BTLOG_BDC_NOT_FIND_RESPONSE_FAILED "bdc not find, response failed."
    BTLOG_MTKBMCSSPDEVICEINFONUMERICVALUExD "MTKBMC(SSPDeviceInfo).numericValue:%d"
    BTLOG_BTEVENT_USER_CONFIRM_REQUEST "BTEVENT_USER_CONFIRM_REQUEST"
    BTLOG_EIR_THE_LAST_ONE "EIR The last one"
    BTLOG_IN_BLOCK_LIST_REJECT "In Block list, reject"
    BTLOG_ADDRESS_NOT_MATCHED_RETURN "Address not matched, return"
    BTLOG_SSP_KEY_TYPExD "SSP key type:%d"
    BTLOG_MTKBMCPIN_REQ_TIMERFUNCx08X "MTKBMC(pin_req_timer).func:%08x"
    BTLOG_MTKBMCSSPDEVICEINFOADDR_ADDRx02Xx02Xx02Xx02Xx02Xx02X "MTKBMC(SSPDeviceInfo).addr addr:%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_BTBMHANDLEUSERCONFIRMREQUESTxD "btbmHandleUserConfirmRequest:%d"
    BTLOG_BTBMHANDLEOOBDATAREQUEST "btbmHandleOobDataRequest"
    BTLOG_NOT_SUPPORT_SNIFF_SUBRATING_MODE "Not support Sniff subrating mode"
    BTLOG_MECTASKSTATEx02X "MEC(taskState):%02x"
    BTLOG_MEHANDLEWRITEEIROP "MeHandleWriteEirOp"
    BTLOG_WRITE_EIR_DATA "Write Eir Data"
    BTLOG_EIRRECORDNUMxD "eirRecordNum:%d"
    BTLOG_EIRx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X "EIR:%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_OFFSETxD "offset:%d"
    BTLOG_MECLOCALNAMELENxD "MEC(localNameLen):%d"
    BTLOG_MEHANDLEREADRSSIOPHICHANDLEx04X "MeHandleReadRSSIOp():hicHandle=%04X"
    BTLOG_MEDISCONNECTLINKx02Xx02Xx02X "MeDisconnectLink:%02x,%02x,%02x"
    BTLOG_MEHANDLEWRITEAUTOMATICALLYFLUSHOP "MeHandleWriteAutomaticallyFlushOp"
    BTLOG_CURRENT_KEYxD "Current key:%d"
    BTLOG_ACL_DISCONNECTING_CREATING_LINK_PENDING "ACL Disconnecting, creating link pending"
    BTLOG_MEHANDLEDISCONNECTACLCHECKCREATEACL "MeHandleDisconnectACLCheckCreateACL"
    BTLOG_ERR_OR_END_MEHANDLEREADRSSIOP "ERR or END MeHandleReadRSSIOp"
    BTLOG_MEHANDLEWRITESNIFFSUBRATINGOP "MeHandleWriteSniffSubratingOp"
    BTLOG_RECORD_INDEXx0D_SERVICE_CLASSx04X "record index:%0d, service class:%04x"
    BTLOG_EIR_CHECK_THE_REGISTRATION_IN_RECORD_OR_NOT "EIR check the registration in record or not"
    BTLOG_RECORD_EXISTxD "record_exist:%d"
    BTLOG_xD_USEDxD_SERVICE_CLASSx04X "%d: used:%d, service class:%04x"
    BTLOG_EIR_REGISTRATION_SDP_FOR_UPPER_LAYER_SERVICE_CLASSx04X "EIR registration sdp for upper layer service class:%04x"
    BTLOG_CURRENT_IOCAPABILITIYSTATE0Xx02X "Current ioCapabilitiyState:0x%02x"
    BTLOG_REMDEVSNIFFSUBRATESTATEx02X "remDev->sniffSubrateState:%02x"
    BTLOG_EIROP_IN_OPLIST "eirOp in opList"
    BTLOG_NO_EIR_UPDATE_OPERATION "No Eir Update operation"
    BTLOG_EIROP_NOT_AVAILABLE "eirOp not available"
    BTLOG_WRONG_STATE "Wrong state"
    BTLOG_REMDEVDISCONNECTACLCHECKCREATACLTIMERFUNC_0 "remDev->disconnectACLCheckCreatACLTimer.func !=0"
    BTLOG_REMDEV_0 "Remdev ==0"
    BTLOG_TOKENREMDEVENCRYPTSTATExD "token->remDev->encryptState:%d"
    BTLOG_LINK_KEY_BDCx08X "link key bdc:%08x"
    BTLOG_STARTIOCAPABILITYRSPBYADDRTASKx02X "StartIoCapabilityRspByAddrTask:%02x"
    BTLOG_REMOTE_DEVICE_PERFORM_SHOW_KEY_REQUEST "Remote device perform show key request"
    BTLOG_NOT_SIMPLE_PAIRING_KEY_USE_INTERNAL_VALUE "Not simple pairing key, use internal value"
    BTLOG_CURRENT_KEY_TYPExD "Current key type:%d"
    BTLOG_STARTUSERCONFIRMRSPBYADDRTASKx02X "StartUserConfirmRspByAddrTask:%02x"
    BTLOG_REMOTE_DEVICE_IS_NOT_WAITING_FOR_LINK_KEY "Remote device is not waiting for Link key"
    BTLOG_SECHANDLEIOCAPABILITYREQUEST "SecHandleIoCapabilityRequest"
    BTLOG_SECHANDLEUSERKEYPRESS "SecHandleUserKeyPress"
    BTLOG_RECORDGAPKEYTYPExD "record.gapKeyType:%d"
    BTLOG_PASSKEY_PRESS_EVENT_x02X "Passkey press event :%02x"
    BTLOG_REMOTE_DEVICE_PERFORM_USER_CONFIRM_REQUEST "Remote device perform user confirm request"
    BTLOG_PAIRING_IS_IN_PROGRESS "Pairing is in progress"
    BTLOG_REMOVE_DEVICE_IS_EMPTY "Remove device is empty"
    BTLOG_USERCONFIRMREQUEST_NUMERICVALUE_x08X "UserConfirmRequest numericValue :%08x"
    BTLOG_SECHANDLEDELETESTOREDLINKKEYOP "SecHandleDeleteStoredLinkKeyOp"
    BTLOG_SECHANDLESIMPLEPAIRINGCOMPLETE "SecHandleSimplePairingComplete"
    BTLOG_SECHANDLEUSERPASSKEYNOTIFICATION "SecHandleUserPasskeyNotification"
    BTLOG_BTEVENT_SIMPLE_PAIRING_COMPLTETE "BTEVENT_SIMPLE_PAIRING_COMPLTETE"
    BTLOG_SECHANDLEIOCAPABILITYREQUEST_NO_REMDEV "SecHandleIoCapabilityRequest no remDev"
    BTLOG_TOKENRECORDLEVEL_TYPExD "token->record->level_type:%d"
    BTLOG_NOT_KNOWN_DEVICES "Not Known devices"
    BTLOG_CURRENT_ENCRYPTION_STATExD "Current encryption state:%d"
    BTLOG_TOKENREMDEVAUTHSTATExD "token->remDev->authState:%d"
    BTLOG_SECHANDLEIOCAPABILITYRESPONSE_NO_REMDEV "SecHandleIoCapabilityResponse no remDev"
    BTLOG_PASSKEY_ENTRY_NUMERICVALUE_x08X "Passkey Entry numericValue :%08x"
    BTLOG_SECHANDLEUSERCONFIRMREQUEST "SecHandleUserConfirmRequest"
    BTLOG_SECHANDLEREMOTEOOBDATAREQUEST "SecHandleRemoteOobDataRequest"
    BTLOG_SDPUPDATEEIRDATABASEx02X "SdpUpdateEirDataBase:%02x"
    BTLOG_RECORDATTRIBSIDxD "record->attribs->id:%d"
    BTLOG_PARSE_PTRPARSE_COUNTxX "parse_ptr[parse_count]:0x%x"
    BTLOG_INPUT_SERVICE_CLASSx04X "input service class:%04x"
    BTLOG_SERVICE_CLASS_SIZExD "Service class size:%d"
    BTLOG_RECORDNUMxD "record->num:%d"
    BTLOG_THIS_RECORD_IS_ALREADY_IN_SDPS_LIST "This record is already in SDPS list"
    BTLOG_EIR_IGNORE_DATA_ELEMENT_SEQUENCE_NOT_2_BYTES "EIR ignore data element sequence not 2 bytes"
    BTLOG_PARSE_COUNTxD_SERVICE_CLASS_SIZExD "parse_count:%d, service_class_size:%d"
    BTLOG_NUMERIC_VALUE_IxD_TEMP_CHARxD "Numeric value i:%d, temp_char:%d"
    BTLOG_TEMP_VALUExD "temp_value:%d"
    BTLOG_NUMERICVALUExD "numericValue:%d"
    BTLOG_ATTRIBUTELIST_BYTE_COUNTxD "attributelist byte count=%d"
    BTLOG_NONDIRECT_RETURN_MESSAGE "non-direct return message"
    BTLOG_TEMP_CHARxC_COVERT_TO_STRINGxC "temp_char:%c covert to string:%c"
    BTLOG_DIVID_VALUExD "divid_value%d"
    BTLOG_ME_CREATELINK_REMOVE_INSERTED_HDLRE_DUE_TO_RETURN_FAILED "ME_CreateLink():remove inserted handler due to return status with failure"
    BTLOG_CURRENT_SCO_NOxD_ESCO_NOxD "current sco_no:%d, esco_no:%d"
    BTLOG_TRY_TO_MAKE_LINK_POLICY "try to make link policy"
    BTLOG_PREVIOUS_ROLE_SWITCH_IS_NOT_COMPLETED "Previous role switch is not completed"
    BTLOG_DO_SCO_ROLE_SWITCH "Do SCO role switch"
    BTLOG_MASTER_SCOxD "master sco:%d"
    BTLOG_CON_HDLx04X_MASTER "con hdl:%04x, master"
    BTLOG_LINKROLExD_DISBALEDxD "link->role:%d, disbaled:%d"
    BTLOG_ALREADY_MASTER_RETURN "Already master, return"
    BTLOG_CON_HDLx04X_SLAVE "con hdl:%04x, slave"
    BTLOG_CURRENT_PICONETxD_SCATTERNETxD "current piconet:%d, scatternet:%d"
    BTLOG_BTBM_SPP_KEY_PRESS_ABORT "BTBMSSPKeyPressAbort here,%02x,%02x"
    BTLOG_BTBM_SPP_AUTHENTICATION_REQUIREMENTS "localAuthRequirements:%02x"
    BTLOG_BTBM_SPP_DEVICE_INFO_IO_CAPABILITY "MTKBMC(SSPDeviceInfo).ioCapability:%d"
    BTLOG_ME_LINKKEY_NOTIFY_BDC_GAPKEYTYPE "SecHandleLinkKeyNotify(): bdc_gapKeyType=%d"
    BTLOG_ME_CHANGELINKPOLICYROLESWITCHxD "Me_ChangeLinkPolicy: LinkPolicyParms = 0x%X, roleSwitch = % d, sniff = % d,"
    BTLOG_ME_CANCELGETREMOTEDEVICENAME_START_A_TIMER_FOR_CANCEL_NAME_TOKENxD "ME_CancelGetRemoteDeviceName(): start a timer for cancel name token=%d"
    BTLOG_CAN_NOT_PERFORM_LINK_POLICY "Can not perform link policy"
    BTLOG_ALLOW_ROLE_CHANGE_PARMxD "allow role change parm:%d"
    BTLOG_ME_CANCELGETREMOTEDEVICENAME_CANCEL_ORG_TIMER_OF_TOKENxD "ME_CancelGetRemoteDeviceName(): cancel org timer of token=%d"
    BTLOG_CHANGE_ENCRYPTION_MODE_TO_HDLx04X_MODEx02X "Change Encryption mode to hdl:%04x, mode:%02x"
    BTLOG_LINK_NOTIFICATIONx02X "link notification:%02x"
    BTLOG_ENCRYPTION_HDLx04X_MODEx02X "Encryption hdl:%04x, mode:%02x"
    BTLOG_THE_LINK_KEY_x02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X "The link key %02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x"
    BTLOG_THE_LINK_KEY_OF_ADDRESS_x02Xx02Xx02Xx02Xx02Xx02X "The link key of address %02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_REQUEST_DEVICE_NAME_TIMEOUT_OF_TOKENxD "Request device name timeout of token=%d"
    BTLOG_LINK_POLICY_IS_DIFFERENTx04Xx04X "Link policy is different:%04x,%04x"
    BTLOG_THE_LINK_POLICYx04X "The link policy:%04x"
    BTLOG_MEHANDLEREMNAMEREQTIMEOUTNORSPCANCELNAMEREQ_TRY_CANCEL_NAME_REQUEST_OF_TOKENxD "MeHandleRemNameReqTimeoutNoRspCancelNameReq(): Try cancel name request of token=%d"
    BTLOG_ME_WRITE_LINK_POLICY_STATUS__xX "The link policy status:%02x"
    BTLOG_CMGR_CREATE_LINK_NO_OK "CMGR_CreateDataLink():Not success or pending  from ME_CreateLink,status=%d"
    BTLOG_START_MONITOR_NUM_COMPLETED_PKTS_TIMER "Start a monitor_0X13_Event_Timer inx=%d, hicHandle=%08X,pktsent=%d"
    BTLOG_STOP_MONITOR_NUM_COMPLETED_PKTS_TIMER "Stop monitor_0X13_Event_Timer inx=%d, hciHandle=%08X"
    BTLOG_0X13_EVENT_TIMEOUT "0X13_Event_Timeout:link=%08X,state=%d,hciHandle=%08X,pktsent=%d"


    BTLOG_BTBM_MASTERNUM_SLAVENUM "BTLOG:BTBM:NET_INFO:MasterNum=%d,SlaveNum=%d"
    BTLOG_BTBM_PICONETNUM_SCATTERNETNUM "BTLOG:BTBM:NET_INFO:PiconetNum=%d,ScatternetNum=%d"
    BTLOG_BTBM_LINK_NUMBER_NOT_IN_DISCONNECTED_STATEBT "BTLOG:BTBM:LINK_INFO:LinkNum_Not_In_DISC_State=%d"
    BTLOG_BTBM_SCONUM_ESCONUM "BTLOG:BTBM:LINK_INFO:ScoNum=%d,EScoNum=%d"
    BTLOG_ME_CONNECTION_COMPLETE_EVENT_STATUS "BTLOG:ME:LINK_INFO:Connection_Complete_Event_Status=0x%02X, Encryption_Enabled=%d"
    BTLOG_ME_ACL_CONNECT_COMPLETE_EVENT "BTLOG:ME:LINK_INFO:ACL_Connect_Complete_Event"
    BTLOG_ME_SCO_CONNECT_COMPLETE_EVENT "BTLOG:ME:LINK_INFO:SCO_Connect_Complete_Event"
    BTLOG_ME_ACL_CONNECTION_COMPLETE_EVENT_HCIHANDLE "BTLOG:ME:LINK_INFO:ACL_Connection_Complete_Event_hciHandle=%04X"
    BTLOG_ME_SCO_CONNECTION_COMPLETE_RESULT_HCIHANDLE "BTLOG:ME:LINK_INFO:SCO_Connection_Complete_Event_Result=0x%02X,hciHandle=0x%04X"
    BTLOG_ME_DISCONNECT_COMPLETE_EVENT_STATUS_REASON "BTLOG:ME:LINK_INFO:Disconnect_Complete_Event_Status=0x%02X,Reason=0x%02X"
    BTLOG_ME_ACL_DISCONNECT_COMPLETE_EVENT_HCIHANDLE "BTLOG:LINK_INFO:ME:ACL_Disconnect_Complete_Event_hciHandle=%04X"
    BTLOG_ME_SCO_DISCONNECT_COMPLETE_EVENT_HCIHANDLE "BTLOG:ME:LINK_INFO:SCO_Disconnect_Complete_Event_hciHandle=%04X"
    BTLOG_BTBM_NEW_ROLE_IS_REPORTED_WITH_OPTYPE "BTLOG:ME:ROLE_INFO:NewRole=%d,hciHandle=%04X,triggered by opType=%02X"
    BTLOG_BTBM_HANDLEROLESWITCHCFM_SWITCHSTATE "BTLOG:BTBM:ROLE_INFO:HandleRoleChange,switchState=%02X,NewRole=%d,hciHandle=%04X"
    BTLOG_ME_SWITCH_ROLE_OPERATION_ENDED_STATUS "BTLOG:ME:ROLE_INFO:Switch_Role_Operation_Ended_Status=0x%02X"
    BTLOG_HCI_INSERT_HCI_COMMAND_TO_LIST "BTLOG:HCI:HCICMD_INFO:Insert_CmdList_HciCmd=%04X"
    BTLOG_UART_SEND_HCI_COMMAND "BTLOG:UART:HCICMD_INFO:Uart_Send_HciCmd_Opcode=%04X"
    BTLOG_ME_HCIGENCMD_HANDLED "BTLOG:ME:HCICMD_INFO:HCICmd(Non_HCCcmd)_Sent_and_Handled"
    BTLOG_ME_RX_EVENT "BTLOG:ME:HCIEVENT_INFO:ME_RX_Event=%02X"
    BTLOG_ME_HANDLE_MOD_CHANGE "BTLOG:ME:MODE_INFO:Handle_Mode_Change_Event,handle=0x%04X New_Mode=0x%02X"
    BTLOG_SEND_UART_ACL_DATA "BTLOG_UART_DUMP:send UART ACL data hcihandle=0x%02x %02x, PB flag=0x%02x, length=%d"
    BTLOG_RECV_UART_ACL_DATA "BTLOG_UART_DUMP:receive UART ACL data hcihandle=0x%02x %02x, PB flag=0x%02x, length=%d"
    BTLOG_UART_TRANSMIT_DATA "mtkuartTransmitData: total=0x%x, written=-0x%x"
    BTLOG_UART_READ "BTLOG_UART_DUMP:UART_Read() is called, length passed=%d, length returned=%d"
    BTLOG_UART_WRITE "BTLOG_UART_DUMP:UART_Write() is called, length passed=%d, length returned=%d"
    BTLOG_ME_EVENT_STATUS "BTLOG:ME:EVENT_STATUS=0x%02X"
    BTLOG_OPEN_DRIVE_FAILED "BTLOG:Open drive failed %d"
    BTLOG_BT_ALREADY_POWERED_ON "BTLOG:BT already power on"
    BTLOG_CREATE_CONNECTION_CLOCK_OFFSET_SR_MODE "BTLOG:Create Connection Clock offset=0x%02x%02x, SR mode=0x%02x"

    BT_PANIC_MESSAGE1 "BT task rx panic message"
    BT_PANIC_MESSAGE2 "BT task panic BMA Timeout"
    BT_PANIC_MESSAGE3 "BT task host wakeup greater then 3"
    BT_PANIC_MESSAGE4 "BT task rx hardware error, %02x,%02x,%02x,%02x"
    BT_PANIC_MESSAGE5 "BT task rx buffer overflow, %02x,%02x,%02x,%02x"
    BT_PANIC_MESSAGE6 "BT task rx flow control failed"
    BT_PANIC_MESSAGE7 "BT task rx number too much"
    BT_IN_SCO_CONNECT_REQ_NO_ROLE_SWITCH "BT is in SCO connect procedure, not to perform role-switch"
    BT_IN_ROLE_SWITCH_NO_SCO "CMGR: BT is in role-switch, no SCO link"

    BTLOG_BTCALL_GAPTESTERCREATECHANNEL "BTlog BTcall gapTesterCreateChannel"
    BTLOG_BTCALL_AVDT_RE_CONFIGURATION_RSP "BTlog BTcall AVDT_Re_Configuration_Rsp"
    BTLOG_BTROLE_SWITCH_NOT_SUPPORTED "BTlog BTRole switch not supported"
    BTLOG_BTROLE_SWITCH_WAIT_AUTHENTICATED "BTlog BTRole switch can not perform due authentication not completed"
    BTLOG_BTCALL_AVDT_CLOSE_RSP "BTlog BTcall AVDT_Close_Rsp"
    BTLOG_BTBTBMHANDLEENCRYPTIONCFM_SWITCHSTATE_BT_DEBUGx02X "BTlog BTbtbmHandleEncryptionCfm switchState: %02x"
    BTLOG_BTBTBMHANDLEENCRYPTIONCFM_SWITCHSTATE_x02X "BTlog BTbtbmHandleEncryptionCfm switchState: %02x"
    BTLOG_AVRCP_COULDNT_SEND_COMMAND "BTlog AVRCP: Couldn't send command."
    BTLOG_BTCALL_GAPTESTERGENERALDISCOVERABLEMODE "BTlog BTcall gapTesterGeneralDiscoverableMode"
    BTLOG_BTCALL_RFCOMMTESTERINIT "BTlog BTcall RfcommTesterInit"
    BTLOG_BTCALL_L2CAPTESTERINIT "BTlog BTcall l2capTesterInit"
    BTLOG_BTCALL_AVDT_OPEN_REQ "BTlog BTcall AVDT_Open_Req"
    BTLOG_BTCALL_GAPTESTERINIT "BTlog BTcall gapTesterInit"
    BTLOG_BTCALL_SDPTESTERINIT "BTlog BTcall SdpTesterInit"
    BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE "BTlog Try to read remote LMP feature"
    BTLOG_BTCALL_GAPTESTERLIMITEDDISCOVERABLEMODE "BTlog BTcall gapTesterLimitedDiscoverableMode"
    BTLOG_BTBTBM_MODE_AS_MASTER "BTlog BTBTBM Mode As master"
    BTLOG_BTLOG_BTWIFICPTA_CMD_WAIT_0 "BTlog BTlog BTWIFIC(pta_cmd_wait) !=0"
    BTLOG_BTCALL_RFCOMMTESTEROPENCLIENTCHANNEL "BTlog BTcall RfcommTesterOpenClientChannel"
    BTLOG_BTCALL_RFCOMMTESTERSENDPN "BTlog BTcall RfcommTesterSendPN"
    BTLOG_BTROLE_SWITCH_ON_THE_OPLIST_REUTRN "BTlog BTRole Switch on the opList, reutrn"
    BTLOG_BTSTART_SNIFF_REQ_OP_ON_THE_LIST_RETURN "BTlog BTStart Sniff req, op on the list, return"
    BTLOG_BTSTART_QOS_OP_ON_THE_LIST_RETURN "BTlog BT QoS req, op on the list, return"
    BTLOG_ME_SETUP_QOS "ME_SetUpQoS(): req role=%d, cur role=%d"
    BTLOG_ME_SETUP_QOS_AFTER_ROLE_SWITCH "Re-setup QoS after role switch"
    BTLOG_BTCALL_GAPTESTERNONPAIRABLE "BTlog BTcall gapTesterNonPairable"
    BTLOG_BTCALL_L2CA_DISCONNECTREQ "BTlog BTcall L2CA_DisconnectReq"
    BTLOG_BTMTKBMCBM_OPACTIVITYxD_CAN_NOT_CHANGE_TO_NORMAL "BTlog BTMTKBMC(bm_opactivity):%d, can not change to normal"
    BTLOG_BTCALL_GAPTESTERSECURITYLEVEL3 "BTlog BTcall gapTesterSecurityLevel3"
    BTLOG_BTACL_AND_SCO_REMDEV__0 "BTlog BTAcl and SCO remDev == 0"
    BTLOG_BTCALL_RFCOMMTESTERSENDMSC "BTlog BTcall RfcommTesterSendMSC"
    BTLOG_BTSDP_QUERY_QUERY_BT_STATUS_PENDING "BTlog BTSDP_Query query BT_STATUS_PENDING"
    BTLOG_BTCALL_AVDT_READ_DATA "BTlog BTcall AVDT_Read_Data"
    BTLOG_BTCALL_GAPTESTERNONDISCOVERABLEMODE "BTlog BTcall gapTesterNonDiscoverableMode"
    BTLOG_BTBTBM_DO_SEC_SETLINKENCRYPTION_STATUSBT_DEBUGx02X "BTlog BTBTBM Do SEC_SetLinkEncryption status:%02x"
    BTLOG_BTCALL_AVDT_CONNECTREQ "BTlog BTcall AVDT_ConnectReq"
    BTLOG_BTDEVICE_IS_SLAVE_AND_CONNECTED "BTlog BTDevice is slave and connected"
    BTLOG_BTCALL_AVDT_RECONFIGURE_REQ "BTlog BTcall AVDT_ReConfigure_Req"
    BTLOG_BTCALL_RFCOMMTESTERDATAREQ "BTlog BTcall RfcommTesterDataReq"
    BTLOG_BTCALL_GAPTESTERNONCONNECTABLEMODE "BTlog BTcall gapTesterNonConnectableMode"
    BTLOG_BTMT6601_SPECIAL_CONNECTION_PROCEDURE "BTlog BTMT6601 special connection procedure"
    BTLOG_BTCALL_GAPTESTERCONNECTABLEMODE "BTlog BTcall gapTesterConnectableMode"
    BTLOG_BTVALUE0BT_DEBUGx02XVALUE1BT_DEBUGx02X "BTlog BTvalue[0]:%02x,value[1]:%02x"
    BTLOG_RESTART_CONNECTTIMER "BTlog Restart connectTimer"
    BTLOG_BTLOG_MAKE_THE_PTA_ON "BTlog BTlog Make the PTA ON"
    BTLOG_BTGAPTESTERDELETELINKKEY "BTlog BTgapTesterDeleteLinkKey"
    BTLOG_BTCALL_AVDT_SET_CONFIGURATION_REQ "BTlog BTcall AVDT_Set_Configuration_Req"
    BTLOG_BTTIMEOUT_TIMERFIRED "BTlog BTTimeout: TimerFired()"
    BTLOG_BTWRITESCAN_MODE_OPERATION_FAILEDBT_DEBUGx02X "BTlog BTWriteScan Mode operation failed:%02x"
    BTLOG_BTCALL_AVDT_ABORT_REQ "BTlog BTcall AVDT Abort Req"
    BTLOG_BTSDP_QUERY_QUERY_BT_STATUS_FAILED_xD "BTlog BTSDP_Query query BT_STATUS_FAILED %d"
    BTLOG_BTCALL_RFCOMMTESTERCLOSECHANNEL "BTlog BTcall RfcommTesterCloseChannel"
    BTLOG_BTROLE_SWITCH_SUPPORTED "BTlog BTRole switch supported"
    BTLOG_BTINQUIRY_CANCEL_BM_OPACTIVITYBT_DEBUGx02X "BTlog BTInquiry cancel bm_opactivity:%02x"
    BTLOG_CONNECTION_REJECT_WHEN_WE_CONNECT_TIMER_START_AND_REMOTE_DEVICE_WANTS_TO_CONNECT_US "BTlog Connection Reject when we connect timer start and remote device wants to connect us"
    BTLOG_BTCOMMAND_COMPLETE_OF_PCM_LOOPBACK "BTlog BTcommand complete of PCM Loopback"
    BTLOG_BTLOG_BTWIFICREF_COUNTxD "BTlog BTlog BTWIFIC(ref_count):%d"
    BTLOG_CANCELx08X "BTlog cancel:%08x"
    BTLOG_BTINQUIRY_CANCEL_WHEN_NAME_TIMER_RUNNING "BTlog BTInquiry cancel when name timer running"
    BTLOG_BTCALL_GAPTESTERPAIRABLE "BTlog BTcall gapTesterPairable"
    BTLOG_AVRCP_COULDNT_SEND_RESPONSE "BTlog AVRCP: Couldn't send response."
    BTLOG_BTWE_SHALL_START_PIN_IND_TIMER "BTlog BTWe shall start PIN Ind timer"
    BTLOG_BTCALL_L2CAPSENDDATA "BTlog BTcall L2capSendData"
    BTLOG_BTCALL_GAPTESTERSECURITYLEVEL1 "BTlog BTcall gapTesterSecurityLevel1"
    BTLOG_BTCALL_GAPTESTERDEVICEDISCOVERY "BTlog BTcall gapTesterDeviceDiscovery"
    BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE_ERRORBT_DEBUGx02X "BTlog Try to read remote LMP feature error:%02x"
    BTLOG_BTDONT_WAIT_MMI_CONNECT_RSP_REJECT_NEW_CONENCTION "BTlog BTdont wait MMI connect rsp, reject new conenction"
    BTLOG_SUPPORTED_FEATUREBT_DEBUGx02X_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "BTlog Supported feature:%02x, %02x,%02x,%02x,%02x, %02x,%02x,%02x"
    BTLOG_BTBTBMHANDLEROLESWITCHCFM_SWITCHSTATE_BT_DEBUGx02X "BTlog BTbtbmHandleRoleSwitchCfm switchState: %02x"
    BTLOG_BTCALL_BTTESTER_SENDMSG "BTlog BTcall btTester_sendMsg"
    BTLOG_BTCALL_AVDT_GET_CAPABILITIES_RSP "BTlog BTcall AVDT_Get_Capabilities_Rsp"
    BTLOG_BTCALL_AVDT_SUSPEND_RSP "BTlog BTcall AVDT_Suspend_Rsp"
    BTLOG_BTLOG_BTWIFICAFH_CMD_WAIT_0 "BTlog BTlog BTWIFIC(afh_cmd_wait) !=0"
    BTLOG_BTLOG_PTA_CHANNEL_IS_CALLED "BTlog BTlog BtRadio_PTA_ChannelInfo() is called."
    BTLOG_BTCONN_STATUSBT_DEBUGx02X "BTlog BTconn status:%02x"
    BTLOG_BTDO_SNIFFER_REQUEST "BTlog BTDo sniffer request"
    BTLOG_BTCALL_AVDT_CLOSE_REQ "BTlog BTcall AVDT_Close_Req"
    BTLOG_BTCALL_L2CA_INFOREQ "BTlog BTcall L2CA_InfoReq"
    BTLOG_BTBTBMNAMEPROCEDURETIMEOUT "BTlog BTbtbmNameProcedureTimeout"
    BTLOG_BTCALL_L2CA_CONNECTREQ "BTlog BTcall L2CA_ConnectReq"
    BTLOG_BTCALL_GAPTESTERBONDING "BTlog BTcall gapTesterBonding"
    BTLOG_BTCALL_AVDT_WRITE_DATA "BTlog BTcall AVDT_Write_Data"
    BTLOG_BTBTBM_ENCRYPTION_CHANGE_TO_ON "BTlog BTBTBM encryption change to ON"
    BTLOG_BTCALL_AVDT_SUSPEND_REQ "BTlog BTcall AVDT_Suspend_Req"
    BTLOG_BTSTILL_WAIT_FOR_CONNECTION_COMPLETE_EVENT "BTlog BTStill wait for connection complete event"
    BTLOG_BTCALL_L2CA_ECHOREQ "BTlog BTcall L2CA_EchoReq"
    BTLOG_AVRCP_INVALID_RESPONSE_CODE_xD_CHANGING_TO_REJECTED "BTlog AVRCP: Invalid response code %d, changing to REJECTED"
    BTLOG_BTINQUIRY_CANCEL_WHEN_INQUIRY_PREPROCESS_TIMER_RUNNING "BTlog BTInquiry cancel when inquiry preprocess timer running"
    BTLOG_BTCOMMAND_COMPLETE_OF_PTA "BTlog BTcommand complete of PTA"
    BTLOG_BTCALL_RFCOMMTESTEROPENSERVER "BTlog BTcall RfcommTesterOpenServer"
    BTLOG_BTCALL_AVDT_SET_CONFIGURATION_RSP "BTlog BTcall AVDT_Set_Configuration_Rsp"
    BTLOG_BTCALL_AVDT_GET_CAPABILITIES_REQ "BTlog BTcall AVDT_Get_Capabilities_Req"
    BTLOG_BTBTBM_DO_ROLE_SWITCH "BTlog BTBTBM Do role switch"
    BTLOG_BTBTBM_ENCRYPTION_CHANGE_TO_OFF "BTlog BTBTBM encryption change to OFF"
    BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE_EVENT_COMPLETED "BTlog Try to read remote LMP feature event completed"
    BTLOG_BTBTBMSTARTSPECIALSLAVEPROCEDURE "BTlog BTbtbmStartSpecialSlaveProcedure"
    BTLOG_BTCALL_RFCOMMTESTERRLS "BTlog BTcall RfcommTesterRls"
    BTLOG_BTCALL_AVDT_START_RSP "BTlog BTcall AVDT_Start_Rsp"
    BTLOG_BTRETURN_CON_IDxD "BTlog BTreturn con_id:%d"
    BTLOG_NOT_READY "BTlog Not ready"
    BTLOG_MODE_CHANGE_STATUSBT_DEBUGx02X "BTlog Mode change status:%02x"
    BTLOG_BTMTKBMCBM_OPACTIVITYxD "BTlog BTMTKBMC(bm_opactivity):%d"
    BTLOG_BTGIVE_CON_IDxD "BTlog BTgive con_id:%d"
    BTLOG_BTCALL_AVDT_DISCONNECTSIGNAL_REQ "BTlog BTcall AVDT_DisconnectSignal_Req"
    BTLOG_BTDO_ROLE_SWITCH_WITH_FEATUREBT_DEBUGx02X "BTlog BTDo role switch with feature:%02x"
    BTLOG_BTMASTER_NUMBERxDSLAVE_NUMBERxD "BTlog BTMaster number:%d,slave number:%d"
    BTLOG_REMDEVCONNECTCOUNTERxD "BTlog remDev->connectCounter:%d"
    BTLOG_BTSTATUSBT_DEBUGx02X_ENCRPSTATEBT_DEBUGx02XAUTHSTATE_BT_DEBUGx02X "BTlog BTstatus:%02x, encrpstate:%02x,authState: %02x"
    BTLOG_BTCOMMAND_COMPLETE_OF_AFH "BTlog BTCommand Complete of AFH"
    BTLOG_BTCOMMAND_COMPLETE_OF_PTA_CHANNEL_INFO "BTlog BTCommand Complete of BtRadio_PTA_ChannelInfo()"
    BTLOG_BTLINKOLDENCRYPTIONMODE_2BT_DEBUGx02X "BTlog BTlink->oldEncryptionMode 2:%02x"
    BTLOG_STARTx08X "BTlog start:%08x"
    BTLOG_READ_REMOTE_SUPPORTED_FEATURE_FAILEDBT_DEBUGx02X "BTlog Read remote supported feature failed:%02x"
    BTLOG_BTSDAPPROGRESSxD "BTlog BTSDAP(progress):%d"
    BTLOG_MAKE_CREATION_CONNECTION "BTlog Make creation connection"
    BTLOG_BTCALL_AVDT_GET_CAPABILITIES_LONG_RSP "BTlog BTcall AVDT_Get_Capabilities_Long_Rsp"
    BTLOG_BTCALL_GAPTESTERLIMITEDINQUIRY "BTlog BTcall gapTesterLimitedInquiry"
    BTLOG_BTBTBMINQUIRYPROCEDURETIMEOUT "BTlog BTbtbmInquiryProcedureTimeout: bm_opactivity = 0x%x"
    BTLOG_BTCONNECTION_IS_NOT_EXISTING_OR_BD_ADDR_IS_NOT_THE_SAME "BTlog BTconnection is not existing or bd_addr is not the same"
    BTLOG_BTDO_ROLE_SWITCH "BTlog BTDo role switch"
    BTLOG_BTCALL_AVDTPTESTERINIT "BTlog BTcall AvdtpTesterInit()"
    BTLOG_BTSDAP_STATUSBT_DEBUGx02X "BTlog BTSDAP status:%02x"
    BTLOG_BTCALL_GAPTESTERSECURITYLEVEL2 "BTlog BTcall gapTesterSecurityLevel2"
    BTLOG_BTCALL_GAPTESTERGENERALINQUIRY "BTlog BTcall gapTesterGeneralInquiry"
    BTLOG_DEVICE_IN_NOT_DISCONNECT_MODE_IGNORE_IT "BTlog Device in not disconnect mode, ignore it"
    BTLOG_BTCALL_AVDT_DISCOVER_RSP "BTlog BTcall AVDT_Discover_Rsp"
    BTLOG_BTCALL_AVDT_DISCOVER_REQ "BTlog BTcall AVDT_Discover_Req"
    BTLOG_BTBTBM_DO_ROLE_SWITCH_STATUSBT_DEBUGx02X "BTlog BTBTBM Do role switch status:%02x"
    BTLOG_BTLINKENCRYPTSTATE_OLD_1BT_DEBUGx02X "BTlog BTlink->encryptState old 1:%02x"
    BTLOG_BTBTBMSPECIALSLAVEPROCEDURE "BTlog BTbtbmSpecialSlaveProcedure"
    BTLOG_BTCMD_STATUSBT_DEBUGx02X "BTlog BTcmd status:%02x"
    BTLOG_BTBTBM_MODE_AS_SLAVE "BTlog BTBTBM Mode As slave"
    BTLOG_BTCALL_AVDT_ABORT_RSP "BTlog BTcall AVDT_Abort_Rsp"
    BTLOG_BTCALL_AVDT_OPEN_RSP "BTlog BTcall AVDT_Open_Rsp"
    BTLOG_BTCALL_AVDT_START_REQ "BTlog BTcall AVDT_Start_Req"
    BTLOG_CONNECTCOUNTER_EXCEEDS_THRESHOULD "BTlog connectCounter exceeds threshould"
    BTLOG_BTLINKSWITCHSTATEBT_DEBUGx02X "BTlog BTlink->switchState:%02x"
    BTLOG_BTWRITESCAN_MODE_OPERATION_IS_NOT_MATCH_REDO_AGAIN "BTlog BTWriteScan Mode operation is not match, redo again"
    BTLOG_MECHECKDEVICESTATENOTIDLE_CHECK_CURRENT_MODE "BTlog MeCheckDeviceStateNotIdle Check current mode"
    BTLOG_BTBTBMHANDLEPINREQTIMEOUT "BTlog BTbtbmHandlePinReqTimeout"
    BTLOG_READ_REMOTE_SUPPORTED_FEATURE_SUCCESSBT_DEBUGx04X "BTlog Read remote supported feature success:%04x"
    BTLOG_BTCALL_GAPTESTERCREATEACLLINK "BTlog BTcall gapTesterCreateAclLink"
    BTTLOG_DISCONNECT_EVENT "BTT: disconnect event"
    BTTLOG_CON_HDL_PACKET_SENT "BTT: hdl:%02x,HCC(con)[i].packetsSent:%02x"
    BTTLOG_CON_HDL_TX_LEFT "BTT: hdl:%02x,HCC(aclTxPacketsLeft):%02x"
    BTTLOG_CON_HDL_TX_STATUS "BTT: TX a:%02x,b:%02x,c:%02x"
    BTTLOG_CON_HDL_COMP_STATUS "BTT: CMP d:%02x,e:%02x,f:%02x"
    BTTLOG_CON_HDL_COMP_STATUS1 "BTT: CMP g:%02x"
    L2CAP_Free_Open_Timer_Case2_org_discLevel_then_Disc_Link "L2CAP Free Open Timer: org discTimeoutLevel=%d and disc ACL link after 3 sec"
    L2CAP_Free_Open_Timer_Case2_keep_50S_then_Disc_Link "L2CAP Free Open Timer: keep 50s timeout then disc ACL"
    L2CAP_DiscAclLink_with_discFlag "In L2CAP_DiscAclLink(): discFlag=%d"

    WRITE_SUPERVISION_TIMEOUT "write supervision timeout"
    CHNLTXSTATEBT_DEBUGx02X "chnl->txState:%02x"
    WAIT_CONECTION_ACP_RSPBT_DEBUGx02X "wait_conection_acp_rsp:%02x"
    DISCONNECT_SCO_WITH_ERROR_NO_CONNECTION "Disconnect SCO with error No connection"
    NO_BTACCCTRLCHECKPSMPOLICY "No BTAccCtrlCheckPSMPolicy"
    THE_LINK_STATEBT_DEBUGx02X "The link state:%02x"
    WHITTEN_COMPLETED_PARM3BT_DEBUGx02X "Whitten completed, parm[3]:%02x"
    UATRAN_EVENT_PARAMETER_LENGTH__xD "UATRAN: Event parameter length = %d"
    START_SERVICE_DISCOVERY_SSA_COMMAND_BT_DEBUGx02X "Start service discovery ssa command :%02x"
    CHANNEL_DISCONNECT_COMPLETED "Channel disconnect completed"
    CONNMGR_BTEVENT_MODE_CHANGE "Connmgr BTEVENT_MODE_CHANGE"
    MSG_ID_BT_BM_DISCOVERY_CNF_TRC "MSG_ID_BT_BM_DISCOVERY_CNF"
    UATRAN_NO_SCO_RECEIVER_BUFFER_AVAILABLE "UATRAN: No SCO receiver buffer available"
    FAKESIM_RECEIVES_BT_SIM_RESET_REQ_DUE_TO_POWERON "FakeSim receives BT_SIM_RESET_REQ due to POWERON"
    CLEAR_MUX_FLAG_XMIT_FLAG3 "Clear MUX_FLAG_XMIT flag#3"
    CHECK_FTP_POLICY "Check FTP policy"
    USBTRAN_EVENT_BUFFER_NOW_AVAILABLE "USBTRAN: Event Buffer Now Available"
    RETURN_STATUSBT_DEBUGx04X "Return status:%04x"
    OPCODEBT_DEBUGx04X "opcode:%04x"
    SEND_CONTINUE_CHNL_STATE_IS_AVTP_TRANS_STATE_FIRST "Send Continue, chnl state is AVTP_TRANS_STATE_FIRST"
    TRANS_NO_EVENT_BUFFERS "TRANS: no Event buffers"
    RETURN_STATUSx08X "Return status:%08x"
    JSR82_SESSION_TX_1_DATA "JSR82 session tx 1 data"
    NO_PREVIOUS_NAME_REQUEST_ON_GOING_JUST_DO_IT "no previous name request on going, just do it"
    ITEMBT_DEBUGx02X "item:%02x"
    NO_SIGNAL_PKT1 "No signal pkt1"
    LOOPBACK_MODE_COMPLETED "Loopback mode completed"
    WRITE_SUPERVISIONTIMEOUT "write supervisiontimeout"
    VERSION_COMPLETEDBT_DEBUGx02X "version completed:%02x"
    FIND_JSR82_CHANNEL_BT_DEBUGx02X "Find jsr82 channel :%02x"
    START_SERVICE_DISCOVERY_SS_COMMAND_BT_DEBUGx02X "Start service discovery ss command :%02x"
    BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "bd_addr:%02x,%02x,%02x,%02x,%02x,%02x"
    ACL_IN_BONDING "ACL in bonding"
    INQUIRY_INTERVAL_TIMEOUT "Inquiry interval timeout"
    INQUIRY_DUAL_INTERVAL_TIMEOUT "Inquiry dual interval timeout: mode=%d"
    STOPPED_TO_TEST_THE_BTBB_TEST "Stopped to test the BTBB test"
    MTKBMCHID_BROADCOM_IOT_ROLE_SWITCHBT_DEBUGx02X "MTKBMC(hid_broadcom_iot_role_switch):%02x"
    START_INQUIRY_CANCEL_COMMAND_BT_DEBUGx02X "Start inquiry cancel command :%02x"
    ABCSP_PANIC_xD "ABCSP: panic() %d."
    ONE_SCO_IN_CON "one sco in con"
    REQUEST_ACTIVE_LINK_NAME_TIMER_TIMEOUT "Request active link name timer timeout"
    HID_SET_MODEBT_DEBUGx02X "HID Set mode:%02x"
    BT_CHIP_VERSIONBT_DEBUGx02X "BT chip version:%02x"
    FAKESIM_RECEIVES_BT_SIM_RESET_REQ "FakeSim receives BT_SIM_RESET_REQ"
    NO_MATCH_BLUETOOTH_ADDRESS "No match bluetooth address"
    SENDRAWPACKETA "SendRawPacket:A"
    CHECK_OPP_POLICY "Check OPP policy"
    MSG_ID_BT_BM_SEARCH_RAW_RESULT_TRC "MSG_ID_BT_BM_SEARCH_RAW_RESULT"
    BTACCCTRLCHECKSERVICEPOLICY_DENY "BTAccCtrlCheckServicePolicy Deny"
    RFMDCMD_HCC_CHANGEBAUDRATE_TO_xD "RFMDcmd_HCC_ChangeBaudRate to :%d"
    FAKESIM_RECEIVES_BT_SIM_APDU_REQ "FakeSim receives BT_SIM_APDU_REQ"
    BLACKLIST_SEARCHED "BlackList searched"
    MTKBMCINQUIRY_TIMERFUNC__0 "MTKBMC(inquiry_preprocess_timer).func != 0"
    SNIFFER_TIMER_SHALL_REOPEN "Sniffer timer shall reopen"
    REMOTE_VERSION "remote version"
    INQUIRY_START "inquiry start"
    TRY_TO_OPEN_RFCOMM_CHANNEL "Try to open RFCOMM channel"
    MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF_TRC "MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF"
    UATRAN_UARTSLEEP_CNT_xD "UATRAN: uartSleep() cnt: %d"
    INQUIRY_IN_GUIDE_TIME "Inquiry in guide time"
    DEVICE_WIREVO "DEVICE WIREVO"
    RETURN_FROM_RFSENDDATAINTERNALSTATUSxD_ON_DLCIxD "Return from RfSendDataInternal(),status=%d, on DLCI=0x%02x"
    TRANS_NO_ACL_BUFFERS "TRANS: no ACL buffers"
    NEW_LINK_AND_STORED_LINK_IS_NOT_THE_SAME "New link and stored link is not the same"
    MECBTCHIPVERxD "MEC(btChipVer):%d"
    REGISTRATION_STATUSBT_DEBUGx02X "Registration status:%02x"
    BT_JSR82_SESSIONAPCONNECTRSP "bt_jsr82_SessionApConnectRsp"
    TRANS_SHUTDOWN "TRANS: Shutdown"
    COMMAND_STATUS_EVENT_WITH_OPCODE_FCF1 "Command status event with opcode FCF1"
    AVTP_SENDCONTINUEBT_DEBUGx02X "AVTP_SendContinue:%02x"
    MTKACCCTLCACCLINK__0 "MTKACCCTLC(accLink) != 0"
    AVDTP_HDL_CMDBT_DEBUGx02X "AVDTP Hdl cmd:%02x"
    BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x"
    NO_BTACCCTRLCHECKCONNECTPOLICY "No BTAccCtrlCheckConnectPolicy"
    BTACCCTRLDISALLOWDEVICEALLSERVICE "BTAccCtrlDisAllowDeviceAllService"
    REQUEST_ACTIVE_LINK_NAME_TIMER_STOP "Request active link name timer stop"
    L2CAP_RX_DATA_IND "l2cap rx data ind"
    START_SERVICE_DISCOVERY_SA_COMMAND_BT_DEBUGx02X "Start service discovery sa command :%02x"
    NO_SIGNAL_PKT4 "No signal pkt4"
    BT_JSR82_SESSIONAPCONNECTINDEVENT "bt_jsr82_SessionApConnectIndEvent"
    IN_THIS_MODE_TEST_SAP_WITHOUT_SNIFF_MODE_SUPPORT "In this mode, test SAP without sniff mode support"
    CURRENT_TX_STREAM_IS_NOT_IDLE "current Tx Stream is not idle"
    JSR82_NO_EMPTY_CHANNEL "jsr82 no empty Channel"
    BT_JSR82_CONNECT_IND_SIZEBT_DEBUGx02X "bt_jsr82_connect_ind size:%02x"
    DISCONNECT_SCO_WITH_ERROR_BEC_INVALID_HCI_PARM "Disconnect SCO with error BEC_INVALID_HCI_PARM"
    TRANS_USB_COULD_NOT_WRITE_DATA "TRANS: USB could not write data"
    FAKESIM_RECEIVES_BT_SIM_DISCONNECT_REQ "FakeSim receives BT_SIM_DISCONNECT_REQ"
    IN_RF_SENDDATA_DATA_SENT_ON_DLCIxD_PKTINTRANSITxD "In RF_SendData(), data sent on DLCI=0x%02x, pktinTransit=%d"
    RFCOMM_CLIENT "RFCOMM Client"
    MTKBMCNAME_CANCEL_TIMERFUNC__0 "MTKBMC(name_cancel_timer).func != 0"
    BT_JSR82_ENABLE_SERVICE_REQ_SIZEBT_DEBUGx02X "bt_jsr82_enable_service_req size:%02x"
    MEHANDLEACLCONCOMPLETE "MeHandleAclConComplete"
    INQUIRY_RETRIEVEDEV "inquiry retrievedev"
    ACL_IN_NORMAL "ACL in normal"
    OPEN_CHANNEL_FAILED "Open Channel failed"
    ALLOWED_SERVICEx08X "Allowed Service:%08x"
    MSG_ID_BT_JSR82_CONNECT_REQ_TRC "MSG_ID_BT_JSR82_CONNECT_REQ"
    MECBTLMPVERxD "MEC(btLMPVer):%d"
    REMOTE_NAME_CANCEL_SUCCESS "remote name cancel success"
    REMOTE_NAME_CANCEL_PENDING "remote name cancel pending"
    SESSION_CREATE_FAILED "Session create failed"
    BDADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "bdaddr:%02x,%02x,%02x,%02x,%02x,%02x"
    CURRENT_LINK_STATEBT_DEBUGx02X "Current link state:%02x"
    RFMDCMD_HCC_RESET "RFMDcmd_HCC_RESET"
    HANDLE_SCOHANDLELINKCONNECTREQ_ERROR "Handle ScoHandleLinkConnectReq error"
    BD_ADDR_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "bd addr %02x:%02x:%02x:%02x:%02x:%02x"
    SEC_LEVEL_TYPExD_SEC_LEVELxD "sec level type:%d, sec level:%d"
    THE_INPUT_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "The input addr:%02x,%02x,%02x,%02x,%02x,%02x"
    MSG_ID_BT_BM_SEARCH_RAW_CNF_TRC "MSG_ID_BT_BM_SEARCH_RAW_CNF"
    STATUS_APDU_AND_P3_LENBT_DEBUGx02X "Status APDU and P3 len=%02x"
    ENTER_SNIFF_MODE "enter sniff mode"
    IN_RFAPPCALLBACK_PACKETSINTRANSITxD "In RfAppCallback(): packetsInTransit=%d"
    BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X_IN_STATE "bd_addr:%02x,%02x,%02x,%02x,%02x,%02x in state:0x%02x"
    BTACCCTRLALLOWDEVICEALLSERVICE "BTAccCtrlAllowDeviceAllService"
    TRAN_INIT_STARTED "TRAN:  Init started"
    RFEVENT_CLOSE_IND_TRC "RFEVENT_CLOSE_IND"
    CHANNEL_OPENED "Channel opened"
    BTBMHANDLERINQUIRYINTERVALPROCEDURE "btbmHandlerInquiryIntervalProcedure"
    BTJ82SEAPSESSIONINDEXPS_TYPEBT_DEBUGx02X "BTJ82SEAP(session)[index].ps_type:%02x"
    BTBBTESTSPPCALLBACKFUNC_BT_DEBUGx02X "btBBTestSppCallbackFunc :%02x"
    AVTP_EVENT_TX_ERROR_TRC "AVTP_EVENT_TX_ERROR"
    BTACCCTRLSET_ALLOWEDPSMxDALLOWEDSERVICExD "BTAccCtrlSet: allowedPSM=%d,allowedService=%d"
    RESULT_VALUEBT_DEBUGx02X "result value:%02x"
    BT_CODx08X "cod:%08x"
    IN_RFMUXCHECKTXQUEUESPACKETSINTRANSITxD "In RfMUXCheckTxQueues():packetsInTransit=%d"
    AUDIO_LINK_TYPEBT_DEBUGx02X "Audio link type:%02x"
    CANCELLING_STATE_IGNORE_THE_RESULT "Cancelling state, ignore the result"
    MSG_ID_BT_JSR82_CONNECT_RSP_TRC "MSG_ID_BT_JSR82_CONNECT_RSP"
    BTBBTESTITEM_RESULTBT_DEBUGx02X "BTBBTestItem result:%02x"
    START_INQUIRY_COMPLETED_COMMAND_BT_DEBUGx02X "Start inquiry completed command :%02x"
    GAPTESTER_SET_FILTER_COD_TO_0XFFFFFFFF "GapTester set filter cod to 0xFFFFFFFF"
    MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ_TRC "MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ"
    USBTRAN_SCO_BUFFER_NOW_AVAILABLE "USBTRAN: SCO Buffer Now Available"
    RFMDCMD_HCC_WRITENVRAMDATA "RFMDcmd_HCC_WriteNvramData"
    RX_DATA_EXCEED_ACCEPTABLE_VALUEBT_DEBUGx04X "Rx data exceed acceptable value:%04x"
    REGISTRATION_SECURITY_RECORD_STATUSBT_DEBUGx02X "Registration security record status:%02x"
    NO_A2DP_DATA_STREAMMING "No A2DP data streamming"
    REJECT_OP_ENTRY_IS_NOT_AVAILABLEBT_DEBUGx02X "reject Op Entry is not available:%02x"
    SET_PIN_CODE_RSP_TIMEOUT_VALUE "SET PIN CODE RSP TIMEOUT Value"
    RFAPPCALLBACKPKT_ON_DLCIxD_RETURNED_WITH_STATUSxDCALL_RFMUXCHECKTXQUEUES "RfAppCallback:Pkt on DLCI=0x%02x returned with status=%d,call RfMUXCheckTxQueues"
    BROADCOM_CHIP_HID_EXIST_NO_ROLE_SWITCH "BroadCom chip, hid exist, no role switch"
    INQUIY_TIME_INTERVALxD "Inquiy time interval:%d"
    ONE_SCO_OUT_CON2 "one sco out con2"

    CHECK_SPPDUNLAN_POLICY "Check SPP,DUN,LAN policy"
    BT_JSR82_SESSIONAPCONNECTCFNEVENT "bt_jsr82_SessionApConnectCfnEvent"
    IN_MEHANDLELINKREJECTOPMECPENDCONSxD "In MeHandleLinkRejectOp():MEC(pendCons)=%d"
    DISCOVERY_DATA_SIZExD_WITH_RESULTBT_DEBUGx02X "Discovery data size:%d with result:%02x"
    AVDTP_RX_ABORT_CMD_WITH_NO_VALID_STREAM_IDxD "AVDTP Rx Abort cmd with no valid stream id:%d"
    L2CAP_ID_BT_DEBUGx04X "l2cap_id :%04x"
    RESULT_BT_DEBUGx02X "result :%02x"
    LENGTH_BT_DEBUGx02X "length :%02x"
    ALREADY_MASTER "Already Master"
    L2CAP_SERVER "L2CAP SERVER"
    APDU_TYPEBT_DEBUGx02X "APDU type=%02x"
    FIND_MAIN_IDENTIFIER "find main identifier"
    CHANNEL_BT_DEBUGx04X "channel :%04x"
    UNKNOWN_RESPONSE "Unknown response"
    DO_SERVICE_SEARCH "Do service search"
    MSG_ID_BT_JSR82_CONNECT_IND_TRC "MSG_ID_BT_JSR82_CONNECT_IND"
    L2CAP_CREATE_COMPLETED "L2CAP create completed"
    CLEAR_MUX_FLAG_XMIT_FLAG1 "Clear MUX_FLAG_XMIT flag#1"
    UATRAN_PASSING_UP_xD_BYTES "UATRAN: Passing up %d bytes"
    THE_CMP_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "The cmp addr:%02x,%02x,%02x,%02x,%02x,%02x"
    GAPTESTER_SET_DISCOVERY_WITHOUT_NAME_MODE "GapTester set discovery without name mode"
    CURRENT_DATA_SIZExD "Current data size:%d"
    UATRAN_CONTROLLER_MAY_ENTER_SLEEP_MODE "UATRAN: Controller may enter sleep mode"
    JSR82_SESSION_ENABLED_SERVICE "JSR82 session enabled service"
    RADIO_WAKEUP_COMPLETED "radio wakeup completed"
    JSR82_NO_MAIN_CHANNEL "jsr82 no main Channel"
    INQUIRY_CANCEL_COMPLETED "inquiry Cancel Completed"
    ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "addr:%02x,%02x,%02x,%02x,%02x,%02x"
    NEXT_START_TIMEx08X "next_start_time:%08x"
    BTACCCTRLCHECKPSMPOLICY_SHALL_CHECK_POLICY "BTAccCtrlCheckPSMPolicy shall check policy."
    UATRAN_SCO_DATA_LENGTH__xD "UATRAN: SCO data length = %d"
    SDAP_FAILED_REMOVE_LINK "SDAP failed, remove link"
    RECV_TXCREDIT_NEW_TXCREDITxD_CALL_RFMUXCHECKTXQUEUES "Recv txCredit, new txCredit=%d, call RfMUXCheckTxQueues"
    TRY_TO_OPEN_L2CAP_CHANNEL "Try to open L2CAP channel"
    REMOTE_NAME_REQUEST_STATUSBT_DEBUGx02X "Remote name request status:%02x"
    REQUEST_ACTIVE_LINK_NAME_TIMER_STARTx08X "Request active link name timer start:%08x"
    CONNMGRCHECKSTARTSNIFFTIMER "ConnMgrCheckStartSniffTimer"
    MSG_ID_BT_BM_DISCOVERY_RESULT_IND_TRC "MSG_ID_BT_BM_DISCOVERY_RESULT_IND"
    INQUIRY_IDLE_TIMER_CALLBACK_FUNCTION_IS_NOT_0 "Inquiry idle timer callback function is not 0"
    IN_MEHANDLELINKCONNECTOP2ND_MECPENDCONSxD "In MeHandleLinkConnectOp():2nd MEC(pendCons)=%d"
    INQUIRY_AFTER_120_SECONDS_NOT_COMPLETED "Inquiry after 120 seconds, not completed"
    PTR_LOCAL_CIDBT_DEBUGx04X "ptr local cid:%04x"
    LINK_SUPERVISION_TIMEOUTBT_DEBUGx04X "Link supervision timeout:%04x"
    ROLE_SWITCH_PERFORM_RETURN_DIRECTLY "Role switch perform, return directly"
    STRINGBT_DEBUGx02XBT_DEBUGx02X "string:%02x,%02x"
    MSG_ID_BT_JSR82_DISCONNECT_IND_TRC "MSG_ID_BT_JSR82_DISCONNECT_IND"
    NO_SIGNAL_PKT2 "No signal pkt2"
    AVDTP_HDL_REJBT_DEBUGx02X "AVDTP Hdl Rej:%02x"
    L2CAP_CLIENT "L2CAP Client"
    SET_AS_SLOW_CONNECT_MODE "Set as SLOW_CONNECT_MODE"
    IN_MEHANDLELINKACCEPTOPMECPENDCONSxD "In MeHandleLinkAcceptOp():MEC(pendCons)=%d"
    SNIFFER_TIMER_RESTART_AGAIN "Sniffer timer restart again"
    MTU_BT_DEBUGx04X "mtu :%04x"
    TRY_TO_OPEN_SCO_LINK "Try to open SCO link"
    SET_AS_FAST_CONNECT_MODE "Set as FAST_CONNECT_MODE"
    MAKE_REMOTE_NAME_REQUEST_CANCEL_COMMAND "Make remote name request cancel command"
    RX_BUFFER_IS_FULL "Rx buffer is full"
    RFMDNTF_HCC_RESET3500 "RFMDntf_HCC_RESET3500"
    INQUIRY_CANCEL_BUT_THE_NAME_TOKEN_SHALL_REQUEST_AGAIN "inquiry cancel but the name token shall request again"
    BT_JSR82_CONNECT_CFN_SIZEBT_DEBUGx02X "bt_jsr82_connect_cfn size:%02x"
    DEVICE_WITH_NAME "Device with name"
    NO_BTACCCTRLCHECKSERVICEPOLICY "No BTAccCtrlCheckServicePolicy"
    RX_DATA_NOT_EQUAL "Rx data not equal"
    TIME_INTERVALx08X "time interval:%08x"
    TEMP_INQUIRY_LENGTHxD "temp inquiry length:%d"
    REJECT_OP_WITH_THE_SAME_ADDR "Reject Op with the same addr"
    BT_JSR82_CMGRCLIENTCALLBACK_NOT_THE_CONNECT_BD_ADDR "bt_jsr82_CmgrClientCallback Not the connect bd_addr"
    CHANGE_TO_UT_MODE "Change to UT mode"
    BT_JSR82_SESSIONAPDISABLERESULTEVENT "bt_jsr82_SessionApDisableResultEvent"
    SIMULATE_SIM_CLIENT_SENDS_CONNECT_REQ_AND_TEST_MODExD "Simulate SIM Client sends connect req, and test_mode=%d"
    RADIO_WAKEUP_TIMER__3 "Radio Wakeup timer > 3"
    RFMDEVT_HCC_WRITENVRAMDATA "RFMDevt_HCC_WriteNvramData"
    ONE_SCO_IN_CONNECTED "one sco in connected"
    CHECK_HS_AG_POLICY "Check HS_AG policy"
    JSR82_SESSION_DISCONNECT_SERVICE "JSR82 session disconnect service"
    JSR82_EMPTY_CHANNEL_FIND "jsr82 empty Channel find"
    NO_NAME_REQUEST_COMPLETE_EVENT_MAKE_NAME_CANCEL_COMMAND "No name request complete event, make name cancel command"
    ACL_LINK_EXISTS_MAY_DUE_TO_AFTER_BONDING_PROCEDURE_THEN_CONNECT_SPP_IMMEDIATELY_SET_DISCFLAG_AS_FALSE "ACL link exists may due to After Bonding Procedure Then connect SPP immediately: set discFlag as FALSE"
    DEVICE_IN_DATABASE_BT_DEBUGx02X "Device in Database :%02x"
    LINK_NO_BT_DEBUGx02X "link no :%02x,"
    NAME_CALLBACK_REMOVE_MTKBMCNAME_CANCEL_TIMERFUNC "name callback, remove MTKBMC(name_cancel_timer).func"
    NODE_STILL_IN_THE_OPLIST "Node still in the opList"
    RECORD_INDEXBT_DEBUGx02XBT_DEBUGx02X "record index:%02x,:%02x"
    UATRAN_HCI_COMMAND_WAS_NOT_ACKNOWLEDGED_WITH_AN_EVENT "UATRAN: HCI Command was not acknowledged with an event"
    LINK_NUMBER_NOT_IN_DISCONNECTED_STATEBT_DEBUGx02X "link number not in disconnected state:%02x"
    THE_INDEXBT_DEBUGx02X "the index:%02x"
    POWER_CONTROL_COMPLETED "Power control completed"
    UATRAN_ACL_DATA_LENGTH__xD "UATRAN: ACL data length = %d"
    SET_MTKACCCTLCACCLINK "Set MTKACCCTLC(accLink)"
    CHECK_SIMAP_POLICY "Check SIMAP policy"
    START_INQUIRY_COMMAND_BT_DEBUGx02X "Start inquiry command :%02x"
    UATRAN_NO_EVENT_RECEIVER_BUFFER_AVAILABLE "UATRAN: No Event receiver buffer available"
    RFCOMM_LAYER_FOR_INCOMING_CONNECTION_EXEC_SERVICE_LEVEL_SECURITY "RFCOMM layer for incoming connection: Exec Service Level security"
    HOST_WAKEUP_COMPLETED "Host wakeup completed"
    WAKUP_OPCODE_BT_DEBUGx04X "wakup opcode :%04x"
    BDADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "bdaddr:%02x,%02x,%02x"
    CANCELLING_STATE_SHOW_FAILED "Cancelling state, show failed."
    SESSION_CREATE_COMPLETED "Session create completed"
    BTACCCTRLCHECKCONNECTPOLICY_DENY "BTAccCtrlCheckConnectPolicy Deny"
    JSR82_SESSION_TX_2_DATA "JSR82 session tx 2 data"
    THE_AUTHENTICATION_STATUSBT_DEBUGx02X "The authentication status:%02x"
    THE_INPUT_SERV_CHNLBT_DEBUGx02X "The input serv_chnl:%02x"
    BTEVENT_AUTHENTICATE_CNF_TRC "BTEVENT_AUTHENTICATE_CNF"
    USBTRAN_ACL_BUFFER_NOW_AVAILABLE "USBTRAN: ACL Buffer Now Available"
    TRANS_NO_SCO_BUFFERS "TRANS: no SCO buffers"
    BT_JSR82_HANDLESESSIONAPENABLESERVICE "bt_jsr82_HandleSessionApEnableService"
    SCOCON_IS_ZERO "SCOCON is zero"
    BT_JSR82_DISABLE_SERVICE_REQ_SIZEBT_DEBUGx02X "bt_jsr82_disable_service_req size:%02x"
    REJECT_OP_IS_NOT_EMPTY "Reject Op is not empty"
    IN_MEHANDLELINKACCEPTOP2ND_MECPENDCONSxD "In MeHandleLinkAcceptOp():2nd MEC(pendCons)=%d"
    BTBBTESTITEMBT_DEBUGx02X "BTBBTestItem:%02x"
    REQ_NAMEBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "req name,%02x,%02x,%02x,%02x,%02x,%02x,"
    MECPENDCONS_0 "MEC(pendCons) !=0"
    WRITE_MODE_BT_DEBUGx02X "Write mode :%02x"
    MTKACCCTLCACCCTRLSETBT_DEBUGx02X "MTKACCCTLC(accCtrlSet):%02x"
    CLEAR_MUX_FLAG_XMIT_FLAG2 "Clear MUX_FLAG_XMIT flag#2"
    RFMDCMD_HCC_RESET3500 "RFMDcmd_HCC_RESET3500"
    NO_AVAILABLE_REMDEV "No available remDev"
    EMPTY_REMDEV "Empty remDev"
    FAKESIM_RECEIVES_BT_SIM_CONNECT_REQ "FakeSim receives BT_SIM_CONNECT_REQ"
    BDADDRx08Xx08Xx08X "bdaddr:%08x,%08x,%08x"
    CURRENT_TX_STREAM_STATEBT_DEBUGx02X "current Tx Stream state:%02x"
    CURRENT_MODE_BT_DEBUGx02XERROR_CODEBT_DEBUGx02X "current mode :%02x,error_code:%02x"
    IF_RADIO_WAKEUP_NO_RESPONSE_WE_WILL_GEN_A_FAKE_EVENT_AND_TRY_TO_WAKEUP_AGAIN "If Radio Wakeup no response, we will gen a fake event and, try to wakeup again"
    RSP_RESULT_BT_DEBUGx02X "rsp_result :%02x"
    OPEN_RFCOMM_CHANNEL_FAILED "open rfcomm channel failed"
    RFMDEVT_HCC_CHANGEBAUDRATEBT_DEBUGx02X "RFMDevt_HCC_ChangeBaudRate:%02x"
    CONNMGRSNIFFTIMEOUTHANDLER "ConnMgrSniffTimeoutHandler"
    IN_MEHANDLELINKCONNECTOPMECPENDCONSxD "In MeHandleLinkConnectOp():MEC(pendCons)=%d"
    INQUIRY_IDLE_TIMER_TIMEOUT "inquiry idle timer timeout"
    BT_JSR82_CMGRSERVERCALLBACK "bt_jsr82_CmgrServerCallback"
    CON_HDLBT_DEBUGx02X_RX_DATA_LEN_xD "con_hdl:%02x, Rx data len :%d"
    AVDTP_HDL_RSPBT_DEBUGx02X "AVDTP Hdl Rsp:%02x"
    IN_RFMUXCHECKNEXTTXQUEUES_PACKETSINTRANSITxD_ON_DLCIxD "In RfMuxCheckNextTxQueues(), packetsInTransit=%d, on DLCI=0x%02x"
    RFCOMM_CREATE_COMPLETED "RFCOMM create completed"
    IN_MEHANDLELINKREJECTOP2ND_MECPENDCONSxD "In MeHandleLinkRejectOp():2nd MEC(pendCons)=%d"
    HFP_AUTO_DISCONNECT_BLACK_LISTxD "hfp_auto_disconnect_black_list:%d"
    L2CAP_OPEN_CHANNEL_FAILED "L2CAP open Channel failed"
    CON_IDBT_DEBUGx02X "Con id:%02x"
    RFCOMM_OPEN_CHANNEL_FAILED "RFCOMM open Channel failed"
    NOT_GOOBALHANDLER "not goobalHandler"
    NAME_LENx08X "name_len:%08x"
    IN_RF_SENDDATA_CALL_RFMUXCHECKTXQUEUES "In RF_SendData(): call RfMUXCheckTxQueues"
    NO_SIGNAL_PKT3 "No signal pkt3"
    HID_ROLE_STATEBT_DEBUGx02X "HID Role_state:%02x"
    GAPTESTER_SET_DISCOVERY_WITH_NAME_MODE "GapTester set discovery with name mode"
    REJECT_OP_IN_LIST_REMOTE_THE_REJECT_OP_FROM_LIST "Reject Op in list, remote the reject Op from list"
    LINK_REJECTBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "Link Reject:%02x,%02x,%02x,%02x,%02x,%02x"
    CHECK_LINKBT_DEBUGx02X "check link:%02x"
    STRINGBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "string:%02x,%02x,%02x,%02x"
    RECV_SET_PIN_CODE_RSP_TIMEOUT_VALUE_WITH_ERR0 "Recv SET PIN CODE RSP TIMEOUT Value with err=0"
    BLACKLIST_x0D "BlackList :%0d"
    LINK_SUPERVISION_HDLBT_DEBUGx02X "Link supervision hdl:%02x"
    UATRAN_HOST_IS_READY_TO_ENTER_SLEEP_MODE "UATRAN: Host is ready to enter sleep mode"
    CHECK_RFCOMM_TESTER_POLICY "Check RFCOMM Tester policy"
    TX_DATA_COMPLETED "Tx data Completed"
    RFCOMM_SERVER "RFCOMM SERVER"
    BTACCCTRLUNSET "BTAccCtrlUnset"
    PREVIOUS_NAME_REQUEST_ON_GOING_CANCEL_IT "previous name request on going, cancel it"
    FAKESIM_RECEIVES_BT_SIM_RESET_REQ_DUE_TO_SET_TRANSPORT_PRO_TYPE "FakeSim receives BT_SIM_RESET_REQ due to SET_TRANSPORT_PRO_TYPE"
    SET_SPP_TX_SIZE_xD "Set SPP Tx size :%d"
    DURING_PAIRING_NOT_ALLOW_ROLE_SWITCH "During pairing, not allow role switch"
    SELECT_APDU_AND_FILE_IDBT_DEBUGx02X_BT_DEBUGx02X "Select APDU and FILE ID=%02x %02x"
    RX_DATA_IND "Rx data ind"
    PTR1_STATUS_IDLE_RETURN_DIRECTLY "ptr1 status idle, return directly"
    BT_JSR82_SESSIONAPDISCONNECTINDEVENT "bt_jsr82_SessionApDisConnectIndEvent"
    GET_RESPONSE_APDU_AND_P3_LENBT_DEBUGx02X "Get Response APDU and P3 len=%02x"
    CHECK_FAX_POLICY "Check FAX policy"
    THE_TIMER_LOOKS_LIKE_SOME_ERRORS "The timer looks like some errors"
    UATRAN_NO_ACL_RECEIVER_BUFFER_AVAILABLE "UATRAN: No ACL receiver buffer available"
    BTBMCHECKBONDINGSTATEWHENDISCONNECTEDBT_DEBUGx02X "btbmCheckBondingStateWhenDisconnected,%02x"
    WRITE_BT_CODx08X "Write Cod:%08x"
    GAPTESTER_SET_FILTER_CODBT_DEBUGx04X "GapTester set filter cod=%04X"
    SET_SPP_TIMER_xD "Set SPP Timer :%d"
    CHARxDBT_DEBUGx02X "Char[%d]:%02x"
    CANCEL_REMOTE_NAME_OPERATION "Cancel Remote Name Operation"
    R_VERSION_BT_DEBUGx02X "r version :%02x"
    L2CAP_ID_BT_DEBUGx02X "l2cap_id :%02x"
    INQUIRY_CANCEL "inquiry cancel"
    IDENTIFY_BT_DEBUGx02X "identify :%02x"
    IN_MEHANDLELINKREJECTOPIN_REJECTMECPENDCONSxD "In MeHandleLinkRejectOp()#IN_REJECT:MEC(pendCons)=%d"
    INQUIRY_COMPLETED "inquiry Completed"
    THE_INPUT_PSMBT_DEBUGx04X "The input PSM:%04x"
    IN_BTBMGAPSETAUTHENTICATION_FORCE_TO_LEVEL_3_WITH_ENCRYPTION_OFF "In BTBMGapSetAuthentication(): force to Level 3 with encryption off"
    BUFFER_SIZExD "Buffer size:%d"
    JSR82_SESSION_DISABLE_SERVICE "JSR82 session disable service"
    SENDRAWPACKETB "SendRawPacket:B"
    CHECK_HS_GW_POLICY "Check HS_GW policy"
    AVDTP_STREAMSENDRAWPACKETBT_DEBUGx02X "AVDTP_StreamSendRawPacket:%02x"
    FAKESIM_RECEIVES_BT_SIM_POWEROFF_REQ "FakeSim receives BT_SIM_POWEROFF_REQ"
    PS_TYPE_BT_DEBUGx02X "ps_type :%02x"
    RF_TEST_COMMAND_COMPLETED "RF test command completed"
    NO_UPF_FILE "No UPF file"
    WAIT_FOR_LINK_CONNECT_CNF_OF_THIS_SPP_CLIENT_CREATE_ACL "Wait for LINK_CONNECT_CNF of this SPP client create ACL"
    HFG_EVENT_REPORT_MIC_VOLUME_TRC "HFG_EVENT_REPORT_MIC_VOLUME"
    PIPE_xD_RESET "Pipe %d reset."
    UART_SETTING_SPEED_TO_xD "UART:  Setting speed to %d"
    IN_SPPQUERYCALLBACK_CALL_SPPCONNECT_FAILED_STATUSxD "In SPPQueryCallback(), call sppConnect() failed. status=%d"
    RECV_DEACTIVE_REQ_CONNECTING_IS_INCOMING_BUT_NOT_READY_TO_BE_CONNECTED_TO_NOFITY_SIMSERVER "Recv Deactive_req, Connecting is incoming but not ready to be connected to nofity SimServer"
    SENDING_HANDSHAKE_PACKET "Sending  HandShake packet"
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERAPDURSP_FAILED_IS_OK "RFChannel is closed, so SIM_ServerApduRsp() failed is ok"
    HS_OPEN_SCOL "HS Open SCOl"
    GETPRINTERATTR_SOAP_REQUEST__BPP_SOAP_BUFF_SIZE "GetPrinterAttr SOAP request > BPP_SOAP_BUFF_SIZE)"
    WE_SHALL_CHECK_THE_PTA_COMMAND "We shall check the pta command"
    UART_WROTE_xD_BYTES "UART: Wrote %d bytes"
    BT_RFTEST_OP_TXRX_TEST_TRC "BT_RFTEST_OP_TXRX_TEST"
    HS_CLOSE_SCOL "HS Close SCOl"
    SIMSERVERS_TEST_MODExD "SimServer's test mode=%d"
    HFG_EVENT_AUDIO_DISCONNECTED_TRC "HFG_EVENT_AUDIO_DISCONNECTED"
    SPPCLIENT_RECV_DISCONNECT_REQ_AND_WAIT_FOR_RF_CLOSED_EVENT "SPPClient recv DISCONNECT_REQ and wait for RF_CLOSED event"
    HFG_EVENT_GET_LAST_VOICE_TAG_TRC "HFG_EVENT_GET_LAST_VOICE_TAG"
    SIMULATE_APP_WRITE_FIRST_DATA_TO_SPP_SERVER_WRITTEN_LENxD_AND_STRxS_ON_SPPCLIENT_PORTxD "Simulate APP write first data to SPP Server, written len=%d and str=%s on SPPClient port=%d"
    HFG_EVENT_GENERATE_DTMF_TRC "HFG_EVENT_GENERATE_DTMF"
    BT_EM_STATEBT_DEBUGx02X "bt_em_state:%02x"
    DDB_UPFOPEN "DDB_UPFOpen"
    IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_EVENTxD_IS_FOR_SPPOSDEV_INXxD "In bt_sppclient_cmgr_event_callback(): event=%d is for sppOsDev inx=%d"
    PARMLEN_xD "ParmLen: %d"
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSIMONRSP_FAILED_IS_OK "RFChannel is closed, so SIM_ServerSimOnRsp() failed is ok"
    IN_PRIVATE_TEST_MODE_CHECK_THE_SIM_CARD_IS_INSERTED "In private test mode: Check the sim card is inserted"
    HSCONN "hsconn"
    USB_WAIT_TIMEOUT "USB: Wait timeout"
    INJECT_SPP_CONNECT_REQ_WITH_SRV_CHNL_NUM__xD_FOR_SPP_CLIENT_TEST "Inject SPP_CONNECT_REQ with srv_chnl_num = %d for SPP client test"
    HFG_EVENT_ENABLE_VOICE_RECOGNITION_TRC "HFG_EVENT_ENABLE_VOICE_RECOGNITION"
    DOING_LAST_NUMBER_DIAL "doing last number dial"
    USING_SIMSERVERSENDDISCIND_FIRST_TO_DO_DEACTIVE_REQUEST "Using SimServerSendDiscInd() first to do deactive request"
    HFG_EVENT_SERVICE_CONNECT_REQ_TRC "HFG_EVENT_SERVICE_CONNECT_REQ"
    IN_BT_SIM_OPENSTATE_RESET_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD "In bt_sim_openstate_reset_cnf_hdlr(): RF_CloseChannel failed, status=%d"
    UART_WRITE_xD_BYTES "UART: Write() %d bytes."
    SDP_QUERY_FOR_SPP_CLIENT_IS_ERROR_WITH_BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "SDP query for SPP client is error with bd_addr=%02x,%02x,%02x,%02x,%02x,%02x"
    HFG_EVENT_REPORT_SPK_VOLUME_TRC "HFG_EVENT_REPORT_SPK_VOLUME"
    IN_SPPA_GETBYTESCASE2_SET_READYTOREAD_TO_FALSE "In Sppa_GetBytes():case2 Set readyToRead to FALSE"
    ONLY_ONE_SIM_CARD_IS_SUPPORTED_IN_OUR_CURRENT_DESIGN_SELECT_ID_0 "Only one SIM card is supported in our current design, Select ID_0"
    SETUP_HID_HANDSHACK_PAYLOAD_PACKET "[HID ADP] Setup HID Handshack payload packet"
    MSG_ID_BT_HSG_DEACTIVATE_REQ_TRC "MSG_ID_BT_HSG_DEACTIVATE_REQ"
    MSG_ID_BT_HSG_SVOLUMEDOWN_REQ_TRC "MSG_ID_BT_HSG_SVOLUMEDOWN_REQ"
    CMEVENT_AUDIO_LINK_DIS_SCO_INIT_COMMANDBT_DEBUGx02XSTATUSBT_DEBUGx02X "CMEVENT_AUDIO_LINK_DIS SCO init command:%02x,status:%02x"
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_02 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_02"
    USB_BULKREAD_REQ_xD_RET_xD_BYTES "USB: bulkRead: req %d, ret %d bytes"
    SENDPUSH_DOCUMENT_STATUS__xD "Send/Push Document status = %d"
    SUBUNIT_ID_xD "Subunit ID: %d"
    BT_RFTEST_OP_ENABLED_WHITEN_COMPLETED "BT_RFTEST_OP_ENABLED_WHITEN COMPLETED"
    AG_CONNECTED_TRC "AG_CONNECTED"
    DOCUMENT_FILE_PATH__NULL "Document File path == NULL"
    FILE_HANDLEx08X "file_handle:%08x"
    SIMSERVERSENDCONNRSPERR_FAILED_STATUSxD "SimServerSendConnRspErr() failed, status=%d"
    DOCUMENT_TYPE_ERROR "Document Type Error"
    HFG_EVENT_QUERY_NETWORK_OPERATOR_TRC "HFG_EVENT_QUERY_NETWORK_OPERATOR"
    IN_SPPA_GETBYTES_DATAREADxDLENGTHxD "In Sppa_GetBytes(): DataRead=%d,Length=%d"
    SPP_AUTH_RSP_FROM_MMI_OF_PORTxD_AND_ITS_RESULTxD "SPP_AUTH_RSP from MMI of port=%d and its result=%d"
    DISC_CNF_CASE2 "DISC_CNF case2"
    IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_RECV_LINK_CON_CNF_STATUSxD "In bt_sppclient_cmgr_event_callback(): recv LINK_CON_CNF status=%d"
    CSRUSB_SENDING_COMMAND_COMPLETE_EVENT_FOR_RESET "CSRUSB: Sending Command Complete event for reset"
    UART_DEINITIALIZED "UART: Deinitialized"
    USE_MMI_SPP_SCO_SDP_PROCESS_HDLER_SETS_1_FOR_TESTING_MODE "Use MMI SPP SCO sdp process hdler sets 1: For Testing Mode"
    TRY_TO_OPEN_SCO_HANDLERBT_DEBUGx02X "Try to open sco handler:%02x"
    SIM_ACCESS_PROFILE_IS_ACTIVATED_COMPLETELY "SIM Access Profile is activated completely"
    RECEIVE_SENDDOCUMENT_COMPLETE_IN_BT_BPP_STATE_STATUS_DISCONNECTING_STATUS "Receive SendDocument complete in BT_BPP_STATE_STATUS_DISCONNECTING status."
    DATA_FROM_PEER_DEVICE_IS_ALREADY_RECEIVED_NOW_RECV_UART_OWNER_CNF_FOR_SERVER_PORT "Data from peer device is already received, now: Recv Uart_OWNER_CNF for Server Port"
    USING_RF_CLOSECHANNEL_FIRST_TO_DO_DEACTIVE_REQUEST "Using RF_CloseChannel() first to do deactive request"
    HSINIT "hsinit"
    SPPOSDEV_INXxD_AND_STATExD "sppOsDev inx=%d, and state=%d"
    POWER_OFF_CNF_HDLR_AND_SET_OFF_CARDSTATUSBT_DEBUGx02X "power_off_cnf_hdlr() and set off: cardstatus=%02X"
    THE_SAME_PTA_ACTION "the same pta action"
    USB_CTRLWRITE_REQ_xD_RET_xD_BYTES "USB: ctrlWrite: req %d, ret %d bytes"
    BDC_IS_NULL_SPP_CLIENT_DOES_NOT_CALL_CMGR_CREATEDATALINK "BDC is NULL, SPP client does not call CMGR_CreateDataLink()"
    NEW_STATE_AG_CONNECTED "new state AG_CONNECTED"
    MSG_ID_BT_HSG_CONNECT_REQ_TRC "MSG_ID_BT_HSG_CONNECT_REQ"
    HFG_EVENT_REDIAL_TRC "HFG_EVENT_REDIAL"
    IN_SPPOS_DEVRX_SET_READYTOREAD_FALSE "In SPPOS_DevRx(): Set readyToRead FALSE"
    USB_BULKWRITE_REQ_xD_RET_xD_BYTES "USB: bulkWrite: req %d, ret %d bytes"
    DISCONNECT_CNF_HDLR_CARDSTATUSBT_DEBUGx02X "disconnect_cnf_hdlr(): cardstatus=%02X"
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSETTRANSPROTRSP_FAILED_IS_OK "RFChannel is closed, so SIM_ServerSetTransProtRsp() failed is ok"
    BPP_ADP_CNTX_DEINIT_FS_DELETE_FAILED "BPP ADP cntx deinit FS_Delete FAILED"
    NEW_STATE_AG_DISCONNECTING "new state AG_DISCONNECTING"
    MSG_ID_BT_HSG_BUTTONPRESS_REQ_TRC "MSG_ID_BT_HSG_BUTTONPRESS_REQ"
    DATA_FROM_PEER_DEVICE_IS_ALREADY_RECEIVED_NOW_RECV_UART_OWNER_CNF_FOR_CLIENT_PORT "Data from peer device is already received, now: Recv Uart_OWNER_CNF for Client Port"
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERRESETSIMRSP_FAILED_IS_OK "RFChannel is closed, so SIM_ServerResetSimRsp() failed is ok"
    IN_BT_SIM_RESET_CNF_HDLR_SIM_SERVER_STATE_OPENCOUND_NOT_SEND_SIM_SET_TRANSPORT_PROTOCOL_TYPE_RESPONSE_STATUSxD "In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM Set Transport Protocol Type response, status:%d"
    HFGA_TX_RESPONSE_ADDRxX "hfga_tx: response addr=%x"
    HFGA_TX_RESPONSEPDATA_ADDRxX "hfga_tx: response->p.data addr=%x"
    HFGA_ESTABLISH_SERVICE_LEVEL_CONNECTION_TIMEOUT_HDLER "hfga_establish_service_level_connection_timeout_hdler"
    DISC_CNF_CASE5_NOT_YET_RECEIVE_SIM_CONNECT_CNF_AND_DISC_HAPPENS "DISC_CNF case5: Not yet receive SIM_CONNECT_CNF and DISC happens"
    RECEIVE_SENDDOCUMENT_COMPLETE_IN_WRONG_STATE "Receive SendDocument complete in WRONG state."
    UART_READ_xD_BYTES "UART: Read %d bytes"
    RECV_SPP_CON_REQ_AND_ACL_LINK_IS_ALREADY_ESTABLISHED_CALL_SPPCONNECT_FAILED_STATUSxD "Recv SPP_CON_REQ and ACL link is already established, call sppConnect() failed. status=%d"
    HSBUTTON "hsbutton"
    USB_INTREAD_REQ_xD_RET_xD_BYTES "USB: intRead: req %d, ret %d bytes"
    BT_SIMAP_AUTH_RSPRESULT_xD "bt_simap_auth_rsp->result =%d"
    BT_PARMxD__xD "Parm[%d] = %d"
    HFG_EVENT_LIST_CURRENT_CALLS_TRC "HFG_EVENT_LIST_CURRENT_CALLS"
    RECEIVED_AVRCP_EVENT_TYPE_xD "Received AVRCP Event, Type: %d"
    HFG_EVENT_DIAL_NUMBER_TRC "HFG_EVENT_DIAL_NUMBER"
    THE_SAME_FREQ "the same freq"
    BT_DEBUGx04X "%04x"
    HFG_EVENT_RESPONSE_COMPLETE_TRC "HFG_EVENT_RESPONSE_COMPLETE"
    HFG_EVENT_AT_COMMAND_DATA_TRC "HFG_EVENT_AT_COMMAND_DATA"
    CREATEJOB_REQUEST_SIDES_FLAG_ERROR "CreateJob request Sides flag error)"
    RECV_DEACTIVE_REQ_THE_RFCOMM_AND_SIMSERVER_ARE_ALREADY_IN_CLOSED_STATE "Recv Deactive_req, the RFCOMM and SimServer are already in CLOSED state"
    HFG_EVENT_SERVICE_DISCONNECTED_TRC "HFG_EVENT_SERVICE_DISCONNECTED"
    ACL_LINK_IS_ALREADY_EXISTED_SET_DISCFLAGTRUE_IN_CMGR_CREATEDATALINK "ACL Link is already existed, set discFlag=TRUE in CMGR_CreateDataLink()"
    ORG_CARDSTATUS_IS_ON_SO_POWER_OFF_IS_STILL_SENT_TO_SIM_BUT_ACTUALLY_CARD_IS_OFF_BY_OTHER_MODULE "Org cardstatus is on, so POWER_OFF is still sent to SIM, but actually card is off by other module"
    UPF_SETADDR_0 "UPF_SETADDR !=0"
    IN_BT_SIM_OPENSTATE_POWER_ON_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD "In bt_sim_openstate_power_on_cnf_hdlr(): RF_CloseChannel failed, status=%d"
    RECV_DISC_REQ_FROM_MMI_ALTHOUGH_SIMSERVER_IS_CLOSED_BUT_IT_WAITS_FOR_SIM_TASKS_DISC_CNF "Recv Disc_req from MMI, although SimServer is closed, but it waits for SIM task's DISC_CNF"
    HS_DISCONNECT_CALL "HS Disconnect Call"
    IN_BT_SIM_RESET_CNF_HDLR_SIM_SERVER_STATE_OPENCOUND_NOT_SEND_SIM_POWER_ON_RESPONSE_STATUSxD "In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM POWER ON response, status:%d"
    SPP_CLIENT_CMGR_CREATEDATALINK_FAILED_STATUSxD "SPP client: CMGR_CreateDataLink failed, status=%d"
    IN_BT_SIMAP_DEACTIVEATE_REQ_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD "In bt_simap_deactiveate_req_hdlr(): RF_CloseChannel failed, status=%d"
    IN_BT_SIM_APDU_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD "In bt_sim_apdu_cnf_hdlr(): RF_CloseChannel failed, status=%d"
    HFGA_TX_AT_BUFF_BUF_ADDRxX "hfga_tx: at_buff buf addr=%x"
    IN_BT_SIM_OPENSTATE_SETT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD "In bt_sim_openstate_setT_hdlr(): RF_CloseChannel failed, status=%d"
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIMAP_DISCONNECT_REQ_HDLR_01 "Release SIM Access Profile connect_id in bt_simap_disconnect_req_hdlr()_01"
    LINK_CNF_IS_FOR_ANOTHER_PROFILES_REQUEST_NOT_SPP_CLIENT "LINK_CNF is for another profile's request, not SPP client"
    IN_BT_SPPCLIENT_CMGR_LINK_CLOSE_TRY_TO_REMOVE_BUT_CMGRHANDLER_IS_NOT_FOUND "In bt_sppclient_cmgr_link_close(): try to remove: But CMGRHandler is not found"
    BT_EM_STATE1BT_DEBUGx02X "bt_em_state1:%02x"
    IN_BT_SIMAP_DISCONNECT_REQ_HDLRERROR_MMI_HAS_NO_ENTRY_TO_DISCONNECT_THIS_SAP "In bt_simap_disconnect_req_hdlr():Error! MMI has no entry to disconnect this SAP"
    HFG_EVENT_DISABLE_NREC_TRC "HFG_EVENT_DISABLE_NREC"
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_01 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_01"
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_00 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_00"
    IN_BT_SPPCLIENT_CMGR_LINK_CLOSE_BDC_IS_ALREADY_NULL "In bt_sppclient_cmgr_link_close(): bdc is already null"
    HCI_PROCESS_CALL_RADIO_HOST_WAKEUP_FUNCTION "HCI_Process: call radio host wakeup function"
    IN_BT_SIMAP_DISCONNECT_REQ_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD "In bt_simap_disconnect_req_hdlr(): RF_CloseChannel failed, status=%d"
    DISC_CNF_CASE6 "DISC_CNF case6"
    SUBUNIT_TYPE_xD "Subunit Type: %d"
    NEW_STATE_AG_IDLE "new state AG_IDLE"
    MMI_SPP_SDP_WITH_ATTRIBUTEID0X0310__SUPPORT_CAPABILITIES "MMI SPP Sdp with attributeID=0x0310 : Support Capabilities"
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_05 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_05"
    DOCUMENT_FILE_OPEN_FAILED "Document File OPEN Failed"
    RECV_DEACTIVE_REQ_ALTHOUGH_SIMSERVER_IS_CLOSED_BUT_IT_WAITS_FOR_SIM_TASKS_DISC_CNF "Recv Deactive_req, although SimServer is closed, but it waits for SIM task's DISC_CNF"
    OPCODE_xD "OpCode: %d"
    UART_DEINIT_START "UART: Deinit start"
    SPPCLIENT_RECV_DEACTIVATE_REQ_AND_WAIT_FOR_RF_CLOSED_EVENT "SPPClient recv DEACTIVATE_REQ and wait for RF_CLOSED event"
    COULD_NOT_ALLOCATE_MEMORY_FOR_SOAP_RESPONSE_SIZE__BPP_SOAP_BUFF_SIZE "Could not allocate memory for SOAP response (size > BPP_SOAP_BUFF_SIZE)"
    SPPCLIENT_RECV_DEACTIVATE_REQ_CALL_SPP_CLOSE_FAILED "SPPClient recv DEACTIVATE_REQ, call SPP_Close() failed"
    INDEXBT_DEBUGx02XBT_DEBUGx02X "index:%02x,%02x"
    DISCONNECTING_PLEASE_WAIT "Disconnecting, please wait...."
    NO_OS_NOTIFYEVM_CALL_IN_10_SEC_WAITING "No OS_NotifyEvm() call in 10 sec, waiting..."
    BT_DEBUGx02X "%02x"
    MSG_ID_BT_HSG_MVOLUMEUP_REQ_TRC "MSG_ID_BT_HSG_MVOLUMEUP_REQ"
    RESUMPTION_ERROR_xD "Resumption error: %d"
    BT_SPP_UART_PLUGOUT_CNF_FROM_MMI_OF_PORTxD "BT_SPP_UART_PLUGOUT_CNF from MMI of port=%d"
    HFG_EVENT_AUDIO_CONNECTED_TRC "HFG_EVENT_AUDIO_CONNECTED"
    HSMVU "hsmvu"
    STATUS_OF_SIMSERVERSENDCONNRSPERR_xD "Status of SimServerSendConnRspErr =%d"
    USE_MMI_SPP_SCO_SDP_PROCESS_HDLER_SETS_0_FOR_SPP_CLIENT_APPLICATION "Use MMI SPP SCO sdp process hdler sets 0: For SPP Client Application"
    MMI_ACCEPTS_THIS_SAP_CONNECTION_IN_BT_SIMAP_AUTH_RSP_HDLR "MMI accepts this SAP connection in bt_simap_auth_rsp_hdlr"
    HFG_EVENT_MEMORY_DIAL_TRC "HFG_EVENT_MEMORY_DIAL"
    STRING_INDEXxD_BT_DEBUGx02X "string index:%d,: %02x"
    ATR_TIMEOUTSIMSERVERSTATExDFLAGSBT_DEBUGx02X "atr_timeout,simServerState=%d,flags=%02x"
    HFGA_TX_RESPONSE_BUF_ADDRxX "hfga_tx: response buf addr=%x"
    GETEVENT_SOAP_REQUEST__2K "GetEvent SOAP request > 2K)"
    MSG_ID_BT_HSG_MVOLUMEDOWN_REQ_TRC "MSG_ID_BT_HSG_MVOLUMEDOWN_REQ"
    DOCUMENT_FILE_LENGTH__0 "Document File Length == 0"
    HFG_EVENT_ENABLE_CALLER_ID_TRC "HFG_EVENT_ENABLE_CALLER_ID"
    DISC_CNF_CASE0 "DISC_CNF case0"
    SPP_CLIENT_WITH_PORTxD_TRY_TO_DISCONNECT "SPP client with port=%d, try to disconnect"
    READ_SIZExD "read_size:%d"
    UART_WRITE_EVENT "UART: Write event"
    UPF_SETADDRBT_DEBUGx02X "UPF_SETADDR:%02x"
    ERROR_SUBSTATExD_OF_CONNECT_PENDING_IN_BT_SIM_RESET_CNF_HDLR "Error substate=%d of CONNECT_PENDING in bt_sim_reset_cnf_hdlr()"
    HFG_EVENT_CALL_HOLD_TRC "HFG_EVENT_CALL_HOLD"
    PTA_ACTIONxD "pta_action:%d"
    DISC_CNF_CASE3_RECEIVE_SIM_CONNECT_CNF_PREVIOUSLY_AND_DISC_HAPPENS "DISC_CNF case3: Receive SIM_CONNECT_CNF previously and DISC happens"
    CMEVENT_AUDIO_LINK_CON_SCO_INIT_COMMANDBT_DEBUGx02X "CMEVENT_AUDIO_LINK_CON SCO init command:%02x"
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSIMOFFRSP_FAILED_IS_OK "RFChannel is closed, so SIM_ServerSimOffRsp() failed is ok"
    MSG_ID_BT_HSG_SVOLUMEUP_REQ_TRC "MSG_ID_BT_HSG_SVOLUMEUP_REQ"
    IN_SPPA_HANDLERWAIT_FOR_SDP_QUESRY_RSP_TO_QUERYCALLBACK "In sppa_handler():Wait for SDP quesry rsp to queryCallback"
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIMAP_DEACTIVATE_REQ_HDLR "Release SIM Access Profile connect_id in bt_simap_deactivate_req_hdlr"
    BT_SIM_DISCONNECT_CNF_HDLRSIMSERVER_IS_AVALIABLE_AGAIN "bt_sim_disconnect_cnf_hdlr():SIMServer is avaliable again"
    IN_GRACEFUL_DISC_TIMEOUTNOT_IN_POWER_ON_STATE "In graceful_disc_timeout:Not in POWER ON state"
    PTRAFHxDPTRPTAxD "ptr->afh:%d,ptr->pta:%d"
    FS_OPEN_BT_UPF_ADDR "FS_Open BT_UPF_ADDR"
    NO_AVAIALBE_SPP_CLIENT_OSDEV_FOR_SPP_CONNECT_REQ "No avaialbe SPP Client OsDev for SPP_CONNECT_REQ"
    MMI_SPP_SDP_WITH_ATTRIBUTEID0X0004__PROTOCOLDESCRIPTORLIST "MMI SPP Sdp with attributeID=0x0004 : ProtocolDescriptorList"
    HFG_EVENT_HANDSFREE_FEATURES_TRC "HFG_EVENT_HANDSFREE_FEATURES"
    STARTING_OUTGOING_CALL "Starting outgoing call...."
    IN_BT_SIMAP_WAIT_REQ_IN_GRACEFUL_DISCONNECT_PROCEDURE_TIMEOUT_HANDLERCLOSING_THE_CONNECTION_WITH_IMMD_TYPE "In bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler():Closing the connection with immd type"
    IN_SPPA_HANDLER_BT_MUST_SEND_UART_READY_TO_READ_TO_MMI "In sppa_handler(): BT must send UART_READY_TO_READ to MMI"
    A_BT_JSR82_SESSIONHANDLER "a bt_jsr82_SessionHandler"
    SPPOS_FLUSHRX "SPPOS_FlushRx"
    UNABLE_TO_BUILD_SOAP_COMMAND "Unable to build SOAP Command"
    TRY_TO_DISCONNECT_SCO_HANDLERBT_DEBUGx02X "Try to disconnect sco handler:%02x"
    REJECT_THE_WAITING_CALL "Reject the waiting call"
    IN_BT_SIMAP_DISCONNECT_REQ_HDLRALREADY_DISC_PENDING_IGNORE_THIS_REQUEST "In bt_simap_disconnect_req_hdlr():Already disc pending, ignore this request"
    HFG_EVENT_ENABLE_CALL_WAITING_TRC "HFG_EVENT_ENABLE_CALL_WAITING"
    BT_RFTEST_OP_POWER_TEST_TRC "BT_RFTEST_OP_POWER_TEST"
    SENDING_HANDSHAKE_PACKET_WIT_ERROR_STATUSxD "Sending HandShake packet wit error status=%d"
    ONLY_ONE_SIM_CARD_IS_SUPPORTED_IN_OUR_CURRENT_DESIGN_BUT_DEFINE_MORE_THAN_ONE "Only one SIM card is supported in our current design, but define more than one!"
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_04 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_04"
    TIMER_IS_STARTED_BY_SOMEONE_DURING_POWER_OFF_PROCEDURE "Timer is started by someone during power off procedure"
    SET_SPP_SCO_CON_REQ_BD_ADDR_WITH_LAP_BT_DEBUGx04X_UAPBT_DEBUGx04XNAPBT_DEBUGx04X "Set SPP SCO CON Req Bd_addr with lap =%04X, uap=%04X,nap=%04X"
    DISC_SPP_AUDIO_LINK_FIRST_IF_AUDIO_LINK_IS_CONNECTED "Disc SPP audio link first if audio link is connected"
    IN_BT_SIM_RESET_CNF_HDLR_SIMSERVERSENDCONNRSPERR_FAILED_STATUSxD "In bt_sim_reset_cnf_hdlr: SimServerSendConnRspErr failed, status=%d"
    SPP_UART_OWNER_CNF_FROM_MMI_OF_PORTxD "SPP_UART_OWNER_CNF from MMI of port=%d"
    IN_BT_SIM_POWER_OFF_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD "In bt_sim_power_off_cnf_hdlr(): RF_CloseChannel failed, status=%d"
    RECEIVED_AVRCP_OPERANDS_TYPE_xD "Received AVRCP Operands, Type: %d"
    CMGR_CREATEDATALINK_STATUSBT_DEBUGx02X "CMGR_CreateDataLink status:%02x"
    DEVICE_IDLE_PRESS_BUTTON_TO_INITIATE_OUTGOING_CALL "Device Idle.  Press BUTTON to initiate outgoing call"
    BT_DISC_CNF_CASE1 "DISC_CNF case1"
    REGISTER_SPP_SCO_CLIENT_NUM_OF_ENTRIES_xD "Register SPP SCO Client num of entries =%d"
    RECV_SIMAP_DISC_REQ_USING_IMMDEDIAYE_DISC_TYPE "Recv SIMAP_DISC_REQ, using Immdediaye Disc Type"
    ADDRESSBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "Address:%02x,%02x,%02x,%02x,%02x,%02x"
    FIND_THE_SQT_OWNER_OF_THIS_QUERYCALLBACK_ITS_INDEXxD "Find the sqt owner of this querycallback, its index=%d"
    GET_THE_RETURNED_HID_TRANSACTION_HANDSHAKE_PACKET "[HID ADP] Get the returned HID Transaction HandShake packet"
    HFG_EVENT_HANGUP_TRC "HFG_EVENT_HANGUP"
    BT_DISC_CNF_CASE4 "DISC_CNF case4"
    APDU_RESP_FROM_SIM_TASK_IS_NOT_ACCESSIBLE_PHYSICAL_ERROR "APDU resp from SIM task is not accessible (physical error)"
    HFG_EVENT_ANSWER_CALL_TRC "HFG_EVENT_ANSWER_CALL"
    IN_BT_SIM_RESET_CNF_HDLR_CTxD "In bt_sim_reset_cnf_hdlr(), CT=%d"
    GRACEFUL_DISC_TIMEOUTSIMSERVERSTATExDSUBSTATEBT_DEBUGx02X "graceful_disc_timeout,simServerState=%d,substate=%02x"
    IN_ATR_TIMEOUTNOT_IN_POWER_ON_STATE "In atr_timeout:Not in POWER ON state"
    NUM_SPP_DEVSxD "NUM_SPP_DEVS=%d"
    SPPOS_FLUSHTX "SPPOS_FlushTx"
    RECV_DEACTIVATE_REQ_CHECK_DISC_WITH_GRACEFUL_TIMER_IS_RUNNING_OR_NOT "Recv Deactivate Req, check disc with graceful timer is running or not!"
    IN_SPPA_GETBYTESCASE1_SET_READYTOREAD_TO_TRUE_AND_READMORExD "In Sppa_GetBytes():case1 Set readyToRead to TRUE and ReadMore=%d"
    BT_FS_CREATEDIR "FS_CreateDir"
    IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_RECV_EVENT_TYPExD "In bt_sppclient_cmgr_event_callback(): recv event type=%d"
    UART_READ_EVENT "UART: Read event"
    HFG_EVENT_SERVICE_CONNECTED_TRC "HFG_EVENT_SERVICE_CONNECTED"
    DISC_SPP_CHNL_FIRST_EVEN_THE_AUDIO_LINK_IS_CONNECTED "Disc SPP chnl first even the audio link is connected"
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_03 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_03"
    EM_OPERATIONBT_DEBUGx02XBT_DEBUGx02X "EM operation:%02x,%02x"
    TRY_TO_DISCONNECT_SCO_HANDLER "Try to disconnect sco handler"
    IN_BT_SIM_CONNECT_CNF_HDLRNOT_EXPECT_TO_RECEIVE_BT_SIM_CONNECT_CNF "In bt_sim_connect_cnf_hdlr():Not Expect to receive BT_SIM_CONNECT_CNF"
    WAIT_FOR_SDP_QUESRY_RSP_TO_QUERYCALLBACK "Wait for SDP quesry rsp to queryCallback"
    POWER_OFF_CNF_HDLR_CARDSTATUSBT_DEBUGx02X "power_off_cnf_hdlr(): cardstatus=%02X"
    IN_BT_SIMAP_WAIT_REQ_IN_GRACEFUL_DISC_PROCEDURE_TIMEOUT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD "In bt_simap_wait_req_in_graceful_disc_procedure_timeout_hdlr(): RF_CloseChannel failed, status=%d"
    HFG_EVENT_ENABLE_EXTENDED_ERRORS_TRC "HFG_EVENT_ENABLE_EXTENDED_ERRORS"
    NEW_STATE_AG_OUTGOING "new state AG_OUTGOING"
    IN_BT_SIMAP_WAIT_ATR_CONNECT_PROCEDURE_TIMEOUT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD "In bt_simap_wait_atr_connect_procedure_timeout_hdlr(): RF_CloseChannel failed, status=%d"
    MMI_REJECTS_THIS_SAP_CONNECTION_IN_BT_SIMAP_AUTH_RSP_HDLR "MMI rejects this SAP connection in bt_simap_auth_rsp_hdlr"
    UART_SEND_HCI_COMMAND_x02X "Uart send Hci cmd with opcode=%02X"

    BT_FRM_PANIC "=====[BT][PANIC %d]====="
    BT_SEND_MSG_TO_UPPER_LAYER "BT_BT_send_msg_to_upper_layer dest_mod=%d, sap_id=%d"



    BT_AVDTP_DISCOVERY_REQ "BT_AVDTP_DISCOVERY_REQ"
    BT_AVDTP_DISCOVERY_IND "BT_AVDTP_DISCOVERY_IND"
    BT_AVDTP_DISCOVERY_RSP "BT_AVDTP_DISCOVERY_RSP"
    BT_AVDTP_DISCOVERY_CFM "BT_AVDTP_DISCOVERY_CFM"
    BT_AVDTP_GET_CAP_REQ "BT_AVDTP_GET_CAP_REQ"
    BT_AVDTP_GET_CAP_IND "BT_AVDTP_GET_CAP_IND"
    BT_AVDTP_GET_CAP_RSP "BT_AVDTP_GET_CAP_RSP"
    BT_AVDTP_GET_CAP_CFM "BT_AVDTP_GET_CAP_CFM"
    BT_AVDTP_SET_CONFIG_REQ "BT_AVDTP_SET_CONFIG_REQ"
    BT_AVDTP_SET_CONFIG_IND "BT_AVDTP_SET_CONFIG_IND"
    BT_AVDTP_SET_CONFIG_RSP "BT_AVDTP_SET_CONFIG_RSP"
    BT_AVDTP_SET_CONFIG_CFM "BT_AVDTP_SET_CONFIG_CFM"
    BT_AVDTP_GET_CONFIG_REQ "BT_AVDTP_GET_CONFIG_REQ"
    BT_AVDTP_GET_CONFIG_IND "BT_AVDTP_GET_CONFIG_IND"
    BT_AVDTP_GET_CONFIG_RSP "BT_AVDTP_GET_CONFIG_RSP"
    BT_AVDTP_GET_CONFIG_CFM "BT_AVDTP_GET_CONFIG_CFM"
    BT_AVDTP_RECONFIG_REQ "BT_AVDTP_RECONFIG_REQ"
    BT_AVDTP_RECONFIG_IND "BT_AVDTP_RECONFIG_IND"
    BT_AVDTP_RECONFIG_RSP "BT_AVDTP_RECONFIG_RSP"
    BT_AVDTP_RECONFIG_CFM "BT_AVDTP_RECONFIG_CFM"
    BT_AVDTP_OPEN_REQ "BT_AVDTP_OPEN_REQ"
    BT_AVDTP_OPEN_IND "BT_AVDTP_OPEN_IND"
    BT_AVDTP_OPEN_RSP "BT_AVDTP_OPEN_RSP"
    BT_AVDTP_OPEN_CFM "BT_AVDTP_OPEN_CFM"
    BT_AVDTP_START_REQ "BT_AVDTP_START_REQ"
    BT_AVDTP_START_IND "BT_AVDTP_START_IND"
    BT_AVDTP_START_RSP "BT_AVDTP_START_RSP"
    BT_AVDTP_START_CFM "BT_AVDTP_START_CFM"
    BT_AVDTP_CLOSE_REQ "BT_AVDTP_CLOSE_REQ"
    BT_AVDTP_CLOSE_IND "BT_AVDTP_CLOSE_IND"
    BT_AVDTP_CLOSE_RSP "BT_AVDTP_CLOSE_RSP"
    BT_AVDTP_CLOSE_CFM "BT_AVDTP_CLOSE_CFM"
    BT_AVDTP_ABORT_REQ "BT_AVDTP_ABORT_REQ"
    BT_AVDTP_ABORT_IND "BT_AVDTP_ABORT_IND"
    BT_AVDTP_ABORT_RSP "BT_AVDTP_ABORT_RSP"
    BT_AVDTP_ABORT_CFM "BT_AVDTP_ABORT_CFM"
    BT_AVDTP_SUSPEND_REQ "BT_AVDTP_SUSPEND_REQ"
    BT_AVDTP_SUSPEND_IND "BT_AVDTP_SUSPEND_IND"
    BT_AVDTP_SUSPEND_RSP "BT_AVDTP_SUSPEND_RSP"
    BT_AVDTP_SUSPEND_CFM "BT_AVDTP_SUSPEND_CFM"
    BT_AVDTP_NO_RESOURCE "BT_AVDTP NO Resource available"
    BT_AVDTP_CHANNEL_IS_ZERO "AVDTP chnl = 0"
    BT_AVDTP_REG_L2CAP_FAILED "AVDTP reg l2cap failed"
    BT_AVDTP_NO_RESOURCE_AVAILABLE "AVDTP: No resource available in AvdtpSigHandleCommand"
    BT_AVDTP_REMOVE_INUSE_LIST "Remove the stream from the in-use list"
    BT_AVDTP_SIGNAL_OPEN "AVDTP_SIG_OPEN"
    BT_AVDTP_SIGNAL_TX_DONE "AVDTP: Signal TX Done"
    BT_AVDTP_SIGNAL_TX_ERROR "AVDTP: Signal TX Error or Timeout"
    BT_AVDTP_SIGNAL_CMD_RECV "AVDTP: Signal Command Received :%02x"
    BT_AVDTP_SIGNAL_RSP_RECV "AVDTP: Signal Response Received"
    BT_AVDTP_SIGNAL_REJ_RECV "AVDTP: Signal Reject Received"
    BT_AVDTP_SIGNAL_CMD_LENGTH_ERROR "AVDTP: Invalid Signal Command Length"
    BT_AVDTP_SIGNAL_RSP_LENGTH_ERROR "AVDTP: Invalid Signal Response Length"
    BT_AVDTP_SIGNAL_CONNECTED "AVDTP: Signal Channel Connectedn"
    BT_AVDTP_SIGNAL_DISCONNECTED "AVDTP: Signal Channel Disconnected"
    BT_AVDTP_STREAM_CONNECTED "AVDTP: Stream Connected"
    BT_AVDTP_STREAM_DISCONNECTED "AVDTP: Stream Disconnect"
    BT_AVDTP_DATA_RECEIVED "AVDTP: Stream Data Received = %02x"

    BT_AVDTPTS_EVENT "AVDTP TESTER callback event :%02x"
    BT_AVDTPTS_CONNECT_REQ "AVDT_ConnectReq"
    BT_AVDTPTS_CREATE_CONN "try to create AVDTP connection"
    BT_AVDTPTS_FAILED_CONN "failed to create connection"
    BT_AVDTPTS_RECONFIG_ERR_HDL "AVDT_ReConfigure_Req Invalid Stream Handler"
    BT_AVDTPTS_CLOSE_ERR_HDL "AVDT_Close_Req Invalid Stream Handler"
    BT_AVDTPTS_START_ERR_HDL "AVDT_Start_Req Invalid Stream Handler"
    BT_AVDTPTS_SUSPEND_ERR_HDL "AVDT_Suspend_Req Invalid Stream Handler"
    BT_AVDTPTS_ABORT_ERR_HDL "AVDT_Abort_Req Invalid Stream Handler"
    BT_AVDTPTS_EVENT_CONNECT "MTK AVDTP_EVENT_CONNECT"
    BT_AVDTPTS_EVENT_CONNECTED "MTK AVDTP_EVENT_CONNECT Be connected"
    BT_AVDTPTS_SEID_INFO "seid :%02x, inUse:%02x"
    BT_AVDTPTS_MEDIA_INFO "mediaType :%02x, streamType :%02x"
    BT_AVDTPTS_EVENT_DISCOVERY_CNF "MTK AVDTP_EVENT_DISCOVER_CNF error code:%02x"
    BT_AVDTPTS_CODEC_TYPE "Parms->p.capability->type  AVDTP_SRV_CAT_MEDIA_CODEC."
    BT_AVDTPTS_EVENT_CAP_CNF "MTK AVDTP_EVENT_GET_CAP_CNF Error:%02x"
    BT_AVDTPTS_EVENT_SET_CFG_CNF "MTK AVDTP_EVENT_SET_CFG_CNF error code:%02x"
    BT_AVDTPTS_EVENT_GET_CFG_CNF "MTK AVDTP_EVENT_GET_CFG_CNF error code:%02x"
    BT_AVDTPTS_EVENT_STREAM_RECONFIG_CNF "MTK AVDTP_EVENT_STREAM_RECONFIG_CNF error code:%02x"
    BT_AVDTPTS_EVENT_STREAM_OPEN "MTK AVDTP_EVENT_STREAM_OPEN error code:%02x"
    BT_AVDTPTS_EVENT_SECURITY_CNF "MTK AVDTP_EVENT_STREAM_SECURITY_CNF error code:%02x"
    BT_AVDTPTS_NO_FREE_STREAM "No available freeStreamInfoList"
    BT_AVDTPTS_EVENT_STREAM_STARTED "MTK AVDTP_EVENT_STREAM_STARTED error code:%02x"
    BT_AVDTPTS_EVENT_STREAM_SUSPENDED "MTK AVDTP_EVENT_STREAM_SUSPENDED error code:%02x"



BT_HCI_TRACE_START "BT_HCI_TRACE_START"

    FUNC_UARTTRAN_SENDDATA "UARTTRAN_SendData()"
    FUNC_MTKUART_TRANSMIT_DATA "mtkuartTransmitData()"
    FUNC_UART_WRITE "UART_Write(), buffer=0x%x, length=%d"
    FUNC_HCI_PACKET_SENT "HciPacketSent()"
    FUNC_HCI_PROCESS "HCI_Process()"
    FUNC_HCI_PROCESS_SENT_PACKETS "HciProcessSentPackets()"
    FUNC_HCI_REGISTER_RADIO_HANDLER "HCI_RegisterRadioHandler()"
    FUNC_HCI_CHECK_FOR_TX_DATA_SEND "HciCheckForTxDataSend()"
    FUNC_SEND_HCI_PACKETS "SendHciPackets()"
    FUNC_L2CAP_HCI_TX_DONE "L2CAP_HciTxDone()"
    BTLOG_HCI_COMMAND_COMPLETE_EVENT_OPCODE "BTLOG:HCI:HCIEVENT_INFO:HciProcessEvent_CmdComplete_opCode=%04X"
    BTLOG_HCI_HARDWARE_ERROR_EVENT_ERRCODE "BTLOG:HCI:HCIEVENT_INFO:HciProcessEvent_Hardware_Error_errcode=0x%02X"
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_HandleCommandComplete"
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_RESET "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_RESET"
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_READ_BUFFER_SIZE "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_READ_BUFFER_SIZE"
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL"
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_HOST_BUFFER_SIZE "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_HOST_BUFFER_SIZE"
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_WRITE_SCO_FC_ENABLE "BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_WRITE_SCO_FC_ENABLE"
    BTLOG_HCI_CMD_STATUS_EVENT_PARMS_STATUS_NUM_HCICMD_PKTS_OPCODE "Recv HCI CMD Status Event: P1_Status=%02X,P2_NUM_HCICMD_PKT=%02X,P3_OpCode=%04X"
    BTLOG_HCI_HOST_NUM_COMPLETED_PACKETS_HANDLE_PACKETS "BTLOG_UART_DUMP:HCC_HOST_NUM_COMPLETED_PACKETS handle=0x%02x, packets=%d"
    HCI_INVALID_HCI_HANDLE_IN_SENT_PACKET_LIST "HCI:  Invalid HCI handle in sent packet list"
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_HOST_BUFFER_SIZE "HCI_EVNT:  HciHandleCommandComplete: HCC_HOST_BUFFER_SIZE"
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL "HCI_EVNT:  HciHandleCommandComplete: HCC_SET_CTRLR_TO_HOST_FLOW_CTRL"
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_RESET "HCI_EVNT:  HciHandleCommandComplete: HCC_RESET"
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_READ_BUFFER_SIZE "HCI_EVNT:  HciHandleCommandComplete: HCC_READ_BUFFER_SIZE"
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE "HCI_EVNT:  HciHandleCommandComplete"
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_WRITE_SCO_FC_ENABLE "HCI_EVNT:  HciHandleCommandComplete: HCC_WRITE_SCO_FC_ENABLE"
    HCI_SEND_HCI_COMMAND_BT_DEBUGx02X "hci: send hci command %04x"
    HCIPROCESSEVENT_HCE_COMMAND_COMPLETE "HciProcessEvent: HCE_COMMAND_COMPLETE"
    UART_SEND_HCI_COMMAND_BT_DEBUGx02X "hci: uart send hci command %04x"
    HCI_RECEIVED_DATA_FOR_AN_INVALID_HCI_HANDLE_IGNORED "HCI: Received data for an invalid HCI handle (ignored)"
    HCI_SET_BUFFER_SIZE_COMPLETE "HCI: Set Buffer Size Complete"
    HCI_WRITE_SCO_FLOW_CONTROL_ENABLE_COMPLETE "HCI: Write SCO Flow Control Enable Complete"
    HCI_READ_BUFFER_COMPLETE_ACLTXPKTLENxD "HCI: Read Buffer Complete: aclTxPktLen=%d,"
    HCI_SET_FLOW_CONTROL_COMPLETE "HCI: Set Flow Control Complete"
    HCI_SENDING_HCC_RESET "HCI:  Sending HCC_RESET"
    HCI_PROCESS_FALURE "HCI_Process: falure"
    HCI_PROCESS_CALL_RADIO_WAKE_UP_FUNCTION "HCI_Process: call radio wake up function"
    HCI_PROCESS_HCICHECKFORTXCMD "HCI_Process: HciCheckForTxCmd"
    HCI_HCI_USB_TX_BUFFER_SIZExD_MAY_NOT_BE "HCI: HCI_USB_TX_BUFFER_SIZE(%d) may not be"
    HCI_PACKET_HANDLED_TRC "HCI_PACKET_HANDLED"
    WRONG_LINK_TYPE "Wrong link type"
    WIFI_SETTING_IS_MADE "Wifi setting is made"
    IF_HOST_WAKEUP_NO_RESPONSE_WE_WILL_GEN_A_FAKE_EVENT_AND_TRY_TO_WAKEUP_AGAIN "If Host Wakeup no response, we will gen a fake event and, try to wakeup again"

BT_HCI_TRACE_END "BT_HCI_TRACE_END"



BT_L2CAP_TRACE_START "BT_L2CAP_TRACE_START"

    FUNC_L2CAP_PROCESS_REQ_OP "L2Cap_ProcessReq() op=0x%x"
    FUNC_L2CAP_STATE_MACHINE_CID_EVENT "L2Cap_StateMachine() Cid=0x%x, event=0x%x, state=0x%x"
    FUNC_L2CAP_STATE_CONFIG_CID_EVENT "L2CapState_CONFIG() Cid=0x%x, event=0x%x"
    FUNC_L2CAP_STATE_OPEN_CID_EVENT "L2CapState_OPEN() Cid=0x%x, event=0x%x"
    FUNC_L2CAP_HANDLE_CONFIG_REQ_CID "L2Cap_HandleConfigReq() Cid=0x%x"
    FUNC_L2CAP_SEND_AUTO_CONFIG_RSP_CID "L2CAP SendAutoConfigRsp() cid=0x%x"
    FUNC_L2CAP_INIT "L2CAP_Init"
    FUNC_L2CAP_DEINIT "L2CAP_Deinit"
    FUNC_L2CAP_NOTIFY_USER_AND_CLOSE_CHANNEL "L2Cap_NotifyUserAndCloseChannel: Status=0x%X, inUse=%d, flags=0x%X, state=0x%X"
    FUNC_L2CAP_GETSYSPKT "L2Cap_GetSysPkt: priority=%d"
    FUNC_L2CAP_BUILDSFRAME "L2Cap_BuildSFrame: remoteCid=0x%X, flags2=0x%X"
    FUNC_L2CAP_SENDSFRAME "L2Cap_SendSFrame: remoteCid=0x%X, flags=0x%X"
    FUNC_L2CAP_SECACCESSRSP "L2Cap_SecAccessRsp: event=%d, flags=0x%X, state=%d"
    L2CAP_FREECHANNEL_LINK_REFCOUNT_DISCFLAG "L2Cap_FreeChannel: link refcount=%d, discFlags=%d"
    L2CAP_BUILDSFRAME_INUSE "L2Cap_BuildSFrame: N(R) in I frame, Channel->inUse=%d"
    L2CAP_BUILDSFRAME_FCS "L2Cap_BuildSFrame: S frame fcs=0x%04X"
    L2CAP_SENDSFRAME_STATUS "L2Cap_SendSFrame: status=0x%X"
    L2CAP_SENDSFRAME_NO_PACKET "L2Cap_SendSFrame: No S frame system packet"

    BTLOG_L2CAP_DISC_PENDING_PKT_HANDLED "L2CapState_W4_DISC_CNF(): LLC_TX_DONE"
    BTLOG_L2CAP_CON_PENDING_PKT_HANDLED "L2CapState_W4_CON_CNF(): LLC_TX_DONE"
    BTLOG_L2CAP_CONFIG_PKT_HANDLED "L2CapState_CONFIG(): LLC_TX_DONE"
    L2CAP_L2CAP_FREECHANNELx04X_PSM_x04X_FLAGS_x04X "L2CAP: L2Cap_FreeChannel(0x%04x), PSM 0x%04x, Flags 0x%04x"
    L2CAP_FREE_OPEN_TIMER "l2cap free open timer"
    L2CAP_TESTER_DISCONN_REQ "l2cap tester disconn req"
    L2CAP_GROUP_DATA_REQUEST "L2CAP Group Data Request"
    L2CAP_VALIDATEOPTIONS_OPTION_xD_LEN_xD "L2CAP: ValidateOptions() Option %d, Len %d"
    L2CAP_SENDDISCONNECTREQBT_DEBUGx04X_SENT_PACKET "L2CAP: SendDisconnectReq(%04x) Sent Packet."
    L2CAP_NOTIFYPSM_CONSUMED_NOTIFICATION_EVENT_xX "L2CAP: NotifyPsm() Consumed notification event=0x%x."
    L2CAP_INITIALIZING_FOR_xD_PROTOCOLS_FOR_xD_GROUPS_FOR_xD_DEVICES_WITH_xD_CHANNELS "L2CAP: Initializing for %d protocols, for %d groups, for %d devices, with %d channels."
    L2CAP_PSM_REGISTERED_BT_DEBUGx04X "L2CAP: PSM Registered %04x."
    L2CAP_TIMER_HALTED_BY_DISCONNECTREQ_STATE_xD "L2CAP: Timer Halted by DisconnectReq, state %d"
    L2CAP_UPDATERXWINDOW_EXISTING_xD_AVAIL_xD "L2CAP: UpdateRxWindow() existing %d, avail %d."
    L2CAP_RECEIVED_xD_BYTES "L2CAP: Received %d bytes."
    L2CAP_PROCESSRSP_RECEIVED_RESPONSE_TO_UNKNOWN_REQUEST_IDENT_BT_DEBUGx02X "L2CAP: ProcessRsp() Received Response to unknown request (Ident %02x)"
    L2CAP_UPDATERXWINDOW_MPU_xD_SEGLENGTH_xD_BUFFERED_xD "L2CAP: UpdateRxWindow() MPU %d, segLength %d, buffered %d."
    L2CAP_PROCESSRSPBT_DEBUGx04X_RESPONSE_CID_DID_NOT_MATCH_EXPECTED_CID_OPCODE_xD "L2CAP: ProcessRsp(%04x) Response CID did not match expected CID (Opcode %d)."
    L2CAP_DISCARDING_DATA_FROM_UNKNOWN_HCIHANDLE "L2CAP: Discarding data from unknown HciHandle."
    L2CAP_SENDCONFIGREQBT_DEBUGx04X_SENT_PACKET "L2CAP: SendConfigReq(%04x) Sent Packet."
    L2CAP_SENDCONNECTREQBT_DEBUGx04X_SENT_PACKET "L2CAP: SendConnectReq(%04x) Sent Packet."
    L2CAP_SENDDISCONNECTRSPBT_DEBUGx04X_SENT_PACKET "L2CAP: SendDisconnectRsp(%04x) Sent Packet."
    L2CAP_STATE_MACHINEBT_DEBUGx04X_EVENT_LLC_DISC_REQ "L2CAP: State Machine(%04x) Event LLC_DISC_REQ."
    L2CAP_PROCESSNRBT_DEBUGx02X_ACKNUM__xD_UNACKED__xD "L2CAP: ProcessNr(%02x) acknum = %d, unacked = %d."
    L2CAP_PROCESSGROUPDATABT_DEBUGx04X_DATALEN_xD "L2CAP: ProcessGroupData(%04x) DataLen %d"
    L2CAP_CHANNELRXBT_DEBUGx04X__DROPPED_DATA__NO_CHANNEL "L2CAP: ChannelRx(%04x) ** DROPPED Data ** No Channel!"
    L2CAP_RECEIVED_CONFIGRSPNEG_DISCONNECTING "L2CAP: Received ConfigRspNeg, Disconnecting...."
    L2CAP_GETNEXTSEGMENTBT_DEBUGx02X_SDU_xX_SEGMENT_xD_OF_xD_NS__xD "L2CAP: GetNextSegment(%02x) SDU=0x%x. Segment %d of %d: N(S) = %d."
    L2CAP_SENDFEATURESREQBT_DEBUGx04X_SENT_PACKET "L2CAP: SendFeaturesReq(%04x) Sent Packet."
    L2CAP_INDICATING_xD_BYTE_PACKET_TO_UPPER_LAYER "L2CAP: Indicating %d byte packet to upper layer."
    L2CAP_GETINFOBT_DEBUGx04X_SENT_PACKET_IDENT_xD "L2CAP: GetInfo(%04x) Sent Packet, Ident %d."
    L2CAP_CONFIGBT_DEBUGx04X_STATE_ADVANCED_TO_OPEN "L2CAP: CONFIG(%04x) State advanced to OPEN"
    L2CAP_HANDLERXERRORxX_HCIHANDLE_BT_DEBUGx04X "L2CAP: HandleRxError(0x%x) hciHandle %04x"
    L2CAP_RECEIVED_UNSOLICITED_CONFIGURATION_RESPONSE "L2CAP: Received unsolicited Configuration Response."
    L2CAP_DUPLICATE_REQUEST_IGNORED_CID_BT_DEBUGx04X_OPCODE_BT_DEBUGx02X_IDENT_BT_DEBUGx02XxS "L2CAP: Duplicate Request ignored, Cid %04x, Opcode %02x, Ident %02x"
    L2CAP_ACCEPTSDUDATA_ACCEPTED_xD_OF_xD_BYTES "L2CAP: AcceptSduData() Accepted %d of %d bytes."
    L2CAP_RECEIVED_CONFIGRSPNEG_FOR_FLOW_CONTROL_OPTION "L2CAP: Received ConfigRspNeg for Flow Control Option."
    L2CAP_PROCESSCHANNELDATABT_DEBUGx04X_DATALEN_xD "L2CAP: ProcessChannelData(%04x) DataLen %d."
    L2CAP_DISCACLLINK "L2CAP_DiscAclLink"
    L2CAP_ISSUEHCIREQUESTTOSEND_HCI_REQUEST_TO_SEND_CALLED "L2Cap_IssueHciRequestToSend() HCI_Request to send called!"
    L2CAP_PINGBT_DEBUGx04X_SENT_PACKET_IDENT_xD "L2CAP: Ping(%04x) Sent Packet, Ident %d."
    L2CAP_SENDING_LONE_CONFIGREQ_TO_SOLICIT_MORE_RESPONSES "L2CAP: Sending Lone ConfigReq to solicit more responses."
    L2CAP_SEND_CONFIG_REQUEST "L2CAP: Sent config request"
    L2CAP_START_A_DISC_TIMER_BT_L2CAP_DISCONNECT_TIMEOUT_500MS "L2CAP start a disc timer BT_L2CAP_DISCONNECT_TIMEOUT_500MS"
    L2CAP_START_A_DISC_TIMER_BT_L2CAP_DISCONNECT_TIMEOUT_50S "L2CAP start a disc timer BT_L2CAP_DISCONNECT_TIMEOUT_50S"
    STATUSBT_DEBUGx02X "status:%02x"
    RTX_SECONDS "Rtx seconds"
    ERTX_20_SECONDS "ERTX 20 seconds"
    ERTX_60_SECONDS "ERTX 60 seconds"
    PSM_ALLOW "PSM allow"
    RTX_TIMEOUT_IN_SNIFF_MODE "RTX timeout in sniff mode"
    PSM_NO_ALLOW "PSM No allow"

    BT_L2CAPTS_INIT "L2CAP Testing:  Enter Init function"
    BT_L2CAPTS_UNABLEREG "L2CAP Testing:  Unable to register with L2CAP"
    BT_L2CAPTS_DISCONNECTREQ "L2CA_DisconnectReq"
    BT_L2CAPTS_INFOREQ "L2CA_InfoReq"
    BT_L2CAPTS_ECHOREQ "L2CA_EchoReq"
    BT_L2CAPTS_SENDDATAREQ "L2CA SendData"
    BT_L2CAPTS_CONNECTREQ "L2CAP connect Req cid :%02x"
    BT_L2CAPTS_EVENT "L2CAP l2capTesterL2Callback event :%02x"
    GROUP_REMOVE_REQUEST "Group remove request"
    ACL_LINK_CREATE_SUCCESSFULLY "ACL link create successfully"
    STR_DATA_LENxD "str data len=%d"
    CALL_BTTESTER_SENDMSG "call btTester_sendMsg"
    GROUP_ADD_REQUEST "Group add request"

BT_L2CAP_TRACE_END "BT_L2CAP_TRACE_END"



BT_RFCOMM_TRACE_START "BT_RFCOMM_TRACE_START"

    BT_RFCOMMM_RECV_SABM "RFCOMM:  SABM received at DLCI=0x%02x of Mux=0x%02x"
    BT_RFCOMMM_RECV_DISC "RFCOMM:  DISC received at DLCI=0x%02x of Mux=0x%02x"
    BT_RFCOMMM_RECV_INVALID_LENGTH "RFCOMM:  Invalid receive length, disconnecting..."
    BT_RFCOMMM_DM_REPORT "RFCOMM:  DM is received at DLCI %d of mux %d"
    BT_RFCOMMM_INVALID_EVENT "RFCOMM:  Invalid event for DLCI=0x%02x Mux=0x%02x"
    BT_RFCOMMM_DLC_UP "RFCOMM: UA is received at DLCI=0x%02x of Mux=0x%02x, sending MSC"
    BT_RFCOMMM_DLC_REJECT "RFCOMM: DM is received at DLCI=0x%02x of Mux=0x%02x"
    BT_RFCOMMM_INVALID_EVENT_FOR_DLC "RFCOMM:  Invalid event for DLCI=0x%02x Mux=0x%02x"
    BT_RFCOMMM_UA_SEND "RFCOMM:  UA_F sent successfully to DLCI=0x%02x on Mux=0x%02x, now sending MSC"
    BT_RFCOMMM_SEND_MSC "RFCOMM:  Sending MSC"
    BT_RFCOMMM_MSC_CAN_NOT_SEND "RFCOMM:  L2CAP did not allow MSC to be sent"
    BT_RFCOMMM_RECV_DISC_FOR_DLC "RFCOMM:  DISC received at DLCI=0x%02x of Mux=0x%02x"
    BT_RFCOMMM_DLCI_DISCONNECT "RFCOMM:  DLCI=0x%02x on Mux=0x%02x disconnected"
    BT_RFCOMMM_SABM_SEND "RFCOMM:  SABM sent successfully to DLCI=0x%02x on Mux=0x%02x"
    BT_RFCOMMM_NEGO_FAILED "RFCOMM:  Negotiation failed"
    BT_RFCOMMM_OUT_OF_RESOURCE "RFCOMM:  Out of resources on connect request for Mux=0x%02x"
    BT_RFCOMMM_ALLOCATED_DLCI "RFCOMM:  Allocated incoming DLCI=0x%02x on Mux=0x%02x"
    BT_RFCOMMM_MUX_NOT_REGJSTERED "RFCOMM:  Service %d not registered on connect request for Mux=0x%02x"
    BT_RFCOMMM_CMD_UNALLOCATED_MUX "RFCOMM:  Command for unallocated channel on Mux=%d"
    BT_RFCOMMM_SABM_SENT "RFCOMM:  Sending SABM to DLCI=0 for Mux=0x%02x"
    BT_RFCOMMM_MUX_UP "RFCOMM:  Mux=0x%02x up"
    BT_RFCOMMM_CANNT_SEND_NEGO "RFCOMM:  Could not send negotiation to DLCI=0x%02x on Mux=0x%02x "
    BT_RFCOMMM_NOGO_SEND_SUCCESS "RFCOMM:  Negotiation sent successfully to DLCI=0x%02x on Mux=0x%02x"
    BT_RFCOMMM_CONN_DLCI_REJECT "RFCOMM:  Connection to DLCI=0 on Mux=0x%02x rejected (or invalid event)"
    BT_RFCOMMM_SEND_UA "RFCOMM:  Sending UA_F to DLCI=0 on Mux=0x%02x"
    BT_RFCOMMM_INVALUD_UNINIT_MUX "RFCOMM:  Invalid event for uninitialized Mux=0x%02x"
    BT_RFCOMMM_L2CAP_DISCONNECT "RFCOMM:  L2CAP disconnect, shutting down mux"
    BT_RFCOMMM_DISC_MUX "RFCOMM:  DISC (shutdown) for Mux=0x%02x"
    BT_RFCOMMM_RECV_SABMDM "RFCOMM:  Received SABM or DM for channel 0 on connected session"
    BT_RFCOMMM_INVALID_EVENT_OF_MUX "RFCOMM:  Invalid event for uninitialized Mux=0x%02x"
    BT_RFCOMMM_SEND_CONNECT_REJECT "RFCOMM:  Sending connect reject on Mux=0x%02x"
    BT_RFCOMMM_INCOMING_CONN "RFCOMM:  Incoming connection, initializing Mux=0x%02x"
    BT_RFCOMMM_L2CAP_DISCONNECT_EVENT "RFCOMM:  L2CAP Disconnected Event "
    BT_RFCOMMM_INVALID_FCS "RFCOMM:  Invalid FCS, shutting down Mux=0x%02x "
    BT_RFCOMMM_INVALUD_RX_LENGTH "RFCOMM:  Invalid length in RX data, shutting down Mux=0x%02x "
    BT_RFCOMMM_SEND_DM_F "RFCOMM:  Sending DM_F to DLCI=0x%02x on Mux=0x%02x"
    BT_RFCOMMM_RE_FLOWCTL_DISC "RFCOMM:  Remote tried to renegotiate flow control, disconnecting L2CAP"
    BT_RFCOMMM_RX_MSC "Rx MSC, DLC Flag=0x%04X"
    BT_RFCOMMM_INVALID_FLOWCTRL "RFCOMM:  Invalid flow control command received"
    BT_RFCOMMM_INVALID_LENGTH "RFCOMM:  Invalid length, disconnecting L2CAP"
    BT_RFCOMMM_INVALUD_PARM_LENGTH "RFCOMM:  Invalid parm length, disconnecting L2CAP"
    BT_RFCOMMM_UNABLE_REG_L2CAP "RFCOMM:  Unable to register with L2CAP."
    BT_RFCOMMM_INITIZED "RFCOMM:  Initialized."
    BT_RFCOMMM_DEINITED "RFCOMM:  Deinitialized."
    BT_RFCOMMM_CHNL_REGED_NOT_USED "RFCOMM:  A channel was requested, but not used"
    BT_RFCOMMM_REG_CHNL_SERV "RFCOMM:  Registered channel on service %d"
    BT_RFCOMMM_FAILED_REG_CHNL "RFCOMM:  Failed to registered channel on service %d"
    BT_RFCOMMM_DE_REG_CHNL "RFCOMM:  Deregistered channel from service %d"
    BT_RFCOMMM_DE_REG_ALL_CHNL "RFCOMM:  Deregistered all channels from service %d"
    BT_RFCOMMM_CHNL_REQ_PREVIOUS "RFCOMM:  Service channel requested previously"
    BT_RFCOMMM_CHNL_REQ_FIRST "RFCOMM:  Service channel requested for the first time"
    BT_RFCOMMM_MUX_FREEED "RFCOMM:  Mux=0x%02x freed"
    BT_RFCOMMM_ALLOCATED_DLCI_ON_MUX "RFCOMM: Allocated DLCI=0x%02x on Mux=0x%02x"
    BT_RFCOMMM_COULD_NOT_L2CAP_SHUTDOWN "RFCOMM:  Could not disconnect from L2CAP, shutting down mux"
    BT_RFCOMMM_LINK_LOSS "RFCOMM:  Link loss timer fired, shutting down mux: aclTxPacketsLeft=%d"
    BT_RFCOMMM_TX_CREDIT_OVERFLOW "RFCOMM:  txCredit overflow"
    BT_RFCOMMM_DATA_RECV_NO_CREDIT "RFCOMM:  Data received from device with no credit"
    BT_RFCOMMM_STOP3 "stop 3"
    BT_RFCOMMM_NO_MSC "no MSC"
    BT_RFCOMMM_TX_NUMBER_MINUS "MUX(MuxId).numTxPackets-- = :%d"
    BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT1 "Clear MUX_FLAG_XMIT_01"
    BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT2 "Clear MUX_FLAG_XMIT_02, with status=%d , on DLCI=0x%02x"
    BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT3 "Clear MUX_FLAG_XMIT_03"
    BT_RFCOMMM_SPP_SENDTORFCOMM_DATA "In sendToRfComm, data ready to send=%d"
    BT_RFCOMMM_SPPOS_TX_EMPTY "In sendToRfComm(): call SPPOS_DevTxEmpty"
    BT_RFCOMM_MUX_NON_USER_NON_CREDIT_PKT_HANDLED "RfMuxStateMachine(): RFCOMM Non-User and Non-Credit Pkt Handled"
    BT_RFCOMM_DISC_PENDING_PKT_HANDLED "RfDlcStateDiscPending(): Pkt Handled with cmdrsp=0x%02X"
    BT_RFCOMM_RECV_MSC_REQ_RSP_REPORT_RFEVENT_OPEN "RFCOMM DLC: Recv MSC Req and Rsp, report RFEVENT_OPEN at inx=%d"
    BT_RFCOMM_RECV_MSC_CNF_DLC_FLAG "RfCtlHandleCnf: Recv MSC Rsp, DLC Flag=0x%04X"
    BT_RFCOMM_RECV_MSC_REQ_DLC_FLAG "RfCtlHandleMSCReq: Recv MSC Req, DLC Flag=0x%04X"
    BT_RFCOMM_DISC_PENDING_RECV_EVENT "RfDlcStateDiscPending: DLCI=0x%02x, MuxId=0x%02x,Recv Event=0x%02x, MUX flags=0x%x"
    BT_RFCOMM_DISC_PENDING_NOT_CHANGE_STATE "Not Change DLC Disc Penging to Disconnected inx=0x%x"
    BT_RFCOMM_CHECK_UNRETURNED_DISC_PKT "RfDlcStateDiscPending: Check if Disc Pkt on L2CaptxQuest or btPacketList, inx=%d"
    BT_RFCOMM_DISC_PENDING_NOT_CHANGE_RESULT "Find a non returned DISC Req: hciHandle=%08X,aclTxPacketsLeft=%d"
    BT_RFCOMM_START_TIMER_SEND_CMD_ON_DLCI_OF_MUX_TIME "RFCOMM: start timer, send cmd=0x%02x on DLCI=0x%02x of Mux=0x%02x time=%dsec"
    BT_RFCOMM_RESTART_TIMER "RFCOMM: restart"
    BT_RFCOMM_DISCARD_DISC_ON_DLCI_OF_MUX "RFCOMM: discard DISC on DLCI=0x%02x of Mux=0x%02x and clear CHNL_FLAG_DISC_QUEUED"
    BT_RFCOMM_DISC_IS_QUEUED_ON_DLCI_OF_MUX "RFCOMM DISC is queued on dlci=0x%02x of MUX=0x%02x and set CHNL_FLAG_DISC_QUEUED"
    BT_RFCOMM_CHNL_FLAG_DISC_QUEUED_IS_CLEARED "RFCOMM CHNL_FLAG_DISC_QUEUED is cleared"

    BT_RFCOMMM_NEW_TXCREDIT "Recv txCredit, new txCredit=%d, call RfMUXCheckTxQueues"
    BT_RFCOMMM_PKT_RETURNED "RfAppCallback:Pkt on DLCI=0x%02x returned with status=0x%x,len=%d,call RfMUXCheckTxQueues"
    BT_RFCOMMM_SPP_PKT_RETURNED "In defaultEventHandler():PKT_RETURNED,sentdata=%d on DLCI=0x%02x"
    BT_RFCOMMM_CHECKTXQUEUE "In RfMUXCheckTxQueues():packetsInTransit=%d"
    BT_RFCOMMM_CHECK_NEXT_TXQUEUE_EMPTY_DLCI "In RfMUXCheckNextTxQueue() on DLCI=0x%02x ,is Empty"
    BT_RFCOMMM_CHECK_NEXT_TXQUEUE_FLOWOFF_DLCI "In RfMUXCheckNextTxQueue() on DLCI=0x%02x, is FlowOff"
    BT_RFCOMMM_PKT_INTRANSMIT_DLCI "In RfMuxCheckNextTxQueues(), packetsInTransit=%d, on DLCI=0x%02x"
    BT_RFCOMMM_RF_SENDDATA_CHECK_TXQUEUE "In RF_SendData(): DLCI=0x%02x,len=%d,call RfMUXCheckTxQueues"
    BT_RFCOMMM_SENDDATA_INTERNAL_DLCI_TXCREDIT "In RfMUXCheckNextTxQueue(): on DLCI=0x%02x, left txCredit=%d"
    BT_RFCOMMM_SPPA_GETBYTES_DATAREAD_LEN "In Sppa_GetBytes(): DataRead=%d,Length=%d"
    BT_RFCOMMM_SPPA_GETBYTES_CASE1 "In Sppa_GetBytes():case1 Set readyToRead to TRUE and ReadMore=%d"
    BT_RFCOMMM_SPPA_GETBYTES_CASE2 "In Sppa_GetBytes():case2 Set readyToRead to FALSE"
    BT_RFCOMMM_SET_READYTOREAD_FALSE "In SPPOS_DevRx(): Set readyToRead FALSE"
    BT_RFCOMMM_SPPOS_FLUSHRX "SPPOS_FlushRX"
    BT_RFCOMMM_SPPOS_FLUSHTX "SPPOS_FlushTX"
    BT_RFCOMM_OPENCLI_FUNC_ENTRY "In RF_OpenClientChannel() with entry=%d"
    BT_RFCOMM_DISC_L2CAP_REJECT_SABM_DLC_COUNT_ZERO "Disc L2CAP at MuxID=0x%02x,due to reject SABM and dlcCout is 0"
    BT_RFCOMM_CREDIT_PKT_SENT_DONE "BT_LOG_RFCOMM_CREDIT_PKT_SENT_DONE"

    RFCOMM_IN_COMING_CONNECTION_AUTHENTICATED_HAS_ALREADY_COMPLETED "RFCOMM in coming connection, Authenticated has already completed"
    RFCOMM_SEND_ACK_RESPONSE "RFCOMM Send ACK response:0x%02x"
    SERVER_CHANNEL_IS_NOT_ALLOWED "Server channel is not allowed."
    RFISDLCFLOWONTXCREIDT0_ON_DLCIxD "RfIsDlcFlowOn(),txCreidt=0 on DLCI=0x%02x"
    RF01084421 "RF Deregister Security Record"
    CLIENT_REGISTRATION_SECURITY_RECORDBT_DEBUGx02X "Client Registration security record:%02x"
    CLIENT_DEREGISTRATION_SECURITY_RECORDBT_DEBUGx02X "Client DeRegistration security record:%02x"
    DEREGISTRATION_SECURITY_RECORD_STATUSBT_DEBUGx02X "DeRegistration security record status:%02x"
    RFL2CALLBACKL2EVENT_CLOSED_FOR_SECURITY_SERVICE_LEVEL2_TO_CHECK_PARING_STATE "RfL2Callback(L2EVENT_DISCONNECTED)"

    BT_RFCOMMTS_INIT "RFCOMM TESTER INIT"
    BT_RFCOMMTS_OPENCLIENT "RFCOMM TESTER Open RFCOMM Channel"
    BT_RFCOMMTS_REGSERVER "RFCOMM TESTER Regsiter RFCOMM server"
    BT_RFCOMMTS_ERROR_STRING "RFCOMM TESTER unknown string"
    BT_RFCOMMTS_EVENT "RFCOMM TESTER callback event :%02x"
    BT_RFCOMMTS_PKT_SENT "RFCOMM TESTER PACKET SENT"
    BT_RFCOMMTS_CLOSE "RFCOMM TESTER CLOSE CHANNEL"
    BT_RFCOMMTS_RLS "RFCOMM TESTER Send RLS"
    BT_RFCOMMTS_SENDDATA "RFCOMM TESTER Send data"
    BT_RFCOMMTS_NO_BUFFER "RFCOMM TESTER no buffer to send data"
    BT_RFCOMMTS_MSC "RFCOMM TESTER Send msc:%02x"
    BT_RFCOMMTS_SENDPN "RFCOMM TESTER Send PN"
    IN_RFCOMM_INJECT_STR_CHANGEPKTTYPE "In RFCOMM inject str: changepkttype"

BT_RFCOMM_TRACE_END "BT_RFCOMM_TRACE_END"



BT_SDP_TRACE_START "BT_SDP_TRACE_START"

    BT_SDAP_REMOVE_LINK_HDLER "BT_LOG_Try to RemoveEntryList sdapMeHandler"
    BT_SDP_QUERY_FAILED_CASE "BT_LOG_SDP_QUERY_FAILED_CASE=%d"
    BT_SDP_REMOVE_RECORD_NOT_IN_LIST "BT_LOG_Record is not in the SDPS records List"
    BT_LOG_SDAP_SSA_RAW_RETRY_COUNT "SDAP_SSA_Raw():Wait for Link disconnected,count=%d"
    BT_LOG_QUERY_SA_RAW_CB_RECORD_COUNT "query_sa_raw_cb:currentServiceRecordCount=%d"
    BT_LOG_QUERY_SA_RAW_CB_CONT_STATE_LEN "query_sa_raw_cb:ContStateLen from ss rsp =%d"
    BT_LOG_QUERY_SA_RAW_CB_ATTRLIST_COUNT_CONTSTATE_LEN_CASE "query_sa_raw_cb:attributelist count=%d,contStateLen=%d,case=%d"
    BT_LOG_QUERY_SA_RAW_CB_CONSTATE_LEN_FROM_SA_RSP_CASE "query_sa_raw_cb:ContStateLen from sa rsp =%d,case=%d"
    BT_LOG_QUERY_SA_RAW_CB_CONTINUE_SDP_FAILED_STATUS "query_sa_raw_cb:Continue sdp query failed, stauts=%d"
    BT_LOG_QUERY_SA_RAW_CB_LINK_CON_CNF_FAILED "query_ssa_raw_cb:Link connect cnf with error"
    BT_LOG_SDP_CLIENT_QUERY_DATALEN_PTR "SendSdpClientQuery():Dump Data: data len=%d and ptr=%08X"
    SDP_CLIENT_PACKET_RETURNED "SDP Client: Packet returned"
    SDP_CLIENT_DEINITIALIZED "SDP Client:  Deinitialized."
    SDP_CLIENT_SUCCESSFULLY_STARTED_L2CAP "SDP Client: Successfully started L2CAP"
    SDP_CLIENT_QUERY_FAILED_TO_START_NO_CONNECTION "SDP Client: Query failed to start no connection"
    SDP_CLIENT_CONNECTION_DISCONNECTED "SDP Client: Connection disconnected"
    SDP_CLIENT_NO_MORE_TOKENS_SO_DISCONNECTING_L2CAP "SDP Client: No more tokens so disconnecting L2CAP"
    SDP_CLIENT_RECEIVED_RESPONSE "SDP Client: received response"
    SDP_CLIENT_L2CAP_CONNECTION_HAS_COME_UP "SDP Client: L2CAP connection has come up"
    SDP_CLIENT_FAILED_TO_START_L2CAP_STATUS__xD "SDP Client: Failed to start L2CAP status = %d"
    SDP_CLIENT_SENDING_QUERY_PACKET "SDP Client: Sending query packet"
    SDP_SERVER_ATTRIB_SEARCH_RCV_BAD_CONTINUATION_STATE "SDP Server: Attrib search rcv bad continuation state"
    SDP_SERVER_ATTRIB_SEARCH_STORING_HEADER_INTO_SCRATCH "SDP Server: Attrib Search storing header into scratch"
    SDP_SERVER_SENDING_AN_ERROR_ERROR__xX "SDP Server: Sending an error. error=0x%x"
    SDP_SERVER_HANDLESERVSEARCHATTRIB__RCV_BAD_CONTINUATION_STATE "SDP Server: HandleServSearchAttrib - rcv bad continuation state"
    SDP_SERVER_SERSEARATTRREQ__QUERY_PARAMETERS_ARE_NOT_VALID "SDP Server: SerSearAttrReq - query parameters are not valid"
    SDP_SERVER_SENDING_CONT_STATE_0 "SDP Server: Sending cont state 0"
    SDP_SERVER_SERVICE_SEARCH_RCV_CONT_STATE_SIZE__xD_VAL__xD "SDP Server: Service Search rcv cont state size = %d val = %d"
    SDP_SERVER_SERVICE_SEARCH_RCV_CONINUATION_STATE__0 "SDP Server: Service Search rcv coninuation state = 0"
    SDP_SERVER_B_SCRATCH__xD "SDP Server: B scratch = %d"
    SDP_SERVER_HANDLESERVATTRIB__BAD_PARAMETER_LEN "SDP Server: HandleServAttrib - bad parameter len"
    SDP_SERVER_SENDING_CONT_STATE__xD "SDP Server: Sending cont state = %d"
    SDP_SERVER_DEINITIALIZED "SDP Server:  Deinitialized."
    SDP_SERVER_HANDLESERVSEARCHATTRIB__BAD_PARAMETER_LEN "SDP Server: HandleServSearchAttrib - bad parameter len"
    SDP_SERVER_QUERY_LEN_IS_SHORT "SDP Server: query len is short"
    SDP_SERVER_STOREATTRIB__STORING_ID_0_INTO_SCRATCH "SDP Server: StoreAttrib - storing ID 0 into scratch"
    SDP_SERVER_INCOMING_L2CAP_CONNECTION_REJECTED "SDP Server: Incoming L2CAP connection rejected"
    SDP_SERVER_L2CAP_SENDDATA_CALL_FAILED_ERROR__xX "SDP Server: L2CAP_SendData call failed. error=0x%x"
    SDP_SERVER_CONNECTION_COMPLETE "SDP Server: Connection complete"
    SDP_SERVER_CONNECTION_DISCONNECTED "SDP Server: Connection disconnected"
    SDP_SERVER_ATTRIB_SEARCH_RCV_CONTINUATION_STATE__0 "SDP Server: Attrib Search rcv continuation state = 0"
    SDP_SERVER_INVALID_RECORD_HANDLE "SDP Server: Invalid record handle"
    SDP_SERVER_COPYING_THE_SCRATCH_INTO_A_PACKET_LENxD "SDP Server: Copying the scratch into a packet len:%d"
    SDP_SERVER_INCOMING_L2CAP_CONNECTION_ACCEPTED "SDP Server: Incoming L2CAP connection accepted"
    SDP_SERVER_REMDEVSDPSERVINFOTOTALATTRIBSIZE__xD "SDP Server: remDev->sdpServInfo->totalAttribSize = %d"
    SDP_SERVER_MATCH_FOUND "SDP Server: Match found"
    SDP_SERVER_QUERY_PARAMETERS_ARE_NOT_VALID "SDP Server: query parameters are not valid"
    SDP_SERVER_HANDLESERVSEARCHATTRIB__RCV_CONT_STATE_SIZE__xD_VAL__xD "SDP Server: HandleServSearchAttrib - rcv cont state size = %d val = %d"
    SDP_SERVER_HANDLESERVSEARCH__BAD_PARAMETER_LEN "SDP Server: HandleServSearch - bad parameter len"
    SDP_SERVER_ATTRIBUTE_ID__xD_MARKED "SDP Server: Attribute ID = %d marked"
    SDP_SERVER_ATTRIBUTE_ID__2_MARKED "SDP Server: Attribute ID = 2 marked"
    SDP_SERVER_A_SCRATCH__xD "SDP Server: A scratch = %d"
    SDP_SERVER_SERVICE_SEARCH_RCV_BAD_CONTINUATION_STATE "SDP Server: service search rcv bad continuation state"
    SDP_SERVER_MATCH_NOT_FOUND "SDP Server: Match not found"
    SDP_SERVER_STOREATTRIB__STORING_ID_2_INTO_SCRATCH "SDP Server: StoreAttrib - storing ID 2 into scratch"
    SDP_SERVER_ATTRIB_SEARCH_RCV_CONT_STATE_SIZE__xD_VAL__xD "SDP Server: Attrib Search rcv cont state size = %d val = %d"
    SDP_SERVER_PACKET_RETURNED "SDP Server: packet returned"
    SDP_SERVER_RECEIVED_DATA "SDP Server: received data"
    SDP_SERVER_ATTRIBUTE_ID__0_MARKED "SDP Server: Attribute ID = 0 marked"
    SDP_SERVER_SERVICE_SEARCH_RCV_CONTINUATION_STATE__0 "SDP Server: Service Search rcv continuation state = 0"
    SDP_SERVER_QUERY_PARMETERS_LEN_IS_BAD "SDP Server: query parmeters len is bad"
    SDP_SERVER_STOREATTRIB__STORING_ID_1_INTO_SCRATCH "SDP Server: StoreAttrib - storing ID 1 into scratch"
    A_SDP_SERVER_REMDEVSDPSERVINFOTOTALATTRIBSIZE__xD "A SDP Server: remDev->sdpServInfo->totalAttribSize = %d"
    B_SDP_SERVER_SCRATCH__xD "B SDP Server: scratch = %d"
    C_SDP_SERVER_SCRATCH__xD "C SDP Server: scratch = %d"
    RECORD_HANDLERBT_DEBUGx04X "record handler:%04x"
    OFFSETxD_FINALxDSTATExD "offset:%d, final:%d,state:%d"
    SERVICE_REG_RECORD_HANDLERBT_DEBUGx04X "service reg record handler:%04x"
    SERVICE_ATTRIBUTE_IDBT_DEBUGx04X "Service attribute id:%04X"
    SERVICE_SEARCH_FAILED "Service search Failed"
    SERVICE_SEARCH_COMPLETEBT_DEBUGx02X_TOTAL_VALUE_LENBT_DEBUGx02X "Service search complete:%02X, total value len:%02X"
    SERVICE_SEARCH_FAILED_NO_SERVICES "Service search Failed, no services"
    PARSE_NEXT "PARSE  NEXT"
    FOUND_SERVICE_RECORD_OF_BT_DEBUGx04X "Found service record of %04X"
    PSI_INFORMATION_STORED_IN_DB_NOW "PSI information stored in DB now"
    RESULTBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X "Result:%02X,%02X,%02X,%02X,%02X,%02X"
    PARSE_COMPLETE_WITH_ERROR "PARSE COMPLETE with error"
    DO_SDAP_SERVICE "Do SDAP service"
    SERVICE_SEARCH_COMPLETE_STATUS__BT_DEBUGx02X_TOKEN_VALUE_LENBT_DEBUGx02X "Service search complete status = %02X, token value len:%02X"
    PARSE_COMPLETE "PARSE COMPLETE"
    SDPSERVER_REMOVED_RECORD_IS_MARKED_SETTING_CONT_STATE_TO_0_FOR_REMDEV_xD "SdpServer: Removed record is marked setting cont state to 0 for remdev %d"
    SDPFINDUUIDINATTRIB_MAX_RECURSION_LEVEL_EXCEEDED "SdpFindUUidInAttrib: max recursion level exceeded"
    SDP_QUERY_NO_SERVICES "SDP Query No services"
    FTP_SERV_CHANNELx02X "FTP serv channel:%02x"
    REGFTP "regftp"
    SDP_REG_RESULTx02X "SDP reg result:%02x"
    OPP_SERV_CHANNELx02X "OPP serv channel:%02x"
    DEREGISTRATION_RESULTx02X "DeRegistration result:%02x"
    UNKNOWN_MESSAGE "Unknown message"
    DEREGFTP "deregftp"
    DEREGOPP "deregopp"
    SDPDBA_RX_CMD_STRING "sdpdba  rx cmd string"
    REGISTRATION_RESULTx02X "Registration result:%02x"
    REGOPP "regopp"
    SDAP_MULTIPLE_REQUEST_TIMEOUT_C "sdap multiple request timeout C"
    IN_SDAP_SERVICESEARCHSINGLEATTRIBUTE_SET_DISCFLAG_AS_FALSE "In SDAP_ServiceSearchSingleAttribute(): set discFlag as FALSE"
    RESTART_SDAP_MULTIPLE_REQ_TIMER_D "restart sdap multiple req timer D"
    FOR_A2DP_AGAIN_UUIDx4X "for A2DP again, uuid=%4x"
    IN_QUERY_SDAP_SERVICE_SEARCH_ALL_CALLBACK_SET_DISCLEVEL_BT_L2CAP_DISCONNECT_TIMEOUT_50S "In query_sdap_service_search_all_callback(): set discLevel BT_L2CAP_DISCONNECT_TIMEOUT_50S"
    CONTINUE_TO_PARSING_SDP_RSP_RESULT "Continue to parsing SDP Rsp result"
    SDAP_NOT_FINSIHED_REJECT_THE_OPEATION "SDAP not finsihed, reject the opeation."
    SDPCLIENTQUERYTIMEOUT_TIMEOUTBT_DEBUGx02X "SdpClientQueryTimeout timeout:%02x"
    SDAP_MULTIPLE_REQUEST_TIMEOUT_F "sdap multiple request timeout F"
    FOR_A2DP_AGAIN_RSP_BACKUUIDBT_DEBUGx04X "for A2DP again, rsp back,uuid=%04x"
    IN_QUERY_SDAP_SEARCH_ATTRIBUTE_CALLBACK_RECV_SPP_QUERY_RSP "In query_sdap_search_attribute_callback(): Recv SPP Query RSP"
    SDAP_MULTIPLE_REQUEST_TIMEOUT_A "sdap multiple request timeout A"
    RESTART_SDAP_MULTIPLE_REQ_TIMER_B "restart sdap multiple req timer B"
    CBT_DEBUGx02XDBT_DEBUGx02X "c:%02x,d:%02x"
    RESTART_SDAP_MULTIPLE_REQ_TIMER_E "restart sdap multiple req timer E"
    RESET_SDAP_MULTI_REQ_INDEX_FOR_A2DP_SDP_QUERY_AGAIN "Reset sdap_multi_req_index for A2DP sdp query again"
    CONTINUATION_STATE "continuation state"
    NOT_IN_MULTIPLE_SDAP_REQUEST "Not in multiple SDAP request"
    ABT_DEBUGx02XBBT_DEBUGx02X "a:%02x,b:%02x"
    RESTART_SDAP_MULTIPLE_REQ_TIMER_F "restart sdap multiple req timer F"
    SDAP_REMOVE_LINKCALLBACK_SDAPMEHANDLER "Sdap remove linkcallback: sdapMeHandler"

BT_SDP_TRACE_END "BT_SDP_TRACE_END"





    BT_BPP_EXT_ENABLE "[BPP_EXT] btmtk_bpp_enable: original bpp_state(%d)"
    BT_BPP_EXT_DISABLE "[BPP_EXT] btmtk_bpp_disable: original bpp_state(%d)"
    BT_BPP_EXT_AUTH_RSP "[BPP_EXT] btmtk_bpp_auth_response: current bpp_state(%d), get_auth_ind(%d), hprinter(%d)"
    BT_BPP_EXT_GET_ATT "[BPP_EXT] btmtk_bpp_getprinterattribute: current bpp_state(%d)), addr(%02x:%02x:%02x:%02x:%02x:%02x), attMask(%02x), ReqBefore(%d))"
    BT_BPP_EXT_PRINT "[BPP_EXT] btmtk_bpp_print: current bpp_state(%d)), addr(%02x:%02x:%02x:%02x:%02x:%02x), ReqBefore(%d))"
    BT_BPP_EXT_SEND_PRINT_REQ "[BPP_EXT] BPP send print req: PrintModel(%d), MIME type(%d), ObjSize(%d)"
    BT_BPP_EXT_DISC "[BPP_EXT] btmtk_bpp_disconnect: current bpp_state(%d)"
    BT_BPP_EXT_CONN_CNF "[BPP_EXT] bt_bpp_connect_cnf: current bpp_state(%d), Result(%d)"
    BT_BPP_EXT_GET_ATT_CNF "[BPP_EXT] bt_bpp_getprinterattribute_cnf: current bpp_state(%d), Result(%d)"
    BT_BPP_EXT_PRINT_CNF "[BPP_EXT] bt_bpp_print_cnf: current bpp_state(%d), Result(%d)"
    BT_BPP_EXT_DISC_CNF "[BPP_EXT] bt_bpp_disconnect_cnf: current bpp_state(%d), Result(%d)"
    BT_BPP_EXT_DISC_IND "[BPP_EXT] bt_bpp_disconnect_ind: current bpp_state(%d)"
    BT_BPP_EXT_AUTH_IND "[BPP_EXT] btmtk_bpp_handle_auth_ind: hprinter(%d)"
    BT_BPP_EXT_PROGRESS_IND "[BPP_EXT] btmtk_bpp_handle_progress_ind: hprinter(%d), TxProgress(%d),total(%d)"
    BT_BPP_EXT_JOB_STATUS_IND "[BPP_EXT] btmtk_bpp_handle_job_status_ind: hprinter(%d), PrintJobState(%d), PrinterState(%d), PrinterStateReasons(%d)"
    BT_BPP_EXT_PRINTER_SUPPORT_MIMETYPE "[BPP_EXT] printer SUPPORT doctype:(%d)"
    BT_BPP_EXT_PRINTER_NOT_SUPPORT_MIMETYPE "[BPP_EXT] printer NOT SUPPORT doctype:(%d)"
    BT_BPP_EXT_COMPOSE_IMAGE "[BPP_EXT]bpp_compose_image_to_xhtml_file..."
    BT_BPP_EXT_COMPOSE_OBJECT "[BPP_EXT]bpp_compose_object_to_xhtml_file..."
    BT_BPP_EXT_COMPOSING_RETURN "[BPP_EXT]bpp compose xhtml return (%d)"
    BT_BPP_EXT_DOCTYPE_CHECK_NOT_SAME_PRINTER "[BPP_EXT]bt_bpp_printer_support_doctype: not the SAME printer!, return FALSE"
    BT_BPP_EXT_CAPABILITY_GOTTEN_RETURN "[BPP EXT]bt_bpp_printer_capability_gotten return(%d)"
    BT_BPP_EXT_HDLE_MSG "[BPP_EXT]btmtk_bpp_handle_message(%d)..."
    BT_BPP_EXT_CONNECT_CNF "[BPP EXT]BPP Connect CNF for hprinter:%d result:%d"
    BT_BPP_EXT_DISCONNECT_CNF "[BPP EXT]BPP DISConnect CNF for hprinter:%d result:%d"
    BT_BPP_EXT_DISCONNECT_IND "[BPP EXT]BPP DISConnect IND for hprinter(%d) !"
    BT_BPP_EXT_ENABLE_CB "[BPP EXT]bt_bpp_enable_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d"
    BT_BPP_EXT_DISABLE_CB "[BPP EXT]bt_bpp_disable_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d"
    BT_BPP_EXT_GETATTR_CB "[BPP EXT]bt_bpp_getprinterattr_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d"
    BT_BPP_EXT_PRINT_CB "[BPP EXT]bt_bpp_print_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d"
    BT_BPP_EXT_DISCONNECT_CB "[BPP EXT]bt_bpp_disconnect_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d"
    BT_BPP_EXT_CANCEL_CB "[BPP EXT]bt_bpp_cancel_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d"
    BT_BPP_EXT_IS_DEV_CONNECTED "[BPP EXT]btmtk_bpp_is_dev_connected, cntx_state=%d"
    BT_BPP_EXT_IS_CONNECTED "[BPP EXT]btmtk_bpp_is_connected, cntx_state=%d"



   BPP_ADP_ENTRY_MSG_HDLR "[BPP ADP]bpp_adp_msg_hdlr, cur_oper=%d, cur hprinter=0x%x"
   BPP_ADP_ENTRY_EVENT_CALLBACK "[BPP ADP]bpp_adp_event_callback:ParmHPrint=0x%x,ParmEvent=%d,ParmOper=%d,CntxHPrinter=0x%x,CntxOper=%x"
   BPP_ADP_CONNECT_CONFIRM "[BPP ADP]bpp_adp_connect_confirm,cnf_code=(%d)"
   BPP_ADP_GET_ATTR_CONFIRM "[BPP ADP]bpp_adp_get_attr_confirm(),cnf_code=(%d)"
   BPP_ADP_STATUS_IND "[BPP ADP]bpp_adp_status_ind"
   BPP_ADP_PRINT_DOC_CONFIRM "[BPP ADP]bpp_adp_print_doc_confirm,cnf_code=(%d)"
   BPP_ADP_DISC_CONFIRM "[BPP ADP]bpp_adp_disconnect_confirm,cnf_code=%d"
   BPP_ADP_DISC_IND "[BPP ADP]bpp_adp_disconnect_ind"
    BPP_ADP_ALLOC_CM_CONNID "[BPP ADP]BTBMProfileAllocateConnIndex return (%d)"
    BPP_ADP_RELEASE_CM_CONNID "[BPP ADP]BTBMProfileReleaseConnIndex :(%d)"
    BPP_ADP_ENTRY_INIT "[BPP ADP] bpp_adp_init..."
   BPP_ADP_SEND_MSG2APP "[BPP ADP]BPP_ADP_SEND_MSG2APP,msg_id:%d"
   BPP_ADP_CANCEL_CONFIRM "[BPP ADP]bpp_adp_cancel_confirm,cnf_code=%d"


    BPP_CONNECT_ENTRY_PRINTER "[BPP]bpp_connect_printer,printer_handler=0x%x"
    BPP_MAX_PRINTER_NUM_REACHED "[BPP]existed printer num=(%d), max_num=(%d)"
    BPP_GOEP_REGISTERCLIENT_RETURN "[BPP]GOEP_RegisterClient return (%d)"
    BPP_GOEP_TPCONNECT_RETURN "[BPP]GOEP_TpConnect return (%d)"
    BPP_GOEP_CONNECT_RETURN "[BPP]GOEP_Connect return (%d)"
    BPP_GET_PRINTER_ATTR "[BPP]bpp_get_printer_attribute(), attr_bitmask=(0x%x),prt_handle=0x%x, printer=0x%x, printer->state=(%d)"
    BPP_GOEP_PULL_RETURN "[BPP] GOEP_Pull return (%d)"
    BPP_ENTRY_PRINT_OBJECT "[BPP]bpp_print_object():model=%d,mime=%d,objsize=%d,prt_handle=0x%x,printer=0x%x,state=%d"
    BPP_SIMPLEPUSH_PRINT "[BPP]bpp_simple_push_print..."
    BPP_GOEP_PUSH_RETURN "[BPP]GOEP_Push() objectLen=(%d), return (%d)"
    BPP_ENTRY_CREATE_JOB "[BPP]bpp_create_job..."
    BPP_PROGRESS_RSP_RECEIVED "[BPP]bpp_progress_rsp_received:prt_handle=0x%x,printer=0x%x,state=%d"
    BPP_CANCEL "[BPP]bpp_cancel:prt_handle=0x%x,printer=0x%x,state=%d"
    BPP_DISCONNECT_PRINTER "[BPP]bpp_disconnect_printer:prt_handle=0x%x,printer=0x%x,state=%d"
    BPP_ACCEPT_AUTHCHAL "[BPP]bpp_accept_authentication:prt_handle=0x%x,printer=0x%x,state=%d"
    BPP_REJECT_AUTHCHAL "[BPP]bpp_reject_authentication:prt_handle=0x%x,printer=0x%x,state=%d"
    BPP_JOBCHNL_CALLBACK "[BPP]bpp_job_channel_callback,event->handler:0x%x,event:(%d),printer:0x%x,state=(%d),stschnl=0x%x,sts_state=(%d)"
    BPP_STATUSCHNL_CALLBACK "[BPP]bpp_status_channel_callback,event->handler:0x%x,event:(%d),printer:0x%x,job_state=(%d),sts_state=(%d)"
    BPP_ENTRY_OBEX_CONNECT "[BPP]bpp_obex_connect: channel=%d, pauth=0x%x"
    BPP_DISC_STATUS_CHANNEL "[BPP]bpp_disc_status_channel, status_channel=0x%x, state=(%d)"
    BPP_DISC_JOG_CHANNEL "[BPP]bpp_disc_job_channel, disc_type=%d, printer->state=(%d)"
    BPP_DISC_JOBCHNL_RETURN "[BPP]bpp_disc_job_channel return (%d)"
    BPP_ENTRY_PULL "[BPP]bpp_pull...."
    BPP_DEINIT_PRINTER "[BPP]bpp_deinit_printer (0x%x) "
    BPP_GETEVENT_RESP "[BPP]bpp_parse_get_event_rsp_soap() ret:%d, printer_state:%d, job_state:%d, state_reason:%d"
    BPP_ENTRY_SEND_DOC "[BPP]bpp_send_doc..."
    BPP_DESTORY_STATUSCHNL "[BPP]bpp_destory_status_channel..."
    BPP_FS_OPEN_HANDLE_INLINE_ITEM "[BPP]bpp_get_inline_item(), pfile_obj->fh:%d"
    BPP_CREATEJOB_SOAPRSP_JOB_ID "[BPP]create_job_rsp_soap, job_id:%d"
    BPP_CREATE_JOB_INFO_OPERATION_STATUS "[BPP]create_job_rsp_soap, value:%d, ret:%d"
    BPP_READ_XHTML_MEET_INVLID_IMAGE_FILE_HANDLER "[BPP]bpp_read_xhtml() invlid image file handler, pdu_out:%d"
    BPP_RESULT_OF_READ_DATA "[BPP]bpp_compose_multiplexed_data(), pdu_out:%d, psend_obj->total_size_send:%d"
    BPP_CREATE_JOB_END "[BPP]bpp_create_job_end"
    BPP_CREATE_JOB_INFO "[BPP]bpp_create_job info, job_id:%d, ret:%d"
    BPP_OBS_WRITE_SOAPRSP "[BPP]bpp_obs_write_soaprsp,recv_soap_len::%d,current_req:%d"
    BPP_WRITE_SOAPRSP_FAILED "[BPP]bpp_obs_write_soaprsp return failed; try_again=%d,fh=%d; fs_write=%d"
    BPP_PARSE_SOAPRSP_RETURN "[BPP] bpp_parse_rsp_soap: xml_parse return: (%d)"
    BPP_LOADDATA_FROMFILE_FAILED "[BPP]bpp_load_data_from_file read file error(%d),Sfile remain size %d"
    BPP_IS_SOAP_COMPLETE_INFO1 "[BPP]bpp_is_soap_complete() content_header_len %d,body_len %d,buf_len %d"
    BPP_IS_SOAP_COMPLETE_INFO2 "[BPP]bpp_is_soap_complete() soap_rsp_len %d,buf_len %d"
    BPP_DEINIT_PRINTER_WITH_STSCHNL "[BPP]bpp_destory_printer error, sts channel exist, state: %d"
    BPP_TPDISCONNECT_STSCHNL_RETURN "[BPP]GOEP_TpDisconnect status channel return(%d)"
    BPP_TPDISCONNECT_JOBCHNL_RETURN "[BPP]GOEP_TpDisconnect job channel return(%d)"
    BPP_DISCONNECT_PRINTER_RETURN "[BPP] bpp_disconnect_printer return(%d)"
    BPP_CONNECT_STATUS_CHANNEL "[BPP]bpp_connect_status_channel..."
    BPP_WAIT_FOR_STSCHNL_DISCONNECTED "[BPP] WAIT for status channel disconnected!"
    BPP_STSCHNL_GETEVENT_FINISH "[BPP]status channel: job status: completed or aborted, call GOEP_ClientAbort(). evt=%d,sts_state=%d"
    BPP_CREATEJOBEND_STATE_ERROR "[BPP]!!!bpp_create_job_end: but status_channel->state =(%d)"
    BPP_START_GET_EVENT "[BPP]bpp_get_event..."
    BPP_EMBED_OBJECT_INTO_XHTML "[BPP]bpp_embed_object_into_xhtml, raw type=(%d)"
    BPP_COMPOSE_XHTML_FAILED "[BPP]bpp_compose_object_into_xhtml FAILED, ret=%d"
    BPP_EXEC_GET_PRINTER_ATTR "[BPP]bpp_exec_get_printer_attributes: attr_bitmask=0x%x, printer=0x%x, printer state=(%d)"
    BPP_ENTRY_EXEC_PRINT_OBJECT "[BPP]bpp_exec_print_object:model=%d,mime=%d,objsize=%d,printer state=(%d)"
    BPP_PRINTER_CAPA_GOTTEN_RETURN "[BPP]bpp_printer_capability_gotten return:%d"
    BPP_PRINTER_SUPPORT_MIMETYPE "[BPP]printer SUPPORT doc type:(%d)"
    BPP_PRINTER_NOT_SUPPORT_MIMETYPE "[BPP]printer does NOT SUPPORT doc type:(%d)!"
    BPP_GET_PRINTER_ATTR_END "[BPP]bpp_get_printer_attr_end!"
    BPP_PRE_PROCESS_OBJECT_DATA "[BPP]bpp_pre_process_object_data..."
    BPP_PRE_PROCESS_OBJECT_DATA_RETURN "[BPP]bpp_pre_process_object_data return(%d)"
    BPP_COMPOSE_VCARD2XHTML "[BPP]bpp_compose_vcard_to_xhtml..."
    BPP_PARSE_VCARD_FILE2STRUCT_RETURN "[BPP]btmtk_vcard_parse_file_to_struct return (%d)"
    BPP_IS_UTF8_TEXT_RETURN "[BPP]bpp_is_file_utf8_encoding return (%d)"
    BPP_GET_FILE_CHARSET_RETURN "[BPP]btmtk_chset_get_file_encoding return(%d)"
    BPP_CONVERT_FILE_TO_UTF8 "[BPP]bpp_convert_filecontent_to_utf8..."
    BPP_CONVERT_TO_UTF8_RETURN "[BPP]btmtk_chset_set_file_encoding return(%d)"
    BPP_PRE_PRECESS_OBJECTDATA_FAILED "[BPP]bpp_pre_process_object_data FAILED(%d)!"




    BT_HFG_API_INIT "[HFG][API] hfg_init"
    BT_HFG_API_REGISTER "[HFG][API] hfg_register(0x%X, 0x%X, %d)"
    BT_HFG_API_DEREGISTER "[HFG][API] hfg_deregister(0x%X)"
    BT_HFG_API_CREATE_SERVICE_LINK "[HFG][API] hfg_create_service_link(0x%X, 0x%02X%02X%02X%02X%02X%02X)"
    BT_HFG_API_DISCONNECT_SERVICE_LINK "[HFG][API] hfg_disconnect_service_link(0x%X) : state=0x%X"
    BT_HFG_API_CREATE_AUDIO_LINK "[HFG][API] hfg_create_audio_link(0x%X) : state=0x%X, IsAudioUp=%d"
    BT_HFG_API_DISCONNECT_AUDIO_LINK "[HFG][API] hfg_disconnect_audio_link(0x%X) : state=0x%X, IsAudioUp=%d"
    BT_HFG_API_ACCEPT_CONNECT "[HFG][API] hfg_accept_connect(0x%X)"
    BT_HFG_API_REJECT_CONNECT "[HFG][API] hfg_reject_connect(0x%X)"
    BT_HFG_API_SET_INDICATOR "[HFG][API] hfg_set_indicator_value(0x%X, %d, %d, 0x%X) : bHeadset=%d"
    BT_HFG_API_SEND_RESULT "[HFG][API] hfg_send_hf_results(0x%X, %d, %d, %d, 0x%X, %d)"
    BT_HFG_API_ENABLE_SNIFF_MODE "[HFG][API] hfg_enable_sniff_mode(0x%X, %d)"
    BT_HFG_CBK_SDP_QUERY "[HFG][CBK] hfgQueryCallback(0x%X, %d, %d, 0x%X)"
    BT_HFG_CBK_CMGR_CALLBACK "[HFG][CBK] HfgServiceConnectionCallback : Channel=0x%X, event=%d, status=%d"
    BT_HFG_CBK_RF_CALLBACK "[HFG][CBK] HfgRfCallback : Channel=0x%X, event=%d, status=%d"
    BT_HFG_INFO_SDP_QUERY_COMPLETE "[HFG][INFO] SDP query complete. Channel no=%d"
    BT_HFG_REGISTER_HFG_SUCCESS "[HFG][INFO] hfg_register success : Channel=0x%X"
    BT_HFG_INFO_REGISTER_SDP "[HFG][INFO] HfgRegisterSdpServices(%d)"
    BT_HFG_INFO_DEREGISTER_SDP "[HFG][INFO] HfgDeregisterSdpServices(%d)"
    BT_HFG_INFO_REGISTER_SERVER_CHANNEL "[HFG][INFO] HfgRegisterServerChannel(0x%X)"
    BT_HFG_INFO_DEREGISTER_SERVER_CHANNEL "[HFG][INFO] HfgDeregisterServerChannel(0x%X)"
    BT_HFG_INFO_OPEN_ACL_CHANNEL "[HFG][INFO] HfgOpenChannel(0x%X, 0x%02X%02X%02X%02X%02X%02X)"
    BT_HFG_INFO_OPEN_ACL_CHANNEL_SUCCESS "[HFG][INFO] CMGR_CreateDataLink return SUCCESS (ACL is already created in stack)"
    BT_HFG_INFO_CLOSE_ACL_CHANNEL "[HFG][INFO] HfgCloseChannel(0x%X)"
    BT_HFG_INFO_START_SERVICE_QUERY "[HFG][INFO] HfgStartServiceQuery(0x%X, %d) : bHeadset=%d"
    BT_HFG_INFO_AUDIO_EXIST "[HFG][INFO] Audio connection already exists"
    BT_HFG_INFO_NO_AUDIO_CONNECTION "[HFG][INFO] No audio connection exist"
    BT_HFG_INFO_AUDIO_CONENCTING "[HFG][INFO] Connecting audio is on going"
    BT_HFG_INFO_AUDIO_DISCONENCTING "[HFG][INFO] Disconnecting audio is on going"
    BT_HFG_INFO_CALLBACK_TO_ADP "[HFG][INFO] HfgAppCallback(0x%X, %d, %d, %d)"
    BT_HFG_INFO_CHANGE_STATE "[HFG][INFO] Change state from 0x%X to 0x%X"
    BT_HFG_INFO_SEND_RESULT "[HFG][INFO] sendResults(0x%X, 0x%X) : CMD=0x%X"
    BT_HFG_INFO_AT_SEND_RESULT "[HFG][INFO] AtSendResults(0x%X, 0x%X, %d) : CMD=0x%X"
    BT_HFG_INFO_AT_SEND_COMPLETE "[HFG][INFO] AtSendComplete(0x%X, 0x%X)"
    BT_HFG_INFO_AT_SEND_REMAIN_DATA "[HFG][INFO] Send remain data : remain=%d"
    BT_HFG_INFO_RESPONSE_QUEUE_EMPTY "[HFG][INFO] Response queue is empty"
    BT_HFG_INFO_RESPONSE_QUEUE_NOT_EMPTY "[HFG][INFO] Response queue is not empty"
    BT_HFG_INFO_SEND_RF_PACKET "[HFG][INFO] AtSendRfPacket(0x%X, 0x%X)"
    BT_HFG_INFO_PARSE_COMMAND "[HFG][INFO] AtParseCommand(0x%X, 0x%X, %d, 0x%X)"
    BT_HFG_INFO_AT_DECODE_CONTINUE "[HFG][INFO] AT ecode state is set to continue"
    BT_HFG_INFO_RF_PACKET "[HFG][INFO] Rf Packet : len=%d, data=%s"
    BT_HFG_INFO_FLUSH_RESPONSE "[HFG][INFO] HfgHfgFlushRespQueue(0x%X)"
    BT_HFG_INFO_DISCONNECTING "[HFG][INFO] HfgDisconnecting(0x%X) : state=0x%X"
    BT_HFG_INFO_DISCONNECTING_SDP "[HFG][INFO] SDP query ongoing"
    BT_HFG_INFO_DISCONNECTING_SCO_CONNECT "[HFG][INFO] SCO connecting ongoing"
    BT_HFG_INFO_DISCONNECTING_SCO_DISCONNECT "[HFG][INFO] SCO disconnecting ongoing"
    BT_HFG_INFO_DISCONNECTING_RFCOMM_CONFIRM "[HFG][INFO] Substate is I2/O3. Waiting RFCOMM confirm"
    BT_HFG_INFO_DISCONNECTING_CMGR_CONFIRM "[HFG][INFO] Substate is O1. Waiting CMGR data link confirm"
    BT_HFG_INFO_DISCONNECTING_REMOVE_AUDIO "[HFG][INFO] Remove audio link : %d"
    BT_HFG_INFO_DISCONNECTING_DEREGISTER_SCO "[HFG][INFO] Deregister SCO handler"
    BT_HFG_INFO_DISCONNECTING_CLOSE_RF "[HFG][INFO] Close RFCOMM channel : %d"
    BT_HFG_INFO_ALLOC_RF_CHANNEL "[HFG][INFO] HfgAllocRfChannel()"
    BT_HFG_INFO_FREE_RF_CHANNEL "[HFG][INFO] HfgFreeRfChannel(0x%X)"
    BT_HFG_INFO_CHANNEL_STATE "[HFG][INFO] state=0x%X, linkFlags=0x%X, flags=0x%X, queryFlags=0x%X"
    BT_HFG_INFO_CONNECT_TIMER_CANCELED "[HFG][Info] HFG connection timer canceled"
    BT_HFG_WARN_WRONG_CLASS_ID "[HFG][WARN] Wrong class id : correct=0x%X, wrong=0x%X"
    BT_HFG_WARN "[HFG][WARN] file=%d, line=%d"
    BT_HFG_WARN_1 "[HFG][WARN] file=%d, line=%d, p1=%d"
    BT_HFG_WARN_CHANNEL_NOT_REGISTERED "[HFG][WARN] Channel not registered : Channel=0x%X"
    BT_HFG_WARN_CHANNEL_ALREADY_REGISTERED "[HFG][WARN] Channel already registered : Channel=0x%X"
    BT_HFG_WARN_NO_CONNECTION "[HFG][WARN] No connection : Channel=0x%X"
    BT_HFG_WARN_REJECT_CHANNEL_FAIL "[HFG][WARN] RF_RejectChannel failed : status=%d"
    BT_HFG_WARN_ACCEPT_CHANNEL_FAIL "[HFG][WARN] RF_AcceptChannel failed : status=%d"
    BT_HFG_WARN_OPEN_CHANNEL_FAIL "[HFG][WARN] RF_OpenClientChannel failed : status=%d"
    BT_HFG_WARN_INVALID_INDICATOR_VAL "[HFG][WARN] Invalid indicator value : ind=%d, min=%d, max=%d, value=%d"
    BT_HFG_WARN_INDICATOR_REPORT_DISABLED "[HFG][WARN] Indicator report is disabled"
    BT_HFG_WARN_INVALID_INDICATOR "[HFG][WARN] Invalid indicator : %d"
    BT_HFG_WARN_RESPONSE_ALREADY_QUEUED "[HFG][WARN] Response already queued : response=0x%X"
    BT_HFG_WARN_SEND_RF_PACKET_FAILED "[HFG][WARN] RF_SendData failed : status=%d"
    BT_HFG_WARN_ME_ENCODE_FAIL "[HFG][WARN] ME_Encode failed : status=%d"
    BT_HFG_WARN_ME_DECODE_FAIL "[HFG][WARN] ME_Decode failed : status=%d"
    BT_HFG_WARN_UNRECOGNIZED_SDP_ATTR "[HFG][WARN] Unrecognized SDP attribute : %d"
    BT_HFG_ERROR_UNEXPECTED_STATE "[HFG][ERR] Unexpected state : file=%d, line=%d, Channel=0x%X, state=0x%X"
    BT_HFG_ERROR "[HFG][ERR] file=%d, line=%d"
    BT_HFG_ERROR_1 "[HFG][ERR] file=%d, line=%d, p1=%d"
    BT_HFG_ERROR_NO_FREE_RESPONSE "[HFG][ERR] HfgAllocResponse : Run out of free response slot"
    BT_HFG_ERROR_INSERT_FREE_RESPONSE "[HFG][ERR] HfgAllocResponse : Insert response already in the free response queue"
    BT_HFG_CIEV_REQ "=====[BTAP][BT_HFG_CIEV_REQ]===== indication: %d, value: %d, cid: %d"
    BT_HFG_RING_REQ "=====[BTAP][BT_HFG_RING_REQ]===== aNoLen: %d"
    BT_HFG_REJECT_IND "=====[BTAP][BT_HFG_REJECT_IND]====="
    BT_HFG_ANSWER_IND "=====[BTAP][BT_HFG_ANSWER_IND]====="
    BT_HFG_AT_CMD_IND "=====[BTAP][BT_HFG_AT_CMD_IND]====="
    BT_HFG_CHLD_IND "=====[BTAP][BT_HFG_CHLD_IND]====="

    BT_HFG_ADP_STATUS "[HFP_ADP] hfg status: hfg_state=%d, hsg_state=%d, hfg_active=%d, hsg_active=%d, sco_exist=%d"
    BT_HFG_ADP_STATE_CHANGE_IND "[HFP_ADP] hfg state change: %d --> %d"
    BT_HFG_ADP_ACTIVATE_TIMEOUT_HDLER "[HFP_ADP] hfg activate_timeout_hdler"
    BT_HFG_ADP_DEACTIVATE_TIMEOUT_HDLER "[HFP_ADP] hfg deactivate_timeout_hdler"
    BT_HFG_ADP_CONNECT_TIMEOUT_HDLER "[HFP_ADP] hfg connect_timeout_hdler"
    BT_HFG_ADP_DISCONNECT_TIMEOUT_HDLER "[HFP_ADP] hfg disconnect_timeout_hdler"
    BT_HFG_ADP_SCO_CONNECT_TIMEOUT_HDLER "[HFP_ADP] sco_connect_timeout_hdler"
    BT_HFG_ADP_SCO_DISCONNECT_TIMEOUT_HDLER "[HFP_ADP] sco_disconnect_timeout_hdler"
    BT_HFG_ADP_START_TIMER "[HFP_ADP] start timer, timer_id=%d, timer_duration=%d"
    BT_HFG_ADP_STOP_TIMER "[HFP_ADP] stop timer, timer_id=%d"
    BT_HFG_ADP_HFP_VERSION "[HFP_ADP] hfg version: hfp version=0x%04x"
    BT_HFG_ADP_HFP_CONNECT_CNF_ACCEPT "[HFP_ADP] hfga_connect_accept_confirmation_accept: hfp channel=0x%x, rfc channel=0x%x"
    BT_HFG_ADP_HFP_CONNECT_CNF_REJECT "[HFP_ADP] hfga_connect_accept_confirmation_reject: rfc channel=0x%x"
    BT_HFG_ADP_HFP_REJECT_RFC_ALC_FAILED "[HFP_ADP] Reject RFCOMM open indication: rfc channel=0x%x, create data link failed"
    BT_HFG_ADP_HFP_REJECT_RFC_GET_HFG_CH_FAILED "[HFP_ADP] Reject RFCOMM open indication: rfc channel=0x%x, get closed hfp channel failed"
    BT_HFG_ADP_HFP_REJECT_RFC_SCO_REG_FAILED "[HFP_ADP] Reject RFCOMM open indication: rfc channel=0x%x, register sco handler failed"
    BT_HFG_ADP_HFP_CHANNEL_STATE "[HFP_ADP] HFP channel state: hfp channel=0x%x, state=%d"
    BT_HFG_ADP_HFP_STORE_REMOTE_DEV "[HFP_ADP] Store remote device: remote device, nap=0x%04x, uap=0x%02x, lap=0x%06x,"
    BT_HFG_ADP_HFP_RESET_REMOTE_DEV "[HFP_ADP] Reset remote device"
    BT_HFG_ADP_HFP_REACH_MAX_QUEUED_BUFFER_SIZE "[HFP_ADP] Reach max queued buffer size, disconnect HFP"
    BT_HFG_ADP_HFP_FREE_QUEUED_BUFFER "[HFP_ADP] free queued buffer, buffer=%x"
    BT_HFG_ADP_HFP_FREE_ALL_QUEUED_BUFFER "[HFP_ADP] free all queue buffer, queued buffer size=%d"
    BT_HFG_ADP_HFP_RESET_QUEUED_BUFFER "[HFP_ADP] reset queue buffer, reset buffer=%x, queued buffer size=%d"
    BT_HFG_ADP_HFP_STORE_RFCOMM_CHANNEL "[HFP_ADP] hfga_store_rf_channel, rfChannel=%x"
    BT_HFG_ADP_HFP_CLOSE_CHANNEL "[HFP_ADP] HfgCloseChannel Channel=%x, Channel->state=%x"
    BT_HFG_ADP_HFP_FIND_CHANNEL "[HFP_ADP] HfgFindChannel hfgChannel=%x"
    BT_HFG_ADP_HFP_GET_CLOSED_CHANNEL "[HFP_ADP] HfgGetClosedChannel hfgChannel=%x"
    BT_HFG_ADP_HFP_ALLOC_RF_CHANNEL "[HFP_ADP] HfgAllocRfChannel rfChannel=%x"
    BT_HFG_ADP_HFP_FREE_RF_CHANNEL "[HFP_ADP] HfgFreeRfChannel rfChannel=%x"
    BT_HFG_ADP_HFP_RF_ACCEPT_CHANNEL "[HFP_ADP] RF_AcceptChannel status=%x"
    BT_HFG_ADP_HFP_REGISTER_RF_SER_CHANNEL "[HFP_ADP] RF_RegisterServerChannel, rfChannel=%x"
    BT_HFG_ADP_HFP_DEREGISTER_RF_SER_CHANNEL "[HFP_ADP] RF_DeregisterServerChannel, rfChannel=%x"
    BT_HFG_ADP_HFP_RF_CALLBACK "[HFP_ADP] HfgRfCallback, event=%d, rfChannel=%x"
    BT_HFG_ADP_HFP_SEQ1 "[HFP_ADP] Seq1 =0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x"
    BT_HFG_ADP_HFP_SEQ2 "[HFP_ADP] Seq2 =0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x"
    BT_HFG_ADP_HFP_VERNO "[HFP_ADP] verno, verno=%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c"
    BT_HFG_ADP_HFP_RAND_NUM "[HFP_ADP] rand number, rand=0x%08x"
    BT_HFG_ADP_HFP_CONNECT_SCO "[HFP_ADP] HFG_CreateAudioLink, status=%d"
    BT_HFG_ADP_HFP_DISCONNECT_SCO "[HFP_ADP] HFG_DisconnectAudioLink, status=%d"
    BT_HFG_ADP_HFP_SPK_REQ "[HFP_ADP] : hfga speaker volume req, result=%d, cnf result=%d, gain=%d"
    BT_HFG_ADP_HFP_SPK_SENT "hfga_tx: +VGS:%d"
    BT_HFG_ADP_HFP_SPK_RCV "hfga_rx: AT+VGS=%d"
    BT_HFG_ADP_HFP_OK_SENT "hfga_tx: OK"
    BT_HFG_ADP_HFP_MIC_REQ "[HFP_ADP] : hfga mic volume req, result=%d, cnf result=%d, gain=%d"
    BT_HFG_ADP_HFP_MIC_SENT "hfga_tx: +VGM:%d"
    BT_HFG_ADP_HFP_MIC_RCV "hfga_rx: AT+VGM=%d"
    BT_HFG_ADP_SPK_GAIN_REQ "[HFP_ADP]HFG speaker_gain_req_hdler: msg_p->gain=%d, hfga_cntx_p->spk_gain=%d "
    BT_HFG_ADP_HFP_RX "[HFP_ADP]hfga_rx: %s"
    BT_HFG_ADP_HFP_TX "[HFP_ADP]hfga_tx: %s"
    BT_HFG_SDPCALLBACK_ALLOC_CHANNEL "hfgQueryCallback Channel->hfgChannel=%x"
    BT_HFG_CMGR_CALLBACK "[HFG] HfgServiceConnectionCallback, event = %d, status=%d"
    BT_HFG_SDPQUERY_CALLBACK "[HFG] SDP query callback, result=%d"
    BT_HFG_START_SDPQUERY "[HFG] Start SDP query..."
    BT_HFG_CREATE_ACL_LINK "[HFG] HfgCreateAclLink..."
    BT_HFG_CREATE_SERVICE_LINK "[HFG] HFG_CreateServiceLink..."
    BT_HFG_CREATE_AUDIO_LINK "[HFG] HFG_CreateAudioLink..."
    BT_HFG_DISCONNECT_AUDIO_LINK "[HFG] HFG_DisconnectAudioLink..."
    BT_HFG_DISCONNECT_SERVICE_LINK "[HFG] HFG_DisconnectServiceLink...state=%d,linkFlags=%d"
    BT_HFG_SUPPORT_ESCO_RETURN "[HFG]hfga_is_profile_support_esco return (%d)"
    BT_HFG_CALL_CMGR_CREATEAUDIOLINK "[HFG] call CMGR_CreateAudioLink..."
    BT_HFG_WAITFOR_SCO_CON_TO_CLOSE_DATALINK "[HFG]SCO is CONNECTING, set flag,wait for AUDIO_LINK_CON to close data link"
    BT_HFG_SCO_CON_COME_SO_CLOSE_DATALINK "[HFG]AUDIO_LINK_CON(which is being waiting) comes, so close data link."
    BT_HFG_CLOSE_DATALINK "[HFG]HfgCloseDataLink..."
    BT_HFG_DEFERED_DEREGISTERATION "[HFG][ADP] Defered deregistration channel=0x%x"
    BT_HFG_DEFER_DEREGISTERATION "[HFG] State is not closed, defer deregisteration : channel=0x%x, state=%x"
    BT_HFG_SDPQUERY_PRECALLBACK "[HFG] SDP query precallback : attrib_index=%d, result=%d"
    BT_HFG_SDPQUERY_HF_RECORD_FOUND "[HFG] SDP query : HF record found, idx=%d result=%d"
    BT_HFG_SDPQUERY_HF_ATTRIB_FOUND "[HFG] SDP query : attrib found status=%d, result=%d"


    BT_HSG_ADP_STATE_CHANGE_IND "[HSP_ADP] hsg state change: %d --> %d"
    BT_HSG_ADP_ACTIVATE_TIMEOUT_HDLER "[HSP_ADP] hsg activate_timeout_hdler"
    BT_HSG_ADP_DEACTIVATE_TIMEOUT_HDLER "[HSP_ADP] hsg deactivate_timeout_hdler"
    BT_HSG_ADP_CONNECT_TIMEOUT_HDLER "[HSP_ADP] hsg connect_timeout_hdler"
    BT_HSG_ADP_DISCONNECT_TIMEOUT_HDLER "[HSP_ADP] hsg disconnect_timeout_hdler"
    BT_HSG_ADP_START_TIMER "[HSP_ADP] start timer, timer_id=%d, timer_duration=%d"
    BT_HSG_ADP_STOP_TIMER "[HSP_ADP] stop timer, timer_id=%d"
    BT_HSG_ADP_HSP_STORE_REMOTE_DEV "[HSP_ADP] Store remote device: remote device, nap=0x%04x, uap=0x%02x, lap=0x%06x,"
    BT_HSG_ADP_HSP_RESET_REMOTE_DEV "[HSP_ADP] Reset remote device"
    BT_HSG_ADP_HSP_SPK_REQ "[HSP_ADP] : hsga speaker volume req, result=%d, cnf result=%d, gain=%d"
    BT_HSG_ADP_HSP_SPK_SENT "hsga_tx: +VGS:%d"
    BT_HSG_ADP_HSP_SPK_RCV "hsga_rx: AT+VGS=%d"
    BT_HSG_ADP_HSP_OK_SENT "hsga_tx: OK"
    BT_HSG_ADP_HSP_MIC_REQ "[HSP_ADP] : hsga mic volume req, result=%d, cnf result=%d, gain=%d"
    BT_HSG_ADP_HSP_MIC_SENT "hsga_tx: +VGM:%d"
    BT_HSG_ADP_HSP_MIC_RCV "hsga_rx: AT+VGM=%d"
    BT_HSG_ADP_HSP_TX "[HSG]hsga_tx: %s"
    BT_HSG_SET_CONNECTLEVEL "[HSG]AG: ConnectLevel %d to %d"
    BT_HSG_RECEIVE_INVALID_DATA "[HSG]AG: invalid data (%s) received (len: %d)"
    BT_HSG_CMGR_CALLBACK "[HSG]AG: AgServiceConnectionCallback, event=%d, status=%d"
    BT_HSG_SDPQUERY_CALLBACK "[HSG] SDP query callback, result=%d"
    BT_HSG_START_SDPQUERY "[HSG] Start SDP query..."
    BT_HSG_RFCOMM_CALLBACK "[HSG] RFCOMM callback, event=%d, Channel=%x"
    BT_HSG_SEND_DATA "[HSG]Send Data: len=%d, data=%s"
    BT_HSG_DO_CONNECT "[HSG] AG_DoConnect...state=%d, ConnectLevel=%d"
    BT_HSG_DO_DISCONNECT "[HSG] AG_DoDisconnect...state=%d, ConnectLevel=%d"

    HFG_RFCOMM_INCOMING_HANDSFREE_CONNECTION "HFG: RFCOMM incoming hands-free connection"
    HF_RFCOMM_HANDSFREE_CONNECTION_CLOSED "HF: RFCOMM hands-free connection closed"
    HF_UNABLE_TO_SEND_RFCOMM_PACKET "HF: Unable to send RFCOMM packet"
    HFG_UNABLE_TO_SEND_RFCOMM_PACKET "HFG: Unable to send RFCOMM packet"
    HFG_RFCOMM_HANDSFREE_CONNECTION_ESTABLISHED "HFG: RFCOMM hands-free connection established"
    HFG_RFCOMM_HANDSFREE_CONNECTION_CLOSED "HFG: RFCOMM hands-free connection closed"
    HFG_SDP_QUERY_FAILED "HFG: SDP Query failed"
    HF_RFCOMM_HANDSFREE_CONNECTION_ESTABLISHED "HF: RFCOMM hands-free connection established"
    HF_RFCOMM_INCOMING_HANDSFREE_CONNECTION "HF: RFCOMM incoming hands-free connection"
    HF_RFCOMM_HANDSFREE_DATA_RECEIVED "HF: RFCOMM hands-free data received"
    HFG_RFCOMM_HANDSFREE_DATA_RECEIVED "HFG: RFCOMM hands-free data received"
    HFG_COULD_NOT_OPEN_RFCOMM_CHANNEL "HFG: Could not open RFCOMM channel"
    AG_BTEVENT_SCO_DISCONNECT_RECEIVED "AG: BTEVENT_SCO_DISCONNECT received"
    AGCREATEACLLINK_CMGR_CREATEDATALINK "AgCreateAclLink CMGR_CreateDataLink"
    AG_RFC_UNKNOWN_EVENT_xI "AG: RFC Unknown event: %i"
    HS_COULD_NOT_BRING_DEVICE_OUT_OF_PARK_MODE "HS: Could not bring device out of Park Mode."
    HS_SECURITY_MODE_3_COMPLETE "HS: Security Mode 3 Complete."
    AG_CONNECTLEVEL_AG_RFCOMMOPEN_DISCONNECTING "AG: ConnectLevel: AG_RFCOMMOPEN (disconnecting)"
    AG_RF_OPENCLIENTCHANNEL_FAILED "AG: RF_OpenClientChannel failed!!"
    HS_PAIRING_FAILED "HS: Pairing failed"
    AG_RADIO_IS_DOWN "AG: Radio is down"
    HS_ERROR_MESSAGE_RECEIVED "HS: ERROR message received"
    AG_AUDIO_SCO_DISONNECT_REQUEST_FAILED_xD "AG: Audio: SCO disonnect request failed. %d"
    AG_RFEVENT_CLOSED_RECEIVED "AG: RFEVENT_CLOSED received"
    AG_CLOSING_RFCOMM "AG: Closing RFCOMM"
    HS_RFCOMM_CHANNEL_FAILED_TO_OPEN_ABORTING_CONNECTION "HS: RFCOMM Channel failed to open, aborting connection"
    AG_CLOSING_ACL "AG: Closing ACL"
    AG_SCO_CONNECT_HAD_AN_ERROR "AG: SCO connect had an error!!"
    AG_SCO_CONNECT_PENDING "AG: SCO connect pending."
    AG_LINK_DISCONNECT_FAILED_ERROR__xI "AG: Link Disconnect failed. Error = %i"
    HS_LINK_DISCONNECT_FAILED_ERROR__xI "HS: Link Disconnect failed. Error = %i"
    AG_CLOSING_SCO "AG: closing sco"
    HS_ACL_LINK_DISCONNECTED "HS: ACL link Disconnected."
    HS_SCO_DISCONNECTED "HS: SCO Disconnected."
    ATCKPD200_RECEIVED "AT+CKPD=200 received"
    HS_HCI_INITIALIZATION_FAILED "HS: HCI Initialization FAILED"
    HSP_TO_HEADSET_SUCCESS "HSP to headset success"
    HS_PIN_REQUEST_RECEIVED "HS: PIN Request Received."
    ERROR_DELETING_RECORD "Error deleting record"
    HSP_SDP_QUERY_FAILED "HSP: SDP Query Failed"
    AG_AGCONNECTLEVEL__AG_ACLOPEN "AG: AG(ConnectLevel) = AG_ACLOPEN"
    HS_SCO_CONNECT_ERROR_IND_xD "HS: SCO connect error (ind) %d"
    HS_SDP_QUERY_FAILED_TO_START_ABORTING_CONNECTION "HS: SDP query failed to start, aborting connection"
    HS_SDP_PARSEATTRIBUTES_SUCCEEDED_RFCOMM_CHANNEL__xDUPDATED_BUFF_LEN__xD "HS: SDP_ParseAttributes succeeded! RFCOMM Channel = %d,Updated Buff Len = %d"
    AG_ACL_LINK_CONNECT_FAILED "AG: ACL link connect failed!"
    HS_SDP_PARSEATTRIBUTES__FAILURE "HS: SDP_ParseAttributes - Failure!"
    AG_AUDIO_SCO_CONNECT_REQUEST_FAILED_xD "AG: Audio: SCO connect request failed. %d"
    HS_INCOMING_CALL "HS: Incoming Call..."
    AG_ACLOPEN__FALSE "AG: AclOpen == FALSE"
    HS_HEADSET_DEINITIALIZED "HS: Headset Deinitialized"
    AG_DEINITIALIZED "AG: Deinitialized"
    HS_SDP_PARSEATTRIBUTES__CONTINUATION_STATE_QUERY_AGAIN "HS: SDP_ParseAttributes - Continuation State. Query Again!"
    AG_COULD_NOT_BRING_DEVICE_OUT_OF_PARK_MODE "AG: Could not bring device out of Park Mode."
    HS_SETTING_GENERAL_ACCESSIBLE_MODE "HS: Setting General Accessible mode."
    HS_HEADSET_OUTBOUND_LINK_FAILED "HS: Headset: Outbound Link Failed."
    DELETING_OLD_DEVICE_RECORD "Deleting old device record"
    AG_CONNECTLEVEL_AG_SCOOPEN "AG: ConnectLevel: AG_SCOOPEN"
    HS_HEADSET_SDP_QUERY_FAILED "HS: Headset: SDP Query Failed"
    HS_UNKNOWN_RFCOMM_EVENT_xI "HS: Unknown RFCOMM event: %i"
    AG_RFCOMM_COMMAND_RECEIVED_BEFORE_A_HEADSET_HAS_BEEN_REGISTERED "AG: RFCOMM command received before a headset has been registered"
    AG_AG_BUTTONPRESSED_STARTING_MTKAGCLOSELINK "AG: AG_ButtonPressed starting MTKAgCloseLink()"
    INVALID_VOLUME_GAIN_LEVEL "Invalid volume gain level"
    AG_THE_AUDIO_GATEWAY_HAS_NOT_BEEN_INITIALIZED "AG: The Audio Gateway has not been initialized."
    BT_HSP_FINDDEVICE_FAIL "[HSP] DS_FindDevice return NULL! Call RF_CloseChannel..."

    HFG_SERVICE_CONNECT_REQ "HFG_EVENT_SERVICE_CONNECT_REQ"
    HFG_MEMORY_DIAL "HFG_EVENT_MEMORY_DIAL"
    HFG_REPORT_MIC_VOLUME "HFG_EVENT_REPORT_MIC_VOLUME"
    HFG_LIST_CURRENT_CALLS "HFG_EVENT_LIST_CURRENT_CALLS"
    HFG_REPORT_SPK_VOLUME "HFG_EVENT_REPORT_SPK_VOLUME"
    HFG_DIAL_NUMBER "HFG_EVENT_DIAL_NUMBER"



    HFG_HANGUP "HFG_EVENT_HANGUP"


    HFG_ANSWER_CALL "HFG_EVENT_ANSWER_CALL"

    HFG_RESPONSE_COMPLETE "HFG_EVENT_RESPONSE_COMPLETE"
    HSG_MVOLUMEDOWN_REQ "HSG_MVOLUMEDOWN_REQ"

    HFG_AT_COMMAND_DATA "HFG_EVENT_AT_COMMAND_DATA"

    HFG_HANDSFREE_FEATURES "HFG_EVENT_HANDSFREE_FEATURES features=%s"


    HSG_CONNECT_REQ "HSG_CONNECT_REQ"
    HFG_REDIAL "HFG_EVENT_REDIAL"
    HFG_ENABLE_CALLER_ID "HFG_EVENT_ENABLE_CALLER_ID"
    HSG_DEACTIVATE_REQ "HSG_DEACTIVATE_REQ"
    HFG_SERVICE_DISCONNECTED "HFG_EVENT_SERVICE_DISCONNECTED"

    HSG_SVOLUMEDOWN_REQ "HSG_SVOLUMEDOWN_REQ"
    HFG_AUDIO_DISCONNECTED "HFG_EVENT_AUDIO_DISCONNECTED"

    HFG_QUERY_SUBSCRIBER_NUMBER "HFG_EVENT_QUERY_SUBSCRIBER_NUMBER"



    HFG_GET_LAST_VOICE_TAG "HFG_EVENT_GET_LAST_VOICE_TAG"


    BT_HSG_BUTTONPRESS_REQ "BT_HSG_BUTTONPRESS_REQ"
    HFG_ENABLE_CALL_WAITING "HFG_EVENT_ENABLE_CALL_WAITING"
    HFG_GENERATE_DTMF "HFG_EVENT_GENERATE_DTMF"
    HSG_AG_CONNECTED "AG_CONNECTED"

    HSG_MVOLUMEUP_REQ "HSG_MVOLUMEUP_REQ"

    HFG_SERVICE_CONNECTED "HFG_EVENT_SERVICE_CONNECTED"



    HFG_CALL_HOLD "HFG_EVENT_CALL_HOLD"
    HFG_QUERY_NETWORK_OPERATOR "HFG_EVENT_QUERY_NETWORK_OPERATOR"
    HFG_AUDIO_CONNECTED "HFG_EVENT_AUDIO_CONNECTED"


    HFG_ENABLE_EXTENDED_ERRORS "HFG_EVENT_ENABLE_EXTENDED_ERRORS"
    HFG_DISABLE_NREC "HFG_EVENT_DISABLE_NREC"
    HFG_ENABLE_VOICE_RECOGNITION "HFG_EVENT_ENABLE_VOICE_RECOGNITION"




    HSG_SVOLUMEUP_REQ "HSG_SVOLUMEUP_REQ"
    HS_SCO_CONNECT_ACCEPT_STATUS_STATUS_xD "HS: SCO Connect Accept Status, status =%d"
    AG_CONNECT_LINK_FAILED_TO_START_STATUS__xD "AG: Connect Link failed to start. status = %d"
    HS_ACCESSIBILITY_OPERATION_FAILED_STATUS__xD "HS: Accessibility operation failed. status = %d."
    HS_CONNECT_LINK_FAILED_TO_START_STATUS__xD "HS: Connect Link failed to start. status = %d"
    HS_SCO_CONNECT_REJECT_STATUS_STATUS_xD "HS: SCO Connect Reject Status, status =%d"
    HFG_EVENT_QUERY_SUBSCRIBER_NUMBER_TRC "HFG_EVENT_QUERY_SUBSCRIBER_NUMBER"
    HS_ANSWER_CALL "HS Answer Call"
    HSSVU "hssvu"
    HSMVD "hsmvd"



    BT_SPP_ACITVATE_REQ "=====[BTAP][BT_SPP_ACITVATE_REQ]====="
    BT_SPP_ACITVATE_CFM "=====[BTAP][BT_SPP_ACITVATE_CFM]====="
    BT_SPP_DEACITVATE_REQ "=====[BTAP][BT_SPP_DEACITVATE_REQ]====="
    BT_SPP_DEACITVATE_CFM "=====[BTAP][BT_SPP_DEACITVATE_CFM]====="
    BT_SPP_CONNECT_REQ "=====[BTAP][BT_SPP_CONNECT_REQ]====="
    BT_SPP_CONNECT_IND "=====[BTAP][BT_SPP_CONNECT_IND]====="
    BT_SPP_DATA_REQ "=====[BTAP][BT_SPP_DATA_REQ]===== payload: %d"
    BT_SPP_DATA_CFM "=====[BTAP][BT_SPP_DATA_CFM]====="
    BT_SPP_DATA_IND "=====[BTAP][BT_SPP_DATA_IND]===== payload: %d"
    BT_SPP_DATA_RES "=====[BTAP][BT_SPP_DATA_RES]====="
    BT_SPP_CONTROL_REQ "=====[BTAP][BT_SPP_CONTROL_REQ]====="
    BT_SPP_CONTROL_IND "=====[BTAP][BT_SPP_CONTROL_IND]===== modemStatus=0x%x"
    BT_SPP_PORTNEG_IND "=====[BTAP][BT_SPP_PORTNEG_IND]====="
    BT_SPP_PORTNEG_RES "=====[BTAP][BT_SPP_PORTNEG_RES]====="
    BT_SPP_DISCONNECT_REQ "=====[BTAP][BT_SPP_DISCONNECT_REQ]====="
    BT_SPP_DISCONNECT_IND "=====[BTAP][BT_SPP_DISCONNECT_IND]====="
    BT_SPPA_PUTBYTES "=====[Func][Sppa_PutBytes]===== Len: %d, retLen: %d, on Port=%d"
    BT_SPPA_ReturnBuf "====[Func][SPPOS_ReturnBuf]==== txBufLen: %d, retBuf: %d"
    SPPA_SENDDATA "=====[Func][sppa_sendData]====="
    SPPA_CLRTX "=====[Func][Sppa_ClrTxBuffer]====="
    SPPA_CLRRX "=====[Func][Sppa_ClrRxBuffer]=====hf_port:%d, this_port:%d,module_id:%d"
    BT_SPPC_WITH_PORT_TRY_TO_DISC "SPP client with port=%d, try to disconnect"
    BT_SPPC_CMGRHDLR_NOT_FOUND "In bt_sppclient_cmgr_link_close(): try to remove: But CMGRHandler is not found"
    BT_SPPC_CMGR_BDC_ALREADY_NULL "In bt_sppclient_cmgr_link_close(): bdc is already null"
    BT_SPPC_CMGR_EVENT_CALLBACK_EVENT_WITH_DEV_INX "In bt_sppclient_cmgr_event_callback(): event=%d is for sppOsDev inx=%d"
    BT_SPPC_CMGR_EVENT_CALLBACK_EVENT_STATUS "In bt_sppclient_cmgr_event_callback(): event=%d and status=%d"
    BT_SPPC_LINK_CNF_NOT_FOR_IT "LINK_CNF is for another profile request, not SPP client"
    BT_SPPC_NOT_CALL_CMGRCREATELINK "BDC is NULL, SPP client does not call CMGR_CreateDataLink()"
    BT_SPPC_SPPCONNECT_FAILED_01 "In SPPQueryCallback()01, call sppConnect() failed. status=%d"
    BT_SPPC_WIAT_SDP_RSP_01 "Wait for SDP quesry rsp to queryCallback 01"
    BT_SPP_AUTH_RSP_WITH_RESULT "SPP_AUTH_RSP from MMI of port=%d and its result=%d"
    BT_SPPC_SEND_UART_READY_TO_READ_TO_MMI "In sppa_handler(): BT must send UART_READY_TO_READ to MMI"
    BT_SPPC_NO_AVAILABLE_DEVS "No avaialbe SPP Client OsDev for SPP_CONNECT_REQ"
    BT_SPPC_SPPCONNECT_FAILED_02 "Recv SPP_CON_REQ and ACL link is already established, call sppConnect() failed. status=%d"
    BT_SPPC_WIAT_SDP_RSP_02 "Wait for SDP quesry rsp to queryCallback 02"
    BT_SPPC_WAIT_LINK_CNF "Wait for LINK_CONNECT_CNF of this SPP client create ACL"
    BT_SPP_CMGR_CREATE_LINK_FAILED "SPP client: CMGR_CreateDataLink failed, status=%d"
    BT_SPPC_RECV_DEACTIVATE_REQ_WAIT_CLOSED "SPPClient recv DEACTIVATE_REQ and wait for RF_CLOSED event"
    BT_SPPC_RECV_DEACTIVATE_REQ_BUT_SPPCLOSE_FAILED "SPPClient recv DEACTIVATE_REQ, call SPP_Close() failed"
    BT_SPPC_RECV_DISC_REQ_WAIT_CLOSED "SPPClient recv DISCONNECT_REQ and wait for RF_CLOSED event"
    BT_SPPC_SPPSTARTSERVICEQUERY_STATUS "Return status=%d of SPPStartServiceQuery"
    BT_SPPC_SDP_QUERY_NOT_FOR_IT "In SPPQueryCallback(): This SPP query rsp is not for SPP client"
    BT_SPPC_RECV_CLOSED_DUE_TO_DEACTIVATE_REQ "Recv CLOSED event due to DEACTIVATE_REQ"
    BT_SPPC_RECV_CLOSED_DUE_TO_DISC_REQ "Recv CLOSED event due to DISC_REQ"
    BT_SPPC_SPPCONNECT_FAILED_03 "In SPPQueryCallback()03, call sppConnect() failed. status=%d"
    BT_SPPC_GET_SRV_CHNL "In SPPQueryCallback(), get server_channel_num=%d"
    BT_SPPC_RECV_CLOSED_DUE_TO_DEACTIVATE_REQ_02 "defaultEventHandler():Recv CLOSED event due to DEACTIVATE_REQ"
    BT_SPPC_RECV_CLOSED_DUE_TO_DISC_REQ_02 "defaultEventHandler():Recv CLOSED event due to DISC_REQ"
    BT_SPPC_CONNECTED_RECV_CLOSE_NOT_IT_ISSUED "SPPClient is already connected,WE Now: Recv CLOSED event not issued by itself"

    BT_SPPC_NO_UART_OWNER_CNF_NO_READY_TO_READ "Store data to RingBuf first, but before recv UART_OWNER_CNF,not send UART_READY_TO_READY"
    BT_SPPC_CALL_SPPDISC "Call SPP_Disconnect():Waiting to receive RF_CLOSED event"
    BT_SPP_HIGHWATER_RXBUTES_RFFRAMESIZE "highWater=%d, SPPOS_RxBytes=%d, RF_FrameSize=%d"
    BT_SPP_CMEVENT_AUDIO_LINK_CON_SCO_INIT_CMD "CMEVENT_AUDIO_LINK_CON SCO init command:%02x"
    BT_SPP_CMEVENT_AUDIO_LINK_DIS_SCO_INIT_CMD_STATUS "CMEVENT_AUDIO_LINK_DIS SCO init command:%02x,status:%02x"
    BT_SPP_SCO_READ_RSSI_COMPLETED "SPP_SCO_Read_RSSI with errCode=%d,rssi_value=%02x"
    BT_SPP_STOP_RSSI_TIMER "RSSI timer still running, cancel it due to RFEVENT_CLOSED"
    BT_SPP_RSSI_TIMEOUT_DEV_STATE "SPP_RetrieveRSSI_Timeout, dev_state=%d"
    BT_SPP_REMDEV_NOT_IN_CONNECTED_RSSI_TIMEOUT "RemDev is not in BDS_CONNECTED state, not to start rssi_timer"
    BT_SPP_FIND_SQT_OWNER_INX "Find the sqt owner of this querycallback, its index=%d"
    BT_SPP_SEARCH_SPPCLI_BY_DEV_INX "In SearchSppClientOsDevBySPPDev(), find sppClient at inx=%d"
    BT_SPP_REG_GENERAL_SRV_NUM "Register General SPP Server (Non-SPP-SCO-Server), num of entries=%d"
    BT_SPP_REG_SCO_SRV_NUM "Register SPP SCO Server num of entries =%d"
    BT_SPP_REG_GENERAL_CLI_NUM "Register General SPP Client (Non-SPP-SCO Client) num of entries =%d"
    BT_SPP_REG_SCO_CLI_NUM "Register SPP SCO Client num of entries =%d"
    BT_SPP_NUM_DEV "NUM_SPP_DEVS=%d"
    BT_SPPC_DISC_TIMER_500MS "In openClientPort(): Spp sets current disc Timer:BT_L2CAP_DISCONNECT_TIMEOUT_500MS"
    BT_SPPC_DISC_TIMER_50S "In openClientPort(): Spp sets current disc Timer:BT_L2CAP_DISCONNECT_TIMEOUT_50S"
    BT_SPPS_RECV_FIRST_DATA "Recv SPP Client first data=%s"
    BT_SPP_SDP_QUERY_FAILED_ADDR "SDP query for SPP client is error with bd_addr=%02x,%02x,%02x,%02x,%02x,%02x"
    BT_SPP_CMGR_CREATELINK_STATUS "SPP CMGR_CreateDataLink status:%02x"
    BT_SPP_ACLLINK_EXISTED_SET_DISCFLAG_TRUE "ACL Link is already existed, set discFlag=TRUE in CMGR_CreateDataLink()"
    BT_SPP_OPEN_SCO_HDLR "Try to open sco handler:%02x"
    BT_SPP_DISC_SCO_HDLR "Try to disconnect sco handler:%02x"
    BT_SPP_SCO_ACTIVATE_SNIFF_TIMER_IN_RFEVENT_OPEN_CLIENT "RFEVENT_OPEN client side: CMGR_ActivateSniffTimer()"
    BT_SPP_SCO_ACTIVATE_SNIFF_TIMER_IN_RFEVENT_OPEN_SERVER "RFEVENT_OPEN server side: CMGR_ActivateSniffTimer()"
    BT_SPP_SCO_RSSI_TIMER_PERIOD_LINK_MODE "Report_RSSI_Timer_Period=%d, current link mode=%d"
    BT_SPP_SCO_ASK_RSSI_IN_ACTIVE_MODE "Ask RSSI value in Active mode"
    BT_SPP_NOT_ASK_RSSI_IN_SNIFF_MODE "Not ask RSSI value in Sniff mode,link state=%d"
    BT_SPP_ASK_RSSI_IN_SNIFF_MODE "Still ask RSSI value in Sniff mode"
    BT_SPP_RECV_OPEN_IND_SET_AUTH_MODE_WAIT_PLUGOUT_CNF_FLAG "RFEVENT_OPEN_IND:set_auth_req_mode=%d,wait_plugout_cnf_msg=%d"
    BT_SPP_RECV_OPEN_IND_BUT_REJECT_DUE_TO_WAIT_PLUGOUT_CNF "defaultEventHandler():Recv RF_OPEN_IND_rejected_due_to_wait_plugout_cnf"
    BT_SPPOS_DISCONNECT_IND_WAIT_PLUGOUT_FLAG "SPPOS_DisConnected(): wait_for_plugout_cnf_msg=%d"
    BT_SPPA_NOT_SEND_PLUGOUT_IND "NOT Send UART_PLUGOUT_IND due to DISC_IND is triggered by wait_plugout_cnf_msg"
    BT_SPP_SET_WAIT_PLUGOUT_CNF_FLAG_INX "BT SPP Set Wait Plugout Cnf Flag inx=%d"
    BT_SPP_RECV_PLUGOUT_CNF_PORT "BT SPP Recv PlugoutCnf with matched port=%d,reset to default port owner"
    BT_SPP_Check_FLOW_CTRL_SETTING_CASE "BT_SPP_Check_FlowCtrl_case=%d"
    REGISTER_SPP_SCO_SERVER_NUM_OF_ENTRIES_xD "Register SPP SCO Server num of entries =%d"
    IN_SEARCHSPPCLIENTOSDEVBYSPPDEV_FIND_SPPCLIENT_AT_INXxD "In SearchSppClientOsDevBySPPDev(), find sppClient at inx=%d"
    REGISTER_GENERAL_SPP_SERVER_NONSPPSCOSERVER_NUM_OF_ENTRIESxD "Register General SPP Server (Non-SPP-SCO-Server), num of entries=%d"
    REGISTER_GENERAL_SPP_CLIENT_NONSPPSCO_CLIENT_NUM_OF_ENTRIES_xD "Register General SPP Client (Non-SPP-SCO Client) num of entries =%d"
    TRY_TO_OPEN_SCO_HANDLER "Try to open sco handler"

    BT_SPP_INJECT_ENABLE "[BT_SPP_INJECT] sppenable: string=%s"
    BT_SPP_INJECT_DISABLE "[BT_SPP_INJECT] sppdisable: string=%s"
    BT_SPP_INJECT_ACTIVATE "[BT_SPP_INJECT] sppactivate: string=%s"
    BT_SPP_INJECT_DEACTIVATE "[BT_SPP_INJECT] sppdeactivate: string=%s"
    BT_SPP_INJECT_DISCONNECT "[BT_SPP_INJECT] sppdisconn: string=%s"
    BT_SPP_INJECT_CONNECT "[BT_SPP_INJECT] sppcon: string=%s"
    BT_SPP_INJECT_SEND_DATA "[BT_SPP_INJECT] sppdata: string=%s"

    CREDIT_xD_DEVCREDIT_xD "credit %d, dev->credit %d"
    SPP_SPPSLEEPHANDLER "SPP: sppSleepHandler"
    IDBT_DEBUGx04X_LENxD "id=%04x, len=%d"
    SPP_SDP_QUERY_RETURNED_xD "SPP: SDP_Query() returned %d"



    BT_SIMAP_LACK_EXPECTED_PARM "BTSIM:Message lacks expected input parms"
    BT_SIMAP_CONTAIN_INVALID_PARM "BTSIM:Message contained an invalid parameter"
    BT_SIMAP_DISCONNECT_REQ_IN_OPEN "SIM_DISCONNECT_REQ in SIM_DISCONNECT_REQ in SimServerStateOpen()"
    BT_SIMAP_GET_DISC_REQ_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT "In open state, receiving DISC_REQ cmd before timeout of Graceful Disconnect"
    BT_SIMAP_GET_APDU_CMD_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT "BT_SIMAP_GET_APDU_CMD_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT"
    BT_SIMAP_APDU_REQ_IN_OPEN "Received a SIM_TRANSFER_APDU_REQ in SimServerStateOpen()"
    BT_SIMAP_ATR_REQ_IN_OPEN "Received a SIM_TRANSFER_ATR_REQ in SimServerStateOpen()"
    BT_SIMAP_POWER_ON_REQ_IN_OPEN "Received a SIM_POWER_ON_REQ in SimServerStateOpen()"
    BT_SIMAP_CARD_RDR_STATUS_REQ_IN_OPEN "Received a SIM_CARD_RDR_STATUS_REQ in SimServerStateOpen()"
    BT_SIMAP_TRANSPORT_PROTOCOL_REQ_IN_OPEN "Received a SIM_SET_TRANS_PROT_REQ in SimServerStateOpen()"
    BT_SIMAP_POWER_OFF_REQ_IN_OPEN "Received a SIM_POWER_OFF_REQ in SimServerStateOpen()"
    BT_SIMAP_RESET_REQ_IN_OPEN "Received a SIM_RESET_REQ in SimServerStateOpen()"
    BT_SIMAP_ERROR_IND_IN_OPEN "An error was detected in the client request in SimServerStateOpen()"
    BT_SIMAP_GET_DISCGRACE_PACKET_HANDLED_WITH_SUBSTATE "In SimServerStateOpen() discGracePacket SIM_PACKET_HANDLED, substate=%02x"
    BT_SIMAP_SEGMENTS_OF_DISCGRACE_PACKET_CAN_NOT_SEND_IN_OPEN "Left segments of discGracePacket could not be sent in SimServerStateOpen()"
    BT_SIMAP_GET_SIM_PACKET_HANDLED_WITH_SUBSTATE "In SimServerStateOpen() simPacket SIM_PACKET_HANDLED, substate=%02x"
    BT_SIMAP_STATUS_IN_SEND_DUE_TO_SET_T "In SimServerStateOpen():SIM_Status_IND is sent to sim client"
    BT_SIMAP_SIM_PACKET_HANDLED_DUE_TO_SIMSERVER_RSP "In SimServerOpen(), SIM_PACKET_HANDLED is returned due to invoke SIM_XXX() directly in simServer not in bt_adp_simap.c!"
    BT_SIMAP_SEGMENTS_OF_SIM_PACKET_FOR_STATUS_IND_CAN_NOT_SEND_IN_OPEN "Left segments of simPacket payloaded the msg Status_IND could not be sent in SimServerStateOpen()"
    BT_SIMAP_GET_UNHANDLED_EVENT_IN_OPEN "Received unhandled event: %02X in SimServerStateOpen() and now close RFChannel"
    BT_SIMAP_GET_ALREADY_PROCESSED_CMD_IN_OPEN "Received a command when already processing in SimServerStateOpen()"
    BT_SIMAP_CARD_STATUS_SENT_IN_CONPENDING "SIM:Card Status sent in ConPending"
    BT_SIMAP_ATR_SENT_CON_IS_UP "SIM:ATR Sent, connection is up"
    BT_SIM_SEND_FAILED_IN_CONNECT_PROCESS "SIM:Send failed during connect process"
    BT_SIMAP_GET_ATR_REQ_IN_CONPENDING "SIM: Received an ATR request in SimServerStateConnPending()"
    BT_SIMAP_CMD_ALREADY_PROCESSED_IN_CONPENDING "SIM: Received a command when already processing in SimServerStateConnPending()"
    BT_SIMAP_NO_EXPECT_REC_ATR_REQ_IN_CONPENDING "No Expect to receive ATR_REQ in SimServerStateConnPending"
    BT_SIMAP_RCV_UNHANDLED_EVENT_IN_CONPENDING "SIM:Server CONN_PENDING state received an unhandled event: %02X"
    BT_SIMAP_PACKET_HANDLED_IN_DISCPENDING "In SimServerStateDiscPending(): DISC_RSP/DISC_IND with immd type packet is already handled"
    BT_SIMAP_SEGMENTS_CAN_NOT_SEND_IN_DISCPENDING "SIM: Server connection closed due to not send left segments of discPacket in SimServerStateDiscPending()"
    BT_SIMAP_RCV_UNHANDLED_EVENT_IN_DISCPENDING "SIM:  Server DISC_PENDING state received an unexpected event: %02X"
    BT_SIMAP_RCV_CON_REQ_IN_CLOSE "In SimServerStateClosed():  MMI accepts and receiving SIM_CONNECT_REQ, MaxMsgSize = %d"
    BT_SIMAP_SEND_CON_RSP_WITH_REJ_MSGSIZE "SIM:Server sending connect response, rejecting message size"
    BT_SIMAP_SIMSERVER_BUSY_FOR_ONE_CLIENT "SimServer is already serving one client,so reject another client at this time"
    BT_SIMAP_RCV_UNEXPECTED_EVENT_IN_CLOSED "SIM:  Server CLOSED state received an unexpected event: %02X"
    BT_SIMAP_UNKNOWN_MSGID "SIM: Unrecognized Message ID %02X"
    BT_SIMAP_CON_NOT_ACCEPTED_IN_SRVCALLBACK "Incoming connection could not be accepted in SimSrvCallback(), status: %d"
    BT_SIMAP_CON_ACCEPTED_IN_SRVCALLBACK "Incoming connection is accepted in SimSrvCallback()"
    BT_SIMAP_CON_OPEN_IN_SRVCALLBACK "Connection open is reported with status=%d in SimSrvCallback()"
    BT_SIMAP_CON_CLOSED_IND_IN_SRVCALLBACK "Connection disconnecting is reported with status=%d in SimSrvCallback()"
    BT_SIMAP_CLOSED_IN_SRVCALLBACK "Connection closed is reported with status=%d in SimSrvCallback()"
    BT_SIMAP_CLOSED_NOTIFY_SIM_TASK_IN_SRVCALLBACK "SAP connection is closed, notify SIM task to recovery SIM card!"
    BT_SIMAP_SIMSERVER_AVAILABLE_IN_SRVCALLBACK "No CON_REQ to SIM Task,now SAP Closed,SimServer is available again,oldstate=%d"
    BT_SIMAP_FAILED_SEND_STATUS_IND_IN_SRVCALLBACK "Cound not send STATUS_IND to client in SimSrvCallback(), reason:%d"
    BT_SIMAP_SEND_STATUS_IND_IN_SRVCALLBACK "Sending STATUS_IND to client in SimSrvCallback()"
    BT_SIMAP_FAILED_SEND_ATR_RSP_IN_SRVCALLBACK "Send ATR in SimSrvCallback(): result=%d,reason=%d"
    BT_SIMAP_SEND_ATR_RSP_IN_SRVCALLBACK "ATR response sent in SimSrvCallback()"
    BT_SIMAP_SEND_APDU_TO_SIM_IN_SRVCALLBACK "Send APDU_REQ to SIM task in SimSrvCallback()"
    BT_SIM_SEND_POWER_OFF_TO_SIM_IN_SRVCALLBACK "Send POWER_OFF_REQ to SIM task in SimSrvCallback()"
    BT_SIMAP_NO_RULES_PROCESS_SIM_ON_REQ_IN_SRVCALLBACK "Not matched any rules in SimSrvCallback() when receiving SAEVENT_SERVER_SIM_ON_REQ"
    BT_SIMAP_POWER_OFF_RSP_TO_CLIENT "Send SIM_POWER_OFF_RSP to client with result=%d, reason: %d in SimSrvCallback()"
    BT_SIMAP_SEND_POWER_ON_RSP_TO_CLIENT_IN_SRVCALLBACK "Send SIM_POWER_ON_RSP with result=%d and reason: %d in SimSrvCallback()"
    BT_SIMAP_SEND_SET_T_RSP_TO_CLIENT_IN_SRVCALLBACK "Send SIM_SET_TRANSPORT_PROTOCOL_TYPE_RSP with result=%d and response reason: %d"
    BT_SIMAP_NO_RULES_PROCESS_RESET_REQ_IN_SRVCALLBACK "Not matched any rules in SimSrvCallback() when receiving SAEVENT_SERVER_SIM_RESET_REQ"
    BT_SIMAP_SEND_RESET_RSP_TO_CLIENT_IN_SRVCALLBACK "Send SIM_RESET_RSP with result=%d and response reason: %d"
    BT_SIMAP_SEND_CARD_RDS_RSP_TO_CLIENT_IN_SRVCALLBACK "Send CARD_READER_STATUS response in SimSrvCallback(), reason: %d"
    BT_SIMAP_STATUS_IND_SENT_IN_SRVCALLBACK "STATUS_IND is sent with status=%d, in SimSrvCallback()"
    BT_SIMAP_ADD_SDPRECORD_OK "SEC_Register() is successful,but SDP_AddRecord() is failed  in SIM_RegisterServer()"
    BT_SIMAP_REMOVE_SECREC_REG "Call SEC_Unregister() to remove SIM(secRec) registration"
    BT_SIMAP_SEC_REG_FAILED "SEC_Register() failed in SIM_RegisterServer()"
    DEREGISTER_SRV_CHANNEL "Degister Server Channel due to SEC_Register() failed or SDP_AddRecord() failed"
    BT_SIMAP_FAILED_CALL_RFREGSRVCHNL "Failed to invoke RF_RegisterServerChannel() in SIM_RegisterServer()"
    BT_SIMAP_FAILED_CLOSE_CON_IMMD "In bt_simap_deactivate_req_hdlr(): fail to close connection with immediate type, status=0x%x"
    BT_SIMAP_SRVSTATE_RCV_DEACTIVATE "In bt_simap_deactivate_req_hdlr(): simServer state=%d, substate=%d"
    BT_SIMAP_FAILED_CLOSE_CON_DEACTIVATE "In bt_simap_deactivate_req_hdlr(): fail to close connection by RF_CloseChannel, status=0x%x"
    BT_SIMAP_FAILED_CLOSE_CON_WITH_TYPE "In bt_simap_disconnect_req_hdlr():Cannot close the connection, reason: %d, type=%d"
    BT_SIMAP_CLOSE_CON_WITH_GRACEFUL "In bt_simap_disconnect_req_hdlr():Closing the connection with graceful type"
    BT_SIMAP_SIMSERVER_STATE "In bt_simap_disconnect_req_hdlr(): SimServerState=%d"
    BT_SIMAP_CON_CNF_ERROR_FROM_SIM "In bt_sim_connect_cnf_hdlr(): receiving BT_SIM_CONNECT_CNF with Error!"
    BT_SIMAP_SIMSERVER_STATE_SUBSTATE "SimServer state=%d, substate=%d"
    BT_SIMAP_RESET_CNF_ERROR_FROM_SIM "SIM_SERVER_STATE_OPEN receiving BT_SIM_RESET_CNF with error=%d"
    BT_SIMAP_RESET_RSP_TO_CLIENT "Send SIM RESET response, result:%d, status=%d"
    BT_SIMAP_POWER_ON_ERROR_FROM_SIM "SIM_SERVER_STATE_OPEN receiving BT_SIM_RESET_REQ_SENT_POWER_ON with error=%d"
    BT_SIMAP_SEND_POWER_ON_RSP_TO_CLIENT "In bt_sim_reset_cnf_hdlr(): call SIM_ServerSimOnRsp() with result=%d successfully"
    BT_SIMAP_SET_T_ERROR_FROM_SIM "SIM_SERVER_STATE_OPEN receiving BT_SIM_RESET_REQ_SENT_SET_T with error=%d"
    BT_SIMAP_SEND_SET_T_RSP_TO_CLIENT "In bt_sim_reset_cnf_hdlr(): call SIM_ServerSetTransProtRsp() with result=%d successfully"
    BT_SIMAP_RESET_CNF_ERR_RFOM_SIM_IN_CONPENDING "In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_CONNECT_PENDING  receiving BT_SIM_RESET_CNF with error=%d"
    BT_SIMAP_RESET_RSP_NOT_EXPECTED_IN_OPEN "Not request RESET/POWE_ON/SET_TRANSPORT_PROTOCOL, the RESET_RSP is not expected, Ignore it!"
    BT_SIMAP_GET_RESET_RSP_NOT_IN_CONPENDING_OR_OPEN "In bt_sim_reset_cnf_hdlr(): Not in CONNECT_PENDING/Open state, should not receive BT_SIM_RESET_CNF from SIM Task"
    BT_SIMAP_RCV_APDU_RSP_FROM_SIM "In bt_sim_apdu_cnf_hdlr(): Receiving APDU_RSP from SIM task with result=%d"
    BT_SIMAP_SEND_APDU_RSP_TO_CLIENT "Apdu response sent with result=%d,status=%d,func=%d"
    BT_SIMAP_NOT_EXPECTED_RCV_APDU_RSP_FROM_SIM "In bt_sim_apdu_cnf_hdlr():Not Expect to receive APDU_RSP from SIM task, no request for this"
    BT_SIMAP_RCV_GRACEFUL_DISC_PREVIOUSLY "After completing connection procedure, MMI requested to graceful disconnection"
    BT_SIMAP_ERROR_AND_NOTIFY_SIM_TO_RECOVERY "Some Error happens and state=%d, notify SIM task to recovery successfully!"
    BT_SIMAP_ERR_NO_CON_REQ_SENT_TO_SIM "No connect_req has been sent to SIM task, receiving this disconnect_cnf in bt_sim_disconnect_cnf_hdlr() is error!"
    BT_SIMAP_ERR_NO_DISC_REQ_SENT_TO_SIM "No disconnect_req has been sent to SIM task, receiving this disconnect_cnf in bt_sim_disconnect_cnf_hdlr() is error!"
    BT_SIMAP_RCV_POWER_OFF_CNF_FROM_SIM "In bt_sim_power_off_cnf_hdlr(): Receiving POWER_OFF_CNF from SIM task with result=%d"
    BT_SIMAP_SEND_POWER_OFF_RSP_TO_CLIENT "In bt_sim_power_off_cnf_hdlr():Cound not send SIM_POWER_OFF_RSP to client with result=%d, status: %d"
    BT_SIMAP_NOT_EXPECTED_RCV_POWER_OFF_RSP_FROM_SIM "In bt_sim_power_off_cnf_hdlr(): Not Expect to receive POWER_OFF_RSP from SIM task, no request for this"
    BT_SIMAP_SIM_REGSERVER "In bt_simap_init():SIM Server cannot be registered, status=%d"
    BT_SIMAP_ATR_TIMEOUT_HDLR "Timeout callbacked in bt_simap_wait_atr_in_connect_procedure_timeout_handler()"
    BT_SIMAP_GRACEFUL_TIMEOUT_HDLR "Timeout callbacked in bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler()"
    BT_SIMAP_GRACEFUL_TIMEOUT_HDLR_CAN_NOT_CLOSE "In bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler():Cannot close the connection with immediate type, status: %d"
    BT_SIMAP_START_TIMER "In bt_simap_start_timer():msec=%d"
    BT_SIMAP_STOP_TIMER "In bt_simap_stop_timer()"
    BT_SIMAP_NO_DEFINED_MSG_ID "Not defined MSG_ID for SIM Access Profile,Assert it!"
    BT_SIMAP_SRV_CLOSESTATE_DISC_SENT "Recv Deactive_req, although SimServer is closed, but it waits for SIM task's DISC_CNF"
    BT_SIMAP_RFCOMM_SIMSRV_BOTHCLOSED_RECV_DEACTIVE_REQ "Recv Deactive_req, the RFCOMM and SimServer are already in CLOSED state"
    BT_SIMAP_RELEASE_CONID_IN_DEACTIVE_REQ_HDLR "Release SIM Access Profile connect_id in bt_simap_deactivate_req_hdlr"
    BT_SIMAP_RECV_DEACTIVE_CHECK_DISCGRACE_TIMER "Recv Deactivate Req, check disc with graceful timer is running or not!"
    BT_SIMAP_DO_NOTHING_IN_DISC_PENDING_STATE_IN_DEACTIVE_REQ "In DEACTIVATE_REQ, do not close RFCOMM channel again in SIM_SERVER_STATE_DISC_PENDING state"
    BT_SIMAP_CLOSE_RFCOMM_IN_CONN_PENDING_STATE_IN_DEACTIVE_REQ "In DEACTIVATE_REQ, close RFCOMM channel in SIM_SERVER_STATE_CONN_PENDING state"
    BT_SIMAP_USE_DISCIND_FOR_DEACTIVE_REQ "Using SimServerSendDiscInd() first to do deactive request"
    BT_SIMAP_USE_RFCLOSECHNL_FOR_DEACTIVE_REQ "Using RF_CloseChannel() first to do deactive request"

    BT_SIMAP_MMI_REJECT_SAP_CON_IN_AUTH_RSP_HDLR "MMI rejects this SAP connection in bt_simap_auth_rsp_hdlr"


    BT_SIMAP_DISC_REQ_HDLR_NO_ENTRY_TO_DISC "In bt_simap_disconnect_req_hdlr():Error! MMI has no entry to disconnect this SAP"
    BT_SIMAP_DISC_REQ_HDLR_ALREADY_DISC_PENDING "In bt_simap_disconnect_req_hdlr():Already disc pending, ignore this request"
    BT_SIMAP_RECV_DISC_REQ_SIMSRV_CLOSED_WAIT_DISCCNF "Recv Disc_req from MMI, although SimServer is closed, but it waits for SIM task's DISC_CNF"
    BT_SIMAP_SIMSRV_MODE "SimServer's test mode=%d"
    BT_SIMAP_CON_CNF_HDLR_NOT_EXPECT_SIM_CON_CNF "In bt_sim_connect_cnf_hdlr():Not Expect to receive BT_SIM_CONNECT_CNF"


    BT_SIMAP_OPENSTATE_SEND_POWERON_RSP_FAILED_STATUS "In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM POWER ON response, status:%d"

    BT_SIMAP_FAILED_STATUS "failed with status=%d"
    BT_SIMAP_OPENSTATE_SETT_CNF_HDLR_STATUS "In bt_sim_openstate_set_transport_protocol_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM Set Transport Protocol Type response, status:%d"

    BT_SIMAP_RESET_CNF_HDLR_CT "In bt_sim_reset_cnf_hdlr(), CT=%d"
    BT_SIMAP_APDU_RSP_FROM_SIM_NOT_ACCESSIBLE "APDU resp from SIM task is not accessible:physical error"
    BT_SIMAP_RFCHNLCLOSED_SEND_RSP_FAILED_OK "RFChannel is clodes, send rsp failed in bt_adp_simap is ok"
    BT_SIMAP_DISC_CNF_HDLR_CARDSTATUS "disconnect_cnf_hdlr(): cardstatus=%02X"
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR00 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_00"
    BT_SIMAP_DISC_CNF_CASE0 "DISC_CNF case0"
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR01 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_01"
    BT_SIMAP_DISC_CNF_CASE1 "DISC_CNF case1"
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR02 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_02"
    BT_SIMAP_DISC_CNF_CASE2 "DISC_CNF case2"
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR03 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_03"
    BT_SIMAP_DISC_CNF_CASE3 "DISC_CNF case3"
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR04 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_04"
    BT_SIMAP_DISC_CNF_CASE4 "DISC_CNF case4"
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR05 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_05"
    BT_SIMAP_DISC_CNF_CASE5 "DISC_CNF case5"
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR06 "Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_06"
    BT_SIMAP_DISC_CNF_CASE6 "DISC_CNF case6"
    BT_SIMAP_SHOW_APDUREQCONTENT "ShowAPDUReqContent():"
    BT_SIMAP_SHOW_ONE_BYTE "This byte=%02X"
    BT_SIMAP_CHECK_PACKET_IS_GOT_FROM_LIST "In CheckPacketIsFromList(): find returned packet in inx=%d"
    BT_SIMAP_OPEN_STATE_MSGTYPE_CARDSTATUS_SUBSTATE "In simserver open state, msgType=%02x,cardstatus=%02x,substate=%04x"
    BT_SIMAP_OPENSTATE_SEND_DISCRSP_FAILED "In SimServerStateOpen() status of SendDiscRsp=%d"
    BT_SIMAP_SET_T_PACKET_HANDLED_WITH_PARMTYPE "SET_T PACKET HANDLED with ParamType=%d"
    BT_SIMAP_ALREADY_SENT_APDU_RSP_RECV_DISC_REQ "Send APDU_RSP and its packet handled, start timer again for DISC with Graceful type"
    BT_SIMAP_NOT_CORRECT_PKT_RECV_IN_OPEN_STATE "\nIn Open State, not simPacket or discGracePacket handled received"
    BT_SIMAP_IN_OPEN_STATE_CHECK_SRVFLAGS "Open state,flags=%02x"
    BT_SIMAP_CLOSE_RFCOMM_FAILED "In Sim_Sm.c: status of RF_CloseChannel=%d"
    BT_SIMAP_NO_CONRSP_WITH_OK_RETURNED "Not CONN_RSP with ConStatus OK packet returned, No Status_IND to Client"
    BT_SIMAP_RESENT_MTU_ACCEPTED "Wait retry SAP MTU and this MTU is acceptable"
    BT_SIMAP_SEND_CONRSPERR_FAILED "Status from SendConnRspErr() =%d"
    BT_SIMAP_CLOSED_EVENT_DUE_TO_REJECT_SECOND_CLIENT "This closed event is due to SimServer is serving one client now, so reject another seesion"
    BT_SIMAP_SRVCALLBACK_CASE0 "Case0:In SimSrvCallback():SimServer is available again!"
    BT_SIMAP_SRVCALLBACK_RECV_CLOSED_CHECK_TIMER "In SimSrvCallback() recv CLOSED, check timer for DISC_Graceful type"
    BT_SIMAP_SET_T0_T1_NOT_SUPPORT_T1_T0 "SET T=0/T=1 but only support T=1/T=0, Send SET_T_RSP first then STATUS_IND with card not accessible later"
    BT_SIMAP_CLIENT_REQ_T_TYPE "In SimSrvCallback(): client requested T type=%d"
    BT_SIMAP_RELEASE_SAP_CONID_CASE1 "Release SIM Acces Profile connect_id in Case 1"
    BT_SIMAP_SIMSRV_CLOSED_RFCOMM_CLOSED_DUE_TO_DEACTIVATE_REQ "This case is SimServer closed then RFCOMM closed due to MMI Deactivate Req, return Deactivate_CNF with ok"
    BT_SIMAP_SIMSRVSENDSTATUS "status of SimServerSendStatsu()=%02x"
    BT_SIMAP_STATUS_IND_NOT_ACCESSIBLE_IN_SLOW_CON_MODE "STATUS_IND with CARD_NOT_ACCESSIBLE will be sent in SLOW_CONNECT_MODE"
    BT_SIMAP_SIMSRVRSP_NO_PKT "In Sim.c SIM_ServerRsp(): no packets, clear server flags, case=%d"
    BT_SIMAP_SLOW_CON_MODE_NOT_EXPECT_RECV_ATR_REQ "In slow connect mode, not expect to recv ATR Req"
    BT_SIMAP_PKT_INUSE "In SimSendPacket(): its flags is BTP_FLAG_INUSE"
    BT_SIMAP_FIND_FREE_PKT_INX "In SimFindFreeAndSendPacket():Find Free packet in inx=%d"
    BT_SIMAP_ALLPKT_USED "In SimFindFreeAndSendPacket(): All packets of SimServer are bust ans used"
    BT_SIMAP_SIMSRV_AVAILABLE_AGAIN "bt_sim_disconnect_cnf_hdlr():SIMServer is avaliable again"
    BT_SIMAP_CARDSTATUS_IN_POWER_OFF_HDLER "power_off_cnf_hdlr(): cardstatus=%02X"
    BT_SIMAP_ATR_TIMEOUT_NOT_IN_POWERON_STATE "In atr_timeout:Not in POWER ON state"
    BT_SIMAP_ATRTIMEOUT_SRVSTATE_AND_FLAG "atr_timeout,simServerState=%d,flags=%02x"
    BT_SIMAP_GRACEFUL_TIMEOUT_NOT_IN_POWEROFF_STATE "In graceful_disc_timeout:Not in POWER ON state"
    BT_SIMAP_GRACEFUL_DISC_TIMEOUT_SRVSTATE_AND_SUBSTATE "graceful_disc_timeout,simServerState=%d,substate=%02x"
    BT_SIMAP_GRACEFUL_DISC_TIMEOUT_CLOSE_CON_WITH_IMMED_TYPE "In bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler():Closing the connection with immd type"
    BT_SIMAP_SEND_IMMED_DISC_IND_FAILED_STATUS "Send DISC_IND case1 failed, status=%d"
    BT_SIMAP_SEND_GRACEFUL_DISC_IND_FAILED_STATUS "Graceful DISC ind failed, status=%d"
    BT_SIMAP_CURRENT_DISC_TYPE "BT SIMAP current disc_type=%d"
    BT_SIMAP_MAKE_SIMCARD_UNAVAILABLE_THEN_SEND_STATUS_IND "BT SIMAP PTS PRS Test Case: Send STATUS IND with unavailable"




    SIMULATE_MMI_TO_SEND_DEACTIVATE_MSG_TO_SIMAP "Simulate MMI to send DeActivate Msg to SIMAP"
    NEW_CURRENT_T_TYPExD "New current T type=%d"
    CHANGE_TO_IT_MODE "Change to IT mode"
    NEW_SUPPORTED_T_TYPExD "New supported T type=%d"
    EXIT_SNIFF_MODE_FOR_SAP_CONNECTION "Exit Sniff mode for SAP connection"
    NEW_SIMCARDSTATUSxXxXxX "New simcardstatus=0x%x,%x,%x"
    SIMULATE_MMI_TO_SEND_ACTIVATE_MSG_TO_SIMAP "Simulate MMI to send Activate Msg to SIMAP"
    SIMULATE_MMI_SEND_DISC_REQ_WITH_GRACEFUL_TYPE_TO_BT "Simulate MMI: send DISC_REQ with Graceful type to BT"
    SIMULATE_MMI_SEND_DISC_REQ_WITH_IMMEDIATE_TYPE_TO_BT "Simulate MMI: send DISC_REQ with Immediate type to BT"
    SIMULATE_MMI_TO_SEND_AUTHORIZATION_RESPONSE_MSG_TO_SIMAP "Simulate MMI to send AUTH_RSP Msg to SIMAP, result=%d"
    SIMULATE_SIM_CARD_NOT_ACCESSIBLE_FOR_PTS_TESTING "Simulate SIM card is not accessible and send STATUS_IND for PTS testing"

    BT_SIMAP_SIMCARDREADER_STATUS "[BT SIMAP]current_simcardreader_status=0x%x"
    BT_SIMAP_SEND_PACKET "[BT SIMAP]SimFindFreeAndSendPacket:MsgType=%d, Parm1Type=%d, parm1=%d, Parm2Type=%d, parm2=%d"
    BT_SIMAP_SEND_ATRRSP_ERR "[BT SIMAP]SimServerSendAtrRspErr: Result=%d"
    BT_SIMAP_SEND_ATRRSP "[BT SIMAP]SimServerSendAtrRspNoErr: Result=%d, Atr=%s"
    BT_SIMAP_RFSEND_RETURN "[BT SIMAP]RF_SendData return: %d"
    BT_SIMAP_CLOSE_RFCOMM_CHNL "[BT SIMAP]RF_CloseChannel... "
 BT_SIMAP_RESET_IND "[simap]bt_simap_reset: SIM(simServer)[0].state=%d"
 BT_SIMAP_NOTIFY_APP_RESET_IND "[simap]notify app: SIMAP_EVENT_BT_RESET_IND"

 BT_SIMAP_ADP_INIT "[simap_adp]simap_adp_init"
 BT_SIMAP_ADP_DEINIT "[simap_adp]simap_adp_deinit"
 BT_SIMAP_ADP_RESET "[simap_adp]simap_adp_reset..."
 BT_SIMAP_ADP_HDL_MSG "[simap_adp]btmtk_adp_simap_handle_message: %d"





    BT_DG_ACITVATE_REQ "=====[BTAP][BT_DG_ACITVATE_REQ]====="
    BT_DG_DEACITVATE_REQ "=====[BTAP][BT_DG_DEACITVATE_REQ]====="
    BT_DG_DEACITVATE_CFM "=====[BTAP][BT_DG_DEACITVATE_CFM]====="
    BT_DG_CONNECT_IND "=====[BTAP][BT_DG_CONNECT_IND]====="
    BT_DG_DATA_REQ "=====[BTAP][BT_DG_DATA_REQ]===== payload: %d"
    BT_DG_DATA_CFM "=====[BTAP][BT_DG_DATA_CFM]====="
    BT_DG_DATA_IND "=====[BTAP][BT_DG_DATA_IND]===== payload: %d"
    BT_DG_DATA_RES "=====[BTAP][BT_DG_DATA_RES]====="
    BT_DG_CONTROL_REQ "=====[BTAP][BT_DG_CONTROL_REQ]====="
    BT_DG_CONTROL_IND "=====[BTAP][BT_DG_CONTROL_IND]===== modemStatus=0x%x"
    BT_DG_PORTNEG_IND "=====[BTAP][BT_DG_PORTNEG_IND]====="
    BT_DG_PORTNEG_RES "=====[BTAP][BT_DG_PORTNEG_RES]====="
    BT_DG_DISCONNECT_REQ "=====[BTAP][BT_DG_DISCONNECT_REQ]====="
    BT_DG_DISCONNECT_IND "=====[BTAP][BT_DG_DISCONNECT_IND]====="




    BT_AVRCP_ROLE_STATE "=====[AVRCP][ AVRCP Role = [%d], State = [%d] ]====="
    BT_AVRCP_AVTIVATE_DEREGISTER_RESULT "=====[AVRCP][ACTIVATE][ AVRCP_Deregister() Result ==> Result = [%d] ]====="
    BT_AVRCP_AVTIVATE_REGISTER_RESULT "=====[AVRCP][ACTIVATE][ AVRCP_Register() Result ==> Chnl = [%d], Result = [%d] ]====="
    BT_AVRCP_DEAVTIVATE_DEREGISTER_RESULT "=====[AVRCP][DEACTIVATE][ AVRCP_Deregister() Result ==> Chnl = [%d], Result = [%d] ]====="
    BT_AVRCP_CONNECT_RESULT "=====[AVRCP][CONNECT][ AVRCP_Connect() Result ==> Chnl = [%d], Result = [%d] ]====="
    BT_AVRCP_CONNECT_IND_RES_RESULT "=====[AVRCP][CONNECT_IND_RES][ AVRCP_ConnectRsp() Result ==> Chnl = [%d], Result = [%d] ]====="
    BT_AVRCP_DISCONNECT_RESULT "=====[AVRCP][DISCONNECT][ AVRCP_Disconnect() Result ==> Chnl = [%d], Result = [%d] ]====="
    BT_AVRCP_CMD_REQ_RESULT "=====[AVRCP][CMD_REQ][ AVRCP_SendCommand() Result ==> Chnl = [%d], Result = [%d] ]====="
    BT_AVRCP_CMD_RSP_IND_RESULT "=====[AVRCP][CMD_RSP_IND][ AVRCP_SendResponse() Result ==> Chnl = [%d], Result = [%d] ]====="
    BT_AVRCP_CALLBACK "=====[AVRCP][CALLBACK][ avrcp_adp_callback() ==> Events = [%d] ]====="
    AVC_SENDCONTINUEBT_DEBUGx02X "AVC_SendContinue:%02x"
    SEND_CONTINUE_CHNL_STATE_IS_AVC_TRANS_STATE_FIRST "Send Continue, chnl state is AVC_TRANS_STATE_FIRST"
    BT_AVC_TX_TIMEOUT "AVC:  TX Timeout and aclTxPacketsLeft=%d"
    BT_AVCRCP_DISCONNECT_IN_FRAGEMENT "[AVRCP] disconnect within a fragmented packet:0x%x"
    AVRCP_CALLBACK_EVENT_CONNECT "=====[AVRCP][CALLBACK][ avrcp_adp_callback_connect() ==> Role = [%d], State = [%d] ]====="
    AVRCP_CALLBACK_EVENT_CONNECT_IND "=====[AVRCP][CALLBACK][ avrcp_adp_callback_connect_ind() ==> Role = [%d], State = [%d] ]====="
    AVRCP_CALLBACK_EVENT_CONNECT_IND_RSP "=====[AVRCP][CALLBACK][ avrcp_adp_callback_connect_ind Result ==> Result = [%d] ]====="
    AVRCP_CALLBACK_EVENT_DISCONNECT "=====[AVRCP][CALLBACK][ avrcp_adp_callback_disconnect() ==> Role = [%d], State = [%d] ]====="
    AVRCP_CALLBACK_EVENT_CMD_RSP "=====[AVRCP][CALLBACK][ avrcp_adp_callback_cmd_rsp() ==> Role = [%d], State = [%d], Event = [%d] ]====="
    AVRCP_CALLBACK_EVENT_CMD_IND "=====[AVRCP][CALLBACK][ avrcp_adp_callback_cmd_ind() ==> Role = [%d], State = [%d] ]====="
    AVRCP_CALLBACK_EVENT_CMD_MORE_DATA "=====[AVRCP][CALLBACK][ avrcp_adp_callback_more_data() ==> Role = [%d], State = [%d] ]====="
    AVRCP_CALLBACK_EVENT_CMD_TX_DONE "=====[AVRCP][CALLBACK][ avrcp_adp_callback_tx_done() ==> Role = [%d], State = [%d], ctype = [%d]]====="
    BT_AVRCP_UTIL_REGISTERCB "[AVRCP] UTIL_REGISTERCB"
    BT_AVRCP_UTIL_INIT "[AVRCP] UTIL_INIT"
    BT_AVRCP_UTIL_ACTIVATE_REQ "[AVRCP] UTIL_ACTIVATE_REQ num:%d role:%d"
    BT_AVRCP_UTIL_DEACTIVATE_REQ "[AVRCP] UTIL_DEACTIVATE_REQ num:%d"
    BT_AVRCP_UTIL_CONNECT_REQ "[AVRCP] UTIL_CONNECT_REQ num:%d role:%d"
    BT_AVRCP_UTIL_CONNECT_IND_RES "[AVRCP] UTIL_CONNECT_IND_RES num:%d accept:%d"
    BT_AVRCP_UTIL_DISCONNECT_REQ "[AVRCP] UTIL_DISCONNECT_REQ num:%d "
    BT_AVRCP_UTIL_CMD_FRAME_REQ "[AVRCP] UTIL_CMD_FRAME_REQ num:%d ctype:%d"
    BT_AVRCP_UTIL_CMD_FRAME_RSP_IND "[AVRCP] UTIL_CMD_FRAME_RSP_IND num:%d ctype:%d"
    BT_AVRCP_UTIL_APP_CALLBACK "[AVRCP] UTIL_APP_CALLBACK event:%d"
    BT_AVRCP_SDP_REGISTER "[AVRCP] SDP_REGISTER role:%d"
    BT_AVRCP_SDP_DEREGISTER "[AVRCP] SDP_DEREGISTER role:%d"
    BT_AVRCP_SDP_CREATEACL "[AVRCP] CREATE_ACL status:%d"
    BT_AVRCP_SDP_START_QUERY "[AVRCP] START_QUERY role:0x%x"
    BT_AVRCP_SDP_QUERY_CB "[AVRCP] QUERY_CB result:%d"
    BT_AVRCP_SDP_CONNECT_TIMEOUT "[AVRCP] CONNECT_TIMEOUT try to connect psmtype:0x%x"
    BT_AVRCP_BROWSE_CALLBACK "=====[AVRCP][BWS][CALLBACK][ avrcp_browse_callback() ==> Events = [%d] ]====="
    BT_AVRCP_BROWSE_CALLBACK_CONNECT "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_connect() ==> Role = [%d], mtu = [%d] ]====="
    BT_AVRCP_BROWSE_CALLBACK_CONNECT_IND "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_connect_ind() ==> Role = [%d], mtu = [%d] ]====="
    BT_AVRCP_BROWSE_CALLBACK_CONNECT_IND_RSP "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_connect_ind Result ==> Result = [%d] ]====="
    BT_AVRCP_BROWSE_CALLBACK_DISCONNECT "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_disconnect() ==> Role = [%d], State = [%d] ]====="
    BT_AVRCP_CONTINUE_TIMEOUT "[AVRCP][WRN] AvctpContinueTimeout chnl:0x%x packet:0x%x"
    BT_AVRCP_CONTINUE_SEND_FAIL "[AVRCP] Fail to send continue packet status:%d"
    BT_AVRCP_CONNECT_CHECK "[AVRCP][WRN] CONNECTED Error. Has queued packets in txPacketList packet:0x%x"
    BT_AVRCP_DISCONNECT_CHECK "[AVRCP][WRN] Has queued packets in txPacketList packet:0x%x"
    BT_AVRCP_TX_FINISH "[AVRCP][UTIL] AVRCP_EVENT_TX  finish curQueueFrame:0x%x"
    BT_AVRCP_UPDATE_TXSTATE "[AVRCP] Update curTxState:%d"
    BT_AVRCP_BWS_UPDATE_TXSTATE "[AVRCP][BWS] Update curBrowseTxState:%d"
    BT_AVRCP_BWS_NO_CLEANUP_PACKET "[AVRCP][BWS] Not empty! chnl->curBrowseQueueFrame:0x%x"
    BT_AVRCP_SEND_NEXT_PACKET "[AVRCP][UTIL] Send Next queued packet:0x%x status:%d"
    BT_AVRCP_FAIL_NEXT_PACKET "[AVRCP][UTIL] Fail Send next browse packet:0x%x"
    BT_AVRCP_TX_FINISH_NOT_EMPTY "[AVRCP] Tx-Finish but QueueFrame Not Empty. parms.event:%d curQueueFrame:0x%x"
    BT_AVRCP_BWS_AVCTP_CALLBACK "[AVRCP][BWS][CB] AvrcpBrowseAvctpCallback event:%d"
    BT_AVRCP_BWS_CONNECT_CHECK "[AVRCP][WRN] Has queued browse packets in txBrowsePacketList packet:0x%x"
    BT_AVRCP_BWS_WRONG_CHANNEL "[AVRCP][BWS] Receive browse packet in AVRCP channel. pdu-id:%d"
    BT_AVRCP_DISC_FLAG_IS "[AVRCP][BWS] discFlag is True. Disconnect the channel"
    BT_AVRCP_BWS_DISC_CHECK "[AVRCP][WRN] Has queued browse packets in txBrowse PacketList packet:0x%x"
    BT_AVRCP_BWS_AUTO_ACCEPT "[AVRCP][BWS] Auto accept the browse channel !"
    BT_AVRCP_BWS_REJECT_CONNECTION "[AVRCP][BWS] Reject the browse channel signal-state:%d !"
    BT_AVRCP_BWS_FRAGMENT_PACKET_WRN "[AVRCP][BWS][WRN] A fragmented browse packet !"
    BT_AVRCP_BWS_IGNORE_FRAGMENT "[AVRCP][BWS][WRN] Ignore a fragmented browsed packet !"
    BT_AVRCP_BWS_TX_FINISH "[AVRCP][UTIL][BWS] AvrcpBrowseAvctpCallback AVRCP_EVENT_TX_DONE release:0x%x!"
    BT_AVRCP_BWS_NEXT_PACKET "[AVRCP][UTIL][BWS] Tx_done send next browse queued packet:%x status:%d"
    BT_AVRCP_BWS_FAIL_NEXT "[AVRCP][UTIL][WRN] Fail to send next browse packet:0x%x"
    BT_AVRCP_BWS_REGISTER_FAIL "[AVRCP][BWS] Register Browse callback fail BtStatus:%d"
    BT_AVRCP_COMPOSE_SINGLE_CMD "[AVRCP] ComposeSingleAVCTP cmd ctype:%d u2DataOffset:%d ctype:%d"
    BT_AVRCP_WRONG_PASSTHRU_SIZE "[AVRCP][ERR] Wrong Pass packet size! Offset:%d operandLen:%d maxMtu:%d"
    BT_AVRCP_WRONG_QUEUE_PACKET_TYPE "[AVRCP][ERR] Wrong packet type ! %d"
    BT_AVRCP_COMPOSE_SINGLE_RSP "[AVRCP] ComposeSingleAVCTP RSP ctype:%d u2DataOffset:%d ctype:%d"
    BT_AVRCP_SEND_QUEUE_PACKET "[AVRCP] AVRCP_SendQueuePacket state:%d data_len:%d"
    BT_AVRCP_CMD_TYPE_NOT_SINGLE "[AVRCP] Cmd Packet type is not single type:%d !"
    BT_AVRCP_PUT_PACKET_TO_QUEUELIST "[AVRCP][UTIL] Queue a packet:0x%x "
    BT_AVRCP_CONTINUE_QUEUE_PACKET "[AVRCP] AVRCP_ContinueQueuePacket state:%d"
    BT_AVRCP_CONTINUE_QUEUE_FAIL "[AVRCP][UTIL] Fail to continue packet TxState:%d"
    BT_AVRCP_BWS_SEND_QUEUE_PACKET "[AVRCP][BWS] SendBrowseQueuePacket curBrowseTxState:%d"
    BT_AVRCP_BWS_PACKET_TOO_LARGE "[AVRCP][UTIL][BWS] Packet size is too larget mtu:%d data_len:%d"
    BT_AVRCP_BWS_PUT_PACKET_TO_QUEUELIST "[AVRCP][UTIL][BWS] Queue a packet:0x%x"
    BT_AVRCP_GET_SINGLE_AVRCP_MTU "[AVRCP] GetSinglePacketMtu u2Max:%d bBrowse:%d"
    BT_AVRCP_CMGR_CALLBACK "[AVRCP][CB] AvrcpCmgrCallback event:%d"
    BT_AVRCP_SDP_TG_CALLBACK "[AVRCP][CB] avrcpQueryTGCallback sdp search result:%d attr-indx:%d"
    BT_AVRCP_SDP_TG_INFO "[AVRCP] SDP TG INFO avail:%d ver:0x%x featuer:0x%x bws:0x%x"
    BT_AVRCP_SDP_CT_CALLBACK "[AVRCP][CB] avrcpQueryCTCallback sdp search result:%d attr-indx:%d"
    BT_AVRCP_SDP_CT_INFO "[AVRCP] SDP CT INFO avail:%d ver:0x%x featuer:0x%x bws:0x%x"
    BT_AVRCP_PARSE_RSP_FAIL "[AVRCP] Fail to parse the response packet pdu_id:%d"
    BT_AVRCP_DISC_BWS_CHANNEL "[AVRCP][WRN] Browse channal is existed. Disconnect it! cntx:0x%x"
    BT_AVRCP_UTIL_PICK_PACKET "[AVRCP][UTIL] AVRCP_UitlCmdFrame select a packet:0x%x"
    BT_AVRCP_UTIL_INSERT_PACKET "[AVRCP][UTIL] Insert freePacketList:0x%x packet:0x%x packet->data:0x%x"
    BT_AVRCP_UTIL_RSP_PICK_PACKET "[AVRCP][UTIL] AVRCP_UitlCmdFrameRspInd select a packet:%x"
    BT_AVRCP_UTIL_REJECT_PICK_PACKET "[AVRCP][UTIL] AVRCP_UtilSendAVRCPReject select a packet:%x"
    BT_AVRCP_UTIL_BWS_PICK_PACKET "[AVRCP][UTIL][BWS] AVRCP_UitlCmdFrame select a packet:%x"
    BT_AVRCP_UTIL_BWS_INSERT_PACKET "[AVRCP][UTIL][BWS] Insert freePacketList:0x%x packet:0x%x packet->data:0x%x"
    BT_AVRCP_UTIL_BWS_REJECT "[AVRCP][UTIL][BWS] AVRCP_UtilSendAVRCPBrowseReject select a packet:%x"
    BT_AVRCP_UTIL_NO_AVAILABLE "[AVRCP][WRN] No available packet for c_type:%d!"
    BT_AVRCP_SEND_CMD_PDU_FAIL "[AVRCP] Send cmd fail pdu_id:%d"
    BT_AVRCP_BWS_SEND_CMD_PDU_FAIL "[AVRCP][BWS] send cmd fail pdu_id:%d"
    BT_AVRCP_PARSE_AV13_PDU_FAIL "[AVRCP] Fail to parse avrcp specific cmd:%d param_len:%d"
    BT_AVRCP_CB_TX_ERROR "[AVRCP][WRN] AVRCP_EVENT_TX_ERROR chnl->curQueueFrame:0x%x Parms->p.queueFrame:%x"
    BT_AVRCP_NOT_SIG_COMPANY_ID "[AVRCP][WRN] opcode:0 but company id is %x%x%x"
    BT_AVRCP_UNKNOW_AV_TYPE "[AVRCP] Uknow packet type. Unable to parse it opcode:%d"
    BT_AVRCP_PDUID_NOT_MATCH "[AVRCP] Not match start_pdu_id:%d pdu_id:%d"
    BT_AVRCP_ABORT_CONTINUE "[AVRCP][UTIL] Abort continue packet:%x"
    BT_AVRCP_REJECT_BWS_PACKET "[AVRCP][WRN] Receive browse pdu-id in AVCTP channel ! reject it"
    BT_AVRCP_CONTI_NO_DATA "[AVRCP] No data to send !"
    BT_AVRCP_TOO_MANY_ITEM "[AVRCP][WRN] Too many item num:%d max:%d"
    BT_AVRCP_ENCODE_FOLDER_ITEM "[AVRCP] Encode tyep:%d len:%d offset:%d"
    BT_AVRCP_TOO_LARGE_LENGTH "[AVRCP] Too large name_length:%d max:%d"
    BT_AVRCP_WRONG_DATA_OFFSET "[AVRCP] Wrong name_offset:%d"
    BT_AVRCP_ENCODE_FOLDER_ITEM_FAIL "[AVRCP][WRN] Fail to encode the folder item type:%d"
    BT_AVRCP_NO_MORE_DATA_SPACE "[AVRCP] No space for more text data"
    BT_AVRCP_INIT_PICK_PACKET "[AVRCP][UTIL] Init insert free packet:0x%x data:0x%x"
    BT_AVRCP_SEND_REJECT_PACKET "[AVRCP] AVRCP_UtilSendAVRCPReject chnl_num:%d status:%d"
    BT_AVRCP_BWS_SEND_REJECT_PACKET "[AVRCP][BWS] AVRCP_UtilSendAVRCPBrowseReject chnl_num:%d status:%d"
    BT_AVRCP_EMPTY_PACKET_LIST "[AVRCP][WRN] Packet list is empty !"
    BT_AVRCP_MARSHAL_BUFFER_WRN "[AVRCP][WRN] Marshaling buffer is small. buffer_len:%d max:%d"
    BT_AVRCP_CONTINUE_NO_BUFFER "[AVRCP][WRN] Too much data Abort the transmission parm_len:%d cur_data_offset:%d"
    BT_AVRCP_NOT_IN_MORE_STATE "[AVRCP][WRN] Receive more data but AVRCP don't need more data !"
    BT_AVRCP_THROW_MORE_DATA "[AVRCP][WRN] Current Data:%d operandLen:%d MaxSize:%d"
    BT_AVRCP_AVCTP_AVC_RESPONSE "[AVRCP] AvrcpHandleCBAVCResponse opcode:%d operandLen:%d"
    BT_AVRCP_PDU_LENGTH_NOT_MATCH "[AVRCP][WRN] pdu_parm_len:%d parm_len:%d"
    BT_AVRCP_CB_CMD_IND "[AVRCP] AvrcpHandleCBAVCCommandInd opcode:0x%x operandLen:%d"
    BT_AVRCP_RECEIVE_CONTINUE_PACKET "[AVRCP] Receives OPCODE_REQUEST_CONTINUING pdu-id parm_len:%d"
    BT_AVRCP_UNKNOW_FOLDER_ITEM "[AVRCP][WRN] Unable to parse the unkown item type:%d !"
    BT_AVRCP_PARSE_REG_EVENT_FAIL "[AVRCP] Unable parse register-noti response packet event_id:%d len:%d"
    BT_AVRCP_SMALL_PACKET_SIZE_FAIL "[AVRCP] AVRCP Packet size too small size:%d"
    BT_AVRCP_BWS_CMD_RSP "[AVRCP][BWS] AVRCP_UtilAVRCPBrowseCmdBufferRsp"
    BT_AVRCP_RECEIVE_RSP "[AVRCP] AVRCP_UtilAVRCPCmdBufferRsp chnl_num:%d c_type:%d pdu_id:%d "
    BT_AVRCP_SEND_RSP "[AVRCP] AVRCP_UtilCmdBufferRsp chnl_num:%d c_type:%d pdu_id:%d "
    BT_AVRCP_SEND_GENERIC_RSP "[AVRCP] AVRCP_UtilAVRCPCmdBufferRsp chnl_num:%d c_type:%d pdu_id:%d "
    BT_AVRCP_STATUS_REPORT_FAIL "[AVRCP] Not expect status:%d"
    BT_AVRCP_RSP_PACKET_INFO "[AVRCP] Recevie format:%d response:%d parm_len:%d more:%d"
    BT_AVRCP_STATUS_REPORT "[AVRCP] Return status:%d"
    BT_AVRCP_REDUCE_ITEM_LENGTH "[AVRCP] Element %d value_len is %d. reduce it to %d"
    BT_AVRCP_WRONG_ITEM_DATA_OFFSET "[AVRCP] Element %d value_offset is %d. reduce it to 1"
    BT_AVRCP_PACKET_START_TIMER "[AVRCP][CTIMER] StartTimer"
    BT_AVRCP_PACKET_CANCEL_TIMER "[AVRCP][CTIMER] CancelTimer startTimer:%d CmdTimeout:%d"
    BT_AVRCP_PACKET_TIMER_TIMEOUT "[AVRCP] Element %d value_offset is %d. reduce it to 1"
    BT_AVRCP_IGNORE_CONTINUE_EVENT "[AVRCP][WRN] Ignore BTAVRCP_EVENT_REQUEST_CONTINUING_CNF"
    BT_AVRCP_CMD_IND_RECEIVER "[AVRCP] Receive cmd packet chnl_num:%d type:%d size:%d"
    BT_AVRCP_AVC_HEADER_NOT_MATCH "[AVRCP][WRN] AV Header UNIT not match "
    BT_AVRCP_CMD_IND_DISPATCHER "[AVRCP] CBAVRCPCmdInd_Dispatcher chnl_num:%d pdu:%d parm_len:%d"




    BT_AVCTP_INIT_LOG "[AVCTP] AVCTP_Init"
    BT_AVCTP_DEINIT_LOG "[AVCTP] AVCTP_Deinit"
    BT_AVCTP_REGISTER_LOG "[AVCTP] Register chnl:%d callaback:0x%x"
    BT_AVCTP_DEREGISTER_LOG "[AVCTP] Deregister chnl:%d"
    BT_AVCTP_DEREGISTER_ALL_LOG "[AVCTP] Deregister all"
    BT_AVCTP_CONNECT_API_LOG "[AVCTP] Connect API psmtype:%d"
    BT_AVCTP_CONNECT_RSP_API_LOG "[AVCTP] Connect response API"
    BT_AVCTP_DISCONNECT_API_LOG "[AVCTP] Disconnect API"
    BT_AVCTP_SEND_COMMAND_API_LOG "[AVCTP] SEND_COMMAND_API"
    BT_AVCTP_SEND_RESPONSE_LOG "[AVCTP] SEND_RESPONSE"
    BT_AVCTP_SEND_RAWMESSAGE_LOG "[AVCTP] SEND_RAWMESSAGE"
    BT_AVCTP_STATE_DISCONNECTED_LOG "[AVCTP] StateMachine Dsiconnected chid:0x%x event:%d"
    BT_AVCTP_STATE_CONN_PENDING_LOG "[AVCTP] StateMachine CONN_PENDING chid:0x%x event:%d"
    BT_AVCTP_STATE_DISCON_PENDING_LOG "[AVCTP] StateMachine DISCON_PENDING chid:0x%x event:%d"
    BT_AVCTP_STATE_CONN_DISCONNECTED_LOG "[AVCTP] StateMachine CONN_DISCONNTED chid:0x%x event:%d"
    BT_AVCTP_STATE_CONN_INCOMING_LOG "[AVCTP] StateMachine CONN_INCOMING chid:0x%x event:%d"
    BT_AVCTP_STATE_DISC_PENDING_LOG "[AVCTP] StateMachine DISC_PENDING chid:0x%x event:%d"
    BT_AVCTP_STATE_DISC_INCOMING_LOG "[AVCTP] StateMachine DISC_INCOMING chid:0x%x event:%d"
    BT_AVCTP_STATE_CONNECTED_LOG "[AVCTP] StateMachine CONNECTED chid:0x%x event:%d"
    BT_AVCTP_STATE_INIT_MACHINE_LOG "[AVCTP] STATE_INIT_MACHINE "
    BT_AVCTP_CONN_FIND_CHANNEL_LOG "[AVCTP] Find a avctp Channel for address avctp_chnl:%x psm:0x%x"
    BT_AVCTP_CONN_FIND_FREECHANNEL_LOG "[AVCTP] Find a free avctp Channel at avctp_chnl:%x psm:0x%x"
    BT_AVCTP_CONN_ASSIGN_CHANNEL_LOG "[AVCTP] Assign AVCTP Channel to l2Channel psm:0x%x chid:0x%x"
    BT_AVCTP_L2CALLBACK_LOG "[AVCTP] AVCTP_L2Callback l2event:%d"
    BT_AVCTP_L2CALLBACK_REJECT_LOG "[AVCTP] AVCTP_L2Callback Reject psm:0x%x"
    BT_AVCTP_L2CALLBACK_NEW_CONNECTE_LOG "[AVCTP] AVCTP_L2Callback handle new connect chid:0x%x avctp_chnl:%x"
    BT_AVCTP_CONN_FREE_CHANNEL_LOG "[AVCTP] Free AVCTP channel chid:0x%x "
    BT_AVCTP_CONNECT_REQ_LOG "[AVCTP] AVCTP connect req num:%d"
    BT_AVCTP_DISCONNECT_REQ_LOG "[AVCTP] AVCTP disconnect req chid:%x"
    BT_AVCTP_CONNECT_RSP_LOG "[AVCTP] AVCTP connect response accept:%d chid:0x%x"
    BT_AVCTP_CONN_CB "[AVCTP] AVCTP signal Callback avctpevent:%d"
    BT_AVCTP_MSG_CB "[AVCTP] AVCTP data Callback avevent:%d"
    BT_AVCTP_MSG_CB_IGNORE_EVENT "[AVCTP] AVCTP data Callback ignore txState:%d"
    BT_AVCTP_MSG_HANDLE_COMMAND "[AVCTP] AVCTP Msg Handle command pktype:%d rxId:%d"
    BT_AVCTP_MSG_HANDLE_REJECT "[AVCTP] AVCTP Msg Handle reject rsp pktype:%d"
    BT_AVCTP_MSG_HANDLE_RESPONSE "[AVCTP] AVCTP Msg Handle response pktype:%d"
    BT_AVCTP_MSG_SEND_COMMAND "[AVCTP] AVCTP Msg Send command txState:%d"
    BT_AVCTP_MSG_INIT "[AVCTP] AvtpMsgInit"





    BT_GAVDP_FIND_CMGR_NODE "[GAVDP][GavdpFindCmgrNode]+++ cmgr handler addr: 0x%08x"
    BT_GAVDP_FIND_CMGR_FOUND "[GAVDP][GavdpFindCmgrNode] cmgrNode is found"
    BT_GAVDP_FIND_CMGR_NOT_FOUND "[GAVDP][GavdpFindCmgrNode][ERR]+++ cmgrNode is not found"

    BT_GAVDP_FIND_CHNL_NODE "[GAVDP][GavdpFindChnlNode]+++ channel addr: 0x%08x"
    BT_GAVDP_FIND_CHNL_FOUND "[GAVDP][GavdpFindChnlNode] chnlNode is found"
    BT_GAVDP_FIND_CHNL_NOT_FOUND "[GAVDP][GavdpFindChnlNode][ERR] chnlNode is not found"

    BT_GAVDP_ALL_CMGR_USED "[GAVDP][GavdpFindFreeCmgrNode][ERR] All cmgrNodes are in used"

    BT_GAVDP_ALL_CHNL_USED "[GAVDP][GavdpFindFreeChnlNode][ERR] All chnlNodes are in used"

    BT_GAVDP_CHNL_FIND_SEP "[GAVDP][GavdpFindSepByChannel]+++ channel addr: 0x%08x"
    BT_GAVDP_CHNL_FIND_SEP_FOUND "[GAVDP][GavdpFindSepByChannel] SEP is found"
    BT_GAVDP_CHNL_FIND_SEP_NOT_FOUND "[GAVDP][GavdpFindSepByChannel]SEP is not found"

    BT_GAVDP_CMGR_FIND_SEP "[GAVDP][GavdpFindSepByCmgrHdl]+++ cmgr handler addr: 0x%08x"
    BT_GAVDP_CMGR_FIND_SEP_FOUND "[GAVDP][GavdpFindSepByCmgrHdl] SEP is found"
    BT_GAVDP_CMGR_FIND_SEP_NOT_FOUND "[GAVDP][GavdpFindSepByCmgrHdl][ERR] SEP is not found"

    BT_GAVDP_ID_FIND_SEP "[GAVDP][GavdpFindSepById] SEP ID: %d"
    BT_GAVDP_ID_FIND_SEP_FOUND "[GAVDP][GavdpFindSepById] SEP is found"
    BT_GAVDP_ID_FIND_SEP_NOT_FOUND "[GAVDP][GavdpFindSepById][ERR] SEP is not found"

    BT_GAVDP_SEP_AVAILABLE "[GAVDP][GavdpIsSepAvailable] SEP is available"
    BT_GAVDP_SEP_NOT_AVAILABLE "[GAVDP][GavdpIsSepAvailable][ERR] SEP is not available"

    BT_GAVDP_DEV_CONNECTED "[GAVDP][GavdpIsDevConnected] Dev is connected"
    BT_GAVDP_DEV_NOT_CONNECTED "[GAVDP][GavdpIsDevConnected] Dev is not connected"

    BT_GAVDP_LOCAL_SBC_BYTE0 "[GAVDP][GavdpDecideConfig] local codec info:0x%x"
    BT_GAVDP_LOCAL_SBC_BYTE1 "[GAVDP][GavdpDecideConfig] local codec info:0x%x"
    BT_GAVDP_LOCAL_SBC_BYTE2 "[GAVDP][GavdpDecideConfig] local codec info:0x%x"
    BT_GAVDP_LOCAL_SBC_BYTE3 "[GAVDP][GavdpDecideConfig] local codec info:0x%x"
    BT_GAVDP_REMOTE_SBC_BYTE0 "[GAVDP][GavdpDecideConfig] remote codec info:0x%x"
    BT_GAVDP_REMOTE_SBC_BYTE1 "[GAVDP][GavdpDecideConfig] remote codec info:0x%x"
    BT_GAVDP_REMOTE_SBC_BYTE2 "[GAVDP][GavdpDecideConfig] remote codec info:0x%x"
    BT_GAVDP_REMOTE_SBC_BYTE3 "[GAVDP][GavdpDecideConfig] remote codec info:0x%x"
    BT_GAVDP_CFG_SBC_BYTE0 "[GAVDP][GavdpDecideConfig] config_codec info:0x%x"
    BT_GAVDP_CFG_SBC_BYTE1 "[GAVDP][GavdpDecideConfig] config_codec info:0x%x"
    BT_GAVDP_CFG_SBC_BYTE2 "[GAVDP][GavdpDecideConfig] config_codec info:0x%x"
    BT_GAVDP_CFG_SBC_BYTE3 "[GAVDP][GavdpDecideConfig] config_codec info:0x%x"
    BT_GAVDP_NO_MATCHED_SMAPLING_FREQ "[GAVDP][GavdpDecideConfig]no matched sampling frequency---"
    BT_GAVDP_NO_MATCHED_CH_MODE "[GAVDP][GavdpDecideConfig][ERR] no matched channel mode---"
    BT_GAVDP_NO_MATCHED_BLK_LEN "[GAVDP][GavdpDecideConfig][ERR] no matched SBC block length---"
    BT_GAVDP_NO_MATCHED_SBAND_NUM "[GAVDP][GavdpDecideConfig][ERR] no matched SBC subband number---"
    BT_GAVDP_NO_MATCHED_ALLOC "[GAVDP][GavdpDecideConfig][ERR] no matched allocated method---"

    BT_GAVDP_LINK_AVDTP_CHNL "[GAVDP][GavdpConnectAvdtpChannel]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d"
    BT_GAVDP_LINK_AVDTP_CHNL_BUSY "[GAVDP][GavdpConnectAvdtpChanne] status == BT_STATUS_BUSY"
    BT_GAVDP_LINK_AVDTP_CHNL_PENDING "[GAVDP][GavdpConnectAvdtpChanne] status == BT_STATUS_PENDING"
    BT_GAVDP_LINK_AVDTP_CHNL_FAILED "[GAVDP][GavdpConnectAvdtpChanne] [ERR] AVDTP_Connect failed, try to disconnect 4"

    BT_GAVDP_DISCOVER_STRM_REQ "[GAVDP][GavdpDiscoverStreamsReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d"
    BT_GAVDP_DISCOVER_STRM_REQ_PENDING "[GAVDP][GavdpDiscoverStreamsReq] status == BT_STATUS_PENDING"

    BT_GAVDP_GET_CAP_REQ "[GAVDP][GavdpGetCapabilityReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d"
    BT_GAVDP_GET_CAP_REQ_PENDING "[GAVDP][GavdpGetCapabilityReq] status == BT_STATUS_PENDING"

    BT_GAVDP_SET_CFG_REQ "[GAVDP][GavdpSetConfigurationReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d"
    BT_GAVDP_SET_CFG_REQ_NO_MATCHED_CODEC "[GAVDP][GavdpSetConfigurationReq][ERR] no matched codec settings---"
    BT_GAVDP_SET_CFG_REQ_PENDING "[GAVDP][GavdpSetConfigurationReq] status == BT_STATUS_PENDING"

    BT_GAVDP_OPEN_STRM_REQ "[GAVDP][GavdpOpenStreamReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d"
    BT_GAVDP_OPEN_STRM_REQ_PENDING "[GAVDP][GavdpOpenStreamReq] status == BT_STATUS_PENDING"



    BT_GAVDP_GAVDP_CBK_INFO1 "[GAVDP][GavdpGavdpEventCallback]+++ SEP addr: 0x%08x, event: %d, error: %d"
    BT_GAVDP_GAVDP_CBK_SEP_STAT "[GAVDP][GavdpGavdpEventCallback] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_GAVDP_CBK_STRM_EST_FAIL "[GAVDP][GavdpGavdpEventCallback][GAVDP_EVENT_STREAM_ESTABLISH_CNF][ERR] AVDTP_Disconnect"

    BT_GAVDP_CMGR_CBK_INFO1 "[GAVDP][GavdpCmgrEventCallback]+++ cmgrHdlr addr: 0x%08x, event: %d, status: %d"
    BT_GAVDP_CMGR_CBK_CON_OUTGOING "[GAVDP][GavdpCmgrEventCallback] GAVDP(sig_conn_state) == GAVDP_STATE_SIG_CONNECT_OUTGOING"
    BT_GAVDP_CMGR_CBK_LINK_CON_CNF_SUCCESS "[GAVDP][GavdpCmgrEventCallback][CMEVENT_DATA_LINK_CON_CNF] status == BT_STATUS_SUCCESS"
    BT_GAVDP_CMGR_CBK_LINK_CON_CNF_FAILED "[GAVDP][GavdpCmgrEventCallback][CMEVENT_DATA_LINK_CON_CNF][ERR] CMGR_CreateDataLink failed, try to disconnect 3"

    BT_GAVDP_AVDTP_CBK_INFO1 "[GAVDP][GavdpAvdtpEnventCallback]+++ chnl: 0x%08x, event: %d"
    BT_GAVDP_AVDTP_CBK_SEP_NOT_REG "[GAVDP][GavdpAvdtpEnventCallback][ERR] this sep is not registered"
    BT_GAVDP_AVDTP_CBK_USE_FAKE_SEP "[GAVDP][GavdpAvdtpEnventCallback] sep = &GAVDP(fake_sep)"
    BT_GAVDP_AVDTP_CBK_SEP_STAT "[GAVDP][GavdpAvdtpEnventCallback] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_AVDTP_CBK_CONNECTED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT]+++ err code: %d"
    BT_GAVDP_AVDTP_CBK_CONNECTED_OUT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT]GAVDP_STATE_SIG_CONNECT_OUTGOING"
    BT_GAVDP_AVDTP_CBK_CONNECTED_IN "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT]GAVDP_STATE_SIG_CONNECT_INCOMING"
    BT_GAVDP_AVDTP_CBK_CONNECTED_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT][ERR] bad GAVDP(sig_conn_state)"
    BT_GAVDP_AVDTP_CBK_CONNECT_IND_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND][ERR] bad state, AVDTP_ConnectRsp(FALSE)"
    BT_GAVDP_AVDTP_CBK_CONNECT_IND "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND] Sep is available"
    BT_GAVDP_AVDTP_CBK_CONNECT_IND_CMGR_SUCCESS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND] CMGR_CreateDataLink success, AVDTP_ConnectRsp(TRUE)"
    BT_GAVDP_AVDTP_CBK_CONNECT_IND_CMGR_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND][ERR] CMGR_CreateDataLink fail, AVDTP_ConnectRsp(FALSE)"
    BT_GAVDP_AVDTP_CBK_CONNECT_IND_NO_SEP "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND][ERR]  no available SEP "
    BT_GAVDP_AVDTP_CBK_DISCOVER_IND_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_IND][ERR] est state error, currnet state: %d, AVDTP_DiscoverStreamsRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_DISCOVER_IND_ACPT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_IND]AVDTP_DiscoverStreamsRsp(ACCEPT)"
    BT_GAVDP_AVDTP_CBK_STRM_INFO "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_INFO]+++ get sep list info..."
    BT_GAVDP_AVDTP_CBK_STRM_INFO_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_INFO][ERR] est state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_DISCOVER_CNF "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_CNF] discover completed"
    BT_GAVDP_AVDTP_CBK_DISCOVER_CNF_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_CNF][ERR] discover failed"
    BT_GAVDP_AVDTP_CBK_DISCOVER_CNF_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_CNF][ERR] est state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND][ERR] est state error, currnet state: %d, AVDTP_GetCapabilitiesRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_RAW_DATALEN "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] rawDataLen: %d"
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_RAW_DATA0 "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] p.data[0]: 0x%02x"
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACP_SEP_ID "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] acp_id: %d"
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACP_SEP_ADDR "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] acp_sep: 0x%08x"
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACPT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] AVDTP_GetCapabilitiesRsp(ACCEPT)"
    BT_GAVDP_AVDTP_CBK_CAP_INFO "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CAPABILITY]+++ get sep capa info..."
    BT_GAVDP_AVDTP_CBK_CAP_INFO_CNT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CAPABILITY] remote conunt: %d"
    BT_GAVDP_AVDTP_CBK_CAP_CNF "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF] get cap completed"
    BT_GAVDP_AVDTP_CBK_CAP_CNF_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF][ERR] get cap failed"
    BT_GAVDP_AVDTP_CBK_CAP_CNF_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF][ERR] est state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND][ERR] est state error, currnet state: %d, AVDTP_SetConfigRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_RAW_DATALEN "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] rawDataLen: %d"
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_RAW_DATA012 "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] rawData[0]: 0x%02x,  rawData[1]: 0x%02x, rawData[2]: 0x%02x"
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_PKT_DATA012 "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] p.data[0]: 0x%02x,  p.data[1]: 0x%02x, p.data[2]: 0x%02x"
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_SEP_NOT_FOUND "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND][ERR] SEP is not found, AVDTP_SetConfigRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_CODEC_MISMATCHED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND][ERR] codec does not match, AVDTP_SetConfigRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_ACPT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] AVDTP_SetConfigRsp(ACCEPT)"
    BT_GAVDP_AVDTP_CBK_SET_CFG_CNF "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_CNF] set cap completed"
    BT_GAVDP_AVDTP_CBK_SET_CFG_CNF_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_CNF][ERR] set cap failed"
    BT_GAVDP_AVDTP_CBK_SET_CFG_CNF_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_CNF][ERR] est state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_OPEN_IND_BAD_SEP "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN_IND][ERR]sep is not correct, open sep id:  %d, set config sep id: %d, AVDTP_OpenStreamRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_OPEN_IND_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN_IND][ERR] est state error, currnet state: %d, AVDTP_OpenStreamRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_OPEN_IND "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN_IND] call back to app"
    BT_GAVDP_AVDTP_CBK_OPEN_CNF "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN]GAVDP(sig_conn_state) = GAVDP_STATE_SIG_IDLE"
    BT_GAVDP_AVDTP_CBK_OPEN_CNF_SUCCESS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN]sep->stream_state = GAVDP_STATE_OPEN"
    BT_GAVDP_AVDTP_CBK_OPEN_CNF_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN][ERR] sep->stream_state = GAVDP_STATE_IDLE"
    BT_GAVDP_AVDTP_CBK_OPEN_CNF_HAS_OPEND "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN][ERR] stream has already opened by headset"
    BT_GAVDP_AVDTP_CBK_OPEN_CNF_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN][ERR] est state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_START_IND_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_START_IND]sep->command_stage = GAVDP_WAIT_RES_START"
    BT_GAVDP_AVDTP_CBK_START_IND "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_START_IND]call back to app"
    BT_GAVDP_AVDTP_CBK_START_IND_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_START_IND][ERR] state error, currnet state: %d,AVDTP_StartStreamRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_START_CNF_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]sep->command_stage = GAVDP_WAIT_NONE"
    BT_GAVDP_AVDTP_CBK_START_CNF_STAT_TRANS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]sep->stream_state = GAVDP_STATE_STREAMING"
    BT_GAVDP_AVDTP_CBK_START_CNF_SUCCESS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]stream start completed"
    BT_GAVDP_AVDTP_CBK_START_CNF_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED][ERR] stream start failed"
    BT_GAVDP_AVDTP_CBK_START_CNF_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED][ERR] state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_SUSPEND_IND_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPEND_IND] sep->command_stage = GAVDP_WAIT_RES_SUSPEND"
    BT_GAVDP_AVDTP_CBK_SUSPEND_IND "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPEND_IND] call back to app"
    BT_GAVDP_AVDTP_CBK_SUSPEND_IND_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPEND_IND][ERR] state error, currnet state: %d,AVDTP_SuspendStreamRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED] sep->command_stage = GAVDP_WAIT_NONE"
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_STAT_TRANS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED] sep->stream_state = GAVDP_STATE_OPEN"
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_SUCCESS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED] stream suspend completed"
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED][ERR] stream suspend failed"
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED][ERR] state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_RECONFIG_IND_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_IND] sep->command_stage = GAVDP_WAIT_RES_RECONFIG"
    BT_GAVDP_AVDTP_CBK_RECONFIG_IND "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_IND] call back to app"
    BT_GAVDP_AVDTP_CBK_RECONFIG_IND_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_IND][ERR] state error, currnet state: %d, AVDTP_ReconfigRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF] sep->command_stage = GAVDP_WAIT_NONE"
    BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_SUCCESS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF] stream reconfig completed"
    BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF][ERR] stream reconfig failed"
    BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF][ERR] state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_ABORT_IND_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORT_IND] sep->command_stage = GAVDP_WAIT_RES_ABORT"
    BT_GAVDP_AVDTP_CBK_ABORT_IND "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORT_IND] call back to app"
    BT_GAVDP_AVDTP_CBK_ABORT_CNF_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED][ERR] state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_ABORT_CNF_STAT_TRANS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED] sep->stream_state = GAVDP_STATE_IDLE"
    BT_GAVDP_AVDTP_CBK_ABORT_CNF "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED] stream abort completed"
    BT_GAVDP_AVDTP_CBK_ABORT_CNF_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED] sep->command_stage = sep->command_stage = GAVDP_WAIT_NONE"
    BT_GAVDP_AVDTP_CBK_CLOSE_IND_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSE_IND] sep->command_stage = GAVDP_WAIT_RES_CLOSE"
    BT_GAVDP_AVDTP_CBK_CLOSE_IND "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSE_IND] call back to app"
    BT_GAVDP_AVDTP_CBK_CLOSE_IND_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSE_IND][ERR] state error, currnet state: %d, AVDTP_CloseStreamRsp(REJECT)"
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_CMD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED] sep->command_stage = GAVDP_WAIT_NONE"
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_STAT_TRANS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED] sep->stream_state = GAVDP_STATE_IDLE"
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_SUCCESS "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED]stream close completed"
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_FAILED "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED][ERR] stream close failed"
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_BAD_STAT "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED][ERR] state error, currnet state: %d"
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_DISC_SIG_CHNL "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED] AVDTP_Disconnect"
    BT_GAVDP_AVDTP_CBK_PACKET_SENT "[GAVDP][GavdpAvdtpEnventCallback][VDTP_EVENT_STREAM_PACKET_SENT] packet sent completed"
    BT_GAVDP_AVDTP_CBK_DISC_SIG_CHNL "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] signal channel disconnected"
    BT_GAVDP_AVDTP_CBK_DISC_CMGR "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] cmgrNode == 0"
    BT_GAVDP_AVDTP_CBK_DISC_CHNL "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] chnlNode == 0"
    BT_GAVDP_AVDTP_CBK_DISC_STRM_CHNL "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] stream channel disconnected"



    BT_GAVDP_INIT "[GAVDP][GAVDP_Init]"
    BT_GAVDP_INIT_ALREADY "[GAVDP][GAVDP_Init][ERR]GAVDP_ERR_ALREADY_INIT"

    BT_GAVDP_REG "[GAVDP][GAVDP_Register]+++ SEP addr: 0x%08x"
    BT_GAVDP_REG_NO_SEP "[GAVDP][GAVDP_Register][ERR] sep node is already on the list"
    BT_GAVDP_REG_SEP_ID "[GAVDP][GAVDP_Register] sep->info.id: %d"
    BT_GAVDP_REG_CHNL "[GAVDP][GAVDP_Register] AVDTP event callback register, channel"
    BT_GAVDP_REG_STRM "[GAVDP][GAVDP_Register] AVDTP_RegisterStream"
    BT_GAVDP_REG_STRM_ID "[GAVDP][GAVDP_Register] sep->stream.locStrmId : %d"
    BT_GAVDP_REG_CMGR "[GAVDP][GAVDP_Register] CMGR event callback register, cmgr_hdlr"
    BT_GAVDP_REG_INS_SEP "[GAVDP][GAVDP_Register] Insert SEP node, SEP address: 0x%08x, Callback address: 0x%08x"
    BT_GAVDP_REG_INS_CHNL "[GAVDP][GAVDP_Register] Insert channel node"
    BT_GAVDP_REG_INS_CMGR "[GAVDP][GAVDP_Register] Insert cmgr node"

    BT_GAVDP_DEREG "[GAVDP][GAVDP_DeRegister]+++ SEP addr: 0x%08x"
    BT_GAVDP_DEREG_NO_SEP "[GAVDP][GAVDP_DeRegister][ERR] sep node is not on the list"
    BT_GAVDP_DEREG_STRM "[GAVDP][GAVDP_DeRegister] AVDTP_DeregisterStream"
    BT_GAVDP_DEREG_CMGR_NOT_RECALL "[GAVDP][GAVDP_DeRegister][ERR] sep->cmgr_hdlr != 0"
    BT_GAVDP_DEREG_CMGR "[GAVDP][GAVDP_DeRegister] CMGR_DeregisterHandler(cmgr_hdlr)"
    BT_GAVDP_DEREG_CHNL_NOT_RECALL "[GAVDP][GAVDP_DeRegister][ERR] sep->signal_channel != 0"
    BT_GAVDP_DEREG_CHNL "[GAVDP][GAVDP_DeRegister] AVDTP_Deregister(channel)"

    BT_GAVDP_EST_CON_REQ "[GAVDP][GAVDP_EstablishConnectionReq]+++ SEP addr: 0x%08x, BD addr: %01x:%01x:%01x:%01x:%01x:%01x"
    BT_GAVDP_EST_CON_REQ_STAT "[GAVDP][GAVDP_EstablishConnectionReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_EST_CON_REQ_BAD_STAT "[GAVDP][GAVDP_EstablishConnectionReq][ERR] conn state error"
    BT_GAVDP_EST_CON_REQ_STAT_TRANS "[GAVDP][GAVDP_EstablishConnectionReq] GAVDP(sig_conn_state) = GAVDP_STATE_SIG_CONNECT_OUTGOING"
    BT_GAVDP_EST_CON_REQ_CMGR_PENDING "[GAVDP][GAVDP_EstablishConnectionReq] CMGR_CreateDataLink status == BT_STATUS_PENDING"
    BT_GAVDP_EST_CON_REQ_CMGR_SUCCESS "[GAVDP][GAVDP_EstablishConnectionReq] CMGR_CreateDataLink status == BT_STATUS_SUCCESS"
    BT_GAVDP_EST_CON_REQ_CMGR_FAILED "[GAVDP][GAVDP_EstablishConnectionReq] CMGR_CreateDataLink failed, GAVDP(sig_conn_state) = GAVDP_STATE_SIG_IDLE, try to disconnect 1"

    BT_GAVDP_EST_CON_RSP "[GAVDP][GAVDP_EstablishConnectionRsp]+++ SEP addr: 0x%08x, result: %d"
    BT_GAVDP_EST_CON_RSP_STAT "[GAVDP][GAVDP_EstablishConnectionRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_EST_CON_RSP_STAT_TRANS "[GAVDP][GAVDP_EstablishConnectionRsp] GAVDP(sig_conn_state) = GAVDP_STATE_SIG_IDLE, sep->stream_state = GAVDP_STATE_IDLE"
    BT_GAVDP_EST_CON_RSP_ACPT "[GAVDP][GAVDP_EstablishConnectionRsp] sep->stream_state = GAVDP_STATE_OPEN, AVDTP_OpenStreamRsp(ACCEPT)"
    BT_GAVDP_EST_CON_RSP_REJ "[GAVDP][GAVDP_EstablishConnectionRsp] AVDTP_OpenStreamRsp(REJECT)"
    BT_GAVDP_EST_CON_RSP_BAD_STAT "[GAVDP][GAVDP_EstablishConnectionRsp] state error, AVDTP_OpenStreamRsp(REJECT)"

    BT_GAVDP_START_STRM_REQ "[GAVDP][GAVDP_StartStreamReq]+++ SEP addr: 0x%08x"
    BT_GAVDP_START_STRM_REQ_STAT "[GAVDP][GAVDP_StartStreamReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_START_STRM_REQ_BAD_STAT "[GAVDP][GAVDP_StartStreamReq][ERR] state error"
    BT_GAVDP_START_STRM_REQ_PENDING "[GAVDP][GAVDP_StartStreamReq] AVDTP_StartStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_START"
    BT_GAVDP_START_STRM_REQ_FAILED "[GAVDP][GAVDP_StartStreamReq][ERR] AVDTP_StartStream != BT_STATUS_PENDING"

    BT_GAVDP_START_STRM_RSP "[GAVDP][GAVDP_StartStreamRsp]+++ SEP addr: 0x%08x, result: %d"
    BT_GAVDP_START_STRM_RSP_STAT "[GAVDP][GAVDP_StartStreamRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_START_STRM_RSP_ACPT "[GAVDP][GAVDP_StartStreamRsp] sep->stream_state = GAVDP_STATE_STREAMING, AVDTP_StartStreamRsp(ACCEPT)"
    BT_GAVDP_START_STRM_RSP_REJ "[GAVDP][GAVDP_StartStreamRsp] sep->stream_state = GAVDP_STATE_OPEN , AVDTP_StartStreamRsp(REJECT)"
    BT_GAVDP_START_STRM_RSP_BAD_STAT "[GAVDP][GAVDP_StartStreamRsp][ERR] state error, AVDTP_StartStreamRsp(REJECT)"

    BT_GAVDP_SUSPEND_STRM_REQ "[GAVDP][GAVDP_SuspendStreamReq]+++ SEP addr: 0x%08x"
    BT_GAVDP_SUSPEND_STRM_REQ_STAT "[GAVDP][GAVDP_SuspendStreamReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_SUSPEND_STRM_REQ_BAD_STAT "[GAVDP][GAVDP_SuspendStreamReq][ERR] state error"
    BT_GAVDP_SUSPEND_STRM_REQ_PENDING "[GAVDP][GAVDP_SuspendStreamReq] AVDTP_SuspendStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_SUSPEND"
    BT_GAVDP_SUSPEND_STRM_REQ_FAILED "[GAVDP][GAVDP_SuspendStreamReq][ERR] AVDTP_SuspendStream != BT_STATUS_PENDING"

    BT_GAVDP_SUSPEND_STRM_RSP "[GAVDP][GAVDP_SuspendStreamRsp]+++ SEP addr: 0x%08x, result: %d"
    BT_GAVDP_SUSPEND_STRM_RSP_STAT "[GAVDP][GAVDP_SuspendStreamRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_SUSPEND_STRM_RSP_ACPT "[GAVDP][GAVDP_SuspendStreamRsp] sep->stream_state = GAVDP_STATE_OPEN, AVDTP_SuspendStreamRsp(ACCEPT)"
    BT_GAVDP_SUSPEND_STRM_RSP_REJ "[GAVDP][GAVDP_SuspendStreamRsp] sep->stream_state = GAVDP_STATE_STREAMING, AVDTP_SuspendStreamRsp(REJECT)"
    BT_GAVDP_SUSPEND_STRM_RSP_BAD_STAT "[GAVDP][GAVDP_SuspendStreamRsp][ERR] state error, AVDTP_StartStreamRsp(REJECT)"

    BT_GAVDP_CHG_PARA_REQ "[GAVDP][GAVDP_ChangeParametersReq]+++ SEP addr: 0x%08x"
    BT_GAVDP_CHG_PARA_REQ_STAT "[GAVDP][GAVDP_ChangeParametersReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_CHG_PARA_REQ_BAD_STAT "[GAVDP][GAVDP_ChangeParametersReq][ERR] state error"
    BT_GAVDP_CHG_PARA_REQ_PENDING "[GAVDP][GAVDP_ChangeParametersReq] AVDTP_Reconfig == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_RECONFIG"
    BT_GAVDP_CHG_PARA_REQ_FAILED "[GAVDP][GAVDP_ChangeParametersReq][ERR] AVDTP_Reconfig != BT_STATUS_PENDING"

    BT_GAVDP_CHG_PARA_RSP "[GAVDP][GAVDP_ChangeParametersRsp]+++ SEP addr: 0x%08x, result: %d"
    BT_GAVDP_CHG_PARA_RSP_STAT "[GAVDP][GAVDP_ChangeParametersRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_CHG_PARA_RSP_ACPT "[GAVDP][GAVDP_ChangeParametersRsp] AVDTP_ReconfigRsp(ACCEPT)"
    BT_GAVDP_CHG_PARA_RSP_REJ "[GAVDP][GAVDP_ChangeParametersRsp] AVDTP_ReconfigRsp(REJECT)"
    BT_GAVDP_CHG_PARA_RSP_BAD_STAT "[GAVDP][GAVDP_ChangeParametersRsp][ERR] state error, AVDTP_ReconfigRsp(REJECT)"

    BT_GAVDP_ABORT_REQ "[GAVDP][GAVDP_AbortReq]+++ SEP addr: 0x%08x"
    BT_GAVDP_ABORT_REQ_STAT "[GAVDP][GAVDP_AbortReq]GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_ABORT_REQ_BAD_STAT "[GAVDP][GAVDP_AbortReq][ERR] state error"
    BT_GAVDP_ABORT_REQ_PENDING "[GAVDP][GAVDP_AbortReq]AVDTP_AbortStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_ABORT"
    BT_GAVDP_ABORT_REQ_FAILED "[GAVDP][GAVDP_AbortReq][ERR] AVDTP_AbortStream != BT_STATUS_PENDING"

    BT_GAVDP_ABORT_RSP "[GAVDP][GAVDP_AbortRsp]+++SEP addr: 0x%08x"
    BT_GAVDP_ABORT_RSP_STAT "[GAVDP][GAVDP_AbortRsp]GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_ABORT_RSP_ACPT "[GAVDP][GAVDP_AbortRsp]sep->stream_state = GAVDP_STATE_IDLE, AVDTP_AbortStreamRsp"

    BT_GAVDP_REL_CON_REQ "[GAVDP][GAVDP_ReleaseConnectionReq]+++ SEP addr: 0x%08x"
    BT_GAVDP_REL_CON_REQ_STAT "[GAVDP][GAVDP_ReleaseConnectionReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_REL_CON_REQ_BAD_STAT "[GAVDP][GAVDP_ReleaseConnectionReq][ERR] state error"
    BT_GAVDP_REL_CON_REQ_PENDING "[GAVDP][GAVDP_ReleaseConnectionReq] AVDTP_CloseStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_CLOSE"
    BT_GAVDP_REL_CON_REQ_FAILED "[GAVDP][GAVDP_ReleaseConnectionReq][ERR] AVDTP_CloseStream != BT_STATUS_PENDING"

    BT_GAVDP_REL_CON_RSP "[GAVDP][GAVDP_ReleaseConnectionRsp]+++ SEP addr: 0x%08x"
    BT_GAVDP_REL_CON_RSP_STAT "[GAVDP][GAVDP_ReleaseConnectionRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_REL_CON_RSP_ACPT "[GAVDP][GAVDP_ReleaseConnectionRsp] AVDTP_CloseStreamRsp(ACCEPT), sep->command_stage = GAVDP_STATE_IDLE"
    BT_GAVDP_REL_CON_RSP_REJ "[GAVDP][GAVDP_ReleaseConnectionRsp] AVDTP_CloseStreamRsp(REJECT)"
    BT_GAVDP_REL_CON_RSP_BAD_STAT "[GAVDP][GAVDP_ReleaseConnectionRsp][ERR] state error, AVDTP_CloseStreamRsp(REJECT)"

    BT_GAVDP_SEND_DATA_REQ "[GAVDP][GAVDP_StreamSendDataReq]+++ SEP addr: 0x%08x"
    BT_GAVDP_SEND_DATA_REQ_STAT "[GAVDP][GAVDP_StreamSendDataReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d"
    BT_GAVDP_SEND_DATA_REQ_BAD_LEN "[GAVDP][GAVDP_StreamSendDataReq][ERR] buffer_size == 0, GAVDP_ERR_BAD_LENGTH"
    BT_GAVDP_SEND_DATA_REQ_FATAL "[GAVDP][GAVDP_StreamSendDataReq][ERR] AVDTP_SendStreamData == 0, GAVDP_ERR_FATAL"
    BT_GAVDP_SEND_DATA_REQ_SUCCESS "[GAVDP][GAVDP_StreamSendDataReq] HCI_Process"



    BT_A2DP_CMGR_CLOSE "[A2DP] close cmgr link, stream id = %d"
    BT_A2DP_CMGR_EVENT_CALLBACK "[A2DP] cmgr callback event: %d, status: %d"
    BT_A2DP_SDP_EVENT_CALLBACK "[A2DP] sdp query callback, result:%d, stream_handler:%d, wait cnf:%d, attr ind:%d"
    BT_A2DP_SDP_REQUERY_SUCCESS "[A2DP] for A2DP re-query sdp success,connect GAVDP now"
    BT_A2DP_SDP_SUCCESS_AND_CONN_GAVDP "[A2DP] try to connect gavdp, UUID:%x"
    BT_A2DP_DO_SDP_AGAIN "[A2DP] Do SDP query again for A2DP"
    BT_A2DP_DO_SDP_QUERY "[A2DP] sdp query, stream id: %d"
    BT_A2DP_BAD_ADDRESS "[A2DP] unrecognize addr"
    BT_A2DP_RELEASE_STREAM_HDL "[A2DP] release stream handler: %d"
    BT_A2DP_CONTINUE_OPEN_REQ "[A2DP] A2dpContinueOpenReq, bt addr: %x, %x, %x, stream hdl: %d"
    BT_A2DP_DEVICE_OPENED "[A2DP] open req, this device has been connected."
    BT_A2DP_GET_STREAM_HDL_ERR "[A2DP] get stream handler error."
    BT_A2DP_GET_STREAM_SEP_ERR "[A2DP] get stream endpoint error."
    BT_A2DP_CONTINUE_OPEN_INFO "[A2DP] sep infor: %d, stream hdl: %d"
    BT_A2DP_STREAM_OPEN "[A2DP] A2DP_StreamOpenReq: %x, %x, %x"
    BT_A2DP_OPEN_CNF_INFO "[A2DP] open cnf error: %d, steam_handler: %d, wait cnf: %d, wait res: %d"
    BT_A2DP_ADDR "[A2DP] addr: %2x%2x%2x%2x%2x%2x"
    BT_A2DP_STREAM_HANDLE "[A2DP] stream handler: %d"
    BT_A2DP_OPEN_IND "[A2DP] stream open ind, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_OPEN_RES "[A2DP] stream open ind, result: %d, stream hdl: %d, wait res: %d"
    BT_A2DP_RECONFIG_REQ "[A2DP] stream reconfig req, stream hdl: %d, wait cnf: %d"
    BT_A2DP_RECONFIG_CNF "[A2DP] stream reconfig cnf, stream hdl: %d, error: %d"
    BT_A2DP_RECONFIG_IND "[A2DP] stream reconfig ind, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_RECONFIG_RES "[A2DP] stream reconfig res, result: %d, stream hdl: %d, wait res: %d"
    BT_A2DP_START_REQ "[A2DP] stream start req, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_START_CNF "[A2DP] stream start cnf, stream hdl: %d, error: %d, wait cnf: %d, wait res: %d, wait started: %d, suspend: %d"
    BT_A2DP_START_IND "[A2DP] stream start ind, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_START_RES "[A2DP] stream start res, result: %d, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_SUSPEND_REQ "[A2DP] stream suspend req, stream hdl: %d, wait res: %d, wait cnf: %d, wait started: %d"
    BT_A2DP_SUSPEND_CNF "[A2DP] stream suspend cnf, stream hdl: %d, error: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_SUSPEND_IND "[A2DP] stream suspend ind, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_SUSPEND_RES "[A2DP] stream suspend res, result: %d, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_CLOSE_REQ "[A2DP] stream close req, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_CLOSE_CNF "[A2DP] stream close cnf, stream hdl: %d, error: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_CLOSE_IND "[A2DP] stream close ind, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_CLOSE_RES "[A2DP] stream close res, result: %d, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_ABORT_REQ "[A2DP] stream abort req, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_ABORT_CNF "[A2DP] stream abort cnf, stream hdl: %d, error: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_ABORT_IND "[A2DP] stream abort ind, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_ABORT_RES "[A2DP] stream abort res, stream hdl: %d, wait res: %d, wait cnf: %d"
    BT_A2DP_DELAY_SEND_QOS "[A2DP] delay send qos to upper layer."
    BT_A2DP_SEND_STREAM_DATA "[A2DP] send stream data, dev num: %d, in use: %d, stream state: %d, len: %d"
    BT_A2DP_GAVDP_EVENT_CALLBACK "[A2DP] gavdp callback event: %d"
    BT_A2DP_INIT "[A2DP] bt_a2dp_init"
    BT_A2DP_DEINIT "[A2DP] bt_a2dp_deinit"
    BT_A2DP_ACTIVATE "[A2DP]activate, local role: %d, sep num: %d, is active: %d"
    BT_A2DP_DEACTIVATE "[A2DP]deactivate, is active: %d"
    BT_A2DP_STOP_FM "[A2DP] fm over controller stop fm, link state: %d, enabled: %d, mode: %d, link: %x"
    BT_A2DP_START_FM "[A2DP] fm over controller start fm, stream hdl: %d"
    BT_A2DP_SUSPEND_FM "[A2DP] fm over controller suspend fm, stream hdl: %d"
    BT_A2DP_RESUME_FM "[A2DP] fm over controller resume fm, stream hdl: %d"
    BT_A2DP_STOP_FM_REQ "[A2DP] fm over controller stop fm, stream hdl: %d"
    BT_A2DP_FM_SET_CODEC_ELEMENT "[A2DP] fm over controller set codec elemLen: %d, element: %d"
    BT_A2DP_STREAM_SEND_DATA_REQ "bt_a2dp_stream_send_data_req: state=%d, wait_cnf=%d, wait_res=%d"
    BT_A2DP_PANIC "bt_a2dp_panic: state=%d, wait_cnf=%d, wait_res=%d"
    BT_A2DP_PRINT_STATE "bt_a2dp: state=%d"
    BT_A2DP_PRINT_VALUE1 "bt_a2dp: value=%d"
    BT_A2DP_PRINT_VALUE2 "bt_a2dp: value1=%d, value2=%d"
    BT_A2DP_PRINT_VALUE3 "bt_a2dp: value1=%d, value2=%d, value3=%d"
    BT_A2DP_PRINT_VALUE4 "bt_a2dp: value1=%d, value2=%d, value3=%d, value4=%d"
    BT_A2DP_PRINT_VALUE5 "bt_a2dp: value1=%d, value2=%d, value3=%d, value4=%d, value5=%d"
    BT_A2DP_PRINT_VALUE6 "bt_a2dp: value1=%d, value2=%d, value3=%d, value4=%d, value5=%d, value6=%d"




    BT_JSR82_DEACTIVATE_STATUD_CONID "bt_jsr82_HandleJSR82Deactivate(): stauts=%02X,con_id=%02X"
    BT_JSR82_DEACTIVATE_FIND_CHNL_INX "bt_jsr82_HandleJSR82Deactivate(): Find jsr82 channel :%02x"
    BT_JSR82_DEACTIVATE_DEREG_CHNL_STATUS "bt_jsr82_HandleJSR82Deactivate():Deregister channel :%02x"
    BT_JSR82_VM_END_PEND_CON_REQ_PS_TYPE "VM termination: pend con req is chnl OPEN with ps_type=%d,then disc link"
    BT_JSR82_VM_DISC_ALL_LINK_PEND_CON_REQ_NO_TYPE "BTJSR82_CheckSendVMDiscAllLinksCnf(): vm_request_disc_all_link_but_pending_conreq_no=%d,type=%d"
    BT_JSR82_AUTH_COMPLETE_BUT_ONE_ENCRYPT_ON_GOING "bt_jsr82_HandleAuthenticationCnf():Complete Auth,but One encryption is on onging"
    BT_JSR82_SEC_LINK_ENCRYPT_STATUS "bt_jsr82_HandleAuthenticationCnf(): return from SEC_SetLinkEncryption err=%d"
    BT_JSR82_GET_SESSION_INX "BTJSR82_GetSessionInx():Find jsr82 channel :%02x"
    BT_JSR82_SEARCH_L2CAP_CNTX_DUMP_SESSION_INFO "bt_jsr82_SearchL2capContext():inx:%02x,status:%02x, ps_type:%02x, chnl:%02x, cli_srv_type:%02x"
    BT_JSR82_SEARCH_L2CAP_CNTX_L2CAP_INFO "bt_jsr82_SearchL2capContext():inx=%d,l2cap_con_state:%d, l2capCid=%d"
    BT_JSR82_SEARCH_L2CAP_CNTX_FIND_EXISTED_L2CID "bt_jsr82_SearchL2capContext():jsr82 find l2cap id:%04x,l2capCid=%04x"
    BT_JSR82_ADD_NEW_L2CAP_TO_CNTX "bt_jsr82_AddNewL2capToContext():l2cap_id=%d,ptr->l2capCtx.l2cap_con_state=%d"
    BT_JSR82_ADD_CREATE_L2CAP_TO_CNTX "bt_jsr82_AddCreateL2capToContext():l2cap_id=%d,ptr->l2capCtx.l2cap_con_state=%d"
    BT_JSR82_FREE_L2CAP_CNTX "bt_jsr82_ReleaseL2capFromContext():state=%04x,l2capid=%04x and reset l2cap_cid and con_state"
    BT_JSR82_NO_L2CAP_CON_RELEASE_FIND_BY_ID "bt_jsr82_ReleaseL2capFromContext():no l2capid=%d when release l2cap conn"
    BT_JSR82_REG_SEC_RECORD_ON_CHNL "bt_jsr82_L2capRegisterSecurity(): record_chnl=%d"
    BT_JSR82_FIND_ALLOCATED_L2CAP_PSM_INX "bt_jsr82_get_L2capPSMIndex():Find allocated L2CAP PSM=%d and index:%02x"
    BT_JSR82_FIND_EMPTY_PSM_INX_REG_STATUS "bt_jsr82_get_L2capPSMIndex(): find empty inx=%02x, RegisterPsm status:%02x"
    BT_JSR82_FREE_L2CAP_PSM_INX "bt_jsr82_free_L2capPSMIndex:%08x, %d"
    BT_JSR82_FIND_ONE_ALLOCATED "Find allocated L2CAP PSM index:%02x"
    BT_JSR82_DUMP_L2CAP_PSM_INFO "Dump L2capPSMIndex:inx=%d,used=%d,psm=%d,used_no=%d"
    BT_JSR82_FREE_L2CAP_PSM_NEW_SEC_VAL "Free L2CAP PSM inx=%d,new security value:%02x"
    BT_JSR82_DUMP_FIND_L2CAP_PSM_CNTX "Find L2capPSMInContext:inx=%d,status=%d,ps_type=%d,chnl=%d,cli_srv_type=%d,l2capCid=%d"
    BT_JSR82_FIND_L2CAP_PSM_CNTX_RESULT "Find L2capPSMInContext:%d,chnl=%d,l2cap_cid=%d"
    BT_JSR82_DUMP_FIND_L2CAP_PSM_LISTEN_CNTX "Find L2capPSMListenInContext:inx=%d,status=%d,ps_type=%d,chnl=%d,cli_srv_type=%d,l2capCid=%d"
    BT_JSR82_FIND_L2CAP_PSM_LISTEN_CNTX_RESULT "Find L2capPSMListenInContext:%d,chnl=%d,l2cap_cid=%d"
    BT_JSR82_TURN_OFF_ALL_SERVICES_DISC_ALL_LINKS "JSR82:Turn off All services and try to disconnect all Acl links"
    BT_JSR82_ACL_ADD_LINK "bt_jsr82_ACLAddLink:%08X"
    BT_JSR82_FIND_A_ACTIVE_LINK_USED_NO "Find an active link and its attached used_no=%d"
    BT_JSR82_FIND_ONE_EMPTY_IN_ADD_LINK "Find a empty one, assign it for this added link"
    BT_JSR82_REMOVE_ACL_LINK "bt_jsr82_ACLRemoveLink:%08x"
    BT_JSR82_REMOVE_LINK_USED_NO "ACLRemoveLink: find an active link and used_no=%d"
    BT_JSR82_NEXT_CHECK_IN_REMOVE_LINK "Iterator of RemoveLink link=%08X"
    BT_JSR82_CHECK_DISC_ACL_NO "CheckAndDisconnectAclNo(): active_link_no=%d"
    BT_JSR82_CHECK_DISC_ACL_RFCOMM_CON_REQ_ONGOING "JSR82CheckAndDisconnectAclNo(): RFCOMM con req is ongoing"
    BT_JSR82_CHECK_DISC_ACL_L2CAP_CON_REQ_ONGOING "JSR82CheckAndDisconnectAclNo(): L2CAP con req is ongoing"
    BT_JSR82_CHECK_DISC_TIMER "bt_jsr82_ACLCheckDisconnectTimer"
    BT_JSR82_DISC_TIMER_PEND_CON_REQ_NO "bt_jsr82_ACLCheckDisconnectTimer(): Still has pending_conreq_no=%d"
    BT_JSR82_RFCALLBACK_INFO "BTJSR82_RfCallbackFunc():con_id=%d,event=%d,chan=%08X,ptr=%08X,ptr1=%08X,parms_remDev=%08X"
    BT_JSR82_RFCOMM_TX_COMPLETED "JSR82 RFCOMM Tx data Completed"
    BT_JSR82_RFEVENT_CLOSED_IND "JSR82 RFEVENT CLOSED IND"
    BT_JSR82_RFEVENT_CLOSED_RESET_SESSION_CREDIT "JSR82 RFComm closed: Reset credit for session entry"
    BT_JSR82_RFSRV_CLOSED "JSR82 RFCOMM SRV CLOSED"
    BT_JSR82_RFCHNL_DISC_COMPLETED "JSR82 RFCOMM Channel disconnect completed"
    BT_JSR82_RFCOMM_RX_IND_LEN "JSR82 RFCOMM:Rx data ind,len=%d"
    BT_JSR82_RFCOMM_OPEN_IND_AUTHORIZE_SETTING "JSR82 RFEVENT_OPEN_IND authroize setting:%02x"
    BT_JSR82_RFSRV_OPEN "JSR82 RFCOMM Server is Open"
    BT_JSR82_L2CAPCALL_INFO "JSR82 L2CAP Callback: session_inx=%d,l2ChnlId=%d,con_id=%d, event=%d"
    BT_JSR82_L2CAP_CON_IND_STATUS "JSR82 L2CAP Accept or not, status=%d"
    BT_JSR82_NOT_ADD_NEW_L2CAP_CNTX "JSR82 L2CAP con ind:Not add new L2cap to cntx:index:%02x"
    BT_JSR82_L2CAP_DISCONNECTED_CHNL_LINK "JSR82 L2CAP_DISCONNECTED,chnl=%08X,link=%08X"
    BT_JSR82_L2CAP_DISCONNECTED_INX_CON_ID "JSR82 L2CAP DISCONNECTED_INX_CON_ID,index:%02x, con_id:%02x"
    BT_JSR82_L2CAP_DISCONNECTED_STATE "JSR82 L2CAP DISC:ptr->l2capCtx.l2cap_con_state:%02x"
    BT_JSR82_L2CAP_DISC_COMPLETED "JSR82 L2CAP Channel disconnect completed"
    BT_JSR82_L2CAP_CONNECTED_CHNL "JSR82 L2CAP CONNECTED with chnl=%08X"
    BT_JSR82_L2CAP_CLIENT_CONNECTED_INX "JSR82 L2CAP Client connected inx=%d"
    BT_JSR82_L2CAP_CONNECTED_CON_ID "JSR82 L2Cap Connected con_id=%d"
    BT_JSR82_L2CAP_OPEN_CHNL_FAILED "JSR82 L2Cap Open Chnl failed"
    BT_JSR82_L2CAP_RX_IND_LEN "JSR82 L2CAP RX ind with len=%d"
    BT_JSR82_CMGRCLICALLBACK_NOT_ITS_BD_ADDR "bt_jsr82_CmgrClientCallback Not the connect bd_addr"
    BT_JSR82_CLI_CMGR_CALLBACK_CON_ID_EVENT_STATUS "JSR82 Client Cmgr Callback: con_id=%d,event=%d,status=%d"
    BT_JSR82_LINK_COF_CHECK_VM_DISC_PEND_CON_NO "After VM starts termination: this pending con req finally success, pend_con=%d"
    BT_JSR82_LINK_CON_CNF_TRY_OPEN_RFCHNL "JSR82 LINK CON CNF then Try Open RFChnl"
    BT_JSR82_LINK_CON_CNF_GET_L2CAP_PSM_INX "JSR82 LINK CON CNF: Get L2CAP PSM Index;%02x"
    BT_JSR82_LINK_CON_CNF_TRY_OPEN_L2CAP_CHNL_CID "JSR82 LINK CON CNF then Try Open L2cap Chnl with cid=%04X"
    BT_JSR82_LINK_CON_CNF_RET_STATUS "JSR82 LINK_CON_CNF ret_Status:%02x"
    BT_JSR82_OPEN_CHNL_FAILED_LINK_CON_CNF_STATUS "JSR82 open channel failed,link_con_cnf status=%d"
    BT_JSR82_VM_END_ACL_SETUP_OK_BUT_PS_TYPE_REJECTED "VM termination: pending con req is ACL link setup ok,but ps_type=%d is rejected"
    BT_JSR82_SRV_CMGR_CALLBACK_EVENT_STATUS "JSR82 Srv Cmgr Callback with Event=%d, Status=%d"
    BT_JSR82_ENABLE_SERVICE_FIND_NO_CHNL "JSR82 Enable Service empty Channel find, case=%d"
    BT_JSR82_DISABLE_SERVICE_NO_EMPTY_CHANNEL "BT_JSR82_Disable_Service no empty Channel"
    BT_JSR82_ACLCHECKANDDISCONNECTACLNO "BT_JSR82_ACLCheckAndDisconnectAclNo"
    BT_JSR82_RELEASE_SRVCHNL_INX_SERVER_CHNL_NUMxD_STILL_HAS_OTHER_REIGSTERED_ONES "BT_JSR82_RELEASE_SRVCHNL_INX Server chnl_num=%d, still has other reigstered ones"
    BT_JSR82_APPSDPDBDEACTIVATE "BT_JSR82_AppSdpDbDeactivate"
    BT_JSR82_RELEASE_PSM_INX_PSM_ERROR_NOT_REGISTERED "BT_JSR82_RELEASE_PSM_INX PSM Error, not registered"
    BT_JSR82_SESSIONAPENABLESERVICECFN_PS_TYPEx02X "BT_JSR82_SessionApEnableServiceCfn Ps_type:%02x"
    BT_JSR82_HANDLESESSIONAPTURNOFFSERVICE "BT_JSR82_HandleSessionApTurnOffService"
    BT_JSR82_ENABLE_SERVICE_HANDLESESSIONAPENABLESERVICEREGISTRATION_CMGR_HANDLER_STATUSx02X "BT_JSR82_Enable_Service HandleSessionApEnableService():Registration CMGR handler status:%02x"
    BT_JSR82_ENABLE_SERVICE_AVAILABLE_CHANNELx08X "BT_JSR82_Enable_Service Available Channel:%08x"
    BT_JSR82_SENDTORFCOMM_REMOVE_A_FREE_PKT_TO_SEND_DATA "BT_JSR82_sendToRfComm(): remove a free pkt to send data"
    BT_JSR82_GET_FREE_SRVCHNL_INX_GET_FREE_CHANNEL_xD "BT_JSR82_GET_FREE_SRVCHNL_INX Get Free channel :%d"
    BT_JSR82_HANDLEJSR82DEACTIVATE "BT_JSR82_HandleJSR82Deactivate"
    BT_JSR82_SENDTOL2CAP_REMOVE_A_FREE_PKT_TO_SEND_DATA "BT_JSR82_sendToL2Cap(): remove a free pkt to send data"
    BT_JSR82_RELEASE_SRVCHNL_INX_CURRENT_RFCOMM_CHANNEL_USAGE_TABLEx08X "BT_JSR82_RELEASE_SRVCHNL_INX current rfcomm_channel_usage_table:%08x"
    BT_JSR82_SESSIONAPENABLERESULTEVENT "bt_jsr82_SessionApEnableResultEvent"
    BT_JSR82_SESSIONAPDISCONNECTALLACLCFN "BT_JSR82_SessionApDisconnectAllAclCfn"
    BT_JSR82_CREDIT_xD_DEVCREDIT_xD "BT_JSR82_credit %d, dev->credit %d"
    BT_JSR82_L2CAP_CON_REQOPEN_CHANNEL_FAILED "BT_JSR82_L2CAP_CON_REQ:open channel failed"
    BT_JSR82_HANDLESETACLSECURITYREQTHIS_LINKS_AUTH_OR_ENCRYPT_ALREADY_ONGOING "BT_JSR82_HandleSetACLSecurityReq():This link's auth or encrypt already ongoing"
    BT_JSR82_L2CAP_CON_REQ_INIT_CON_IDx02X "BT_JSR82_L2CAP_CON_REQ Init con_id:%02x"
    BT_JSR82_GET_FREE_PSM_INX_GET_FREE_PSM_xD "BT_JSR82_GET_FREE_PSM_INX Get Free PSM :%d"
    BT_JSR82_SESSIONAPTURNONSERVICECFN "BT_JSR82_SessionApTurnOnServiceCfn"
    BT_JSR82_SESSIONAPCONNECTCFN_SIZEx02X "BT_JSR82_SessionApConnectCfn size:%02x"
    BT_JSR82_HANDLESETACLSECURITYREQ_RETURN_FROM_SEC_SETLINKENCRYPTION_ERRxD "BT_JSR82_HandleSetACLSecurityReq(): return from SEC_SetLinkEncryption err=%d"
    BT_JSR82_CON_RSP_FIND_JSR82_CHANNEL_x02X "BT_JSR82_CON_RSP Find jsr82 channel :%02x"
    BT_JSR82_HANDLESETACLSECURITYREQ_RETURN_FROM_SEC_AUTHENTICATELINK_ERRxD "BT_JSR82_HandleSetACLSecurityReq(): return from SEC_AuthenticateLink err=%d"
    BT_JSR82_GET_FREE_PSM_INX_CURRENT_L2CAP_PSM_USAGE_TABLEx08X "BT_JSR82_GET_FREE_PSM_INX current l2cap_psm_usage_table:%08x"
    BT_JSR82_ENABLE_SERVICE_L2CAP_PSMx08X "BT_JSR82_Enable_Service L2CAP PSM:%08x"
    BT_JSR82_SENDTOL2CAP_AFTER_JBT_SESSION_DEVTX_WITH_PS_L2CAP_GET_BYTESxD "BT_JSR82_sendToL2Cap After jbt_session_DevTX() with PS_L2CAP: get bytes=%d"
    BT_JSR82_GET_FREE_SRVCHNL_INX_CURRENT_RFCOMM_CHANNEL_USAGE_TABLEx08X "BT_JSR82_GET_FREE_SRVCHNL_INX current rfcomm_channel_usage_table:%08x"
    BT_JSR82_SET_HIGH_WATER_MARK_SESSION_AP_RECORD_PTRCOD_IDx02X_TRANSACTION_IDx04X "BT_JSR82_SET_HIGH_WATER_MARK session_ap_record_ptr->cod_id:%02x, transaction_id:%04X"
    BT_JSR82_SENDTORFCOMM_AFTER_JBT_SESSION_DEVTX_GET_BYTESxD "BT_JSR82_sendToRfComm  After jbt_session_DevTX(): get bytes=%d"
    BT_JSR82_SESSIONAPCLOSEINDx02X_x02X_x04X "BT_JSR82_SessionApCloseInd:%02x, %02x, %04x"
    BT_JSR82_DISABLE_SERVICE_FIND_JSR82_CHANNEL_x02X "BT_JSR82_Disable_Service Find jsr82 channel :%02x"
    BT_JSR82_CON_RSP_NO_EMPTY_CHANNEL "BT_JSR82_CON_RSP no empty Channel"
    BT_JSR82_HANDLESESSIONAPCONNECTREQ "BT_JSR82_HandleSessionApConnectReq"
    BT_JSR82_HANDLESESSIONAPSDPREQ "BT_JSR82_HandleSessionSdpReq"
    BT_JSR82_SESSIONAPCONNECTIND_SIZEx02X "BT_JSR82_SessionApConnectInd  size:%02x"
    BT_JSR82_RFCOMM_CON_REQ_EMPTY_CHANNEL_FIND "BT_JSR82_RFCOMM_CON_REQ empty Channel find"
    BT_JSR82_TRIGGER_PANIC_MECHANISM_BY_JVN_FOR_TESTING_ERROR_HANDLE "BT_JSR82_Trigger Panic mechanism by JVN for testing error handle"
    BT_JSR82_SESSIONAPCONNECTCFN "BT_JSR82_SessionApConnectCfn"
    BT_JSR82_SESSIONAPRXRSP "bt_jsr82_SessionApRxRsp"
    BT_JSR82_HANDLESETACLSECURITYREQ_REMDEV_INDEXxDENABLE_AUTHENTICATION_LINKxD_ENABLE_ENCRYPTxD "BT_JSR82_HandleSetACLSecurityReq(): remDev_index=%d,enable_authentication_link=%d, enable_encrypt=%d"
    BT_JSR82_HANDLESETACLSECURITYREQ_CURRENT_LINK_AUTHSTATExDENCRYPTSTATExD "BT_JSR82_HandleSetACLSecurityReq(): current link authState=%d,encryptState=%d"
    BT_JSR82_ADVANCECREDIT_CHNL_STATExD_NOT_IN_CONNECTED "BT_JSR82_advanceCredit(): chnl_state=%d, not in CONNECTED"
    BT_JSR82_RX_CNF_FIND_JSR82_CHANNEL_x02X "BT_JSR82_RX_CNF Find jsr82 channel :%02x"
    BT_JSR82_RFCALLBACKFUNC_CHAN_REMDEV_IS_NULL_EVENTxD_PARMS_REMDEVx08X "In BTJSR82_RfCallbackFunc(): chan remDev is NULL, event=%d, parms remDev=%08X"
    BT_JSR82_RFCOMM_CON_REQ_NO_EMPTY_CHANNEL "BT_JSR82_RFCOMM_CON_REQ no empty Channel"
    BT_JSR82_TX_REQ_NO_EMPTY_CHANNEL "BT_JSR82_TX_REQ no empty Channel"
    BT_JSR82_VM_TERMINATION_PENDING_CON_REQ_IS_ACL_LINK_SETUP_OKBUT_L2CAP_IS_REJECTED "VM termination: pending con req is ACL link setup ok,but L2CAP is rejected"
    BT_JSR82_RFCOMM_CON_REQ_OPEN_RFCOMM_CHNL_FAILED "BT_JSR82_RFCOMM_CON_REQ: Open RFCOMM chnl failed"
    BT_JSR82_L2CAP_CON_REQ_EMPTY_CHANNEL_FIND "BT_JSR82_L2CAP_CON_REQ empty Channel find"
    BT_JSR82_RELEASE_PSM_INX_RETURN_PSM_IDxD "BT_JSR82_RELEASE_PSM_INX Return psm_id:%d"
    BT_JSR82_HANDLESESSIONAPENABLESERVICEREGISTRATION_ON_SERV_CHNL__xD_AND_STATUSx02X "BT_JSR82_HandleSessionApEnableService():Registration on serv_chnl = %d and status:%02x"
    BT_JSR82_VM_TERMINATE_PENDING_CON_REQ_CONNECTED_THEN_DISC_THIS_LINK "VM terminate: pending con req: connected, then disc this link"
    BT_JSR82_SEARCHL2CAPCONTEXT "bt_jsr82_SearchL2capContext"
    BT_JSR82_VM_TERMINATION_PENDING_CON_REQ_IS_ACL_LINK_SETUP_OKBUT_RFCOMM_IS_REJECTED "VM termination: pending con req is ACL link setup ok,but RFCOMM is rejected"
    BT_JSR82_SESSIONAPTXCFN "BT_JSR82_SessionApTxCfn"
    BT_JSR82_TURN_OFF_SERVICE_EMPTY_CHANNEL_IDLE_WRONG_STATE "BT_JSR82_Turn_Off_Service empty Channel idle, wrong state"
    BT_JSR82_TX_REQ_FIND_JSR82_CHANNEL_x02X "BT_JSR82_TX_REQ Find jsr82 channel :%02x"
    BT_JSR82_HANDLESESSIONAPTURNONSERVICE "BT_JSR82_HandleSessionApTurnOnService"
    BT_JSR82_SESSIONAPRXINDEVENT "bt_jsr82_SessionApRxIndEvent"
    BT_JSR82_DISC_REQ_FIND_JSR82_CHANNEL_x02X "BT_JSR82_DISC_REQ Find jsr82 channel :%02x"
    BT_JSR82_DISABLE_SERVICE_DEREGISTER_CHANNEL_x02X "BT_JSR82_Disable_Service Deregister channel :%02x"
    BT_JSR82_RELEASE_PSM_INX_CURRENT_L2CAP_PSM_USAGE_TABLEx08X "BT_JSR82_RELEASE_PSM_INX current l2cap_psm_usage_table:%08x"
    BT_JSR82_SESSIONAPTXREADYIND "BT_JSR82_SessionApTxReadyInd"
    BT_JSR82_SESSIONAPCONNECTIND "BT_JSR82_SessionApConnectInd"
    BT_JSR82_L2CAP_CON_REQ_L2CAP_PSM_INDEXx02X "BT_JSR82_L2CAP_CON_REQ L2CAP PSM Index;%02x"
    BT_JSR82_GET_FREE_PSM_INX_CURRENT_MASKx08X "BT_JSR82_GET_FREE_PSM_INX current mask:%08x"
    BT_JSR82_SESSIONAPRXIND "BT_JSR82_SessionApRxInd"
    BT_JSR82_HANDLESETACLSECURITYREQTRY_TO_AUTHENTICATE_ACL_LINK "BT_JSR82_HandleSetACLSecurityReq():Try to authenticate ACL Link"
    BT_JSR82_ENABLE_SERVICE_PS_TYPEx02X "BT_JSR82_Enable_Service ps_type:%02x"
    BT_JSR82_RX_CNF_NO_EMPTY_CHANNEL "BT_JSR82_RX_CNF no empty Channel"
    BT_JSR82_SESSIONAPRXREADYIND "BT_JSR82_SessionApRxReadyInd"
    BT_JSR82_HIGHWATERxD_SPPOS_RXBYTESxD_RF_FRAMESIZExD "BT_JSR82_highWater=%d, SPPOS_RxBytes=%d, RF_FrameSize=%d"
    BT_JSR82_L2CAP_CON_REQ_NO_EMPTY_CHANNEL "BT_JSR82_L2CAP_CON_REQ no empty Channel"
    BT_JSR82_SESSIONAPTURNOFFSERVICECFN "BT_JSR82_SessionApTurnOffServiceCfn"
    BT_JSR82_HANDLESETACLSECURITYREQREMOTE_LINK_IS_NOT_EXISTED "BT_JSR82_HandleSetACLSecurityReq():Remote link is not existed"
    BT_JSR82_TURN_ON_SERVICE_EMPTY_CHANNEL_IDLE_WRONG_STATE "BT_JSR82_Turn_On_Service empty Channel idle, wrong state"
    BT_JSR82_RELEASE_SRVCHNL_INX_CHANNEL_ERROR_NOT_REGISTERED "BT_JSR82_RELEASE_SRVCHNL_INX Channel Error, not registered"
    BT_JSR82_SESSIONAPTXCFNEVENT "bt_jsr82_SessionApTxCfnEvent"
    BT_JSR82_SESSIONAPDISABLESERVICECFN "BT_JSR82_SessionApDisableServiceCfn"
    BT_JSR82_SESSIONAPENABLESERVICECFN "BT_JSR82_SessionApEnableServiceCfn"
    BT_JSR82_GET_FREE_SRVCHNL_INX_CURRENT_MASKx08X "BT_JSR82_GET_FREE_SRVCHNL_INX current mask:%08x"
    BT_JSR82_DISABLE_SERVICE_INXx02X_STATUSx02X_CON_IDx02X "BT_JSR82_Disable_Service inx:%02x, status:%02x, con_id:%02x"
    BT_JSR82_ENABLE_SERVICE_CON_IDx02X "BT_JSR82_Enable_Service Con id:%02x"
    BT_JSR82_DISABLE_SERVICE_L2CAP_CON_INDEX_xD_IS_NOT_IDLE_xD "BT_JSR82_Disable_Service L2cap con index %d is not idle: %d"
    BT_JSR82_DISC_REQ_NO_EMPTY_CHANNEL "BT_JSR82_DISC_REQ no empty Channel"
    BT_JSR82_ADVANCECREDITCALL_RF_ADVANCECREDIT "BT_JSR82_advanceCredit():Call RF_AdvanceCredit()"
    BT_JSR82_SORT_ATTIBS_ATTRIBUTE_SIZExD "BT_JSR82_SORT_ATTIBS attribute size:%d"
    BT_JSR82_SDPDBDEACTIVATE_FIND_INDEX_I_TO_UNREGISTERx02X "BT_JSR82_SdpDbDeactivate Find index i to unregister:%02x"
    BT_JSR82_VERIFY_RECORD_RECORD_LENGTHx04X "BT_JSR82_Verify_Record Record length:%04x"
    BT_JSR82_SORT_ATTIBS_AFTER_SORTING "BT_JSR82_SORT_ATTIBS After sorting"
    BT_JSR82_RETRIEVERECORDCNF_RECORD_SIZExDX "BT_JSR82_RetrieveRecordCnf record size:%dx"
    BT_JSR82_VERIFY_RECORD_THE_ELEMENT_TYPE_x02X "BT_JSR82_Verify_Record The Element type: %02x"
    BT_JSR82_VERIFY_RECORD_TYPEx02X_SIZE_INDEXx02X "BT_JSR82_Verify_Record type:%02x size index:%02x"
    BT_JSR82_VERIFY_RECORD_C_THE_ELEMENT_SIZE_x02X "BT_JSR82_Verify_Record C The Element size: %02x"
    BT_JSR82_SORT_ATTIBS_ATTRIBUTE_IDxD "BT_JSR82_SORT_ATTIBS attribute id:%d"
    BT_JSR82_VERIFY_DATA_ELEMENT_INVALID_PARAMETERS "BT_JSR82_Verify_DATA_ELEMENT invalid parameters"
    BT_JSR82_VERIFY_RECORD_B_THE_ELEMENT_SIZE_x02X "BT_JSR82_Verify_Record B The Element size: %02x"
    BT_JSR82_DEREG_RECORD_FIND_INDEX_I_TO_UNREGISTERx02X "BT_JSR82_DeReg_Record Find index i to unregister:%02x"
    BT_JSR82_VERIFY_DATA_ELEMENT_TYPEx02X_SIZE_INDEXx02X "BT_JSR82_Verify_DATA_ELEMENT type:%02x size index:%02x"
    BT_JSR82_VERIFY_RECORD_FINALLY_ATTRIBUTE_INDEXx02X "BT_JSR82_Verify_Record finally Attribute index:%02x"
    BT_JSR82_VERIFY_RECORD_DATA0x02X_DATA1x02X "BT_JSR82_Verify_Record data[0]:%02x, data[1]:%02x"
    BT_JSR82_VERIFY_DATA_ELEMENT_VERIFY_FAILED "BT_JSR82_Verify_DATA_ELEMENT Verify failed"
    BT_JSR82_SORT_ATTIBS_INDEXxD "BT_JSR82_SORT_ATTIBS index:%d"
    BT_JSR82_VERIFY_RECORD_ATTRIBUTE_VALUE_ELEMENT_HEADER_SIZE_x04X "BT_JSR82_Verify_Record Attribute value Element header size: %04x"
    BT_JSR82_GETAVAILABLERECORDHANDLER_RECORD_HANDLERx08X "BT_JSR82_GetAvailableRecordHandler Record handler:%08x"
    BT_JSR82_REG_RECORD_FIND_INDEX_I_AVAILABLEx02X "BT_JSR82_Reg_Record Find index i available:%02x"
    BT_JSR82_VERIFY_RECORD_ATTRIBUTE_INDEX_xD_TOO_LARGE "BT_JSR82_Verify_Record attribute index :%d too large"
    BT_JSR82_GETAVAILABLERECORDHANDLER_FIND_INDEX_I_AVAILABLEx02X "BT_JSR82_GetAvailableRecordHandler Find index i available:%02x"
    BT_JSR82_RETRIEVERECORDCNF_RESULTx02X "BT_JSR82_RetrieveRecordCnf result:%02x"
    BT_JSR82_VERIFY_RECORD_A_THE_ELEMENT_SIZE_x02X "BT_JSR82_Verify_Record A The Element size: %02x"
    BT_JSR82_VERIFY_DATA_ELEMENT_PEASE_DATA_ELEMENT_FAILED "BT_JSR82_Verify_DATA_ELEMENT pease data element failed"
    BT_JSR82_VERIFY_DATA_ELEMENT_X3_THE_ELEMENT_SIZE_x02X "BT_JSR82_Verify_DATA_ELEMENT X3 The Element size: %02x"
    BT_JSR82_REG_RECORD_REMOVE_STATUSxD "BT_JSR82_Reg_Record Remove status:%d"
    BT_JSR82_DEREG_RECORD_STATUSx02X "BT_JSR82_DeReg_Record Status:%02x"
    BT_JSR82_RETRIEVERECORDCNF_RAW_DATAx02Xx02X_x02Xx02X "BT_JSR82_RetrieveRecordCnf raw data:%02x,%02x, %02x,%02x"
    BT_JSR82_VERIFY_DATA_ELEMENT_X1_THE_ELEMENT_SIZE_x02X "BT_JSR82_Verify_DATA_ELEMENT X1 The Element size: %02x"
    BT_JSR82_REG_RECORD_SDP_ADDRECORD_STATUSx02X "BT_JSR82_Reg_Record SDP_AddRecord Status:%02x"
    BT_JSR82_VERIFY_RECORD_VERIFY_FAILED "BT_JSR82_Verify_Record Verify failed"
    BT_JSR82_REG_RECORD_THE_ATTRIBUTE_NO_ISx02X "BT_JSR82_Reg_Record The attribute no is:%02x"
    BT_JSR82_RETRIEVERECORDCNF_HANDLEx08X "BT_JSR82_RetrieveRecordCnf handle:%08x"
    BT_JSR82_REG_RECORD_UPDATE_THE_RECORD "BT_JSR82_Reg_Record Update the record"
    BT_JSR82_VERIFY_RECORD_ATTRIBUTE_VALUE_ELEMENT_SIZE_x04X "BT_JSR82_Verify_Record Attribute value Element size: %04x"
    BT_JSR82_VERIFY_DATA_ELEMENT_X2_THE_ELEMENT_SIZE_x02X "BT_JSR82_Verify_DATA_ELEMENT X2 The Element size: %02x"
    BT_JSR82_VERIFY_RECORD_E_THE_ELEMENT_SIZE_x02X "BT_JSR82_Verify_Record E The Element size: %02x"
    BT_JSR82_VERIFY_DATA_ELEMENT_INVALID_SIZE_DESCRIPTOR_VALUEx02X "BT_JSR82_Verify_DATA_ELEMENT Invalid size descriptor value=%02X"
    BT_JSR82_REG_RECORD_INDEXxD "BT_JSR82_Reg_Record index:%d"
    BT_JSR82_VERIFY_RECORD_ITS_DATAx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X "BT_JSR82_Verify_Record its data:%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,"
    BT_JSR82_REG_RECORD_NO_AVAILABLE_SERVICE_RECORD "BT_JSR82_Reg_Record No available service record"
    BT_JSR82_VERIFY_DATA_ELEMENT_X5_THE_ELEMENT_SIZE_x02X "BT_JSR82_Verify_DATA_ELEMENT X5 The Element size: %02x"
    BT_JSR82_DEREG_RECORD_NO_REGISTERED_SERVICE_RECORD "BT_JSR82_DeReg_Record No registered service record"
    BT_JSR82_REG_RECORD_RECORD_PARSE_ERROR "BT_JSR82_Reg_Record Record parse error"
    BT_JSR82_REG_RECORD_ATTRIBUTE_IDxD "BT_JSR82_Reg_Record attribute id:%d"
    BT_JSR82_VERIFY_RECORD_INVALID_SIZE_DESCRIPTOR_VALUEx02X "BT_JSR82_Verify_Record Invalid size descriptor value=%02X"
    BT_JSR82_VERIFY_DATA_ELEMENT_DATA_ELEMENT_TOO_LARGE_NOT_CHECK "BT_JSR82_Verify_DATA_ELEMENT data element too large, not check"
    BT_JSR82_REG_RECORD_ATTRIBUTE_SIZExD "BT_JSR82_Reg_Record attribute size:%d"
    BT_JSR82_VERIFY_DATA_ELEMENT_ATTRIBUTE_VALUE_ELEMENT_SIZE_x02X "BT_JSR82_Verify_DATA_ELEMENT Attribute value Element size: %02x"
    BT_JSR82_VERIFY_RECORD_THE_ATTRIBUTE_ID_xD "BT_JSR82_Verify_Record The attribute id :%d"
    BT_JSR82_L2_DISCON_IND_INX_L2CID "BT_JSR82_L2EVENT_DISCCON_IND: inx=%d,l2cap_cid=%d"
    BT_JSR82_L2_DISCONNECTED_IND_SRV_CHNL_CLOSED_NEVER_OPENED "JSR82_L2CAP_DISCONNECTED_Srv: Chnl is in CLOSED state and never Opened"
    BT_JSR82_L2_DISCONNECTED_IND_NOT_NOTIFY_JBT_L2CON_STATE "JSR82_DISCONNECTED of Srv: Not necessary to notify JBT,l2cap_con_state=%d"
    BT_JSR82_SDAP_SEARCH_RAW_RETRY_WAIT_FOR_DISC_COMPLETE_TIMEOUT "Sdap_Search_Raw_Retry_Wait_for_Disc_Complete_Timeout():Retry check again"
    BT_JSR82_CHECK_CONTINUE_QUERY "check_continute_query():End of sdp request, reset continute state to zero"
    BT_JSR82_CHECK_CONSTATE_VALUE "check_continute_query():contState value=%d"
    BT_JSR82_CHECK_DUMP_CONSTATE_DATA_INX "check_continute_query():inx=%d,contState data=%d"
    BT_JSR82_TRY_CONTINUE_LEN_CONTSTATE_PTR "JSR82 try continue with len=%d, contState_ptr=%08X"
    BT_JSR82_TRY_CONTINUE_SDP_TO_REMDEV "JSR82 Try to continue do sdp to remDev=%08X"
    BT_JSR82_CMGR_CREATEDATALINK_STATUS "JSR82 CMGR_CreateDataLink case=%d, with return status=%d"
    BT_JSR82_HANDLE_AUTH_CNF_ERRCODE "BT_JSR82_HandleAuthCnf_errCode=%d"
    BT_JSR82_HANDLE_AUTH_CNF_DEL_DEV_RECORD_STATUS "BT_JSR82_HandleAuthCnf:Delete Device Record, status=%d"
    BT_JSR82_RFCOMM_CLOSED_DUE_TO_ACCESS_DENIED_DEL_DEV_RECORD_STATUS "BT_JSR82_RFCallbackFunc: Client con req Access Denied,delete record status=%d"
    BT_JSR82_L2CAP_DEREGISTER_PSM_STATUS "BT_JSR82_L2Cap_DeregisterPSM_status=%d"
    BT_JSR82_CHECK_DISC_ACL_L2CAP_SRV_INX_STATE "BT_JSR82_VM_TERMINATE_DISC_ACL_BUT_L2CAP_SRV: inx=%d,chnl_state=%d"
    BT_JSR82_CHECK_DSIC_ACL_VM_PEND_CON_NUM "BT_JSR82_VM_TERMINATE_Pend_con_num=%d"
    BT_JSR82_L2CAP_DEREGISTER_PSM_CHNL_STATE "BT_JSR82_L2Cap_DeregisterPSM_Chnl with inx=%d,State=%d"
    BT_JSR82_FORCE_DEREGISTER_PSM_INX "BT_JSR82_Force_Deregister_PSM_inx=%d"
    BT_JSR82_L2CAP_DUMMY_CALLBACK_CID_EVENT_STATUS "BT_JSR82_Dummy_Callback_cid=%d,event=%d,status=%d"
    BT_JSR82_CON_REQ_TIMEOUT_HDLR "BT_JSR82_ConReqTimeoutHdlr_power_staus=%d"
    BT_JSR82_SDP_REQ_TIMEOUT_HDLR "BT_JSR82_SdpReqTimeoutHdlr_power_staus=%d"
    BT_JSR82_CON_REQ_PREVIOUS_ONGOING "BT_JSR82_One_Previous_ConReq_Ongoing"
    BT_JSR82_SDP_REQ_PREVIOUS_ONGOING "BT_JSR82_One_Previous_SdpReq_Ongoing"
    BT_JSR82_L2CAP_DISCONNECTED_DUE_TO_SECURITY_BLOCK_DEL_DEV_RECORD_STATUS "BT_JSR82_L2CapCallbackFunc:Disconnected due to Security Block then delete dev record,status=%d"
    JSR82_SESSION_CONNECT_REQUEST "JSR82 session connect request"
    JSR82_FIND_L2CAP_IDBT_DEBUGx04X "jsr82 find l2cap id:%04x"
    BT_JSR82_SESSIONAPCLOSEIND "bt_jsr82_SessionApCloseInd"
    BT_JSR82_CMGRCLIENTCALLBACK "bt_jsr82_CmgrClientCallback"
    MSG_ID_BT_JSR82_CONNECT_CFN_TRC "MSG_ID_BT_JSR82_CONNECT_CFN"
    MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF_TRC "MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF"
    FUNC_JSR82_RING_BUFFER_SET_READY_TO_READ_AS_FALSE "JSR82 RingBuffer: Set readyToRead Flas as FLASE"
    FUNC_JSR82_RING_BUFFER_ALLOCATE_READRINGBUF_FAILED "JSR82 RingBuffer: allocate for ReadRingBuf failed, size=%d"
    FUNC_JSR82_RING_BUFFER_ALLOCATE_WRITERINGBUF_FAILED "JSR82 RingBuffer: allocate for WriteRingBuf failed, size=%d"
    FUNC_JSR82_RING_BUFFER_READ_01 "JSR82 RingBuffer Read Data func: case1 Set readyToRead to TRUE and ReadMore=%d"
    FUNC_JSR82_RING_BUFFER_READ_02 "JSR82 RingBuffer Read Data func: case2 Set readyToRead to FALSE"
    BT_JSR82_DEVRX_DATA_LOST_DUE_TO_RING_BUFFER_FULL "BT JSR82 jsr82_session_DevRX(): %d bytes data lost due to ring buffer full!"
    BT_JSR82_PUTBYTES_INVALID_INDEX "BT JSR82 jsr82_session_PutBytes(): Input index (%d) is invalid. status: IDLE"
    BT_JSR82_PUTBYTES_INVALID_STATE "BT JSR82 jsr82_session_PutBytes(): This connection (%d) is NOT in OPEN state"
    BT_JSR82_DATA_AVAILABLE_IND_INVALID_INDEX "BT JSR82 jsr82_session_SendDataAvailableInd():  Input index (%d) is invalid. status: IDLE"
    BT_JSR82_DATA_AVAILABLE_IND_INVALID_STATE "BT JSR82 jsr82_session_SendDataAvailableInd():  This connection (%d) is NOT in OPEN state"
    BT_JSR82_DATA_AVAILABLE_IND_WAIT_IND_RSP "BT JSR82 jsr82_session_SendDataAvailableInd():  One IND has been sent and is wait for IND_RSP (%d)"
    BT_JSR82_DATA_AVAILABLE_IND_RSP_INVALID_INDEX "BT JSR82 jsr82_session_DataAvailableIndRsp():  Input index (%d) is invalid. status: IDLE"
    BT_JSR82_DATA_AVAILABLE_IND_RSP_INVALID_STATE "BT JSR82 jsr82_session_DataAvailableIndRsp():  This connection (%d) is NOT in OPEN state"
    BT_JSR82_L2CAPCALL_INFO_NO_MATCHED_CONTEXT "JSR82 L2CAP Callback: NO matched index in context. l2ChnlId=%d, event=%d"
    BT_JSR82_L2CAP_CALLBACK_L2EVENT_DISCONNECTED_DUE_TO_REJECT "BT JSR82 L2CAP callback: L2EVENT_DISCONNECTED is back due to the CONNECT_IND has been rejected"



    FUNC_JBT_INIT "JBT Initialize"
    FUNC_JBT_RX_MSG "JBT Rx Msg=%02x"
    FUNC_JBT_RESULT "JBT Rx Msg=%02x"
    FUNC_JBT_OPCODE "JBT UT TEST Opcode =%02x"
    FUNC_JBT_TRANSACTION_ID "JBT UT TEST Transaction Id =%02x"
    FUNC_JBT_SHOW_8BYTES "JBT Show result =%08x"
    FUNC_JBT_SHOW_COD "JBT Show class of device =%08x"
    FUNC_JBT_SHOW_NAME "JBT UT TEST Device name =%02x (%c)"
    FUNC_JBT_ADDR "JBT Rx Msg=%02x,%02x,%02x,%02x,%02x,%02x"
    FUNC_JBT_UT_INQUIRY_COMPLETED "JBT UT test inquiry completed"
    FUNC_JBT_UT_INQUIRY_CANCEL_COMPLETED "JBT UT test inquiry cancel completed"
    FUNC_JBT_DISCOVERY_STATE "JBT Device Discovery State=%02x"
    FUNC_JBT_GET_ACL_INFO "JBT Get ACL info, Master: %02x, Authenticated:%02x, Encrypted:%02x"
    FUNC_JBT_SDPDB_GET_RECORD_HDL "JBT Get Record Handler result:%02x,handler:%08x"
    FUNC_JBT_SDPDB_REGISTER_RECORD_RESULT "JBT Register Record result:%02x,handler:%08x"
    FUNC_JBT_SDPDB_DEREGISTER_RECORD_RESULT "JBT DeRegister Record result:%02x,handler:%08x"
    FUNC_JBT_COMMAND_ENQUEUE "JBT Command input Queue:%02x, trans_id :%08x"
    FUNC_JBT_COMMAND_QUEUE_INFO "JBT Command Queue start:%02x, end:%02x, no:%02x, running:%02x"
    FUNC_JBT_COMMAND_DEQUEUE "JBT Command output Queue:%02x, trans_id :%08x"
    FUNC_JBT_CMD_INSERT_QUEUE "JBT jbt_cmd_insert_queue:%02x"
    FUNC_JBT_CMD_KICK_OFF "JBT jbt_cmd_kick_check_list:%02x"
    FUNC_JBT_CMD_ONE "JBT New Command%02x"
    FUNC_JBT_SESSION_REGISTRATION_RESULT "JBT Session Registration result:%02x,trans:%08x, channel:%04x, con_id:%02x"
    FUNC_JBT_SESSION_TURNON_RESULT "JBT Session turnon result:%02x,trans:%08x, con_id:%02x"
    FUNC_JBT_SPP_GET_DATA "JBT_SPP_GET_DATA"
    FUNC_JBT_SPP_SEND_DATA "JBT_SPP_SEND_DATA"
    FUNC_JBT_CAN_NOT_GET_ONE_FREE_ENTRY "JBT can not allocate a free entry"
    FUNC_JBT_CAN_NOT_FIND_EXISTING_ENTRY "JBT can not find an existing entry with type=%d and value=%d"
    FUNC_JBT_SET_READY_TO_READ_AS_FALSE "JBT Set readyToRead Flas as FLASE"
    FUNC_JBT_READ "JBT Read Data func: DataRead=%d,Length=%d"
    FUNC_JBT_READ_01 "JBT Read Data func: case1 Set readyToRead to TRUE and ReadMore=%d"
    FUNC_JBT_READ_02 "JBT Read Data func: case2 Set readyToRead to FALSE"
    FUNC_JBT_ALLOCATE_READRINGBUF_FAILED "JBT allocate for ReadRingBuf failed, size=%d"
    FUNC_JBT_ALLOCATE_WRITERINGBUF_FAILED "JBT allocate for WriteRingBuf failed, size=%d"
    FUNC_JBT_SESSION_RX_READY_IND "JBT UT: Rx Ready Ind with con_id=%d, len=%d"
    FUNC_JBT_SESSION_TX_READY_IND "JBT UT: Tx Ready Ind with con_id=%d"
    FUNC_JBT_SESSION_CON_REQ_RESULT "JBT UT: Connnect Request Result with result=%02X, transaction_id=%08X, con_id=%02X"
    FUNC_JBT_SESSION_CON_IND "JBT UT: Connect Ind with result=%02X, transaction_id=%08X, con_id=%02X"
    FUNC_JBT_SESSION_RX_BYTES "JBT UT: Simulate App to read data this time: con_id=%02X,bytes=%02X"
    FUNC_JBT_SESSION_RX_END "JBT UT: Read all data stored in ReadRingBuf due to this time RX_READY_IND"
    FUNC_JBT_SESSION_ENABLE_TX_TEST_ON_SERVER "JBT UT: Enable Tx Testing on Server when recv connect_ind with con_id=%02X"
    FUNC_JBT_SESSION_TX_BYTES "JBT UT: Simulate App to write data this time: con_id=%02X, bytes=%02X"
    FUNC_JBT_SESSION_TX_END "JBT UT: End of TX Testing due to WriteRingBuf full when recv this time ind msg"
    FUNC_JBT_DISC_IND "JBT UT: Recv DISC_IND with con_id=%02X"
    FUNC_JBT_MEM_ALLOCATED "JBT Memory buffer of JBT after allocated:%d"
    FUNC_JBT_MEM_RELEASED "JBT Memory buffer of JBT after released:%d"
    JBT_JBT_SET_ACL_SECURITY_CMD_TRANSACTION_IDx08X "JBT jbt_set_acl_security_cmd, transaction_id:%08x"
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_NODE_NOT_0 "JBT jbt_cmd_check_device_in_queue node not 0"
    JBT_JBT_FREE_ALL "JBT jbt_free_all"
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSPS_TYPEx02X "JBT jbt_handle_session_enabled_result parms.ps_type:%02x"
    JBT_MSG_ID_BT_BM_DISCOVERY_RESULT_IND "JBT MSG_ID_BT_BM_DISCOVERY_RESULT_IND"
    JBT_JBT_SET_LOCAL_DISCOVERY_CMD_TRANSACTION_IDx08X "JBT jbt_set_local_discovery_cmd, transaction_id:%08x"
    JBT_JBT_RESTORE_MMI_CMD "JBT jbt_restore_mmi_cmd"
    JBT_MSGRESULTx02X "JBT msg->result:%02x"
    JBT_PARMSCODx08X "JBT parms.cod:%08x"
    JBT_MSGCODx08X "JBT msg->cod:%08x"
    JBT_JBT_POWER_ONOPERATION_STATEx02X "JBT jbt_power_on.operation_state:%02x"
    JBT_MSG_ID_MMI_BT_BCC_RESTORE_CNF "JBT MSG_ID_MMI_BT_BCC_RESTORE_CNF"
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSL2CAP_IDx04X "JBT bt_handle_session_disconnect_ind parms.l2cap_id:%04x"
    JBT_JBT_GET_REMOTE_NAME_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X "JBT jbt_get_remote_name_cmd, addr:%02x,%02x,%02x,%02x,%02x,%02x"
    JBT_IN_JBT_SPP_READ_DATAREADxDLENGTHxD "JBT In jbt_spp_read(): DataRead=%d,Length=%d"
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSTRANSACTION_IDx08X "JBT jbt_handle_session_deregistration_result parms.transaction_id:%08x"
    JBT_MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF "JBT MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF"
    JBT_BT_HANDLE_SESSION_CONNECT_IND "JBT bt_handle_session_connect_ind"
    JBT_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOxD "JBT jbt_cmd_queue_context.cmd_run_no:%d"
    JBT_MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF "JBT MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF"
    JBT_JBT_HANDLE_SET_LOCAL_COD_RESULT "JBT jbt_handle_set_local_cod_result"
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_WRITERINGBUF "JBT bt_handle_session_disconnect_ind free WriteRingBuf"
    JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY "JBT jbt_allocate_one_available_entry"
    JBT_MSG_ID_BT_BM_READ_LOCAL_COD_CNF "JBT MSG_ID_BT_BM_READ_LOCAL_COD_CNF"
    JBT_JBT_CMD_INSERT_QUEUE_RETURN_STATUS_xD "JBT jbt_cmd_insert_queue return status :%d"
    JBT_OLD_TRANSACTION_IDx08X_NEW_TRANSACTION_IDx08X "JBT old transaction_id:%08x, new transaction_id:%08x"
    JBT_JBT_SDPDB_CONTEXTJBT_DEREGISTER_RECORDOPERATION_STATEx08X "JBT jbt_sdpdb_context.jbt_deregister_record.operation_state:%08x"
    JBT_JBT_REGISTER_RECORD_CMD_RECORD_TYPEx08X "JBT jbt_register_record_cmd record type:%08x"
    JBT_JBT_HANDLE_RESTORE_MMI_REQ_RESULT "JBT jbt_handle_restore_mmi_req_result"
    JBT_JBT_GAP_CONTEXTJBT_READ_ADDRTRANSACTION_IDx08X "JBT jbt_gap_context.jbt_read_addr.transaction_id:%08x"
    JBT_JBT_CMD_LIST_INIT "JBT jbt_cmd_list_init"
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_MSGPS_TYPEx02X "JBT jbt_handle_session_deregistration_result msg->ps_type:%02x"
    JBT_JBT_GET_LOCAL_ADDR_CMD_TRANSACTION_IDx08X "JBT jbt_get_local_addr_cmd, transaction_id:%08x"
    JBT_JBT_RESTORE_BTSTACK_MEMORY "JBT jbt_restore_btstack_memory"
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT_MSGPS_TYPEx02X "JBT jbt_handle_session_turnon_result msg->ps_type:%02x"
    JBT_JBT_RESTORE_PROCEDURE_RESULTxD "JBT jbt_restore_procedure, result:%d"
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSCON_IDx02X "JBT bt_handle_session_connect_ind parms.con_id:%02x"
    JBT_JBT_HANDLE_SDAP_COMPLETED_RESULT_PARMSRESULTx02X "JBT jbt_handle_sdap_completed_result parms.result:%02x"
    JBT_MSG_ID_BT_BM_SEARCH_RAW_CNF "JBT MSG_ID_BT_BM_SEARCH_RAW_CNF"
    JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_OPCODEx02X "JBT jbt_handle_power_off_req_result opcode:%02x"
    JBT_JBT_FREE_INDX_DSIZExD "JBT jbt release block indx :%d,size:%d"
    JBT_JBT_HANDLE_REGISTER_RECORD_RESULT "JBT jbt_handle_register_record_result"
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT_PARMSTRANSACTION_IDx08X "JBT jbt_handle_session_turnon_result parms.transaction_id:%08x"
    JBT_JBT_GET_ACL_INFO_CMD_TRANSACTION_IDx08X "JBT jbt_get_acl_info_cmd, transaction_id:%08x"
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_NODEPARMS_08X "JBT jbt_cmd_check_device_in_queue node->parms :08x"
    JBT_INFOTRANSACTION_IDx08X "JBT info->transaction_id:%08x"
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMDCODE_DEVICE_DISCOVERY_CMD "JBT jbt_cmd_check_device_in_queue JBT_CMDCODE_DEVICE_DISCOVERY_CMD"
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSPS_TYPEx02X "JBT bt_handle_session_connect_req_cnf parms.ps_type:%02x"
    JBT_JBT_GET_ACL_INFO_CMD_BODY "JBT jbt_get_acl_info_cmd_body"
    JBT_L2CAP_IDx04X "JBT l2cap_id:%04x"
    JBT_JBT_DEVICE_DISCOVERYx08X "JBT jbt_device_discovery:%08x"
    JBT_JBT_GET_ACL_INFO_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X "JBT jbt_get_acl_info_cmd, addr:%02x,%02x,%02x,%02x,%02x,%02x"
    JBT_MSGBDADDRx02Xx02Xx02Xx02Xx02Xx02X "JBT msg->bdaddr:%02x,%02x,%02x,%02x,%02x,%02x"
    JBT_JBT_CMD_QUEUE_NONCONCURRENT_PROCESSING_END "JBT jbt_cmd_queue_nonconcurrent_processing end"
    JBT_UUIDx04X "JBT  uuid:%04x"
    JBT_SDPDB_INDEXxD_IS_FREE "JBT  Sdpdb index:%d is free"
    JBT_JBT_DEVICE_DISCOVERY_CMD_IAC_CODEx08X "JBT jbt_device_discovery_cmd, iac_code:%08x"
    JBT_JBT_GET_REMOTE_NAME_CMD_TRANSACTION_IDx08X "JBT jbt_get_remote_name_cmd, transaction_id:%08x"
    JBT_JBT_HANDLE_SET_DISCOVERABLE_MODE_RESULT "JBT jbt_handle_set_discoverable_mode_result"
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSTRANSACTION_IDx08X "JBT jbt_handle_session_enabled_result parms.transaction_id:%08x"
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSMTUx04X "JBT bt_handle_session_connect_ind parms.mtu:%04x"
    JBT_JBT_SESSION_DISCONNECT_REQ "JBT jbt_session_disconnect_req"
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMD_LIST_INSERT_TAIL "JBT jbt_cmd_check_device_in_queue jbt_cmd_list_insert_tail"
    JBT_GAP_INIT_RESET_POWER_STATE_TO_OFF "JBT  GAP Init, reset power state to OFF"
    JBT_JBT_DEREGISTER_RECORD_CMD_RECORD_TRANSACTION_IDx08X "JBT jbt_deregister_record_cmd record transaction_id:%08x"
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT_PARMSCON_IDx02X "JBT jbt_handle_session_turnon_result parms.con_id:%02x"
    JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY_FIND_NONE "JBT jbt_allocate_one_available_entry find none"
    JBT_DB_INDEXx02X "JBT db_index:%02x"
    JBT_MSG_ID_BT_JSR82_CONNECT_IND "JBT MSG_ID_BT_JSR82_CONNECT_IND"
    JBT_SDPDB_INIT "JBT Sdpdb init"
    JBT_JBT_GENERAL_NON_POWERON_REJECT_RETURN_STATUSxD "JBT jbt_general_non_poweron_reject, return status:%d"
    JBT_JBT_GET_LOCAL_COD_CMD_TRANSACTION_IDx08X "JBT jbt_get_local_cod_cmd, transaction_id:%08x"
    JBT_JBT_CMD_LIST_REMOVE_HEAD "JBT jbt_cmd_list_remove_head"
    JBT_MSGLENx02X "JBT msg->len:%02x"
    JBT_JBT_HANDLE_SDAP_COMPLETED_RESULT "JBT jbt_handle_sdap_completed_result"
    JBT_JBT_MALLOC_INDEXxD_SIZExD "JBT jbt request block index:%d, size:%d"
    JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_OPCODEx02X "JBT jbt_cmd_check_and_remove_in_queue opcode:%02x"
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_MSGPS_TYPEx02X "JBT jbt_handle_session_enabled_result msg->ps_type:%02x"
    JBT_MSG_ID_BT_JSR82_CONNECT_CNF "JBT MSG_ID_BT_JSR82_CONNECT_CNF"
    JBT_JBT_CMD_HANDLE_RESTORE_INDEXx02X "JBT jbt_cmd_handle_restore index:%02x"
    JBT_JBT_HANDLE_GET_RECORD_HANDLE_RESULT_x02X "JBT jbt_handle_get_record_handle_result :%02x"
    JBT_MTUx04X "JBT mtu:%04x"
    JBT_L2CAP_INIT "JBT l2cap init"
    JBT_SECURITYx02X "JBT security:%02x"
    JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY_FIND_ONE "JBT jbt_allocate_one_available_entry find one"
    JBT_JBT_SESSION_SERVICE_DEREGISTRATION "JBT jbt_session_service_deregistration"
    JBT_MSG_ID_BT_JSR82_RESTROE_ACL_CNF "JBT MSG_ID_BT_JSR82_RESTROE_ACL_CNF"
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSTRANSACTION_IDx08X "JBT bt_handle_session_connect_ind parms.transaction_id:%08x"
    JBT_JBT_SDPDB_CONTEXTJBT_REGISTER_RECORDOPERATION_STATE_x02X "JBT jbt_sdpdb_context.jbt_register_record.operation_state :%02x"
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT "JBT jbt_handle_session_deregistration_result"
    JBT_JBT_CMD_KICK_CHECK_LIST "JBT jbt_cmd_kick_check_list"
    JBT_JBT_HANDLE_DEVICE_DISCOVERY_ENTRY_RESULT "JBT jbt_handle_device_discovery_entry_result"
    JBT_JBT_GET_LOCAL_COD_CMD_BODY "JBT jbt_get_local_cod_cmd_body"
    JBT_JBT_SESSION_SERVICE_REGISTRATION "JBT jbt_session_service_registration"
    JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_JBT_CMD_LIST_RESET "JBT jbt_cmd_check_and_remove_in_queue jbt_cmd_list_reset"
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT_MSGRESULTx02X "JBT jbt_handle_session_turnon_result msg->result:%02x"
    JBT_JSR82_HANDLE_MESSAGE_COMPLETED "JBT JSR82 Handle message completed"
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSCON_IDx02X "JBT bt_handle_session_disconnect_ind parms.con_id:%02x"
    JBT_INSERT_NODE_TO_TARGETLIST_TAIL "JBT insert_node_to_targetList_tail"
    JBT_TYPEx02X "JBT type:%02x"
    JBT_MSG_ID_BT_JSR82_TX_READY_IND "JBT MSG_ID_BT_JSR82_TX_READY_IND"
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_CHANNEL_BUFFER "JBT bt_handle_session_disconnect_ind free channel_buffer"
    JBT_JBT_SDPDB_CONTEXTJBT_GET_RECORD_HANDLEOPERATION_STATEx02X "JBT jbt_sdpdb_context.jbt_get_record_handle.operation_state:%02x"
    JBT_JBT_CMD_INSERT_QUEUE_TYPExD "JBT jbt_cmd_insert_queue type:%d"
    JBT_JBT_GAP_CONTEXTJBT_GET_LOCAL_DISCOVERABLEOPERATION_STATEx02X "JBT jbt_gap_context.jbt_get_local_discoverable.operation_state:%02x"
    JBT_JBT_HANDLE_POWER_ON_REQ_RESULT "JBT jbt_handle_power_on_req_result"
    JBT_MSG_ID_BT_JSR82_DISCONNECT_IND "JBT MSG_ID_BT_JSR82_DISCONNECT_IND"
    JBT_IN_JBT_SPP_DEVRX_SET_READYTOREAD_FALSE "JBT In jbt_spp_DevRx(): Set readyToRead FALSE"
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_PARMSTRANSACTION_IDx08X "JBT jbt_handle_session_turnoff_result parms.transaction_id:%08x"
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSL2CAP_IDx04X "JBT bt_handle_session_connect_req_cnf parms.l2cap_id:%04x"
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSCON_IDx02X "JBT bt_handle_session_connect_req_cnf parms.con_id:%02x"
    JBT_JBT_HANDLE_DEVICE_DISCOVERY_COMPLETED_RESULT "JBT jbt_handle_device_discovery_completed_result"
    JBT_JBT_SDPDB_CONTEXTSDP_RECORDDB_INDEXUSED "JBT jbt_sdpdb_context.sdp_record[db_index].used"
    JBT_MSG_ID_BT_APP_SDPDB_REGISTER_CNF "JBT MSG_ID_BT_APP_SDPDB_REGISTER_CNF"
    JBT_MSG_ID_BT_BM_READ_REMOTE_NAME_CNF "JBT MSG_ID_BT_BM_READ_REMOTE_NAME_CNF"
    JBT_JBT_RESTORE_BTSTACK_COD "JBT jbt_restore_btstack_cod"
    JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULTx02X "JBT jbt_handle_deregister_record_result:%02x"
    JBT_JBT_HANDLE_REGISTER_RECORD_RESULT_x02X "JBT jbt_handle_register_record_result :%02x"
    JBT_JBT_CMD_KICK_CHECK_LIST_DONE "JBT jbt_cmd_kick_check_list_done"
    JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULT_x02X "JBT jbt_handle_deregister_record_result :%02x"
    JBT_JBT_SET_LOCAL_COD_CMD_MODEx08X "JBT jbt_set_local_cod_cmd, mode:%08x"
    JBT_JBT_CMD_QUEUE_NONCONCURRENT_COMPLETED "JBT jbt_cmd_queue_nonconcurrent_completed"
    JBT_JBT_DEVICE_DISCOVERY_CANCEL_CMD_TRANSACTION_IDx02X "JBT jbt_device_discovery_cancel_cmd, transaction_id:%02x"
    JBT_JBT_DEVICE_DISCOVERY_CMD_BODY "JBT jbt_device_discovery_cmd_body"
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT "JBT jbt_handle_session_enabled_result"
    JBT_PSM_CHANNELx04X "JBT psm_channel:%04x"
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSCON_IDx02X "JBT jbt_handle_session_deregistration_result parms.con_id:%02x"
    JBT_JBT_GAP_CONTEXTJBT_READ_ADDROPERATION_STATEx02X "JBT jbt_gap_context.jbt_read_addr.operation_state:%02x"
    JBT_MSG_ID_BT_BM_DISCOVERY_CNF "JBT MSG_ID_BT_BM_DISCOVERY_CNF"
    JBT_JBT_HANDLE_SDAP_RESULT "JBT jbt_handle_sdap_result"
    JBT_JBT_HANDLE_GET_RECORD_HANDLE_RESULT_x08X "JBT jbt_handle_get_record_handle_result :%08x"
    JBT_MSG_ID_BT_BM_GET_LINK_STATE_CNF "JBT MSG_ID_BT_BM_GET_LINK_STATE_CNF"
    JBT_JBT_REGISTER_RECORD_CMD_RECORD_TRANSACTION_IDx08X "JBT jbt_register_record_cmd record transaction_id:%08x"
    JBT_SEARCH_TYPEx02X "JBT search_type:%02x"
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_STATUS_x02X "JBT jbt_cmd_check_device_in_queue status :%02x"
    JBT_JBT_SET_ACL_SECURITY_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X "JBT jbt_set_acl_security_cmd, addr:%02x,%02x,%02x,%02x,%02x,%02x"
    JBT_INDEXx02X_USEDx02XHANDLEx08X "JBT index:%02x, used:%02x,handle:%08x"
    JBT_JBT_HANDLE_DEVICE_DISCOVERY_CANCEL_RESULT "JBT jbt_handle_device_discovery_cancel_result"
    JBT_TRANSACTION_IDx08X "JBT transaction_id:%08x"
    JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULT_x08X "JBT jbt_handle_deregister_record_result :%08x"
    JBT_SIZEx02X "JBT size:%02x"
    JBT_JBT_HANDLE_GET_REMOTE_NAME_RESULT "JBT jbt_handle_get_remote_name_result"
    JBT_JBT_REGISTER_RECORD_CMD_RECORD_SIZEx08X "JBT jbt_register_record_cmd record size:%08x"
    JBT_MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF "JBT MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF"
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_MSGRESULTx02X "JBT jbt_handle_session_turnoff_result msg->result:%02x"
    JBT_JBT_GAP_CONTEXTJBT_GET_CODOPERATION_STATEx02X "JBT jbt_gap_context.jbt_get_cod.operation_state:%02x"
    JBT_JBT_GAP_CONTEXTJBT_GET_CODTRANSACTION_IDx08X "JBT jbt_gap_context.jbt_get_cod.transaction_id:%08x"
    JBT_MSG_ID_BT_BM_SEARCH_RAW_RESULT "JBT MSG_ID_BT_BM_SEARCH_RAW_RESULT"
    JBT_SESSION_ENTRYTURN_ON_OPOPERATION_STATEx02X "JBT session_entry->turn_on_op.operation_state:%02x"
    JBT_JBT_INIT "JBT jbt_init"
    JBT_INITIALIZE "JBT_Initialize"
    JBT_JBT_SESSION_SERVICE_TURN_ON "JBT jbt_session_service_turn_on"
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSPSM_CHANNELx04X "JBT jbt_handle_session_enabled_result parms.psm_channel:%04x"
    JBT_JBT_POWER_ON_CMD "JBT jbt_power_on_cmd"
    JBT_BT_HANDLE_SESSION_CONNECT_IND_ADDRx02Xx02Xx02Xx02Xx02Xx02X "JBT bt_handle_session_connect_ind addr:%02x,%02x,%02x,%02x,%02x,%02x"
    JBT_JBT_SET_LOCAL_COD_CMD_BODY "JBT jbt_set_local_cod_cmd_body"
    JBT_JBT_SDPDB_RELEASE_ENTRY "JBT jbt_sdpdb_release_entry"
    JBT_JBT_HANDLE_RESTORE_BTSTACK_RESULT "JBT jbt_handle_restore_btstack_result"
    JBT_JBT_GAP_POWER_STATE_RETURN_STATUSxD "JBT jbt_gap_power_state, return status:%d"
    JBT_IN_JBT_SPP_READCASE2_SET_READYTOREAD_TO_FALSE "JBT In jbt_spp_read():case2 Set readyToRead to FALSE"
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSTRANSACTION_IDx08X "JBT bt_handle_session_connect_req_cnf parms.transaction_id:%08x"
    JBT_VALUEx08X "JBT value:%08x"
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSPS_TYPEx02X "JBT bt_handle_session_disconnect_ind parms.ps_type:%02x"
    JBT_JBT_GAP_CONTEXTJBT_RESTORE_STATEx02X "JBT jbt_gap_context.jbt_restore_state:%02x"
    JBT_JBT_GAP_CONTEXTJBT_SET_CODOPERATION_STATEx02X "JBT jbt_gap_context.jbt_set_cod.operation_state:%02x"
    JBT_JBT_GAP_CONTEXTJBT_DEVICE_DISCOVERYTRANSACTION_IDx08X "JBT jbt_gap_context.jbt_device_discovery.transaction_id:%08x"
    JBT_SECURITY_VALUEx02X "JBT security_value:%02x"
    JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_MATCHED "JBT jbt_cmd_check_and_remove_in_queue matched"
    JBT_MSG_ID_BT_JSR82_TURNOFF_SERVICE_CNF "JBT MSG_ID_BT_JSR82_TURNOFF_SERVICE_CNF"
    JBT_SDAP_INIT "JBT sdap init"
    JBT_JBT_POWER_OFF_CMD "JBT jbt_power_off_cmd"
    JBT_MSG_ID_MMI_BT_BCC_GET_DISCOVERABLE_MODE_CNF "JBT MSG_ID_MMI_BT_BCC_GET_DISCOVERABLE_MODE_CNF"
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSRESULTx02X "JBT bt_handle_session_connect_ind parms.result:%02x"
    JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_JBT_POWEROFF_BY_JBT "JBT jbt_handle_power_off_req_result JBT_POWEROFF_BY_JBT"
    JBT_EXISTED_VALUEx08X_USEDx02X "JBT existed_value:%08x, used:%02x"
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND "JBT bt_handle_session_disconnect_ind"
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSPS_TYPEx02X "JBT bt_handle_session_connect_ind parms.ps_type:%02x"
    JBT_JBT_GET_RECORD_HANDLE_CMD "JBT jbt_get_record_handle_cmd"
    JBT_RESULTx02X "JBT result:%02x"
    JBT_MSGDISCOVERABLE_MODEx02X "JBT msg->discoverable_mode:%02x"
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSPS_TYPEx02X "JBT jbt_handle_session_deregistration_result parms.ps_type:%02x"
    JBT_MSG_ID_BT_JSR_DEACTIVE_CNF "JBT MSG_ID_BT_JSR_DEACTIVE_CNF"
    JBT_JBT_INIT_COMPLETED "JBT jbt_init completed"
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_READRINGBUF "JBT bt_handle_session_disconnect_ind free ReadRingBuf"
    JBT_MSG_ID_MMI_BT_BCC_POWER_ON_CNF "JBT MSG_ID_MMI_BT_BCC_POWER_ON_CNF"
    JBT_JBT_CMD_QUEUE_CONCURRENT_PROCESSING_END "JBT jbt_cmd_queue_concurrent_processing end"
    JBT_JBT_GAP_CONTEXTJBT_POWER_STATUSx02X "JBT jbt_gap_context.jbt_power_status:%02x"
    JBT_JBT_SESSION_CONNECT_REQ "JBT jbt_session_connect_req"
    JBT_JBT_DEREGISTER_RECORD_CMD_HANDLEx08X "JBT jbt_deregister_record_cmd handle:%08x"
    JBT_JBT_CMD_HANDLE_RESTORE_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOx02X "JBT jbt_cmd_handle_restore jbt_cmd_queue_context.cmd_run_no:%02x"
    JBT_JBT_CMD_QUEUE_NONCONCURRENT_PROCESSING "JBT jbt_cmd_queue_nonconcurrent_processing"
    JBT_MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF "JBT MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF"
    JBT_MSG_ID_BT_JSR_POWER_OFF_REQ "JBT MSG_ID_BT_JSR_POWER_OFF_REQ"
    JBT_COMMAND_REJECT_A "JBT Command Reject A"
    JBT_SDAP_SEARCH_PATTx02Xx02Xx02Xx02X "JBT  SDAP search patt:%02x,%02x,%02x,%02x"
    JBT_DEVICE_NAMEx02X_xC "JBT Device name:%02x, %c"
    JBT_JBT_SESSION_SERVICE_TURN_OFF "JBT jbt_session_service_turn_off"
    JBT_JBT_GAP_CONTEXT_JBT_RESTORE_STATExD "JBT jbt_gap_context, jbt_restore_state:%d"
    JBT_MSGWRITE_TYPEx08X "JBT msg->write_type:%08x"
    JBT_MSG_ID_BT_JSR_TEST_CMD2_REQ "JBT MSG_ID_BT_JSR_TEST_CMD2_REQ"
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSL2CAP_IDx04X "JBT bt_handle_session_connect_ind parms.l2cap_id:%04x"
    JBT_JBT_GAP_CONTEXTJBT_GET_REMOTE_NAMEOPERATION_STATEx02X "JBT jbt_gap_context.jbt_get_remote_name.operation_state:%02x"
    JBT_JBT_REGISTER_RECORD_CMD "JBT jbt_register_record_cmd"
    JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT "JBT jbt_handle_power_off_req_result"
    JBT_COMMAND_REJECT_C_DUE_TO_NO_ENTRY "JBT Command Reject C Due to no entry"
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMD_LIST_INIT "JBT jbt_cmd_check_device_in_queue jbt_cmd_list_init"
    JBT_JBT_GET_REMOTE_NAME_CMD_BODY "JBT jbt_get_remote_name_cmd_body"
    JBT_JBT_POWER_STATUSx02X "JBT jbt_power_status:%02x"
    JBT_MSG_ID_MMI_BT_BCC_SET_DISCOVERABLE_MODE_CNF "JBT MSG_ID_MMI_BT_BCC_SET_DISCOVERABLE_MODE_CNF"
    JBT_JBT_GAP_CONTEXTJBT_GET_ACL_INFOTRANSACTION_IDx08X "JBT jbt_gap_context.jbt_get_acl_info.transaction_id:%08x"
    JBT_MSG_ID_BT_JSR82_RX_READY_IND "JBT MSG_ID_BT_JSR82_RX_READY_IND"
    JBT_ADDRx02Xx02Xx02Xx02Xx02Xx02X "JBT addr:%02x,%02x,%02x,%02x,%02x,%02x"
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF "JBT bt_handle_session_connect_req_cnf"
    JBT_JBT_GAP_CONTEXTJBT_GET_REMOTE_NAMETRANSACTION_IDx08X "JBT jbt_gap_context.jbt_get_remote_name.transaction_id:%08x"
    JBT_JBT_SET_LOCAL_NAME_CMD_TRANSACTION_IDx08X "JBT jbt_set_local_name_cmd, transaction_id:%08x"
    JBT_JBT_SDPDB_FIND_ENTRY_BY_HANDLE_x08X "JBT jbt_sdpdb_find_entry_by_handle :%08x"
    JBT_COMMAND_REJECT_B "JBT Command Reject B"
    JBT_MSG_ID_BT_JSR_TEST_CMD1_REQ "JBT MSG_ID_BT_JSR_TEST_CMD1_REQ"
    JBT_JBT_DEREGISTER_RECORD_CMD "JBT jbt_deregister_record_cmd"
    JBT_NODECMD_CODExD "JBT node->cmd_code:%d"
    JBT_JBT_CMD_QUEUE_CONCURRENT_PROCESSING_OPCODExD "JBT jbt_cmd_queue_concurrent_processing opcode:%d"
    JBT_SESSION_ENTRYINITIATORxD "JBT session_entry->initiator:%d"
    JBT_JBT_GET_LOCAL_ADDR_CMD_BODY "JBT jbt_get_local_addr_cmd_body"
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT "JBT jbt_handle_session_turnoff_result"
    JBT_RESULTx02X_IS_MASTERx02X_IS_AUTHx02X_IS_ENCRYPTED "JBT result:%02x, is_master:%02x, is_auth:%02x, is_encrypted"
    JBT_MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF "JBT MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF"
    JBT_MSGNAME_LENx02X "JBT msg->name_len:%02x"
    JBT_JBT_HANDLE_GET_DISCOVERABLE_MODE_RESULT "JBT jbt_handle_get_discoverable_mode_result"
    JBT_JBT_GET_LOCAL_NAME_CMD_TRANSACTION_IDx08X "JBT jbt_get_local_name_cmd, transaction_id:%08x"
    JBT_JBT_SET_LOCAL_DISCOVERY_CMD_MODEx08X "JBT jbt_set_local_discovery_cmd, mode:%08x"
    JBT_JBT_REGISTER_RECORD_CMD_HANDLEx08X "JBT jbt_register_record_cmd handle:%08x"
    JBT_JBT_SEARCH_AN_EXISTING_ENTRY "JBT jbt_search_an_existing_entry"
    JBT_REMOVE_NODE_FROM_TARGETLIST "JBT remove_node_from_targetList"
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSCON_IDx02X "JBT jbt_handle_session_enabled_result parms.con_id:%02x"
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_PARMSCON_IDx02X "JBT jbt_handle_session_turnoff_result parms.con_id:%02x"
    JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_TYPEx02X "JBT jbt_handle_power_off_req_result type:%02x"
    JBT_IN_JBT_SPP_READCASE1_SET_READYTOREAD_TO_TRUE_AND_READMORExD "JBT In jbt_spp_read():case1 Set readyToRead to TRUE and ReadMore=%d"
    JBT_JBT_GAP_CONTEXTJBT_GET_ACL_INFOOPERATION_STATEx02X "JBT jbt_gap_context.jbt_get_acl_info.operation_state:%02x"
    JBT_JBT_SDAP_CMD "JBT jbt_sdap_cmd"
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_MSGPS_TYPEx02X "JBT jbt_handle_session_turnoff_result msg->ps_type:%02x"
    JBT_JBT_CMD_QUEUE_CONTEXTQUEUE_KICK_OFF_D "JBT jbt_cmd_queue_context.queue_kick_off :%d"
    JBT_JBT_CMD_LIST_INSERT_TAIL "JBT jbt_cmd_list_insert_tail"
    JBT_MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF "JBT MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF"
    JBT_JBT_SET_ACL_SECURITY_CMD_SECURITY_MODEx02X "JBT jbt_set_acl_security_cmd, security_mode:%02x"
    JBT_JBT_SDAP_SS_CMD "JBT jbt_sdap_ss_cmd"
    JBT_JBT_SDAP_SA_CMD "JBT jbt_sdap_sa_cmd"
    JBT_JBT_SDAP_SSA_CMD "JBT jbt_sdap_sss_cmd"
    JBT_JBT_SDAP_SA_RECORD_HANDLERx08X "JBT sa record handler:%08x"
    JBT_JBT_GAP_CONTEXTJBT_DEVICE_DISCOVERYOPERATION_STATEx02X "JBT jbt_gap_context.jbt_device_discovery.operation_state:%02x"
    JBT_JBT_HANDLE_REGISTER_RECORD_RESULT_x08X "JBT jbt_handle_register_record_result :%08x"
    JBT_JBT_DEVICE_DISCOVERY_CMD_TRANSACTION_IDx08X "JBT jbt_device_discovery_cmd, transaction_id:%08x"
    JBT_PARMSRESULTx02X "JBT parms.result:%02x"
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_MSGRESULTx02X "JBT bt_handle_session_connect_req_cnf msg->result:%02x"
    JBT_JBT_GAP_CONTEXTJBT_SET_LOCAL_DISCOVERABLEOPERATION_STATEx02X "JBT jbt_gap_context.jbt_set_local_discoverable.operation_state:%02x"
    JBT_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOx02X "JBT jbt_cmd_queue_context.cmd_run_no:%02x"
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_CMD_OPCODExD "JBT jbt_cmd_check_device_in_queue cmd_opcode:%d"
    JBT_MSG_ID_BT_JSR82_TURNON_SERVICE_CNF "JBT MSG_ID_BT_JSR82_TURNON_SERVICE_CNF"
    JBT_JBT_SET_LOCAL_COD_CMD_TRANSACTION_IDx08X "JBT jbt_set_local_cod_cmd, transaction_id:%08x"
    JBT_MSG_ID_BT_JSR_KICK_NEW_COMMAND "JBT MSG_ID_BT_JSR_KICK_NEW_COMMAND"
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_SESSION_ENTRYINITIATORxD "JBT bt_handle_session_disconnect_ind session_entry->initiator:%d"
    JBT_JBT_RESTORE_BTSTACK_LINK_CMD "JBT jbt_restore_btstack_link_cmd"
    JBT_JBT_HANDLE_GET_LOCAL_ADDR_RESULT "JBT jbt_handle_get_local_addr_result"
    JBT_JBT_NODECMD_CODExD "JBT jbt node->cmd_code:%d"
    JBT_MSG_ID_BT_JSR_POWER_OFF_IND "JBT MSG_ID_BT_JSR_POWER_OFF_IND"
    JBT_JBT_GAP_CONTEXTJBT_SET_CODTRANSACTION_IDx08X "JBT jbt_gap_context.jbt_set_cod.transaction_id:%08x"
    JBT_JBT_GET_LOCAL_DISCOVERY_CMD_TRANSACTION_IDx08X "JBT jbt_get_local_discovery_cmd, transaction_id:%08x"
    JBT_JBT_HANDLE_GET_ACL_INFO_RESULT "JBT jbt_handle_get_acl_info_result"
    JBT_MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF "JBT MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF"
    JBT_JBT_SDAP_CONTEXTJBT_SERVICE_SEARCHOPERATION_STATEx02X "JBT jbt_sdap_context.jbt_service_search.operation_state:%02x"
    JBT_JBT_CMD_INSERT_QUEUE "JBT jbt_cmd_insert_queue"
    JBT_SPP_INIT "JBT Spp init"
    JBT_PS_TYPEx02X "JBT ps_type:%02x"
    JBT_CON_IDx02X "JBT con_id:%02x"
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT "JBT jbt_handle_session_turnon_result"
    JBT_JBT_HANDLE_GET_LOCAL_COD_RESULT "JBT jbt_handle_get_local_cod_result"

    FUNC_JBT_OPEN_FILE_FAILED "JBT UT: Open file failed with errcode=%d"
    FUNC_JBT_GET_FILE_SIZE "JBT UT: Get file size =%d"
    FUNC_JBT_PUTBYTES "JBT UT PutBytes(): actual_write=%d,wanted_write_this_time=%d,accumulate_len=%d,tmp_buf_pos=%d,wanted_write_next_time=%d,fsize=%d"
    FUNC_JBT_PUTBYTES_CLOSE01 "JBT UT: Put All Data to TX buf, close file"
    FUNC_JBT_READ_FAILED "JBT UT: Read failed with errcode=%d"
    FUNC_JBT_WRITE_FAILED "JBT UT: Write failed with errcode=%d"
    FUNC_JBT_OPEN_FILE_FOR_RECEIVED_DATA "JBT UT: Open file for received data later successfully"
    FUNC_JBT_GETBYTES "JBT UT GetBytes(): actual read=%d,wanted_read_this_time=%d,accumulate_len=%d,tmp_buf_pos=%d,fsize=%d"
    FUNC_JBT_WRITE_BUF_DATA_TO_FILE "JBT UT: Write Received data in tmp_buf to File"
    FUNC_JBT_RECEIVED_ALL_DATA "JBT UT: Received all data with size=%d"
    FUNC_JBT_WAIT_FOR_READY_TO_WRITE_IND "JBT UT: Wait for MSG READY TO WRITE IND"
    FUNC_JBT_WAIT_FOR_READY_TO_READ_IND "JBT UT: Wait for MSG READY TO READ IND"
    FUNC_JBT_SEARCH_EACH_ENTRY "JBT UT:In jbt_search_an_existing_entry():Search each entry, Its  inx or transactionId value=%d,used=%d"
    FUNC_JBT_DISC_IND_CLIENT_FREE_RINGBUF "JBT UT: bt_handle_session_disconnect_ind(): client free rw ringbuf"
    FUNC_JBT_DISC_IND_SRV_RESET_RW_PTR "JBT UT: bt_handle_session_disconnect_ind(): server resets rw ptr to pStart"
    FUNC_JBT_DISC_IND_CLIENT_FREE_CHNL_BUF "JBT UT: bt_handle_session_disconnect_ind(): client release channel_buffer"
    FUNC_JBT_CON_REQ_FAILED_FREE_RINGBUF "JBT UT: spp client connect req failed, release RW ringbuf"
    FUNC_JBT_CON_REQ_FAILED_FREE_CHNL_BUF "JBT UT: spp client connect req failed, release channel buffer"
    FUNC_JBT_REG_SERVICE_ALLOCATE_CHNL_BUF "JBT SESSION: Register service request: allocate channel buffer"
    FUNC_JBT_REG_SERVICE_ALLOCATE_RWRING_BUF "JBT SESSION: Register service request: allocate rw ring buffer"
    FUNC_JBT_ENABLE_SERVICE_FAILED_FREE_RING_BUF "JBT UT: Enable service failed, release rw ring buf"
    FUNC_JBT_ENABLE_SERVICE_FAILED_FREE_CHNL_BUF "JBT UT: Enable service failed, release channel buffer"
    FUNC_JBT_DEREG_SERVICE_SUCCESS_FREE_CHNL_BUF "JBT UT: Deregister service success: release channel buffer"
    FUNC_JBT_DEREG_SERVICE_SUCCESS_FREE_RING_BUF "JBT UT: Deregister service success: release rw ring buffer"
    FUNC_JBT_CON_REQ_ALLOCATE_CHNL_BUF "JBT: SPP con req, allocate channel buffer"
    FUNC_JBT_CON_REQ_ALLOCATE_RING_BUF "JBT: SPP con req, allocate rw ring buffer"
    FUNC_JBT_DISC_IND_CLIENT_FREE_SESSION_ENTRY "JBT UT: bt_handle_session_disconnect_ind(): client release session_entry"
    FUNC_JBT_WRITE_BUT_SESSION_NOT_FIND "JBT UT: Write but session entry not found, check if the session is closed or not"
    FUNC_JBT_CAN_NOT_GET_ONE_FREE_SUBENTRY "JBT: jbt_session_con_req(): can not get one free subsession entry"
    FUNC_JBT_CAN_NOT_FIND_EXISTING_SUBENTRY "JBT UT: connect_request_cnf(): can not find subsession entry with type=%d, value=%d"
    FUNC_JBT_REQ_CMD_FAILED_FREE_BUF_AND_RESET_ENTRY "JBT: jbt_reset_session_entry() free RWBuf ChnlBuf and reset entries due to req cmd failed"
    FUNC_JBT_UT_RW_PTR "JBT_UT: jbt_ut_rw_acceptor APPRingBuf: start=%08X,read=%08X,write=%08X,end=%08X"
    FUNC_JBT_CURRENT_LB_MODE "JBT: current enable_txrx_loopback_mode=%d"
    FUNC_JBT_REJCT_DUE_TO_POWEROFF_ONGOING "JBT: Reject this request due to POWER OFF state"
    FUNC_JBT_UT_SET_ACL_SECURITY_INFO "JBT: Get notification of Set ACL Security info"
    JBT_HANDLE_SET_ACL_SECURITY_RESULT "JBT: jbt_handle_set_acl_security_result()"

    FUNC_JBT_BCC_INIT "[JSRBCC] jbt_bcc_init"
    FUNC_JBT_BCC_AUTHORIZE_REQ_CMD "[JSRBCC] jbt_authorize_req_cmd, op_state=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x"
    FUNC_JBT_BCC_IS_AUTHORIZED_REQ_CMD "[JSRBCC] jbt_is_authorized_req_cmd, op_state=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x"
    FUNC_JBT_BCC_IS_TRUSTED_REQ_CMD "[JSRBCC] jbt_is_trusted_req_cmd, op_state=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x"
    FUNC_JBT_BCC_GET_HOST_SECURITY_MODE_REQ_CMD "[JSRBCC] jbt_get_host_security_mode_cmd, op_state=%d, tran_id=%d"
    FUNC_JBT_BCC_GET_PREKNOWN_DEV_COUNT_REQ_CMD "[JSRBCC] jbt_get_preknown_device_count_req_cmd, op_state=%d, tran_id=%d"
    FUNC_JBT_BCC_GET_PREKNOWN_DEV_REQ_CMD "[JSRBCC] jbt_get_preknown_devices_req_cmd, op_state=%d, tran_id=%d"
    FUNC_JBT_BCC_GET_NATIVE_PWR_STATUS_REQ_CMD "[JSRBCC] jbt_get_native_pwr_status_req_cmd, op_state=%d, tran_id=%d"
    FUNC_JBT_BCC_AUTHORIZE_REQ_CMD_RESULT "[JSRBCC] jbt_authorize_req_cmd_result, result=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x"
    FUNC_JBT_BCC_IS_AUTHORIZED_REQ_CMD_RESULT "[JSRBCC] jbt_is_authorized_req_cmd_result, result=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x"
    FUNC_JBT_BCC_IS_TRUSTED_REQ_CMD_RESULT "[JSRBCC] jbt_is_trusted_req_cmd_result, result=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x"
    FUNC_JBT_BCC_GET_HOST_SECURITY_MODE_REQ_CMD_RESULT "[JSRBCC] jbt_get_host_security_mode_cmd_result, security_mode=%d, tran_id=%d"
    FUNC_JBT_BCC_GET_PREKNOWN_DEV_COUNT_REQ_CMD_RESULT "[JSRBCC] jbt_get_preknown_device_count_req_cmd_result, dev_count=%d, tran_id=%d"
    FUNC_JBT_BCC_GET_PREKNOWN_DEV_REQ_CMD_RESULT "[JSRBCC] jbt_get_preknown_devices_req_cmd_result, device_count=%d, tran_id=%d"
    FUNC_JBT_BCC_GET_NATIVE_PWR_STATUS_REQ_CMD_RESULT "[JSRBCC] jbt_get_native_pwr_status_req_result, native_pwr_status=%d, tran_id=%d"
    JBT_FINALIZE_REQ_EVENT "jbt_finalize(): block in request events =%08X"
    JBT_FINALIZE_COMPLETE "jbt_finalize(): retrieve events successfully, end of jbt_finalize()"
    JBT_FINALIZE_ALREADY_OFF "jbt_finalize(): jbt is already in power off state, end of jbt_finalize()"
    JBT_POWEROFF_BY_MMI_END_BEFORE_JBT_POWER_OFF "jbt_handle_power_off_req_result():Recv power_off_ind before end of JBT_POWER_OFF_CMD"
    JBT_FINALIZE_WAIT_POWER_ON "jbt_finalize():waiting JBT power on end"
    JBT_FINALIZE_START_POWER_OFF "jbt_finalize(): powered on, start to power of JBT"
    JBT_FINALIZE_COMPLETE_POWER_ON_FAILED "jbt_finalize(): wait for power on but failed, finalize complete"
    JBT_SET_END_POWER_ON_EVENT "jbt_finalize(): set event due to recv result of jbt power on"
    JBT_JBT_GET_LOCAL_NAME_CMD_BODY "jbt_get_local_name_cmd_body()"
    JBT_BT_GET_LOCAL_NAME_TRANSACTION_ID "jbt_get_local_name_cmd_body() with transaction_id=%d"
    JBT_BT_COMPLETE_RESTORE_MMI_AND_COD "jbt_restore_procedure(): complete of MMI restore and CoD restored by MMI, not from JBT to BTStack"
    JBT_HANDLE_GET_LOCAL_NAME_RESULT "jbt_handle_get_local_name_result()"
    FUNC_JBT_RING_WRITE_DATA_INFO "JBTRING_WriteData(): pStart=%08x,pEnd=%08x,pRead=%08x,pWrite=%08x"
    FUNC_JBT_RING_READ_DATA_INFO "JBTRING_ReadData():pStart=%08x,pEnd=%08x,pRead=%08x,pWrite=%08x"
    FUNC_JBT_RING_READ_DATA_CASE1 "JBTRING_ReadData(), case1: readable_len=%d"
    FUNC_JBT_RING_READ_DATA_CASE2 "JBTRING_ReadData(), case2: first_readable_len=%d,total_data_len=%d"
    FUNC_JBT_RING_READ_DATA_CASE2_INFO "JBTRING_ReadData() case2:pStart=%08x,pEnd=%08x,pRead=%08x,pWrite=%08x"
    FUNC_JBT_RING_READ_DATA_CASE2_LEFT_INFO "JBTRING_ReadData():left_wanted_read_len=%d,left_available_data_len=%d,actual_read_len=%d"
    FUNC_JBT_CANCEL_INQUIRY_DUE_TO_VM_TERMINATE "JBT:Cancel an ongoing Discovery operation due to speed VM termination"
    FUNC_JBT_CANCEL_INQUIRY_FAILED_WHILE_VM_TERMINATE "JBT:Cancel Discovery operation failed while VM termination"
    FUNC_JBT_GET_CNF_GENERATE_BY_JBT_DUE_TO_VM_TERMINATE "JBT:get cnf generated by JBT due to vm termination with case=%d"
    FUNC_JBT_DISC_IND_SUBSESSION_COUNT "JBT:Disc_Ind_hdler, subsession_count=%d"
    FUNC_JBT_ADM_CREATE_INIT "JBT: Adm is created at init stage due to jvm_main invokes jbt_init"
    FUNC_JBT_ADM_ALREADY_CREATE_INIT "JBT: Adm is already created in jbt_init"
    FUNC_JBT_ADM_CREATE_POWER_ON_SUCCESS "JBT: Adm is created when jbt_power_on is ok"
    FUNC_JBT_ADM_DELETE_STATUS "JBT:status of kal_adm_delete()=%d"
    FUNC_JBT_MEM_ALLOC_INX_SIZE_PTR "jbt_malloc inx=%d,size=%d,ptr=%08X"
    FUNC_JBT_MEM_FREE_INX_SIZE_PTR "jbt_free inx=%d,size=%d,ptr=%08X"
    FUNC_JBT_REPORT_JBT_POWER_OFF_OR_ABNORMAL_RESET "jbt reports JBT_POWER_OFF_OR_ABNORMAL_RESET to vm after jbt_init"



BT_OBEX_TRACE_START "BT_OBEX_TRACE_START"


    BTSTACK_SENDTXBUFFER_STATUS_xD "BTSTACK_SendTxBuffer status: %d"
    OBEX_RECEIVED_NEW_OBEX_COMMAND_BEFORE_PREVIOUS_RESPONSE_SENT_SUCCESSFULLY "[OBEX]---ERROR: Received new OBEX command before previous response sent successfully."
    OBEX_CLIENT_RFCOMM_EVENT_RECEIVED_xD_BYTES "OBEX: Client RFCOMM Event: Received %d bytes"
    OBEX_SERVER_SEQUENCE_NUMBER_ERROR__xD "OBEX: Server Sequence Number Error = %d!!"
    DATAIND_RECV_FAILED_WSAGETLASTERROR__xD "DataInd: Recv() failed, WSAGetLastError() = %d"
    OBEX_TRANSPORT_BUSY "OBEX: Transport Busy!"
    OBEX_ASYNDPROC_SOCKET_xX_RECEIVED_MESSAGE_CLOSE "OBEX: AsyndProc() Socket %x received message: Close"
    OBEX_SERVER_RFCOMM_EVENT_TRANSMIT_COMPLETE "OBEX: Server RFCOMM Event: RFEVENT_PACKET_HANDLED,status=%d, dataLen=(%d), appHndl=0x%x"
    OBEX_SERVER_L2CAP_EVENT_TRANSMIT_COMPLETE "OBEX: Server L2CAP Event: RFEVENT_PACKET_HANDLED,status=%d, dataLen=(%d), appHndl=0x%x"
    OBEX_CLIENT_RFCOMM_EVENT_CLOSED "OBEX: Client RFCOMM Event: RFEVENT_CLOSED"
    OBEX_CLIENT_L2CAP_EVENT_CLOSED "OBEX: Client L2CAP Event: RFEVENT_CLOSED"
    OBEX_TCP_CONNECT_FAILED "OBEX: TCP Connect failed."
    OBEX_SERVER_RECEIVED_CLOSE_FOR_SESSION_OTHER_THAN_THE_ACTIVE_ONE "OBEX: Server received Close for session other than the active one."
    OBEX_CLIENT_CMEVENT_DATA_LINK_DIS_REPORTS_LINK_DISCONNECT "OBEX Client: CMEVENT_DATA_LINK_DIS Reports Link Disconnect."
    OBEX_RECEIVED_OBEX_CONNECT_OBEX_PACKET_SIZE_xD_BYTES "OBEX: Received OBEX Connect. OBEX Packet Size %d bytes."
    OBEX_RF_SENDDATA_FAILED "OBEX: RF_SendData FAILED: return (%d)"
    OBEX_SERVER_SENT_RFPKT_NUM "---OBEX: SERVER sent out (%d) RF_PACKET---"
    OBEX_ASYNCPROC_SOCKET_xX_RECEIVED_MESSAGE_WRITE_CONN_ACCEPTED "OBEX: AsyncProc() Socket %x received message: Write (Conn Accepted)."
    OBEX_ASYNCPROC_CLIENT_SOCKET_xX_RECEIVED_MESSAGE_READ "OBEX: AsyncProc() Client Socket %x received message: Read"
    OBEX_NONCE_TRC "OBEX: Nonce:"
    BEFORE_BTSTACK_SENDTXBUFFER_SIF_xD "before BTSTACK_SendTxBuffer SIF: %d"
    OBEX_CLIENT_RECV_RFPKT_NUM "---OBEX: CLIENT recv (%d) RF_PACKET---"
    TCPSTACK_SOCKET_FAILURExD "TCPSTACK: Socket failure=%d"
    OBEX_SEQNUM_xD "OBEX: SeqNum: %d."
    BTCLIENTSDPCALLBACK_BTXPCLIENTSTATE__OCS_DISCONNECTING "BtClientSdpCallback: btxp->client.state == OCS_DISCONNECTING"
    BTCLIENTSDPCALLBACK_BTXPCLIENTSTATE_L2CAP_OCS_DISCONNECTING "BtClientSdpCallback: btxp->client.state == OCS_DISCONNECTING"
    OBEX_CLIENT_IGNORED_EVENT_xD "OBEX Client: Ignored Event %d"
    OBEX_CLIENT_IGNORED_RFCOMM_EVENT_xD "OBEX Client: Ignored RFCOMM Event %d"
    OBEX_CLIENT_IGNORED_L2CAP_EVENT_xD "OBEX Client: Ignored L2CAP Event %d"
    OBEX_CLIENT_RFCOMM_EVENT_TRANSMIT_COMPLETE "OBEX: Client RFCOMM Event: RFEVENT_PACKET_HANDLED, status=%d,dataLen=%d"
    OBEX_CLIENT_L2CAP_EVENT_TRANSMIT_COMPLETE "OBEX: Client L2CAP Event: RFEVENT_PACKET_HANDLED, status=%d,dataLen=%d"
    BTSTACK_SENDTXBUFFER_LEN_xD "BTSTACK_SendTxBuffer len: %d"
    OBEX_CALL_OBPARSE_BUFFAVAIL "[OBEX] call ObParserBuffAvail()... appHndl(0x%x) - (%d)"
    OBEX_ASYNDPROC_SOCKET_xX_RECEIVED_MESSAGE "OBEX: AsyndProc() Socket %x received message:"
    OBEX_IGNORED_EVENT_xD "OBEX: Ignored Event %d"
    OBEX_CLIENT_SEQUENCE_STATUSxD_EXPECT_SEQNUMxD_NEXTSEQNUMxD_GOT_SEQNUMxD "OBEX: Client Sequence: Status=%d, Expect: SeqNum=%d, NextSeqNum=%d, Got: SeqNum=%d."
    OBEX_CONNECTED_TRC "OBEX: Connected."
    OBEX_SESSION_ID_TRC "OBEX: Session ID:"
    OBEX_SENDTXBUFFER "[OBEX] ObParserTxBuffAvail Call OBSTACK_SendTxBuffer. AppHndl=0x%x, obp=0x%x"
    OBEX_NO_FREE_PACKET "[OBEX] --- OBPROT_TxDone: NO FREE packet ---- "
    OBEXCLIENTCONNECTIONCALLBACK_BTXPCLIENTSTATE__OCS_DISCONNECTING "ObexClientConnectionCallback: btxp->client.state == OCS_DISCONNECTING"
    OBEX_SERVER_RFCOMM_EVENT_RECEIVED_xD_BYTES "OBEX: Server RFEVENT_DATA_IND: Received %d bytes"
    OBEX_SERVER_RFCOMM_EVENT_CLOSED "OBEX: Server RFCOMM Event: RFEVENT_CLOSED. server state=(%d),appHndl=0x%x"
    OBSERVERSENDRESPONSE_xD "ObServerSendResponse: %d"
    OBEX_BT_DEBUGx02X "OBEX: %02x"
    OBEX_OBEXPACKET_RECEIVED "[OBEX]=== One OBEX Packect is received. packetLen=(%d) ==="
    OBEX_TIMEOUT_x0X "OBEX: Timeout: %0X."
    OBEX_INVALID_SESSION_PARAMETERS_HEADER "OBEX: Invalid Session Parameters Header!"
    OBEX_ASYNCPROC_SOCKET_xX_RECEIVED_MESSAGE_ACCEPT "OBEX: AsyncProc() Socket %x received message: Accept"
    OBEX_RFCOMM_SENDDATA_FAILED "[OBEX]==== RF_SendData failed! ===, status=%d"
    OBEX_CLIENT_RECV_RESPONSE_WITH_NO_FINALBIT "[OBEX] === OBClientEventInd(OBPE_OPER_IND) Error: respcode(0x%x) has NO Final Bit. Disconnect..."
    OBEX_CLIENT_RESUME_SEQUENCE_STATUSxD_EXPECT_SEQNUMxD_NEXTSEQNUMxD_GOT_SEQNUMxD "OBEX: Client Resume Sequence: Status=%d, Expect: SeqNum=%d, NextSeqNum=%d, Got: SeqNum=%d."
    OBEX_SELECT_WINDOW_REGISTRATION_FAILED_xX "OBEX: Select Window Registration failed, %x"
    OBEX_CMEVENT_DATA_LINK_DIS "OBEX: CMEVENT_DATA_LINK_DIS. server state=(%d)"
    OBEX_SERVER_SEQUENCE_NUMBER_VALID "OBEX: Server Sequence Number Valid!!"
    OBEX_OBPROT_TXDONE "[OBEX] OBPROT_TxDone: AppHndl= 0x%x"
    OBEX_SEND_PACKET_WHEN_TRANSPORT_LAYER_IS_DISCONNECTED "[OBEX]---ObParserSendPacket when obp->rxState == OBSC_RX_NOP: no CONNECTTION."
    OBEX_CLIENTSENDCOMMAND "OBEX: ClientSendCommand: 0x%x"
    OBEX_CALL_RF_SENDDATA "OBEX: call RF_SendData, datalen=%d, b1=0x%x,b2=0x%x,b3=0x%x"
    OBEX_CALL_RF_CLOSECHANNEL "OBEX: BTSTACK_DisconnectReq call RF_CloseChannel"
    OBEX_CLIENT_RFCOMM_DATA_IND "OBEX: BtClientCallBack RFCOMM_DATA_IND. received (%d) bytes"
    OBEX_CLIENT_RFCOMM_OPEN "OBEX: BtClientCallBack RFCOMM_OPEN!client.state=(%d)"
    OBEX_CLIENT_L2CAP_OPEN "OBEX: BtL2ClientCallBack L2EVENT_OPEN!client.state=(%d)"
    OBEX_CLIENT_RFCOMM_CLOSED "[OBEX] BtClientCallBack btxp=0X%x, RFChannel 0X%x :RFEVENT_CLOSED!! client.state=(%d)"
    OBEX_SERVER_RFCOMM_OPEN_IND "OBEX: BtServerCallBack RFCOMM_OPEN_IND! server state=(%d), appHndl=0x%x"
    OBEX_SERVER_RFCOMM_OPEN "OBEX: BtServerCallBack RFCOMM_OPEN! server state=(%d), appHndl=0x%x"
    OBEX_CLIENT_DEINIT "[OBEX]: OBEX_ClientDeinit..."
    OBEX_CLIENT_SENDREQUEST "[OBEX] OBEX_ClientSendRequest....opcode=%d"
    OBEX_CLIENT_SENDREQUEST_BUSY "[OBEX]OBEX_ClientSendRequest return OB_STATUS_BUSY!"
    OBEX_CLIENT_SENDREQUEST_NOCONNECT "[OBEX]OBEX_ClientSendRequest return OB_STATUS_NO_CONNECT!"
    OBEX_CLIENT_SENDREQUEST_TOOSMALL "[OBEX]OBEX_ClientSendRequest return OB_STATUS_PACKET_TOO_SMALL!"
    OBEX_CLIENT_ABORT "[OBEX]OBEX_ClientAbort..."
    OBEX_CLIENT_ABORT_NOCONNECT "[OBEX]OBEX_ClientAbort return OB_STATUS_NO_CONNECT!"
    OBEX_CLIENT_ABORT_BUSY "[OBEX]OBEX_ClientAbort return OB_STATUS_BUSY!"
    OBEX_CLIENT_EVENTIND "[OBEX] ObClientEventInd - OBPE_Event: %d"
    OBEX_CLIENT_PROCESS_SIMPLEEVENT "[OBEX] ProcessSimpleOpEvents - response=%x"
    OBEX_CLIENT_COMPLETE "[OBEX] ClientComplete - OBCE_Event=%d"
    OBEX_CLIENT_SENDREQUEST_INVALIDPARAM "[OBEX]OBEX_ClientSendRequest return OB_STATUS_INVALID_PARM!"
    OBEX_SERVER_EVENTIND "[OBEX] ObServerEventInd Event: %d"
    OBEX_SERVER_PUTDELETE "======OBEX::SERVER PUT-DELETE==="
    OBEX_SERVER_CREATEEMPTY "======OBEX::SERVRE PUT CREATE-EMPTY ==="
    OBEX_PARSE_RX "[OBEX]ObParseRx..AppHndl=0x%x, obp=0x%x, obp->rxState=(%d), b1=0x%x,b2=0x%x,b3=0x%x"
    OBEX_PARSE_RX_OPCODE "[OBEX]ObParseRx.ServerParser.opcode=0x%x,obp->rxState=(%d), obp=0x%x, packetLen=%d, obp=0x%x"
    OBEX_PARSE_RX_RSP "OBEX: ObParseRx..ClientParser.rsp=0x%x, packetLen=%d, obp=0x%x"
    OBEX_PARSE_RX_STAGEBUFF0 "[OBEX] ServerParser: obp->stageBuff[0] = 0x%x"
    OBEX_PARSE_RX_OPCODE_MISMATCH "OBEX: opcode missmatch : opcode=0x%x, obp->stageBuff[0] = 0x%x - disconnecting"
    OBEX_PARSE_RX_COMPARE "[OBEX] obp->stageBuff[0]=0x%x, obp->opcode=0x%x"
    OBEX_PARSE_RX_DEFER_OPER "[OBEX]===ObParserRx: obp->flags |= OBPF_DEFER_OPER_IND!"
    OBEX_PARSE_RX_DEFER_OPER_FLOAT "[OBEX](obp->flags & OBPF_DEFER_OPER_IND), call eventIndFunc with OBPE_NO_EVENT!"
    OBEX_PARSER_SENDPACKET "[OBEX]---AppHndl=0x%x,obp=0x%x ObParserSendPacket cmd=0x%x, packetLen=(%d) ..."
    OBEX_NO_FREETXBUFFER "[OBEX]----obp(0x%x) cmd(0x%x) OBSTACK_GetTxBuffer return NULL: obp->flags|=OBPF_PENDING"
    OBEX_SENDRESPONDSE "OBEX: obp:0x%x ObServerSendResponse: rsp=0x%x, handle=%d"
    OBEX_SENDCOMMAND "OBEX: obp:0x%x ObClientSendCommand: cmd=0x%x, handle=%d"
    OBEX_SETABORT "[OBEX]obp:0x%x ObParserSetAbort..."
    OBEX_TX_DONE "[OBEX]====obp:0x%x ObParserTxDone ====="
    OBEX_REMOVE_DEFER "[OBEX]obp:0X%x (obp->flags & OBPF_DEFER_OPER_IND), call eventIndFunc with OBPE_OPER_IND..."
    OBEX_PARSER_DISONNECT "[OBEX]ObParserDisconnect...parser=0X%x"
    OBEX_PARSER_DISONNECTIND "[OBEX]ObParserDisconnectInd...parser=0X%x"
    OBEX_PARSER_LINKTRANS "[OBEX]obp:0X%x ObParserLinkTransport set stack!"
    OBEX_BTSTACK_CLIENTCONNECT "[OBEX]BTSTACK_ClientConnect....ClientState=%d"
    OBEX_BTSTACK_CLIENTDISCONNECT "[OBEX]BTSTACK_ClientDisconnect...ClientState=(%d) bConnType(%d)"
    OBEX_BTSTACK_RFCLOSECHANNEL "[OBEX]BTSTACK_ClientDisconnect call RF_CloseChannel channel=0X%x, btxp=0X%x"
    OBEX_BTSTACK_RFCLOSECHANNEL_RETURN "[OBEX]RF_CloseChannel return: %d"
    OBEX_SET_MASTER "[OBEX] Try to be a master when receiving RFEVENT_OPEN event in BtServCallBack()"
    OBEX_SERVER_CONN_CB "[OBEX] CMGR ServerCallback: Event=%d, Status=%d, server state =(%d)"
    OBEX_CLIENT_CONN_CB "[OBEX] CMGR ClientCallback Event=%d, Status=%d"
    OBEX_SERVER_REMOVE_DL "[OBEX]ObexServerConnectionCallback call CMGR_RemoveDataLink..."
    OBEX_SERVER_BDADDR_ERR "[OBEX] Server: bad address: Not the connect bd_addr"
    OBEX_CLIENT_BDADDR_ERR "[OBEX]CLIENT: Not the connect bd_addr"
    OBEX_CLIENT_SDPCALLBACK "[OBEX] BtClientSdpCallback with result=%d, attribute_index=%d"
    OBEX_CLIENT_OPEN_RFCHANNEL "[OBEX]call RF_OpenClientChannel:btxp->client.channel =0x%x, uuid:0x%04x channel:0x%02x"
    OBEX_TPCONNECT "[OBEX]OBEX_TpConnect...."
    OBEX_TPCONNECT_INVALIDPARAM "[OBEX]OBEX_TpConnect return OB_STATUS_INVALID_PARM"
    OBEX_TPCONNECT_CONNECTED "[OBEX]OBEX_TpConnect already has a connection!!"
    OBEX_TPCONNECT_RETURN "[OBEX] OBEX_TpConnect return status = %d"
    OBEX_TPDISCONNECT "[OBEX]OBEX_TpDisconnect ...."
    OBEX_TPDISCONNECT_INVALID_PARM "[OBEX]OBEX_TpDisconnect .return OB_STATUS_INVALID_PARM."
    OBEX_TPDISCONNECT_NOCONNECT "[OBEX]---OBEX_TpDisconnect return OB_STATUS_NO_CONNECT!!"

    OBEX_CLIENT_L2SDPCALLBACK "[OBEX] BtClientL2SdpCallback with result=%d, attribute_index=%d"
    OBEX_CLIENT_OPEN_L2Channel "[OBEX]call l2cap_OpenClientChannel:btxp->client.channel =0x%x, uuid:0x%04x channel:0x%02x psm:0x%x"
    OBEX_OPEN_L2CHANNEL_RETURN "[OBEX] L2CAP_OpenClientChannel return : (%d)"
    OBEX_CLIENT_L2CALLBACK "OBEX: L2CAP_callback channelId(0x%x) event(0x%x) psmvalue(0x%x)"

    OBEX_RFCOMM_REGISTER_SERVER_CHANNEL_FAILED "[OBEX] Fatal Error: RF_RegisterServerChannel FAILED!"
    OBEX_SERVER_EXPECT_FINALBIT "[OBEX]Server:ProcessGeneral:Opcode=(0x%x),Final bit expected - Rejecting"
    OBEX_PARSERX_HEADERLEN_ERROR "[OBEX]ObParseRx: Header Length is not 0 - disconnect"
    OBEX_PARSERX_PACKETLEN_ERROR "[OBEX]ObParseRx: Packet data Overflow/Underflow - disconnect! PacketLen : %d CurPacketLen : %d"
    OBEX_PACKET_SIZE_OVERFLOW "[OBEX]Error: Sending Packet (%d bytes) exceeds Maximum OBEX Packet Size."
    OBEX_VERIFY_SERVER_EVENT_FAILED "[OBEX]Verify Server Event Failed: Received event %d, Last event %d"
    OBEX_CMGR_SCO_REJECT "[OBEX] ==== CMGR_ClientCallback: BT_STATUS_SCO_REJECT ==="
    OBEX_CMGR_BTCHIP_REASON "[OBEX] ==== CMGR_ClientCallback: BT_STATUS_BTCHIP_REJECT === "
    OBEX_DISCONNECT_CLIENT_LINK "[OBEX] BtDisconnectClientLink..."
    OBEX_START_SERVICE_QUERY "[OBEX]---BtStartServiceQuery..."
    OBEX_START_L2CAP_SERVICE_QUERY "[OBEX]---BtStartL2ServiceQuery..."
    OBEX_SERVER_READ_HEADERBLOCK_ERROR "[OBEX] == ObServerReadHeaderBlock ReadFile Error! rcode=%d"
    OBEX_CLIENT_STATE "[OBEX] btxp->client.state=%d"
    OBEX_RESEND_PENDING_PACKET "[OBEX] ObParserTxBuffAvail: Re-send the pending packet obp=0x%x..."
    OBEX_CALL_CMGR_CREATEDATALINK "[OBEX] call CMGR_CreateDataLink..."
    OBEX_CMGR_CREATEDATALINK_RETURN "[OBEX] CMGR_CreateDataLink return : %d"
    OBEX_CMGR_REMOVEDATALINK_RETURN "[OBEX] CMGR_RemoveDataLink return : %d"
    OBEX_OPEN_RFCHANNEL_RETURN "[OBEX]RF_OpenClientChannel return : (%d)"
    OBEX_CALL_CMGR_REMOVEDATALINK "[OBEX]call CMGR_RemoveDataLink...."
    OBEX_SERVER_BUSY_REJECT_CONNECT "[OBEX]server state is busy, REJECT the connection"
    OBEX_SERVER_LINKTRANSPORTFAILED_REJECT_CONNECT "[OBEX]OBPROT_LinkTransport failed, REJECT the connection"
    OBEX_SENDTXBUFFER_LEN_ERROR "[OBEX]BTSTACK_SendTxBuffer ERROR: len (%d) > BTSTACK_MaxTxSize (%d)"
    OBEX_CALL_RF_SENDDATA_RETURN "OBEX: call RF_SendData(DataLen=%d) return status=(%d)"
    OBEX_TOOMUCH_RESPHEADERS "[OBEX] TOO much response headers, resp_len=%d, ServerMaxHeaderSize=%d"
    OBEX_SERVER_NO_OBJECT "[OBEX]--- OBEX server: app has NOT provided object!"
    OBEX_SERVER_WRITE_OBJECT_FAILED "[OBEX]--- OBEX server: Write Object failed! ret=(%d)"
    OBEX_INVALID_CONNECTIONID "[OBEX]=== Invalid connection ID (%d) === "
    OBEX_SERVER_ABORT "[OBEX]OBEX_ServerAbort...resp=(0x%x)"
    OBEX_SERVER_DEINIT_BUSY "[OBEX]OBEX_ServerDeinit, OSC(currentOperation)=(%d)"
    OBEX_SERVER_DEINIT_RFDEREGISTER_RETURN "[OBEX]BTSTACK_ServerDeinit: RF_DeregisterService return (%d)"
    OBEX_SERVER_DEINIT_CMGRDEREGISTER_RETURN "[OBEX]BTSTACK_ServerDeinit: CMGR_DeregisterHandler return (%d)"
    OBEX_SERVER_ABORT_RSP_INVALID "[OBEX]OBEX_ServerAbort INVALID RspCode(0x%x)!"
    OBEX_SERVER_ABORT_EVENT_INVALID "[OBEX]OBEX_ServerAbort INVALID event! CurOper=%d,event=%d"
    OBEX_CLIENT_START_TIMER "[OBEX][TIMER] OBEX_ClientStartReqTimer for cmd=(0x%x), AppHndl=0x%x, timer_dur=%d"
    OBEX_CLIENT_STOP_TIMER "[OBEX][TIMER]OBEX_ClientStopReqTimer AppHndl=0x%x, timer_id=%d"
    OBEX_CLIENT_RESTART_TIMER "[OBEX][TIMER]OBEX_ClientRestartReqTimer AppHndl=0x%x, timer_id=%d"
    OBEX_CLIENT_REQTIMEOUT "[OBEX][TIMER] ===OBEX_ClientRequestTimeout: AppHndl=0x%x, timer_id=%d, tpStatus=(%d)"
    OBEX_SERVER_CANFITONEPACKET "[OBEX]===Server ProcessGet: OSC(canFitOnePacket)=TRUE, txTotalLen=%d, maxTxLen=%d"
    OBEX_SERVER_READHDBLOCK_FITONEPKT "[OBEX]===ObServerReadHeaderBlock_FitOnePkt, len=%d == "
    OBEX_SERVER_READ_HEADERBLOCK_FITONEPKT "[OBEX]----ObServerReadHeaderBlock_FitOnePkt..curOper=%d,canFitOnePacket=%d,hb=%d,len=%d"
    OBEX_SERVER_READ_HEADERBLOCK_FITONEPKT_FILL_EOB "[OBEX]----ObServerReadHeaderBlock_FitOnePkt...fill OBEXH_END_BODY Header"
    OBEX_CLIENT_READ_HEADERBLOCK_READOBJ_FAILED "[OBEX]----ObClientReadHeaderBlock FAILED! ret = %d"
    OBEX_CLIENT_SEND_ABORT_FOR_RW_ERROR "[OBEX]----ProcessGetEvents: OBRC_CLIENT_RW_ERROR, send ABORT request!AppHndl=0x%x"
    OBEX_SERVER_SEND_RESPONSE "[OBEX]OBEX_ServerSendResponse...ObexApp=0x%x,OSC(resp)=0x%x, Opcode()=0x%x"
    OBEX_SERVER_PROCGET_SENDOBJ "[OBEX]Server ProcessGet: objLen=%d,txLength=%d,resp=0x%x, hb=HB_SERVER_OBJECT"
    OBEX_SERVER_GET_HB_LEN "[OBEX]ObServerGetHeaderBlockLen: len=%d"
    OBEX_SERVER_READ_HB "[OBEX]ObServerReadHeaderBlock: ObexApp=0x%x, hb=%d, len=%d, rspCode=0x%x"
    OBEX_SERVER_GET_HB_LEN_FOP "[OBEX]--ObServerGetHeaderBlockLen_FitOnePkt..curOper=%d, canFitOnePacket=%d, block_len=%d"
    OBEX_BUFAVAIL_MAX_TX_SIZE_ZERO "[OBEX]--ObParserTxBuffAvail:obp=0x%x, len==0, maybe RF channel is closing"
    OBEX_SERVER_EVENTIND_OPER_ABORTED "[OBEX]--ObServerEventInd,OBPE_OPER_COMPLETE,OBSE_ABORTED: OSC(resp)=0x%x,ObServerGetOpcode()=0x%x,OSC(opcode)=0x%x"
    OBEX_PARSE_TXDONE_SENDINGRFPNUM "[OBEX]obParserTxDone: server 0x%x SendingRFPktNum = %d"
    OBEX_BTSTACK_TXTIMEOUT "[OBEX] ---- BTSTACK_TxTimeout : con=0x%x ---"
    OBEX_GIVEPKT_TO_WAITINGAPP "[OBEX]-- OBPROT_GivePktToWaitingApp_IfNeed  call ObParserTxBuffAvail(0x%x)"
    OBEX_RETURN_PENDING_PKT "[OBEX TxTimer]---OBPROT_ReturnTxBuffer_IfNeed con=0x%x,buf=0x%x"
    OBEX_OBPROT_TXTIMEOUT "[OBEX TxTimer] ==== OBPROT_TxTimeout ==== con=0x%x"
    OBEX_PROC_PENDING_RFPKT "[OBEX]---RFCLOSED: OBPROT_ReturnTxBuffer_IfNeed return (%d),SendingRFPktNum=%d"
    OBEX_RFOPEN_TIMEOUT "[OBEX] RFOpenTimeout: btxp[%x] state[%d] timer[%d]"
    OBEX_CLIENT_DISCONNECTING_ED "[OBEX] client(tpStatus=%d) is already DISCONNECTING or DISCONNECTED!"
    OBEX_CLIENTTPDISCONNECT_RETURN "[OBEX] OBEX_ClientTpDisconnect return (%d)"
    OBEX_READHEADBLK_ERR "[OBEX] ObParserTxBuffAvail:Observer:ObReadHeaderBlock Error(%d)! So Disconnect!"
    OBEX_PBAP_PARAMS "[OBEX]ProcessGet:PBAP Server: appHeaderLen=%d, OSC(objLen)=%d,txTotalLen=%d, maxTxLen=%d"
    OBEX_TX_TIMEOUT_INDEX "[OBEX] -- OBPROT_TxTimeout: index i=(%d)"
    OBEX_ACCEPT_RFCHNL "[OBEX] BTSTACK_AcceptRFChnConn btxp=0x%x..."
    OBEX_REJECT_RFCHNL "[OBEX] BTSTACK_RejectRFChnConn btxp=0x%x..."
    OBEX_PARSER_SEND_ABORT_FOR_READ_ERROR "[OBEX]ObParserSendPacket: ReadData ERROR(%d), for Client, send ABORT command"
    OBEX_DISCONNECT_FOR_READHEADBLK_ERR "[OBEX]ObParserTxBuffAvail ReadData ERROR(%d), DISCONNECT the connection!"
    OBEX_NOT_TPCONNECTED_RETURN "[OBEX] obp 0x%x ObParserTxBuffAvail..NOT OB_TP_CONNECTED., just RETURN"
    OBEX_OBPARSE_TXBUFAVAIL "[OBEX] obp 0x%x ObParserTxBuffAvail..."
    OBEX_CLIENT_READ_HB "[OBEX]ObClientReadHeaderBlock: ObexApp=0x%x, hb=%d, len=%d"
    OBEX_TXSEND_FAILED_RETURN_BUF "[OBEX]OBSTACK_SendTxBuffer FAILED (status=%d): return packet buffer ==="
    OBEX_PUT_PACKET_TOO_SMALL "[OBEX][ERR] packet too small hbLength:%d max:%d"
    OBEX_CLIENTSENDREQUEST_TXLENGTH "[OBEX] sendrequest txOffset:%d txLength:%d"
    OBEX_CLIENTSENDCOMMAND_TXLENGTH "[OBEX] send command txOffset:%d txLength:%d hb:%d OCC(objLen):%d OCC(opcode):0x%x"
    OBEX_CLIENT_APPEND_CONNID "[OBEX][CONN] Append CONNID and adjust OCC(txLength):%d"
    OBEX_CLIENT_CALC_OBJ_TXLENGTH_BUFSTYLE "[OBEX][CONN] OBEX_ClientSendCommand bufstyle Assign OCC(txLength):%d OCC(objLen):%d idFlag:%d"
    OBEX_CLIENT_CALC_OBJ_TXLENGTH_OBSTYLE "[OBEX][CONN] OBEX_ClientSendCommand obstyle Assign OCC(txLength):%d OCC(objLen):%d idFlag:%d"
    OBEX_CONNID_VALUE "[OBEX][CONN] Setup CONNID idFlag:%d"
    OBEX_APPEND_CONNID_QUEUEHEADER "[OBEX][CONN] Append CONNID to queue header"
    OBEX_REG_RFCOMM_CHANNEL "OBEX: register rfcomm %d"
    OBEX_SERV_INIT_L2CAP_BUF "OBEX: S GoepL2cap is %d pl2Buffer:0x%x"
    OBEX_NO_L2CAP_BUF "OBEX: WRN no l2cap buffer"
    OBEX_REG_L2CAP_PSM "OBEX: Register L2cap set the inLinkMode psm:0x%x inLinkMode:%d"
    OBEX_REG_L2CAP_PSM_RETURN "OBEX: L2CAP_RegisterPsm return:0x%x psm:0x%x"
    OBEX_DEREG_L2CAP_PSM "OBEX: l2cap deregister status:%d"
    OBEX_SERVER_CONNECTED_REJECT_INCOMING_RFCOMM "OBEX: server has connected with l2cap. reject rfcomm incoming"
    OBEX_SERVER_CURRENT_STATE "OBEX: S current state:%d appHndl:0x%x"
    OBEX_SERVER_REJECT_SECOND_INCOMING "OBEX: BtServL2Callback reject incoming state:%d l2channelId:%d"
    OBEX_SERVER_L2CAP_OPEN "OBEX: L2EVENT_CONNECTED state:%d appHndl:0x%x"
    OBEX_SERVER_L2CAP_DISCONNECTED "OBEX: L2EVENT_DISCONNECTED state:%d appHndl:0x%x"
    OBEX_SERVER_L2CAP_PACKET_HANDLED "OBEX: L2EVENT_PACKET_HANDLED state:%d appHndl:0x%x pkt:0x%x left:%d"
    OBEX_L2TIMEOUT_IGNORE "BTSTACK_AUTO_GOEPL2SDP_Timeout_Ignore "
    OBEX_L2CAP_DISCONNECT_REQ "OBEX: L2CAP_DisconnectReq channelid:%d status:%d"
    OBEX_L2CAP_FLOW_DATA_IND "OBEX: L2EVENT_FLOW_DATA_IND state:%d appHndl:0x%x len:%d"
    OBEX_L2CAP_GOEPL2SDP_TIMEOUT "OBEX: BTSTACK_AUTO_GOEPL2SDP_Timeout "
    OBEX_START_SERVICE_QUERY_FAIL "OBEX: [WRN] BTSTACK_AUTO_GOEPL2SDP_Timeout fail to start query %d"
    OBEX_L2CAP_FLOW_DATA_IND_ERR "OBEX: Data Flow ind, rx buffer shall not be empty"
    OBEX_L2CAP_UNREGEISTER_PSM "OBEX: BtClientL2CallBack unregister l2cap bConnType:%d psm:0x%x"
    OBEX_L2CAP_CONFIG_INLINKMODE "OBEX: set the inLinkMode psm:0x%x inLinkMode:%d"
    OBEX_L2CAP_SENDDATA "OBEX: L2CAP_SendData status:%x (datalen:%d pkt:0x%x) left:%d"
    OBEX_L2CAP_CONNECT_RSP "OBEX: L2CAP_ConnectRsp channelId:%d accept:%d return:%d"
    OBEX_ACCEPT_RFCHNL_RETURN "OBEX: RF_AcceptChannel return:%d"
    OBEX_RFCOMM_QUERY_UNKNOW "OBEX: BtStartServiceQuery Unknow uuid:%x"
    OBEX_SDPCALLBACK_IGNORE "OBEX: attribute:%d status:%d"
    OBEX_CLIENT_PROCESS_SIMPLEOP "[OBEX][CLIENT] ProcessSimpleOpEvents obap:0x%x OBPE_OPER:%d"
    OBEX_CLIENT_PROCESS_PUTOP "[OBEX][CLIENT] ProcessPutEvents obap:0x%x OBPE_OPER:%d status:%d"
    OBEX_CLIENT_PROCESS_GETOP "[OBEX][CLIENT] ProcessGetEvents obap:0x%x OBPE_OPER:%d status:%d"
    OBEX_TXCOMPLETE_EVENT "[CLIENT] Tx_Complete Clear srm flags"
    OBEX_REMOTE_MTU_VALUE "OBEX: Get mtu maxTxPacket:%d"
    OBEX_LOCAL_MTU_VALUE "OBEX: prepare mtu maxTxPacket:%d"
    OBEX_L2CAP_INIT "[OBEX][SERV] init l2buffer:0x%x"
    OBEX_VERSION_MTU "OBEX: Connect Field mtu:%d version0x%x"
    OBEX_SERVER_EVENT_IND "[OBEX] ObServerEventInd OBPE_EVENT:%d curOp:%d"
    OBEX_SERVER_EVENT_START_IND "OBEX: OPER_IND_START opcode:0x%x bConntype:%d"
    OBEX_SERVER_REMOTE_MTU_TOO_LARGE_WRN "[OBEX][WRN] Remote mtu is large then l2cap !mtu:%d  l2cap:%d"
    OBEX_SERVER_DISABLE_SRM_ENABLE "[OBEX][SERVER] Got all data. disable srm receive:%d objLen:%d"
    OBEX_SERVER_REMOTE_SEND_LARGE_THEN_MTU "[OBEX][ERR] Error! remote sends too much data ! mru:%d received:%d"
    OBEX_SERVER_DISABLE_SRM_ENABLE_ENDBODY "[OBEX][SERVER] Got endbody. disable srm"
    OBEX_SERVER_PROCESS_GET "[OBEX][SERVER] ProcessGet obap:0x%x OBPE_OPER:%d"
    OBEX_SERVER_PROCESS_GENERAL "[OBEX][SERVER] ProcessGeneral OBPE_OPER:%d"
 OBEX_CONN_ID_NOT_VALIED "[OBEX][ERR] id is not valid ! disconnect it"
 OBEX_SERVER_SENDRESPONSE_COUNT_REJECT "[OBEX][WRN] sendResponse count is 0 ! %d "
 OBEX_RESET_SRM_ENABLE "[SRM] reset obap:0x%x srm_server "
 OBEX_UNACK_NUMBER "[OBEX][CLIENT] OBPE_OPER_IND unack:%d"
 OBEX_CLIENT_READ_HB_IN_HEADER "[OBEX] ObClientReadHeaderBlock OCC(txLength):%d OCC(txOffset):%d remainlen:%d"
 OBEX_BCONNTYPE "OBEX: obap:0x%x bConnType:%d"


    BT_BT_MMI_OBEX_GET_PROFILE_SHARED_BUF "[BTMMIOBEX] mmi_bt_obex_get_profile_shared_buffer()."
    OADP_FSM_BEGIN "[OADP]FSM Begin: state[%d] event[%d] inst[0x%x] op[0x%x]"
    OADP_FSM_END "[OADP]FSM End: state[%d] status[%d]"
    OADP_GOEP_CLINET_EVENT "[OADP]incoming Client event: event[%d] oper[%d] header[%d] inst[0x%x]"
    OADP_GOEP_SERVER_EVENT "[OADP]incoming Server event: event[%d] oper[%d] header[%d] inst[0x%x]"
    OADP_NEW_INSTANCE "[OADP]new instance: id[%d] mod[%d]"
    OADP_NEW_OPERATION "[OADP]new operation: inst[0x%x] op[0x%x] id[%d] type[%d]"
    OADP_NEW_CONNECTION "[OADP]new connection: inst[0x%x] op[0x%x]"
    OADP_DELETE_INSTANCE "[OADP]delete instance: inst[0x%x]"
    OADP_DELETE_OPERATION "[OADP]delete operation: inst[0x%x] op[0x%x]"
    OADP_DELETE_CONNECTION "[OADP]delete connection: inst[0x%x] conn[0x%x]"
    OADP_DATA_READ "[OADP]OBEX read [%d] bytes: inst[0x%x] op[0x%x] obj[0x%x]"
    OADP_DATA_WRITE "[OADP]OBEX write [%d] bytes: inst[0x%x] op[0x%x] obj[0x%x]"
    OADP_DATA_OBJLEN "[OADP]OBEX get object len: inst[0x%x] op[0x%x] obj[0x%x] total[%d]"
    OADP_NEW_OBJECT "[OADP]new object: inst[0x%x] obj[0x%x]"
    OADP_OBJECT_SIZE "[OADP]set object size: inst[0x%x] obj[0x%x] size[%d]"
    OADP_OPEN_OBJECT "[OADP]open object: inst[0x%x] obj[0x%x] mode[%d] data[0x%x]"
    OADP_DELETE_OBJECT "[OADP]delete object: inst[0x%x] obj[0x%x]"

BT_OBEX_TRACE_END "BT_OBEX_TRACE_END"



    GOEP_SERVERCONTINUE_STATUS__xD "[GOEP]--GOEP_ServerContinue: status = %d"
    GOEP_SERVERACCEPT_STATUS__xD "[GOEP]--GOEP_ServerAccept: status = %d"
    GOEP_SERVERABORT_STATUS__xD "[GOEP]--GOEP_ServerAbort: status = %d"
    GOEP_SERVERAUTH_STATUS__xD "[GOEP]--GOEP_ServerAuthenticate: status = %d"
    GOEP_MAIN_DISCONECT_AN_INEXISTENT_GOEP_CONN_ID_xD "goep_main: Disconect an inexistent goep_conn_id: %d"
    GOEP_CANNOT_FIND_FREE_GOEP_CONN_ID "goep_main: Can not find free goep id"
    GOEP_CANNOT_FIND_SERVER_WITH_GOEP_CONN_ID "goep_main: Can not find server with goep_conn_id"
    GOEP_CANNOT_FIND_CLIENT_WITH_GOEP_CONN_ID "goep_main: Can not find client with goep_conn_id"
    GOEP_CANNOT_FIND_CLIENT_WITH_REQ_ID "goep_main: Can not find client with req_id"
    GOEP_CANNOT_FIND_BT_UUID "goep_main: Can not find matched BT uuid"
    GOEP_CANNOT_FIND_OBEX_UUID "goep_main: Can not find matched OBEX uuid"
    GOEP_REGISTER_SERVER_RSP_CODE "goep_main: Register server failed: %d"
    GOEP_DEREGISTER_SERVER_RSP_CODE "goep_main: Deregister server failed: %d"
    GOEP_DISCONNECT_REQ_RSP_CODE "goep_disconnect_req_hdlr: status = %d"
    GOEP_OBEX_DISCONNECT_FAIL "goep_main: GOEP_Disconect fail with rspcode: %d! so send disconnect_ind to mmi!"
    GOEP_CALL_OBEX_CLIENTDISCONNECT "goep: GOEP_Disconect CALL OBEX_ClientDisconnect"
    GOEP_CLIENT_TP_DISCONNECTED "goep: ClientCallback TP_Disconnected!"
    GOEP_CLIENT_CALLBACK "========goep: ClientCallback --- event = %d"
    GOEP_ABORTREQFAIL_SEND_ABORT_RSP "goep: GOEP_Abort fail! Send Abort Response to MMI!"
    GOEP_CLIENT_CONNECTED "goep: ClientCallback -- Connected!"
    GOEP_SEND_CONNECT_RSP "goep_main: send OBEX CONNECT_RSP msg with rsp_code = %d"
    GOEP_CLIENT_CALL_TEMPOP_HANDLER_CALLBACK "goep: CALL Client tempOp.handler->callback, event=(%d)"
    GOEP_RECV_MSG_FROM_MMI "goep_main: recieve msg from MMI! msg = %d"
    GOEP_SERVER_CALLBACK "========goep: ServerCallback --- event = %d, server=0x%x"
    GOEP_OBEX_CONNECTION_NUM "[GOEP] Current Obex connections = %d!!"
    GOEP_ENTER_SERVER_TPDISCONNECT "[GOEP] GOEP_ServerTpDisconnect...Server=0X%x"
    GOEP_REGISTER_CLIENT "[GOEP] GOEP_RegisterClient...ClientApp=0X%x"
    GOEP_DEREGISTER_CLIENT "[GOEP] GOEP_DeregisterClient...ClientApp=0X%x"
    GOEP_CONNECT_ENTERING "[GOEP] GOEP_Connect.ClientApp=0X%x..GoepClientObexCons client=0x%x mru=%d"
    GOEP_CONNECT_STATUS_BUSY "[GOEP] GOEP_Connect..OB_STATUS_BUSY."
    GOEP_CONNECT_BUILDHEADERS_FAILED "[GOEP] GOEP_Connect..ClientBuildHeaders failed. OB_STATUS_FAILED."
    GOEP_CONNECT_STATUS_RESTRICTED "[GOEP] GOEP_Connect: set status = OB_STATUS_RESTRICTED!!"
    GOEP_DISCONNECT_ENTERING "[GOEP] GOEP_Disconnect.AppClient=0x%x..GoepClientObexCons client=0x%x"
    GOEP_PUSH_ENTERING "[GOEP]GOEP_Push.ClientApp=0X%x.GoepClientObexCons client=0x%x"
    GOEP_PULL_ENTERING "[GOEP] GOEP_Pull.ClientApp=0X%x..GoepClientObexCons client=0x%x"
    GOEP_SETFOLDER_ENTERING "[GOEP] GOEP_SetFolder.ClientApp=0X%x...GoepClientObexCons client=0x%x"
    GOEP_CLIENTABORT_ENTERING "[GOEP] GOEP_ClientAbort.ClientApp=0X%x..GoepClientObexCons client=0x%x"
    GOEP_TPCONNECT_ENTERING "[GOEP] GOEP_TpConnect.ClientApp=0X%x..GoepClientObexCons=0X%x"
    GOEP_TPDISCONNECT_ENTERING "[GOEP] GOEP_TpDisonnect.ClientApp=0X%x..GoepClientObexCons=0x%x"
    GOEP_CLIENTCONTINUE_ENTERING "[GOEP] GOEP_ClientContinue.ClientApp=0X%x..GoepClientObexCons client=0x%x"
    GOEP_CLIENT_QUEUEHEADER "[GOEP]GOEP_ClientQueueHeader, type=%d, Len=%d........"
    GOEP_OBCE_CONNECTED "[GOEP] GoepClntCallback.CONNECTED..GoepClientObexCons=0X%x"
    GOEP_OBCE_DISCONNECT "[GOEP] GoepClntCallback.DISCONNECTED..GoepClientObexCons=0X%x"
    GOEP_OBCE_ABORTED "[GOEP]====GoepClntCallback con=0X%x get event: OBCE_ABORTED, reason=0X%x"
    GOEP_CLIENT_BUILDHEADERS_FAILED "[GOEP]ClientBuildHeaders failed!"
    GOEP_CLIENTABORT_ALREADY_PENDING "[GOEP] GOEP_ClientAbort...client->obc.client.status == OBRC_USER_ABORT, return PENDING"
    GOEP_TPCONNECT_STATUS_BUSY "[GOEP] GOEP_TpConnect OB_STATUS_BUSY!"
    GOEP_TPCONNECT_ACTIVE "[GOEP] GOEP_TpConnect client->flags & GOEF_ACTIVE!!!!"
    GOEP_TPDISCONNECT_INUSE "GOEP: GOEP_TpDisconnect inUse > 1. So cann't call OBEX_ClientTpDisconnect"
    GOEP_TPDISCONNECT_STATUS "[GOEP] OBEX_ClientTpDisconnect return status =%d "
    GOEP_CLIENT_QUEUEHEADER_LENTOOLARGE "[GOEP]GOEP_ClientQueueHeader, Len=%d is too large! availible len = %d"
    GOEP_WAITFOR_AUTH_REQ "[GOEP] NotifyAllClients: Pending to wait for authenticate request"
    GOEP_RECV_AUTH_CHAL "[GOEP]NotifyCurrClient: Received GOEP_EVENT_AUTH_CHALLENGE"
    GOEP_RECV_AUTH_RESP "[GOEP] NotifyCurrClient: Received GOEP_EVENT_AUTH_RESPONSE"
    GOEP_CLIENT_RELEASE_CONNID "[GOEP]client ReleaseConnID: %d"
    GOEP_SERVICE_RELEASE_CONNID "[GOEP]service ReleaseConnID: %d"
    GOEP_SERVICE_ALLOC_CONNID "[GOEP]Service AllocateConnID: %d"
    GOEP_CLIENT_ALLOC_CONNID "[GOEP]client AllocateConnID: %d"
    GOEP_CALL_RFCLOSECHANNEL "[GOEP]: ====goep_disconnect_req_hdlr call  RF_CloseChannel... "
    GOEP_CALL_RFCLOSECHANNEL_FAILED "[GOEP]:=== RF_CloseChannel return %d, failed! call goep_send_disconnect_ind_msg..."
    GOEP_DISCONNECT_FLAG_SETUP "[GOEP]: Setup the disconncting flag state:%d "
    GOEP_DEINIT_SERVER_FAILED "[GOEP]===goep_deinit server failed: status %d"
    GOEP_DEINIT_CLIENT_FAILED "[GOEP]===goep_deinit client failed: status %d"
    GOEP_IS_OPERATING "[GOEP]GOEP_Disconnect: client->currOp.handler!=NULL, return BUSY!!"
    GOEP_NO_ACTIVE_CONNECT "[GOEP] !GOEF_ACTIVE, return OB_STATUS_NO_CONNECT"
    GOEP_CLIENT_HANDLE_ERROR "[GOEP] Client != client->currOp.handler(%d)"
    GOEP_RFCOMM_OPENIND_ACCEPT "[GOEP] RFCommOpenInd, Accept it!"
    GOEP_SERVER_APP_CALLBACK "[GOEP]--- GOEP Server call app callback with event=(%d)---"
    GOEP_ENTER_SERVER_ABORT "[GOEP]--- GOEP_ServerAbort...Server=0X%x, RespCode=0X%x ---"
  GOEP_NOTIFY_ALLCLIENT "[GOEP]NotifyAllClients: i=%d, client->profiles[i]->connState=%d"
    GOEP_CLIENT_ABORTED "[GOEP]NotifyCurrClient ABORTED: reason=%d,CurOper=%d, status=%d"

    GOEP_ENTER_SERVER_ACCEPT "[GOEP] GOEP_ServerAccept...Server=0X%x"
    GOEP_PROCESS_NAME_HEADER "[GOEP]GoepServerProcessHeaders:OBEXH_NAME,nameLen=%d,currLen=%d, remainLen=%d, b_truncate=%d"
    GOEP_FIND_SAME_TARGETUUID "[GOEP]=== Find SAME target UUID, i=(%d), uuid=(%d) ==="
    GOEP_SAME_SERVICE_HAS_REQUESTED "[GOEP]=== Not allow 2 SAME profile Client! ==="
    GOEP_ENTER_SERVER_ACCEPT_NO_OBJECT "[GOEP] GOEP_ServerAcceptNoObject...Server=0X%x"
    GOEP_SERVER_TPDISCONNECT_RETURN "[GOEP] GOEP_ServerTpDisconnect return status=(%d)"
    GOEP_SERVERAUTH "[GOEP] GOEP_ServerAuthenticate Server=0X%x, Resp=0X%x, Chall=0X%x"
    GOEP_SERVER_VERIFYAUTHRESP "[GOEP] GOEP_ServerVerifyAuthResponse Server=0X%x"
    GOEP_SERVER_VERIFYAUTHRESP_RETURN "[GOEP] GOEP_ServerVerifyAuthResponse return status=(%d)"
    GOEP_SERVER_RECEIVE_AUTHCHAL_HEADER "[GOEP]---GOEP Server received AUTH challenge header!"
    GOEP_SERVER_QUEUEHEADER "[GOEP]GOEP_ServerQueueHeader, type=%d, Len=%d........"
    GOEP_ENTER_SERVER_CONTINUE "[GOEP]GOEP_ServerContinue...Server=0X%x"
    GOEP_SERVER_CONTINUE_FAILED "[GOEP]GOEP_ServerContinue:handler=0x%x,oustandingResp=%d,event=(%d),oper=(%d)"
    GOEP_SERVER_CONTINUE_BUILDHEADER_FAIL "[GOEP] -- GOEP_ServerContinue: ServerBuildHeaders Error! --"
    GOEP_CONNECT_NO_CHALLENGE "[GOEP] GOEP_Connect..no GOEF_CHALLENGE .OB_STATUS_INVALID_PARM."
    GOEP_SERVER_AUTHORIZE_RES "[GOEP] GOEP_ServerAuthorizeResponse server=0x%x, rsp_code=%d"
    GOEP_INVALID_MSG "[GOEP]goep_main INVALID msg: msg_id=%d, REGISTER_SERVER_REQ=%d, AUTHORIZE_RES=%d"
    GOEP_CMCONNID_HAS_ALLOCED "[GOEP] Service->cm_conn_id=(%d) has alloced before!"
    GOEP_ALREADY_DISCONNECTING "[GOEP] client is already CS_DISCONNECTING!"
    GOEP_SDPIND_CLIENTAPP_ISNULL "[GOEP]GOEP_ClientSDPSupportedFormatsInd, clientApp is NULL!==="






    BT_OPPS_CTX_CHECK "[OPPS]"
    BT_OPPS_MSG_CHECK_ERR "[OPPS]"
    BT_OPPS_ACTIVATE "[OPPS] activate"



    BT_OPPC_DEINIT_API "[OPPC] deinit"
    BT_OPPC_INIT_API "[OPPC] init api"
    BT_OPPC_STATE_ERROR "[OPPC] check error state:(%d)"
    BT_OPPC_CTX_CHECK "[OPPC] check :(%d)"
    BT_OPPC_MSG_CHECK_ERR "[OPPC] check :(%d)"
    BT_OPPC_MAX_PACKET_SIZE "[OPPC] max apcket size:(%d)"

    BT_OPPC_DISCONNECT_FEATURE "[OPPC] "
    BT_OPPC_PULL_FEATURE "[OPPC] pull_feature"
    BT_OPPC_PULL_FEATURE_WRONG_STATE "[OPPC] pull_feature"
    BT_OPPC_PULL_FEATURE_WRONG_PARAM "[OPPC] pull_feature"
    BT_OPPC_CONNECT_CNF_HDL "[OPPC] connect_cnf"

    BT_OPPC_CONN_TERM "[OPPC] conn_term"
    BT_OPPC_CONN_SERVER "[OPPC] conn server"
    BT_OPPC_DISC_CLIENT "[OPPC] disc_client idx:(%d)"
    BT_OPPC_PUSH_RSP_FS_READ "[OPPC] push_rs_fs_read"
    BT_OPPC_SEND_FILE_OBJ_FS_OPEN "[OPPC] send file fh:(%d)"





    BT_FTPC_STATE_TRANSITION "[FTPMMI_GOEP] state transition. (%d -> %d)"
    BT_FTPC_STATE_ERROR "[FTPMMI_GOEP] wrong state. (%d)"
    BT_FTP_POPUP_HDLR "[FTPMMI] mmi_bt_ftp_popup_hdlr(), behavior[%d]"
    BT_FTPS_STATE_TRANSITION "[FTPMMI_GOEP] state transition. index: %d , state:(%d -> %d)"
    BT_FTPS_STATE_ERROR "[FTPMMI_GOEP] wrong state. index: %d , state:(%d)"
    BT_FTPS_INIT "[FTPMMI_GOEP] mmi_bt_ftp_init()"
    BT_FTPS_DEINIT "[FTPMMI_GOEP] mmi_bt_ftp_deinit()"
    BT_FTPS_EVENT_HDLR "[FTPMMI_GOEP] mmi_bt_ftp_event_hdlr()"
    BT_FTPS_ACTIVATE "[FTPMMI_GOEP] mmi_bt_ftps_activate()"
    BT_FTPS_DEACTIVATE "[FTPMMI_GOEP] mmi_bt_ftps_deactivate()"
    BT_FTPS_STATE "[FTPMMI_GOEP] FTPS check state. index:(%d) , state:(%d)"
    BT_FTPS_DISCONNECT_CLIENT "[FTPMMI_GOEP] mmi_bt_ftps_disconnect_client()"
    BT_FTPS_DISCONNECT_CLIENT_CHECK "[FTPMMI_GOEP] mmi_bt_ftps_disconnect_client() state:(%d), context.g_conn_id:(%d), cm.g_conn_id(%d)"
    BT_FTPS_SET_FOLDER_SCR_CALLBACK "[FTPMMI_GOEP] mmi_bt_ftps_set_shared_fodler()"
    BT_FTPS_AUTHORIZE_ACCEPT "[FTPMMI_GOEP] mmi_bt_ftps_authorize_accept() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)"
    BT_FTPS_AUTHORIZE_REJECT "[FTPMMI_GOEP] mmi_bt_ftps_authorize_reject() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)"
    BT_FTPS_AUTHORIZE_DEL_CB "[FTPMMI_GOEP] mmi_bt_ftps_authorize_confirm_del_cb() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)"
    BT_FTPS_GET_DEV_NAME "[FTPMMI_GOEP] mmi_bt_ftps_get_dev_name() check context index:(%d), cur_goep_conn_id:(%d)"
    BT_FTPS_ICON_STOP_TIMER "[FTPMMI_GOEP] mmi_bt_ftps_stop_icon_timer_expire_hdler()"
    BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPS "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- only open FTS: find index failed"
    BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPC "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- only open FTC: find index failed"

    BT_FTPS_CNTX_INIT_FS_OPEN "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init(), folder path init FS_OPEN(%d)"
    BT_FTPS_CNTX_INIT_FS_READ "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init(), folder path init read root folder FS_READ(%d)"
    BT_FTPS_WRITE_OBJ "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), push_ind->pkt_type(%d)"
    BT_FTPS_WRITE_OBJ_PATH_ERROR "[FTPMMI_GOEP] mmi_bt_ftps_write_obj() -- path error"
    BT_FTPS_WRITE_OBJ_OPEN "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), file open FS_OPEN(%d)"
    BT_FTPS_WRITE_OBJ_WRITE "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), file write FS_WRITE(%d)"
    BT_FTPS_GEN_DUP_OBJ_NAME "[FTPMMI_GOEP] mmi_bt_ftps_gen_dup_name()"
    BT_FTPS_PUSH_OBJ "[FTPMMI_GOEP] mmi_bt_ftps_push_obj()"
    BT_FTPS_PUSH_OBJ_CHECK_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_push_obj(), check folder FS_OPEN(%d)"
    BT_FTPS_PUSH_OBJ_ERR_GOTO "[FTPMMI_GOEP] mmi_bt_ftps_push_obj() -- ERR GOTO"
    BT_FTPS_PUSH_DELETE "[FTPMMI_GOEP] mmi_bt_ftps_push_delete()"
    BT_FTPS_PUSH_DELETE_INVALID_NAME "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- invalid name"
    BT_FTPS_PUSH_DELETE_WITHOUT_NAME "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- without name"
    BT_FTPS_PUSH_DELETE_FILE "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- delete file FS_XDelete(%d)"
    BT_FTPS_PUSH_DELETE_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- delete folder FS_RemoveDir(%d)"
    BT_FTPS_PUSH_CONTINUE "[FTPMMI_GOEP] mmi_bt_ftps_write_obj_continue(), push_ind->pkt_type(%d)"
    BT_FTPS_PUSH_CONTINUE_WRITE "[FTPMMI_GOEP] mmi_bt_ftps_write_obj_continue(), file write FS_WRITE(%d)"
    BT_FTPS_PUSH_INBUF_CONTINUE "[FTPMMI_GOEP] mmi_bt_ftps_inbuf_write_obj_continue()"
    BT_FTPS_PUSH_INBUF_CONTINUE_WRITE "[FTPMMI_GOEP] mmi_bt_ftps_inbuf_write_obj_continue(), file write FS_WRITE(%d)"
    BT_FTPS_CREATE_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_create_folder(), goep_conn_id(%d)"
    BT_FTPS_CREATE_FOLDER_CREATE_DIR "[FTPMMI_GOEP] mmi_bt_ftps_create_folder(), FS_CreateDir(%d)"
    BT_FTPS_SET_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_set_folder(), goep_conn_id(%d)"
    BT_FTPS_SET_PARENT_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_set_parent_folder(), goep_conn_id(%d)"
    BT_FTPS_PULL_CONTINUE "[FTPMMI_GOEP] mmi_bt_ftps_pull_continue(), goep_conn_id(%d)"
    BT_FTPS_SEND_OBJ "[FTPMMI_GOEP] mmi_bt_ftps_send_obj(), goep_conn_id(%d)"
    BT_FTPS_SEND_FOLDER_CONTENT "[FTPMMI_GOEP] mmi_bt_ftps_send_folder_content(), goep_conn_id(%d)"
    BT_FTPS_SEND_FOLDER_CONTENT_OPEN_ERROR "[FTPMMI_GOEP] mmi_bt_ftps_send_folder_content() -- open folder content file error "
    BT_FTPS_FIND_GOEP_ID_FAILED "[FTPMMI_GOEP] mmi_bt_ftps_find_goep_id() -- failed, server->goep_conn_id:(%d), find->goep_conn_id:(%d)"
    BT_FTPS_SDP_DEREGISTER_CNF_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_sdp_deregister_cnf_hdlr(), state(%d)"
    BT_FTPS_REGISTER_SERVER_CNF_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_register_server_rsp_hdlr(), state(%d)"
    BT_FTPS_DEREGISTER_SERVER_CNF_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_deregister_server_rsp_hdlr(), state(%d)"
    BT_FTPS_CONNECT_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_connect_ind_hdlr(), state(%d)"
    BT_FTPS_PUSH_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_push_ind_hdlr(), state(%d)"
    BT_FTPS_PULL_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr(), state(%d), ind->pkt_type:(%d)"
    BT_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr() -- continue write, state(%d)"
    BT_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER_FS_ERROR "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr() -- gen folder error, ret(%d)"
    BT_FTPS_SET_FOLDER_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_set_folder_ind_hdlr(), state(%d), ind->setpath_flag:(%d)"
    BT_FTPS_ABORT_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_abort_ind_hdlr(), state(%d)"
    BT_FTPS_AUTHORIZE_IND_HDLR "[FTPMMI_GOEP] mmi_bt_ftps_authorize_ind_hdlr(), state(%d)"
    BT_FTPS_SET_FS_FLAG "[FTPMMI_GOEP] mmi_bt_ftps_set_fs_flag() = %d"
    BT_FTPS_READ_FS_FLAG "[FTPMMI_GOEP] mmi_bt_ftps_read_fs_flag_and_popup()"
    BT_FTPS_PUSH_DEL_CBK "[FTPMMI_GOEP] mmi_bt_ftps_push_delete_call_back() state(%d), DEL result:(%d)"
    BT_FTPS_USB_PLUG_IN "[FTPMMI_GOEP] mmi_bt_ftps_usb_plugin_hdle()"
    BT_FTPS_AUTH_SCR_HDLR "[FTPMMI] mmi_bt_ftps_auth_scr_hdlr(), behavior[%d]"
    BT_FTPS_CNTX_INIT "[FTPS] bt_ftps_cntx_init()"
    BT_FTPS_WORK_FOLDER_INIT "[FTPS] bt_ftps_work_folder_init()"
    BT_FTP_UTIL_DELETE_FILE "[FTP] delete file:(%s)"
    BT_FTPS_WRITER_FLUSH_BUFFER_FAIL "[FTPS][WRN] write data to file ret:%d"
    BT_FTPS_WRITER_FLUSH_NEWDATA_FAIL "[FTPS][WRN] wriet data to file ret:%d"

    BT_FTPS_UTIL_OPEN_FILE_FAIL "[FTPS][ERR] open file fail fh:(%d)"
    BT_FTPS_INIT_NBUFFER_DISABLE "[FTPS] nbuffer_isInit false. disable it. set:(%d)"
    BT_FTPS_GEN_FOLDER_PARAM "[FTPS] gen_folder_content root:(%d) path:(%s) output:(%s) max:(%d)"
    BT_FTPS_GEN_FOLDER_PARAM_CHECK_FAIL "[FTPS][WRN] gen_folder folderpath is 0(%d) xmlFilepath is 0(%d)"
    BT_FTPS_GEN_FOLDER_FINDFIRST_FAIL "[FTPS][WRN] gen_folder fail to browse folder"
    BT_FTPS_GEN_FOLDER_ADD_EXTRA_OBJECT "[FTPS] add extra object to xml file num:(%d)"
    BT_FTPC_CLOSE_RECV_FILE "[FTPC] close recv file handle"
    BT_FTPC_OPEN_FILE_FAIL "[FTPC][WRN] fail to open file fh:(%d)"
    BT_FTPC_GET_FILESIZE_FAIL "[FTPC][WRN] fail to get file size:(%d)"
    BT_FTPC_CLOSE_PUSH_FILE "[FTPC] close push file handle"
    BT_FTPC_ACTION_DELETE_FOLDER "[FTPC] delete_folder_routine delete folder name:(%s)"
    BT_FTPC_ACTION_CREATE_FOLDER "[FTPC] create_folder_routine create folder name:(%s)"
    BT_FTPC_ACTION_PUSH_FILE "[FTPC] start_push_a_file filename state:(%d)"
    BT_FTPC_ACTION_PUSH_FILE_FAIL "[FTPC][WRN] start_push_a_file wrong state"
    BT_FTPC_ACTION_PUSH_FILE_CHECKSIZE_FAIL "[FTPC][WRN] start_push_a_file filename too long"
    BT_FTPC_ACTION_PUSH_FILE_GETFILENAME_FAIL "[FTPC][WRN] start_push_a_file filename too long"
    BT_FTPC_PUSH_FILE_HDL "[FTPC] start_push_a_file filename rsp_code:(%d) state:(%d) fh:(%d)"
    BT_FTPC_FILE_STATE_CHECK "[FTPC][WRN] file-state:(%d) total:(%d) reamin:(%d) fh:(%d)"


    BT_FTPC_TARGET_FILEPATH "[FTPC] target filepath:(%s)"
    BT_FTPC_TARGET_FILENAME "[FTPC] target filename:(%s)"
    BT_FTPC_TARGET_FOLDERPATH "[FTPC] target folderpath:(%s)"
    BT_FTPC_UTIL_OPEN_FILE_FAIL "[FTPC][ERR] open file fail fh:(%d)"
    BT_FTPC_DEL_RECV_FILE "[FTPC] delete receive file:(%s)"
    BT_FTPC_ACTION_PUSH_FILE_DONE "[FTPC] push_file done"
    BT_FTPC_PUSH_CNF_HDLR "[FTPC] push_cnf rsp_code:(%d) state:(%d) abort:(%d)"
    BT_FTPC_TARGET_FOLDERPATH_NO_RESOURCE "[FTPC][ERR] NO ENOUGH SPACE to save filepath"

    BT_FTPC_CONNECT_SERVER "[FTPC] bt_ftpc_connect_server()"
    BT_FTPC_CONNECT_SERVER_CHECK "[FTPC] bt_ftpc_connect_server() check context index:(%d), state:(%d), lap:(%d), uap:(%d), nap:(%d)"
    BT_FTPC_BACK_FOLDER "[FTPC] bt_ftpc_back_folder() state:(%d), goep_conn_id:(%d)"
    BT_FTPC_ROOT_FOLDER "[FTPC] bt_ftpc_root_folder() state:(%d), goep_conn_id:(%d)"
    BT_FTPC_CHANGE_FOLDER "[FTPC] bt_ftpc_change_folder() state:(%d), goep_conn_id:(%d)"
    BT_FTPC_CHANGE_FOLDER_FORWARD "[FTPC] bt_ftpc_change_folder(): Forward Folder"
    BT_FTPC_CHANGE_FOLDER_BACK "[FTPC] bt_ftpc_change_folder(): Back Folder"
    BT_FTPC_CHANGE_FOLDER_REFRESH "[FTPC] bt_ftpc_change_folder(): Refresh Folder"
    BT_FTPC_GET_FILE_OBJ "[FTPC] bt_ftpc_get_file_obj() FTPC check state. state:(%d)"

    BT_FTPC_IS_RUN "[FTPC] bt_ftpc_is_run() FTPC check state. state:(%d)"
    BT_FTPC_IS_CANCELING "[FTPC] bt_ftpc_is_canceling() FTPC check state. state:(%d) abort-flag:(%d)"
    BT_FTPC_IS_ABORTING "[FTPC] bt_ftpc_is_aborting() FTPC check state. state:(%d) abort-flag:(%d)"
    BT_FTPC_CONNECTION_TERMINATED "[FTPC] bt_ftpc_connection_terminated()"
    BT_FTPC_WORK_FOLDER_INIT "[FTPC] bt_ftp_work_folder_init()"
    BT_FTPC_WORK_FOLDER_INIT_OPEN_NO_ERROR "[FTPC] bt_ftp_work_folder_init() open no error"
    BT_FTPC_WORK_FOLDER_INIT_OPEN_ERROR "[FTPC] bt_ftp_work_folder_init() open error"
    BT_FTPC_DISCONNECT_IND_HDLR "[FTPC] bt_ftp_disconnect_ind_hdlr() client->goep_id:(%d), client->req_id:(%d), client->state:(%d)"
    BT_FTPS_DISCONNECT_IND_HDLR "[FTPS] bt_ftp_disconnect_ind_hdlr() ind->goep_id:(%d), ind->req_id:(%d), server->goep_id:(%d), server->state:(%d) "

    BT_FTPC_DISCONNECT_IND_HDLR_FIND_INDEX_FAILED "[FTPC] bt_ftp_disconnect_ind_hdlr()-- all open FTS and FTC:find index failed"
    BT_FTPC_DISCONN_IND_HDLR_FIND_INDEX_FAILED_CONN_CACEL "[FTPC] bt_ftp_disconnect_ind_hdlr()-- client connect cacel case: find index failed"

    BT_FTPC_UNKNOW_MSG_HDLR "[FTPC][ERR] Unhandle msg-id:(%d)"
    BT_FTPC_CONNECT_CANCEL "[FTPC] bt_ftpc_connect_cancel() FTPC check state. state:(%d)"
    BT_FTPC_SEND_DISCONNECT_MSG "[FTPC] bt_ftpc_send_disconnect() FTPC check state. state:(%d)"
    BT_FTPC_SEND_ABORT_MSG "[FTPC] send abort message "
    BT_FTPC_CNTX_INIT "[FTPC] btmtk_ftpc_client_enable()"
    BT_FTPC_CNTX_INIT_WRN "[FTPC] btmtk_ftpc_client_enable() has enabled"
    BT_FTPC_CNTX_DEINIT "[FTPC] btmtk_ftpc_client_disable()"
    BT_FTPC_CNTX_DEINIT_WRN "[FTPC] btmtk_ftpc_client_disable() has disabled"
    BT_FTPC_RECEIVED_FOLDER_INIT_OPEN "[FTPC] bt_ftpc_received_folder_init() FS_Open(%d)"
    BT_FTPC_RECEIVED_FOLDER_INIT_CREATE "[FTPC] bt_ftpc_received_folder_init() FS_CreateDir(%d)"
    BT_FTPC_FIND_GOEP_ID_FAILED "[FTPC] bt_ftpc_find_goep_id() -- failed, client->goep_conn_id:(%d), find->goep_conn_id:(%d)"
    BT_FTPC_WRITE_OBJ "[FTPC] bt_ftpc_write_obj(), rsp->pkt_type(%d) rsp->frag_len(%d)"
    BT_FTPC_WRITE_OBJ_OPEN "[FTPC] bt_ftpc_write_obj(), file open FS_OPEN(%d)"
    BT_FTPC_WRITE_OBJ_WRITE "[FTPC] bt_ftpc_write_obj(), file write FS_WRITE(%d)"
    BT_FTPC_WRITE_OBJ_CONTINUE "[FTPC] bt_ftpc_write_obj_continue(), rsp->pkt_type(%d) rsp->frag_len(%d)"
    BT_FTPC_WRITE_OBJ_CONTINUE_WRITE "[FTPC] bt_ftpc_write_obj_continue(), file write FS_WRITE(%d)"
    BT_FTPC_GET_FOLDER "[FTPC] bt_ftpc_get_folder(), rsp->rsp_code(%d), rsp->pkt_type(%d), rsp->to_self(%d)"
    BT_FTPC_GET_FOLDER_PARSE_RESUME "[FTPC] bt_ftpc_get_folder() -- parse resume, entity of cur folder:(%d), parsed cnt of cur folder:(%d)"
    BT_FTPC_GET_FOLDER_PARSE_DONE "[FTPC] bt_ftpc_get_folder() -- parse done(goto), parse_return:(%d), entity of cur folder:(%d), parsed cnt of cur folder:(%d)"
    BT_FTPC_GET_FOLDER_CONTINUE_PARSE "[FTPC] bt_ftpc_get_folder() -- continue parse(goto) send pull_rsp to self"
    BT_FTPC_GET_FOLDER_OPEN "[FTPC] bt_ftpc_write_obj(), file open FS_OPEN(%d)"
    BT_FTPC_GET_FOLDER_WRITE "[FTPC] bt_ftpc_write_obj(), file write fh:(%d) FS_WRITE(%d)"
    BT_FTPC_GET_OBJ "[FTPC] bt_ftpc_get_obj(), rsp->rsp_code(%d), rsp->pkt_type(%d)"
    BT_FTPC_PARSE_FOLDER_CONTENT "[FTPC] bt_ftpc_parse_folder_content()"
    BT_FTPC_PARSE_FOLDER_CONTENT_PAUSE "[FTPC] bt_ftpc_parse_folder_content() -- parsing pause!!, entity of cur folder:(%d)"
    BT_FTPC_FOLDER_LISTING_START_EL "[FTPC] bt_ftpc_folder_listing_startElement() -- parsing pause!!, entity of cur folder:(%d)"
    BT_FTPC_GET_FOLDER_CONTENT "[FTPC] bt_ftpc_get_folder_content(), state:(%d), goep_conn_id:(%d)"
    BT_FTPC_CONNECT_CNF_HDLR "[FTPC] bt_ftpc_connect_rsp_hdlr(), rsp_code:(%d) state:(%d)"
    BT_FTPC_PULL_CNF_HDLR "[FTPC] bt_ftpc_pull_rsp_hdlr(), state:(%d) abort:(%d)"
    BT_FTPC_SET_FOLDER_CNF_HDLR "[FTPC] bt_ftpc_set_folder_rsp_hdlr(), state:(%d)"
    BT_FTPC_ABORT_CNF_HDLR "[FTPC] bt_ftpc_abort_rsp_hdlr(), state:(%d)"
    BT_FTPS_CONNECTION_TERMINATED "[FTPS] bt_ftp_connection_terminated(), server/client role:(%d)"
    BT_FTPC_CHECK_FOLDER_EXISTED "[FTPC] bt_ftp_check_folder_existed(), path:(%s)"
    BT_FTPC_CHECK_FOLDER_EXISTED_ERROR "[FTPC] bt_ftp_check_folder_existed(), return(%d)"
    BT_FTPC_DELETE_FILE "[FTPC] bt_ftp_delete_file()"
    BT_FTPC_GET_LIST "[FTPMMI_SCR] bt_ftpc_get_list_files()"
    BT_FTPC_GET_RECV_CALL_BACK "[FTPMMI_SCR] bt_ftpc_get_recv_drv_callback() uuid=0x%x,drv=%d,selected=%d"
    BT_FTPC_GET_ALL "[FTPMMI_SCR] bt_ftpc_get_all_files()"
    BT_FTPC_FIND_NEXT_FILE "[FTPMMI_SCR] bt_ftpc_find_next_file()"
    BT_FTPC_CHECK_LIST "[FTPMMI_SCR] bt_ftpc_check_list()"
    BT_FTPC_FREE_LIST "[FTPMMI_SCR] bt_ftpc_free_list()"
    BT_FTPC_GET_NEXT_FILE "[FTPMMI_SCR] bt_ftpc_get_next_file()"
    BT_FTPC_RESET_PULL_VAR "[FTPMMI_SCR] bt_ftpc_reset_pull_variable()"
    BT_FTPC_PARSE_EL_START_ERR "[FTPC] bt_ftpc_folder_listing_startElement() -- parser error and stopped."
    BT_FTPC_PARSE_EL_END_ERR "[FTPC] bt_ftpc_folder_listing_endElement() -- parser error and stopped."
    BT_FTPC_RENAME_OBJ "[FTPMMI_SCR] bt_ftpc_rename_recved_obj()."
    BT_FTPC_ABORTED_HDL "[FTPC] bt_ftpc_receiving_aborted_hdlr()."
    BT_FTPC_DEL_TMP_FILE "[FTPC] bt_ftpc_delete_pulling_file()."
    BT_FTPC_SET_FLAG_ABORT_REQ_SENT "[FTPC] bt_ftpc_set_abort_req_sent_flag()."
    BT_FTPC_RESET_FLAG_ABORT_REQ_SENT "[FTPC] bt_ftpc_reset_abort_req_sent_flag()."
    BT_FTPC_BROWSE_FILES_TIMER_TIMEOUT_FAILED_HDLR "[FTPC] bt_ftpc_browse_files_failed_timer_expire_hdler()."
    BT_FTPC_PARSE_FOLDER_CONTENT_FS_OPEN "[FTPC] bt_ftpc_parse_folder_content().  parsed file FS_OPEN(%d)"
    BT_FTPC_PARSE_FOLDER_CONTENT_FS_OPEN_LNAME_FILE "[FTPC] bt_ftpc_parse_folder_content().  long file name file FS_OPEN(%d)"


    BT_FTPC_SET_FS_FLAG "[FTPC] bt_ftpc_set_fs_flag(). = %d "




    BT_FTPC_MAKE_RECV_PATH "[FTPMMI_SCR] bt_ftpc_make_recv_path()"
    BT_FTPC_WRITE_LNAME2FILE "[FTPC] bt_ftpc_write_lname2file()"
    BT_FTPC_WRITE_LNAME2FILE_FS_OPEN "[FTPC] bt_ftpc_write_lname2file() FS_OPEN(%d)"
    BT_FTPC_WRITE_LNAME2FILE_FS_SEEK "[FTPC] bt_ftpc_write_lname2file() FS_SEEK(%d)"
    BT_FTPC_WRITE_LNAME2FILE_FS_WRITE "[FTPC] bt_ftpc_write_lname2file() FS_WRITE(%d)"
    BT_FTPC_READ_LNAME "[FTPC] bt_ftpc_read_lname()"
    BT_FTPC_READ_LNAME_FS_OPEN "[FTPC] bt_ftpc_read_lname() FS_OPEN(%d)"
    BT_FTPC_READ_LNAME_FS_SEEK "[FTPC] bt_ftpc_read_lname() FS_SEEK(%d)"
    BT_FTPC_READ_LNAME_FS_READ "[FTPC] bt_ftpc_read_lname() FS_READ(%d)"
    BT_FTPC_DISCONNECT_CLIENT_CHECK "[FTPC] bt_ftpc_disconnect_server() state:(%d), context.g_conn_id:(%d), cm.g_conn_id(%d)"



    BT_HIDD_ADP_STATUS "[HID ADP] hidd status: hidd_state=%d, hidd_active=%d, num_intr_queue=%d, intrTx=%d"
    BT_HIDD_ADP_STATE_CHANGE_IND "[HID ADP] hidd state change: %d --> %d"
    BT_HIDD_ADP_START_TIMER "[HID ADP] start timer, timer_id=%d, timer_duration=%d"
    BT_HIDD_ADP_STOP_TIMER "[HID ADP] stop timer, timer_id=%d"
    BT_HIDD_ADP_SEND_MOUSE_COMMAND "[HID ADP] send mouse cmd, cmd:0x%02x 0x%02x"
    BT_HIDD_ADP_SEND_KBD_COMMAND "[HID ADP] send kbd cmd, cmd:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
    BT_HIDD_ADP_SEND_COMPLETE_STATUS "[HID ADP] Interrupt complete status, status = %d, intrTx = %d"
    BT_HIDD_ADP_SEND_STATUS "[HID ADP] Interrupt complete status, status = %d"
    BT_HIDD_ADP_TRANSATION_COMPLETE "[HID ADP] Transation complete status, status = %d, transation type = %d"
    INTERRUPT_COMPLETE_FAILED "[HID ADP] Interrupt complete failed"
    CONNECTION_OPENED "[HID ADP] Connection opened"
    HID_SENDING_SET_PROTOCOL_RESPONSE "[HID ADP] HID Sending Set Protocol Response..."
    CONTROL_FUNCTION_RECEIVED_SUSPEND "[HID ADP] Control Function Received: SUSPEND"
    HID_SENDING_INTERRUPT "[HID ADP] HID Sending Interrupt..."
    INTERRUPT_RECEIVED "[HID ADP] Interrupt Received:"
    CONTROL_FUNCTION_RECEIVED_SOFT_RESET "[HID ADP] Control Function Received: SOFT RESET"
    SET_PROTOCOL_PROTOCOL__x02X "[HID ADP] Set Protocol, Protocol = %02X"
    HID_SENDING_GET_PROTOCOL_RESPONSE "[HID ADP] HID Sending Get Protocol Response..."
    SET_REPORT_REPORT_DATA_LEN__xD "[HID ADP] Set Report, Report data len = %d:"
    OPEN_REQUEST_RECEIVED "[HID ADP] Open request received"
    INTRPOOL_IS_EMPRY "intrPool is empry"
    HID_CHANNEL_COULD_NOT_SEND_SET_IDLE_RATE_RESPONSE_REASON_x02X "[HID ADP] HID Channel could not send Set Idle Rate Response, reason: %02x"
    CONTROL "[HID ADP] Control:"
    CONTROL_FUNCTION_RECEIVED_HARD_RESET "[HID ADP] Control Function Received: HARD RESET"
    HID_CHANNEL_COULD_NOT_SEND_GET_REPORT_RESPONSE_REASON_x02X "[HID ADP] HID Channel could not send Get Report Response, reason: %02x"
    TRANSACTION_RECEIVED "[HID ADP] Transaction Received:"
    TRANSACTION_COMPLETE_STATUS__x0X2 "[HID ADP] Transaction complete, status = %0x2"
    CONTROL_FUNCTION_RECEIVED_NOP "[HID ADP] Control Function Received: NOP"
    HID_SENDING_SET_REPORT_RESPONSE "[HID ADP] HID Sending Set Report Response..."
    INTERRUPT_COMPLETE "[HID ADP] Interrupt complete successfully"
    HID_CHANNEL_COULD_NOT_SEND_GET_IDLE_RATE_RESPONSE_REASON_x02X "[HID ADP] HID Channel could not send Get Idle Rate Response, reason: %02x"
    GET_PROTOCOL "[HID ADP] Get Protocol:"
    SET_IDLE_IDLE_RATE__xD "[HID ADP] Set Idle, Idle Rate = %d:"
    HID_CHANNEL_COULD_NOT_SEND_SET_REPORT_RESPONSE_REASON_x02X "[HID ADP] HID Channel could not send Set Report Response, reason: %02x"
    HID_CHANNEL_COULD_NOT_SEND_SET_PROTOCOL_RESPONSE_REASON_x02X "[HID ADP] HID Channel could not send Set Protocol Response, reason: %02X"
    COULD_NOT_ACCEPT_THE_INCOMING_CONNECTION "[HID ADP] Could Not accept the incoming connection, status: %d"
    CONTROL_FUNCTION_RECEIVED_VIRTUAL_CABLE_UNPLUG "[HID ADP] Control Function Received: VIRTUAL CABLE UNPLUG"
    UNKNOWN_CONTROL_FUNCTION "[HID ADP] Unknown Control Function"
    HID_SENDING_GET_IDLE_RATE_RESPONSE "[HID ADP] HID Sending Get Idle Rate Response..."
    CLOSE_INDICATION_RECEIVED "[HID ADP] Close indication received"
    HID_SENDING_GET_REPORT_RESPONSE "[HID ADP] HID Sending Get Report Response..."
    GET_IDLE "[HID ADP] Get Idle:"
    CONTROL_FUNCTION_RECEIVED_EXIT_SUSPEND "[HID ADP] Control Function Received: EXIT SUSPEND"
    GET_REPORT "[HID ADP] Get Report:"
    CONNECTION_CLOSED "[HID ADP] Connection closed"
    HID_CHANNEL_COULD_NOT_SEND_GET_PROTOCOL_RESPONSE_REASON_x02X "[HID ADP] HID Channel could not send Get Protocol Response, reason: %02x"
    HID_SENDING_SET_IDLE_RATE_RESPONSE "[HID ADP] Sending Set Idle Rate Response..."
    HID_CHANNELx08X "[HID] L2CAP callback channel:%08x"
    HIDSTATEOPEN1_PKT_RETURNED_WITH_TRANS_TYPExD "[HID] HidStateOpen pkt returned with trans type:%d"
    HIDSTATEOPEN2_PKT_RETURNED_WITH_TRANS_TYPExD "[HID] HidStateOpen pkt returned with trans type1:%d"
    HIDSTATEOPEN_SEND_MORE_DATA "[HID] HidStateOpen: send more data"
    HIDSTATEOPENPKT_RETURNED_WITH_ERR_FLAG "[HID] HidStateOpen:Pkt returned with err flag"
    HIDCOMPLETETRANSACTION_WITH_TYPExD "[HID] HidCompleteTransaction: with type=%d"
    CHANNELSTATEx02X "channel->state:%02x"
    GET_REPORT_BIT3_IS_0 "Get Report bit3 is 0"
    GET_REPORT_BIT3_IS_1 "Get Report bit3 is 1"
    GET_REPORTIDxD "Get ReportId=%d"
    UNUSED_CHANNEL_0_IGNORE_IT "Unused channel ==0, ignore it"
    INSERT_TO_TRANSQUEUE_WITH_TYPExD "Insert to transQueue with type=%d"
    TRY_TO_REGISTER_SECURITY_RECORDx02X "Try to register security record:%02x"
    TRY_TO_REGISTER_SECURITY_RECORD "Try to register security record"
    RECV_GET_REPORT_WITH_VALID_ID "Recv GET_REPORT with valid Id"
    CHANNEL_IS_0_RETURN "channel is 0, return"
    GET_REPORT_PARMA_LENxD "Get Report Parma Len=%d"
    BEFORE_L2CAP_SEND_TRANSTYPExD "Before L2Cap Send, transType=%d"
    L2CAP_CONNECTRSPx02X "L2CAP_ConnectRsp:%02x"
    CIDxDCTRLCIDxD "cid=%d,ctrlCid=%d"

    CAR_SDP_PARSEATTRIBUTES__CONTINUATION_STATE_QUERY_AGAIN "CAR: SDP_ParseAttributes - Continuation State. Query Again!"
    HID_HOST_INVALID_CONTROL_COMMAND "[HID] Host: invalid CONTROL command"
    HID_SDP_QUERY_FAILED "[HID] SDP Query failed"
    HID_SDP_PARSEATTRIBUTES_SUCCEEDED_VALUE__0Xx02XUPDATED_BUFF_LEN__xD "[HID] SDP_ParseAttributes succeeded! Value = 0x%02x,Updated Buff Len = %d"
    HID_HIDSENDNEXTTRANSACTION_x02X "[HID] HidSendNextTransaction :%02x"
    HID_C_SMAx02XBx02X "[HID] Connected Channel state:%02x,CID:%02x"
    HID_HIDSENDNEXTINTERRUPT_x02X "[HID] HidSendNextInterrupt :%02x"
    HID_COULD_NOT_RESTART_QUERY "[HID] Could not restart query"
    HID_OPENCONNECTION "[HID] OpenConnection"
    HID_CHANNEL_CLOSED_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X "[HID] Channel closed state received an unexpected event: %02X"
    HID_STATUSx02X "[HID] CMGR link status:%02x"
    BT_HID_SDP_QUERY_CALLBACK_x02X "[HID] bt_hid_sdp_query_callback :%02x"
    HIDSTATEOPENx02X "[HID] HidStateOpen event:%02x"
    HID_SDP_PARSING_FAILED "[HID] SDP Parsing failed"
    HIDSTATECONNPENDINGx02X "[HID] HidStateConnPending event:%02x"
    HIDSTATECLOSEDx02X "[HID] HidStateClosed event:%02x"
    HIDSTATEDISCPENDINGx02X_CIDx02X "[HID] HidStateDiscPending event:%02x, Cid:%02x, reason: %02x"
    HID_SDP_PARSEATTRIBUTES_SUCCEEDED_BYTES_READ__xD_UPDATED_BUFF_LEN__xD "[HID] SDP_ParseAttributes succeeded!, Bytes Read = %d, Updated Buff Len = %d"
    HID_CHANNEL_CONN_PENDING_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X "[HID] Channel conn pending state received an unexpected event %02X"
    HIDCHANNELCTRLCIDx02X "[HID] OpenInd Control channel Cid:%02x"
    HID_SERVER_OPEN_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X "[HID] Server open state received an unexpected event: %02X"
    HID_HID_ISCONNECTEDx02X "[HID] HID_IsConnected:%02x"
    HID_E_SMAx02XBx02X "[HID] L2CAP callback default event state:%02x,CID:%02x"
    HID_INVALID_PROFILE_VERSION "[HID] Invalid profile version"
    HID_RESPONDOPENIND_STATEx02X "[HID] HID_RespondOpenInd, state:%02x"
    HID_TRY_TO_DISCONNECT_INTR_CHANNEL "[HID] Try to disconnect intr channel"
    HID_HOST_UNEXPECTED_DATC "[HID] Host: unexpected DATC"
    HID_CTRL_L2CAP_CONNECTREQSTATUSx02X "[HID] CTRL L2CAP_ConnectReqstatus:%02x"
    HID_B_SMAx02XBx02X "[HID] L2CAP callback CONN_IND state:%02x,CID:%02x"
    HID_A_SMAx02XBx02X "[HID] L2CAP callback CONN_AUTH state:%02x,CID:%02x"
    HID_CID_x02X "[HID] L2CAP callback CID: %02x"
    HIDL2CAP_AUTHORIZECONNECTRSP_STATUSx02X "[HID] L2Cap_AuthorizeConnectRsp status%02x"
    HIDPARMSEVENTx02X "[HID] L2CAP callback event: %02x"
    L2CAP_HID_TX_STATUSx02X "[HID] L2CAP hid tx status:%02x"
    HIDCOMPLETETRANSACTION "[HID] HidCompleteTransaction"
    HID_D_SMAx02XBx02X "[HID] L2CAP callback DISCONNECTED state:%02x,CID:%02x"
    HID_SDP_PARSEATTRIBUTES_SUCCEEDED_VALUE__0Xx04XUPDATED_BUFF_LEN__xD "[HID] SDP_ParseAttributes succeeded! Value = 0x%04x,Updated Buff Len = %d"
    HIDCMGRCALLBACKx02X "[HID] CMGR callback event: %02x"
    HIDFINDUNUSEDCHANNELx02X "[HID] HidFindUnusedChannel:%02x"
    HID_L2CAP_DISCONNECT_REQ_CID_CIDx02X_STATUSx02X "[HID] L2CAP Disconnect Req CID:%02x, status:%02x"
    CHANNELCTRLCIDx02XCHANNELINTRCIDx02X "[HID] StateDiscPending Channel->ctrlCid:%02x,Channel->intrCid:%02x"
    HID_NOT_THE_CONNECT_BD_ADDR "[HID] CMGR callback Not the connect bd_addr"
    HID_CHANNELCONCOUNTx02X "[HID] StateDiscPending Channel->conCount:%02x"
    HIDSENDTRANSPACKET "[HID] HidSendTransPacket"
    HIDCLEARCONNECTIONx02X "[HID] HidClearConnection Status:%02x"
    HID_CHANNELSTATEx02X "[HID] OpenConnection Channel->state:%02x"
    HID_START_L2CAP_CONNECTION "[HID] Start L2CAP connection"
    HIDCHANNEL_0 "[HID] L2CAP callback wrong channel"
    HID_HIDCOMPLETETRANSACTION "[HID] HidCompleteTransaction"
    HIDCHANNELINTRCIDx02X "[HID] OpenInd Interrupt channel Cid:%02x"
    HIDCLEARCONNECTION "[HID] HidClearConnection"
    HIDSENDNEXTTRANSACTION "[HID] HidSendNextTransaction"
    HIDCHANNELCMGRHANDLERBDC0 "[HID] channel->cmgrHandler.bdc==0"
    HID_HID_SENDINTERRUPT "[HID] HID_SendInterrupt"
    HID_INITIALIZED "[HID] Initialized."
    HID_SDP_SUCCESSFULLY "[HID] SDP successfully"
    HID_THIS_IS_DEFININTELY_THE_ONE "[HID] This is definintely the one"
    HID_INVALID_CONNECT_REQUEST "[HID] Invalid connection request!"
    HID_HOST_RESPONSE_RECEIVED_BEFORE_REQUEST_SENT "[HID] Host: response received before request sent"
    HID_HOST_RECEIVED_INPUT_REPORT_IND "[HID_EXT_ADP] Host: reveived input report, callback: %x, dev_idx: %d, trans_proto: %d"



    BT_PBAP_SERVER_STATE_LOG "[PBAP_ADP] pbap server state is (%d)"
    BT_PBAP_SERVER_STATE_TRANS_LOG "[PBAP_ADP] pbap server state trans from (%d) --> (%d)"
    BT_PBAP_FUNC_CONNECT_RSP_HDLR "[PBAP_ADP] connect_rsp_hdlr func"
    BT_PBAP_INIT "[PBAP_ADP] pbap adp init"
    BT_PBAP_DEINIT "[PBAP_ADP] pbap adp deinit"
    BT_PBAP_START_UP_MOD_USBMS_BOOT "[PBAP_ADP] pbap adp start up in USBMS_BOOT"
    BT_PBAP_WORK_FOLDER_INIT "[PBAP_ADP] pbap adp work folder init"
    BT_PBAP_ACTIVATE_WITH_WRONG_STATE "[PBAP_ADP] pbap adp activate with wrong state : %d"
    BT_PBAP_SERVER_ACTIVATE_FAIL "[PBAP_ADP] pbap adp server activate fail"
    BT_PBAP_DEACTIVATE_WITH_WRONG_STATE "[PBAP_ADP] pbap adp server deactivate with wrong state : %d"
    BT_PBAP_SERVER_DEACTIVATE_FAIL "[PBAP_ADP] pbap adp server deactivate fail"
    BT_PBAP_DISCONNECT_RSP_HDLR "[PBAP_ADP] disconnect rsp hdlr"
    BT_PBAP_RECEIVE_DISCONNECT_IN_WRONG_STATE "[PBAP_ADP] receive disconnect in wrong state : %d"
    BT_ADP_PBAP_RELEASE_OBJECT "[PBAP_ADP] bt_adp_pbap_release_object"
    BT_ADP_PBAP_CHECK_STATE_VALID "[PBAP_ADP] check state is valid : state = %d"
    BT_ADP_PBAP_GET_OBJECT_LENGTH "[PBAP_ADP] get object length , op = %d"
    BT_ADP_PBAP_GET_NEW_CALLS "[PBAP_ADP] get new calls number, %d"
    BT_ADP_PBAP_SET_FOLDER_SIZE "[PBAP_ADP] set folder size, %d"
    BT_ADP_PBAP_GET_FOLDER_SIZE "[PBAP_ADP] get folder size, %d"
    BT_ADP_PBAP_GET_FOLDER_OBJECT_LENGTH "[PBAP_ADP] get folder object length : %d"
    BT_ADP_PBAP_GET_LIST_OBJECT_LENGTH "[PBAP_ADP] get list object length : %d"
    BT_ADP_PBAP_GET_ENTRY_OBJECT_LENGTH "[PBAP_ADP] get entry object length : %d"
    BT_ADP_PBAP_READ_ENTRY_IND "[PBAP_ADP] read entry ind ,state = %d"
    BT_ADP_PBAP_READ_FOLDER_IND "[PBAP_ADP] read folder ind, state = %d"
    BT_ADP_PBAP_READ_LIST_IND "[PBAP_ADP] read list ind , state = %d"
    BT_ADP_PBAP_SET_PATH_IND "[PBAP_ADP] set path ind, state = %d"
    BT_ADP_PBAP_CALL_BACK "[PBAP_ADP] PbaServerCallback : event = %d, oper = %d, state = %d"
    BT_PBAP_INIT_FAILED "[PBAP] Object Store Initialization Failed!"
    BT_PBAP_REGISTERED "[PBAP] Server Registered"
    BT_PBAP_DEREGISTERED "[PBAP] Server De-registered"
    BT_PBAP_SERVER_ABORT "[PBAP] PBAP_ServerAbort with error code %x "
    BT_PBAP_SERVER_GOEP_CALLBACK "[PBAP] PbapGoepServerCallback GOEP EVENT ID = %d, OPER ID = %d"
    BT_PBAP_SERVER_NOT_FOUND "[PBAP] Server not found."
    BT_PBAP_SERVER_HEADLEN_ZERO "[PBAP] obex header len == 0"
    BT_PBAP_SERVER_OPER_COMPLETE "[PBAP] Server: %d operation complete."
    BT_PBAP_OBS_NEW_FAIL "[PBAP]PBAPOBS_New: Out of entries"
    BT_PBAP_OBS_READ_ERROR "[PBAP]Error reading object, req.len=%d,len=%d"
    BT_PBAP_ADP_AUTHORIZE_ERROR_STATE "[PBAP ADP]authorize response in NOT-AUTHORIZING state."



    BT_BIP_PRINT_I_STATE "[BIP_ADP] adp state error: iState(%d)"
    BT_BIP_PRINT_I_STATE_TRANS "[BIP_ADP] adp iState transition: (%d) --> (%d)"
    BT_BIP_PRINT_R_STATE "[BIP_ADP] adp state error: rState(%d)"
    BT_BIP_PRINT_R_STATE_TRANS "[BIP_ADP] adp rState transition: (%d) --> (%d)"
    BT_BIP_FUNC_INIT "[BIP_ADP] init func"
    BT_BIP_FUNC_DEINIT "[BIP_ADP] deinit func"
    BT_BIP_FUNC_CNTX_DEINIT_FS_CLOSE_FAILED "[BIP_ADP] cntx_deinit == FS_Close failed:(%d)"
    BT_BIP_FUNC_CNTX_DEINIT_FS_DELETE_FAILED "[BIP_ADP]cntx_deinit == FS_Delete failed:(%d)"
    BT_BIP_FUNC_CNTX_INIT "[BIP_ADP] cntx_init func"
    BT_BIP_FUNC_WORK_FOLDER_INIT "[BIP_ADP] work_folder_init func"
    BT_BIP_FUNC_WORK_FOLDER_INIT_USB_MS "[BIP_ADP] work_folder_init == USB MS Mode"
    BT_BIP_FUNC_WORK_FOLDER_INIT_OPEN_NO_ERROR "[BIP_ADP] work_folder_init == open workder folder success"
    BT_BIP_FUNC_WORK_FOLDER_INIT_OPEN_ERROR "[BIP_ADP] work_folder_init == open workder folder failed"
    BT_BIP_FUNC_MSG_HDLR "[BIP_ADP] msg_hdlr (msg_id:%d)"
    BT_BIP_FUNC_CONN_REQ_HDLR_CONN_FAILED "[BIP_ADP] connect_req_hdlr == failed status:(%d)"
    BT_BIP_FUNC_DISCONNECT_REQ_HDLR "[BIP_ADP] disconnect_req_hdlr func, state:(%d)"
    BT_BIP_FUNC_COMMAND_REQ_HDLR "[BIP_ADP] command_req_hdlr func, iState=(%d)"
    BT_BIP_FUNC_ABORT_REQ_HDLR "[BIP_ADP] abort_req_hdlr func, iState=(%d)"
    BT_BIP_FUNC_ACTIVATE_REQ_HDLR "[BIP_ADP] activate_req_hdlr func, rState=(%d)"
    BT_BIP_FUNC_DEACTIVATE_REQ_HDLR "[BIP_ADP] deactivate_req_hdlr func, rState=(%d)"
    BT_BIP_FUNC_COMMAND_RSP_HDLR "[BIP_ADP] command_rsp_hdlr func, rState=(%d)"
    BT_BIP_FUNC_CONTINUE_RSP_HDLR "[BIP_ADP] continue_rsp_hdlr func"
    BT_BIP_FUNC_CONNECT_RSP_HDLR "[BIP_ADP] connect_rsp_hdlr func, rState=(%d)"
    BT_BIP_FUNC_GENERATE_XML_CAPABILITIES "[BIP_ADP] generate_xml_capabilities func"
    BT_BIP_FUNC_GENERATE_XML_IMG_LIST "[BIP_ADP] generate_xml_img_list func"
    BT_BIP_FUNC_GENERATE_XML_IMG_PROP "[BIP_ADP] generate_xml_img_prop func"
    BT_BIP_FUNC_PARSE_XML_IMG_LIST_START_FAIL "[BIP_ADP] bt_bip_parse_img_list_startElement failed"
    BT_BIP_FUNC_PARSE_XML_IMG_LIST_END_FAIL "[BIP_ADP] bt_bip_parse_img_list_endElement failed"
    BT_BIP_FUNC_PARSE_XML_IMG_LIST_DATA_FAIL "[BIP_ADP] bt_bip_parse_img_list_dataElement failed"
    BT_BIP_FUNC_PARSE_XML_IMG_CAP_START_FAIL "[BIP_ADP] bt_bip_parse_img_list_startElement failed"
    BT_BIP_FUNC_PARSE_XML_IMG_CAP_END_FAIL "[BIP_ADP] bt_bip_parse_img_list_endElement failed"
    BT_BIP_FUNC_PARSE_XML_IMG_CAP_DATA_FAIL "[BIP_ADP] bt_bip_parse_img_list_dataElement failed"
    BT_BIP_FUNC_PARSE_XML_IMG_PROP_START_FAIL "[BIP_ADP] bt_bip_parse_img_list_startElement failed"
    BT_BIP_FUNC_PARSE_XML_IMG_PROP_END_FAIL "[BIP_ADP] bt_bip_parse_img_list_endElement failed"
    BT_BIP_FUNC_PARSE_XML_IMG_PROP_DATA_FAIL "[BIP_ADP] bt_bip_parse_img_list_dataElement failed"
    BT_BIP_FUNC_CLOSE_FILE_CONTINUALLY "[BIP_ADP] bip_adp_close_file_continually, fs handle=0x%x"
    BT_BIP_FUNC_START_CLOSE_FILE_CONTINUALLY "[BIP_ADP] bip_adp_start_close_file_continually, fs handle=0x%x"
    BT_BIP_FUNC_CHECK_FS_ERROR "[BIP ADP]bip_adp_check_fs_error_code: fs_error=0x%x, fs_oper=%d"
    BT_BIP_FUNC_CONNECT_REQ_HDLR "[BIP ADP]bip_adp_connect_req_hdlr, iState=%d, bip_service=%d"
    BT_BIP_FS_OPEN_FAILED "[BIP ADP]FS_Open failed, err_code=0x%x"
    BT_BIP_GEN_XML_FS_OPEN_FAILED "[BIP ADP]generate_xml_file FS_Open BIP_ADP_SND_FILE Failed!ret=0x%x"
    BT_BIP_REGINITIATOR_FAILED "[BIP ADP]Initiator Error: Could not initiaze Initiator. status = %d"
    BT_BIP_FS_OPEN_SNDFILE_FAILED "[BIP ADP]PUT_IMG_REQ: FS_Open BIP_ADP_SND_FILE Failed! ret=0x%x"
    BT_BIP_FS_READ_SNDFILE_FAILED "[BIP ADP]PUT_IMG_REQ: FS_Read BIP_ADP_SND_FILE Failed! ret=0x%x"
    BT_BIP_FS_OPEN_PUTIMG_FAILED "[BIP ADP]PUT_IMG_REQ: FS_Open msg_p->img_path Failed!ret=0x%x"
    BT_BIP_FS_OPEN_PUTTHM_FAILED "[BIP ADP]PUT_THM_REQ: FS_Open msg_p->img_path Failed!ocx=0x%x"
    BT_BIP_GETIMGREQ_FS_OPEN_FAILED "[BIP ADP]GET_IMG_REQ: FS_Open BIP_ADP_SND_FILE Failed!ret=0x%x"
    BT_BIP_GETIMGREQ_FS_READ_FAILED "[BIP ADP]GET_IMG_REQ: FS_Read BIP_ADP_SND_FILE Failed!ret=0x%x"
    BT_BIP_SENDBIPREQ_FAILD "[BIP ADP]SendBIPRequest status = %d"
    BT_BIP_MMI_CONNECT_RSP_FAILED "[BIP ADP]==== connect_rsp_hdlr: mmi cnf_code is CNF_FAILED! rsp_code=0x%x"
    BT_BIP_GEN_XML_FS_WRITE_FALED "[BIP ADP]generate_xml_file FS_Write Failed! ret=0x%x"
    BT_BIP_XMLPARSE_IMGLIST_FS_OPEN_FAILED "[BIP ADP] FS_Open BIP_ADP_IMG_LIST_FILE FAILED!!! ret=0x%x"
    BT_BIP_PARSE_XML_IMGLIST_FS_WRITE_FAILED "[BIP ADP]bt_bip_parse_img_list_endElement: FS_Write failed,return 0x%x"
    BT_BIP_ADP_CREATE_DIR_RET "[BIP ADP]FS_CreateDir return: (0x%x)"
    BT_BIP_ADP_DRM_OPEN_RET "[BIP ADP]DRM_open_file return: (%d)"
    BT_BIP_ADP_DRM_GET_OBJ_METHOD_RET "[BIP ADP]DRM_get_object_method return: (%d)"
    BT_BIP_ADP_DRM_GET_RIGHTS_ISSUER_RET "[BIP ADP]DRM_get_rights_issuer return: (%d), size=%d"
    BT_BIP_ADP_CHECK_DRM_RET "[BIP ADP]bt_bip_adp_check_DRM_rights return: (%d)"
    BT_BIP_ADP_FS_DELETE_RET "[BIP ADP]FS_Delete return: (%d)"
    BT_BIP_ADP_FS_WRITE_RET "[BIP ADP]FS_Write return: (%d), idx=%d"
    BT_BIP_ADP_GEN_XML_FAILED "[BIP ADP]bip_adp_generate_xml_file Failed!ret=0x%x"
    BT_BIP_ADP_I_DISCONNECT_REQ_IN_WRONG_STATE "[BIP ADP]Initiator Error: Initiator recv disconnect req in wrong state(%d)."
    BT_BIP_ADP_R_DISCONNECT_REQ_IN_WRONG_STATE "[BIP ADP]Responder Error: Responder recv disconnect req in wrong state(%d)."
    BT_BIP_ADP_ERROR_SESSION_ROLE "[BIP ADP] Error session role!"
    BT_BIP_ADP_I_INVALID_CONTINUE_RSP "[BIP ADP]Initiator Error: continue response in NOT-INITIATOR_REQUESTING state(%d)"
    BT_BIP_ADP_R_INVALID_CONTINUE_RSP "[BIP ADP]Responder Error: continue response in NOT-INDICATING state(%d)"
    BT_BIP_FUNC_I_CNTX_DEINIT "[BIP ADP]bip_adp_initiator_cntx_deinit..."
    BT_BIP_FUNC_CNTX_DEINIT "[BIP ADP]bip_adp_cntx_deinit..."
    BT_BIP_ADP_ABORT_REASON "[BIP ADP] --- Abort reason = (0x%x) ---"
    BT_BIP_ADP_RESUME_PARSE_NULL "[BIP ADP] bip_adp_resume_xml_parse: parser=NULL,iState=%d"
    BT_BIP_ADP_PARSE_PAUSED "[BIP ADP] bip_adp_resume_xml_parse: paused. To continue"
    BT_BIP_ADP_PARSE_IMGLIST_END "[BIP ADP]bip_adp_parse_imagelist_xml_file_end...iState=%d, result=%d"
    BT_BIP_ADP_XMLPARSE_RETURN "[BIP ADP] ---- xml_parse return (%d)"
    BT_BIP_ADP_PARSE_END_FSCLOSED_FAILED "[BIP ADP]--ERROR-- bt_adp_parsing_imglist_end FS_Close return (%d)"
    BT_BIP_OBS_READ_ERROR "[BIP OBS]Error reading image, dataLen=%d, len=%d"
    BT_BIP_OBS_WRITE_ERROR "[BIP OBS]Error writing image, dataLen=%d, len=%d"
    BT_BIP_DEINIT_CLIENT_FAILED "[BIP]Client: Deinit failed: status=%d"
    BT_BIP_DEINIT_SERVER_FAILED "[BIP]Server: Deinit failed: status=%d"
    BT_BIP_ABORT "[BIP]BIP_Abort: Abort requested,reason=%d."
    BT_BIP_REGISTERCLIENT_FAILED "[BIP] Client GOEP_RegisterClient failed! status=%d"
    BT_BIP_REGISTERSERVER_FAILED "[BIP] Server GOEP_RegisterServer failed! status=%d"
    BT_BIP_RESPONDER_NOT_FOUND "[BIP] Responder not found."
    BT_BIP_SERVER_OPER_ABORTED "[BIP] Server: %d operation aborted."
    BT_BIP_SERVER_PARTIAL_CONTENT_PUTIMG "[BIP ADP] Server: OBRC_PARTIAL_CONTENT for PutImage"
    BT_BIP_SERVER_PARTIAL_CONTENT_GETIMGLIST "[BIP ADP]=== Server: OBRC_PARTIAL_CONTENT for GetImageList"
    BT_BIP_INITIATOR_NOT_FOUND "[BIP]: Initiator not found."
    BT_BIP_I_PARTIALCONTENT_GETIMGLIST "BIP: Client: OBRC_PARTIAL_CONTENT for GetImageList!"
    BT_BIP_I_PARTIALCONTENT_PUTIMG "BIP: Client: OBRC_PARTIAL_CONTENT for PutImage!"


    BIPI_EXT_ADP_STATE_ERR "BIP_I_EXT_ADP : statuts err, current status = %d, current opcode = %d"
    BIPR_EXT_ADP_STATE_ERR "BIP_R_EXT_ADP : statuts err, current status = %d, current opcode = %d"
    BIPI_EXT_ADP_RECEIVE_MSG "BIP_I_EXT_ADP : received msg = %d"
    BIPR_EXT_ADP_RECEIVE_MSG "BIP_R_EXT_ADP : received msg = %d"
    BIPI_EXT_ADP_APP_CMD "BIP_I_EXT_ADP: app invoke opcode = %d"
    BIPR_EXT_ADP_APP_CMD "BIP_R_EXT_ADP: app invoke opcode = %d"
    BIPI_EXT_ADP_NOTIFY_APP "BIP_I_EXT_ADP : notify app, opcode = %d, result = %d"
    BIPR_EXT_ADP_NOTIFY_APP "BIP_R_EXT_ADP : notify app, opcode = %d, status = %d"
    BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_CN_ID "BIP_R_EXT_ADP : do not find hanle by cn id = %d"
    BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_REQ_ID "BIP_R_EXT_ADP : do not find hanle by req id = %d"
    BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_STATUS "BIP_R_EXT_ADP : do not find hanle by status = %d"
    BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_CN_ID "BIP_I_EXT_ADP : do not find handle by cn id = %d"
    BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_REQ_ID "BIP_I_EXT_ADP : do not find handle by req id = %d"
    BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_STATUS "BIP_I_EXT_ADP : do not find handle by status = %d"
    BIP_EXT_ADP_DO_NOT_SUPPORT_NOW "BIP_EXT_ADP : do not support now line = %d"





    PAN_INITIALIZED "[PAN] Initialized"
    PAN_REGISTER_BUSY "[PAN] Registeration is busy"
    PAN_OPENCONNECTION "[PAN] Open connection"
    PAN_CREATEDATALINK_STATUS "[PAN] Open connection create data link status: %02x"
    PAN_OPENCONNECTION_STATUS "[PAN] Open connection status: %02x"
    PAN_CMGRCALLBACK_EVENT_STATUS "[PAN] CMGR callback event: %02x, status: %02x"
    PAN_NOT_FOR_THE_BD_ADDR "[PAN] CMGR callback not for the bd_addr"
    PAN_CMGRCALLBACK_BDADDR0 "[PAN] CMGR callback bd_addr=0"
    PAN_BNEPCALLBACK "[PAN] bnep callback pan: %02x, bneppanu: %02x"
    PAN_BNEPCALLBACK_EVENT "[PAN] bnep callback event: %02x"
    PAN_HANDLEPACKETIND_GRATUITOUS_ARPREQUEST "[PAN] bnep callback handle packet ind, ARP gratuitous request!"
    PAN_BNEPCONTROL_PKTTYPE "[PAN] Received BNEP Control Packet type %02x"
    PAN_SENDPKT_BROADCAST "[PAN] Send packet broadcasting packet"
    PAN_FORWARDPKT_NODST "[PAN] Forward packet no local devices targeted!"
    PAN_FORWARDPKT_BROADCAST "[PAN] Forward packet broadcasting packet"
    PAN_FORWARDPKT_TOPEER "[PAN] Forward packet sending packet to peer device"
    PAN_SDP_QUERY_CALLBACK_RESULT "[PAN] SDP query callback result: %02x"
    PAN_SDP_QUERY_CALLBACK_CONNECT_FAILED "[PAN] SDP query callback, could not connect to control channel"
    PAN_SDP_QUERY_CALLBACK_DONE "[PAN] SDP query callback complete, establish bnep connection"
    PAN_CLEAR_CONNECTION_STATUS "[PAN] pan clear connection status: %02x"

    PAN_EXT_ADP_ACTIVATE_DONE "[PAN EXT ADP] activate done"
    PAN_EXT_ADP_DEACTIVATE_DONE "[PAN EXT ADP] deactivate done"
    PAN_EXT_ADP_HANDLE_CMD "[PAN EXT ADP] handle command opcode: %02x"
    PAN_EXT_ADP_HANDLE_CONNECT_CMD "[PAN EXT ADP] Connect req in error state: %02x"
    PAN_EXT_ADP_HANDLE_DISCONNECT_CMD "[PAN EXT ADP] Disconnect req in error state: %02x"
    PAN_EXT_ADP_HANDLE_CONNECT_IND_INVALID_DEVICE "[PAN EXT ADP] Connect ind with error address!"
    PAN_EXT_ADP_HANDLE_CONNECT_IND_PREV_STATE "[PAN EXT ADP] handle connect ind  prevstate: %d"
    PAN_EXT_ADP_HANDLE_CONNECT_CNF_INVALID_DEVICE "[PAN EXT ADP] Connect cnf with error address!"
    PAN_EXT_ADP_HANDLE_CONNECT_CNF_PREV_STATE "[PAN EXT ADP] handle connect cnf  prevstate: %d"
    PAN_EXT_ADP_HANDLE_DISCONNECT_IND_PREV_STATE "[PAN EXT ADP] handle disconnect ind  prevstate: %d"
    PAN_EXT_ADP_HANDLE_DISCONNECT_CNF_PREV_STATE "[PAN EXT ADP] handle disconnect cnf  prevstate: %d"




    BTLOG_MAPS_ADP_MNS_CONNECT_DUPLICATE "[MAPS] maps_adp_mns_connect: duplicate request (state=%d)"
    BTLOG_MAPS_ADP_ACTIVATE_NOT_INITIALIZED "[MAPS] maps_adp_activate: failed due to not initialized"
    BTLOG_MAPS_ADP_DEACTIVATE_DISCONNECTING "[MAPS] maps_adp_deactivate: disconnect 0x%x,0x%x,0x%x"
    BTLOG_MAPS_ADP_ADD_CONNECTION "[MAPS] maps_adp_add_connection: instance=%d, conn=%d, addr=0x%x,0x%x,0x%x"
    BTLOG_MAPS_ADP_ADD_CONNECTION_DUPLICATE "[MAPS] maps_adp_add_connection: connection existed"
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ "[MAPS] maps_app_callback: MAP_EVENT_DATA_REQ: read %d bytes"
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ_DONE "[MAPS] maps_app_callback: MAP_EVENT_DATA_REQ: read done"
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ_FAIL "[MAPS] maps_app_callback: MAP_EVENT_DATA_REQ failed"
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND "[MAPS] maps_app_callback: MAP_EVENT_DATA_IND: write %d bytes"
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND_DONE "[MAPS] maps_app_callback: MAP_EVENT_DATA_IND: write done"
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND_FAIL "[MAPS] maps_app_callback: MAP_EVENT_DATA_IND failed"
    BTLOG_MAPS_ADP_APP_CALLBACK_TP_DISCONNECTED "[MAPS] maps_app_callback: MAP_EVENT_TP_DISCONNECTED state=%d"
    BTLOG_MAPS_ADP_APP_CALLBACK_TP_DISCONNECTED_NO_CONN "[MAPS] maps_app_callback: MAP_EVENT_TP_DISCONNECTED device authorizing"
    BTLOG_MAPS_ADP_APP_CALLBACK_MNS_CONNECTED "[MAPS] maps_app_callback: MAP_EVENT_MNS_CONNECTED state=%d"
    BTLOG_MAPS_ADP_APP_CALLBACK_MNS_DISCONNECTED "[MAPS] maps_app_callback: MAP_EVENT_MNS_DISCONNECTED state=%d"
    BTLOG_MAPS_ADP_DISCONNECT "[MAPS] maps_adp_disconnect: status=%d"

    BTLOG_MAPS_DEREGISTER_SERVER_CHECK_FAILED "[MAPS] maps_deregister_server: check failed initialized=%d"
    BTLOG_MAPS_DEREGISTER_SERVER "[MAPS] maps_deregister_server: instance=%d"
    BTLOG_MAPS_GOEP_SERVER_CALLBACK "[MAPS] MapGoepServerCallback(): event=%d, oper=%d, goep_conn_id=%d"
    BTLOG_MAPS_GOEP_SERVER_CALLBACK_HEADER_RX "[MAPS] MapGoepServerCallback(): GOEP_EVENT_HEADER_RX 0x%x"
    BTLOG_MAPS_GOEP_MNS_CLIENT_CALLBACK "[MAPS] MapMnsGoepClientCallback(): event=%d, oper=%d, goep_conn_id=%d (client: %d)"
    BTLOG_MAPS_OBS_NEW "[MAPS] maps_obs_new(%d)"
    BTLOG_MAPS_OBS_CLOSE "[MAPS] maps_obs_close(%d)"
    BTLOG_MAPS_OBS_READ "[MAPS] maps_obs_read len=%d, offset=%d"
    BTLOG_MAPS_OBS_WRITE "[MAPS] maps_obs_write len=%d, offset=%d"
    BTLOG_MAPS_OBS_GET_OBJECT_LEN "[MAPS] maps_obs_get_object_len len=%d"
    BTLOG_MAPS_MNS_OBS_READ "[MAPS] maps_mns_obs_read len=%d, offset=%d"

    BTLOG_MAPC_GOEP_CLINET_CALLBACK "[MAPC] MapGoepClientCallback(): event=%d, oper=%d, goep_conn_id=%d( client=%d)"
    BTLOG_MAPC_GOEP_CLIENT_CALLBACK_HEADER_RX "[MAPC] MapGoepClientCallback(): GOEP_EVENT_HEADER_RX 0x%x"
    BTLOG_MAPC_GOEP_MNS_SERVER_CALLBACK "[MAPC] MapMnsGoepServerCallback(): event=%d, oper=%d, goep_conn_id=%d"
    BTLOG_MAPC_OBS_NEW "[MAPC] mapc_obs_new(%d)"
    BTLOG_MAPC_OBS_CLOSE "[MAPC] mapc_obs_close(%d)"
    BTLOG_MAPC_OBS_READ "[MAPC] mapc_obs_read len=%d, offset=%d"
    BTLOG_MAPC_OBS_WRITE "[MAPC] mapc_obs_write len=%d, offset=%d"
    BTLOG_MAPC_OBS_GET_OBJECT_LEN "[MAPC] mapc_obs_get_object_len len=%d"
    BTLOG_MAPC_MNS_OBS_WRITE "[MAPC] mapc_mns_obs_write len=%d, offset=%d"



BT_MBT_TRACE_START "BT_MBT_TRACE_START"


    BTLOG_MBT_A2DP_SOURCE_ENABLED "[MBT] mbt_a2dp_source_enable"
    BTLOG_MBT_A2DP_SOURCE_DISABLED "[MBT] mbt_a2dp_source_disable"
    BTLOG_MBT_A2DP_SOURCE_CONNECT "[MBT] mbt_a2dp_source_connect: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_A2DP_SOURCE_DISCONNECT "[MBT] mbt_a2dp_source_disconnect: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_A2DP_SOURCE_START "[MBT] mbt_a2dp_source_start"
    BTLOG_MBT_A2DP_SOURCE_STOP "[MBT] mbt_a2dp_source_stop"
    BTLOG_MBT_A2DP_SOURCE_PAUSE "[MBT] mbt_a2dp_source_pause"
    BTLOG_MBT_A2DP_SOURCE_RESUME "[MBT] mbt_a2dp_source_resume"

    BTLOG_MBT_AVRCP_ENABLED "[MBT] mbt_avrcp_enable"
    BTLOG_MBT_AVRCP_DISABLED "[MBT] mbt_avrcp_disable"
    BTLOG_MBT_AVRCP_CONNECT "[MBT] mbt_avrcp_connect: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_AVRCP_DISCONNECT "[MBT] mbt_avrcp_disconnect"
    BTLOG_MBT_WISE_CMD_REQ "[MBT] btmtk_avrcp_wise_send_cmd_reqbdaddr=%02x:%02x:%02x:%02x:%02x:%02x, value:%02x"

    BT_DUN_MBT_ENABLE "[BT_DUN_MBT] btmtk_dun_mbt_enable()"
    BT_DUN_MBT_DISABLE "[BT_DUN_MBT] btmtk_dun_mbt_disable()"
    BT_DUN_MBT_DISCONNECT "[BT_DUN_MBT] btmtk_dun_mbt_disconnect()"
    BT_DUN_MBT_LISTEN "[BT_DUN_MBT] btmtk_dun_mbt_listen()"
    BT_DUN_MBT_LISTENSTOP "[BT_DUN_MBT] btmtk_dun_mbt_listenstop()"
    BT_DUN_MBT_ISCONNECTED "[BT_DUN_MBT] btmtk_dun_is_connected()"
    BT_DUN_MBT_ISDEVCONNECTED "[BT_DUN_MBT] btmtk_dun_is_dev_connected()"
    BT_DUN_MBT_AUTHORIZE_RES "[BT_DUN_MBT] btmtk_dun_authorize_res(), result=%d"
    BT_DUN_MBT_CB_ENABLE_CNF "[BT_DUN_MBT] btmtk_dun_mbt_cb_enable_cnf()"
    BT_DUN_MBT_CB_DISABLE_CNF "[BT_DUN_MBT] btmtk_dun_mbt_cb_disable_cnf()"
    BT_DUN_MBT_CB_LISTEN_CNF "[BT_DUN_MBT] btmtk_dun_mbt_cb_listen_cnf()"
    BT_DUN_MBT_CB_LISTEN_STOP_CNF "[BT_DUN_MBT] btmtk_dun_mbt_cb_listen_stop_cnf()"
    BT_DUN_MBT_CB_CONNECT_IND_REQ "[BT_DUN_MBT] btmtk_dun_mbt_cb_connect_ind_req()"
    BT_DUN_MBT_CB_CONNECT_IND "[BT_DUN_MBT] btmtk_dun_mbt_cb_connect_ind()"
    BT_DUN_MBT_CB_DISCONNECT_IND "[BT_DUN_MBT] btmtk_dun_mbt_cb_disconnect_ind()"
    BT_DUN_MBT_CB_DISCONNECT_CNF "[BT_DUN_MBT] btmtk_dun_mbt_cb_disconnect_cnf()"

    BT_FTP_WISE_API_POST_EVENT "[MBT][CB] post event:(%d) idx:(%d) oper:(%d)"
    BT_FTP_WISE_API_SDC_STATUS "[MBT][CB] sdcFtpStatus oper:%d stat:%d reason:%d"
    BT_FTP_WISE_API_SERVER_ENABLE "[MBT][API] btmtk_ftp_server_enable"
    BT_FTP_WISE_API_SERVER_DISABLE "[MBT][API] btmtk_ftp_server_disable"
    BT_FTP_WISE_API_SERVER_ACCESS_RESPONSE "[MBT][API] btmtk_ftp_server_access_response reply:%d oper:%d rspcode:%d"
    BT_FTP_WISE_API_SERVER_ACCESS_RESPONSE_FOLDER "[MBT] folder:(%s) obj:(%s)"
    BT_FTP_WISE_API_SERVER_AUTH_RESPONSE "[MBT][API] btmtk_ftp_authorize_res %d"
    BT_FTP_WISE_API_SERVER_SETROOTFOLDER "[MBT][API] btmtk_ftp_server_setrootfolder path:(%s)"
    BT_FTP_WISE_API_SERVER_DISCONNECT "[MBT][API] btmtk_ftp_server_disconnect"
    BT_FTP_WISE_API_SERVER_AUTHORIZE_RES "[MBT] btmtk_ftp_authorize_res authMode:(%d)"
    BT_FTP_WISE_API_SERVER_EXTOBJECT "[MBT] ExtObject isAdd:%d isFolder:%d Name:'%s' "
    BT_FTP_WISE_API_IS_CONNECTED "[MBT] btmkt_ftp_is_connected l_ret:(%d) state:(%d)"
    BT_FTP_WISE_API_IS_DEV_CONNECTED "[MBT] btmkt_ftp_is_dev_connected l_ret:(%d) state:(%d)"
    BT_FTP_WISE_API_SERVER_CB "[MBT][CB] bt_ftps_ui_cb UI Event:%d   data=%d"
    BT_FTP_WISE_API_SERVER_CB_FOLDER "[MBT][CB] folder:(%s)  obj_name:(%s)"
    BT_FTP_WISE_API_CLIENT_ENABLE "[MBT][API] btmtk_ftp_client_enable"
    BT_FTP_WISE_API_CLIENT_DISABLE "[MBT][API] btmtk_ftp_client_disable"
    BT_FTP_WISE_API_CLIENT_OPEN "[MBT][API] btmtk_ftp_client_open addr:%x:%x:%x:%x:%x:%x c.state:%d"
    BT_FTP_WISE_API_CLIENT_CLOSE "[MBT][API] btmtk_ftp_client_close"
    BT_FTP_WISE_API_CLIENT_AUTH_RESPONSE "[MBT][API] btmtk_ftp_client_auth_response %d"
    BT_FTP_WISE_API_CLIENT_PUTFILE "[MBT][API] btmtk_ftp_client_putfile dir:(%s) file:(%s)"
    BT_FTP_WISE_API_CLIENT_GETFILE "[MBT][API] btmtk_ftp_client_getfile dir:(%s) file:(%s)"
    BT_FTP_WISE_API_CLIENT_CHDIR "[MBT][API] btmtk_ftp_client_chdir dir:(%s)"
    BT_FTP_WISE_API_CLIENT_MKDIR "[MBT][API] btmtk_ftp_client_mkdir dir:(%s)"
    BT_FTP_WISE_API_CLIENT_LISTDIR "[MBT][API] btmtk_ftp_client_listdir dir:(%s) file:(%s)"
    BT_FTP_WISE_API_CLIENT_DELDIR "[MBT][API] btmtk_ftp_client_deldir dir:(%s)"
    BT_FTP_WISE_API_CLIENT_DELFILE "[MBT][API] btmtk_ftp_client_delfile file:(%s)"
    BT_FTP_WISE_API_CLIENT_ABORT "[MBT][API] btmtk_ftp_client_abort"
    BT_FTP_WISE_API_CLIENT_CB "[MBT][CB] bt_ftpc_ui_cb UI Event:%d   data=%d"
    BT_FTP_WISE_API_CLIENT_CB_NOHANDLE "[MBT][CB] Error no handle !"
    BT_FTP_WISE_ERR_CLIENT_OPEN "[MBT][WRN] btmtk_ftp_client_open fail!"
    BT_FTP_WISE_ERR_CLIENT_CLOSE "[MBT][WRN] btmtk_ftp_client_close fail!"
    BT_FTP_WISE_ERR_CLIENT_MKDIR "[MBT][WRN] btmtk_ftp_client_mkdir fail!"
    BT_FTP_WISE_ERR_CLIENT_PUT_FILE "[MBT][WRN] btmtk_ftp_client_putfile fail!"
    BT_FTP_WISE_ERR_CLIENT_GET_FILE "[MBT][WRN] btmtk_ftp_client_getfile fail!"
    BT_FTP_WISE_ERR_CLIENT_ABORT "[MBT][WRN] btmtk_ftp_client_abort fail!"
    BT_FTP_WISE_ERR_CLIENT_DELDIR "[MBT][WRN] btmtk_ftp_client_deldir fail!"
    BT_FTP_WISE_ERR_CLIENT_DELFILE "[MBT][WRN] btmtk_ftp_client_delfile fail!"
    BT_FTP_WISE_ERR_CLIENT_LISTDIR "[MBT][WRN] btmtk_ftp_client_listdir fail!"
    BT_FTP_WISE_ERR_CLIENT_CHDIR "[MBT][WRN] btmtk_ftp_client_chdir fail! isroot:(%d)"

    BTLOG_MBT_GAP_POWER_ON_REQ "[MBT][GAP] btmtk_gap_power_on_req"
    BTLOG_MBT_GAP_STATE_OFF "[MBT][GAP]BT off. Operation failed"
    BTLOG_MBT_GAP_POWER_OFF_REQ "[MBT][GAP] btmtk_gap_power_off_req"
    BTLOG_MBT_GAP_DISCOVERY_REQ "[MBT][GAP] btmtk_gap_discovery_request: MBTSvcID=0x%x, nMaxCount=%d"
    BTLOG_MBT_GAP_DISCOVERY_FILTER_REQ "[MBT][GAP] btmtk_gap_discovery_filter_request: nMaxCount=%d, bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_DISCOVERY_FILTER_REQ_PARAM "[MBT][GAP] MBTSvc=0x%x, CoD (0x%x, 0x%x, 0x%x), Range=%d, with name=%d,  duration=%d"
    BTLOG_MBT_GAP_IS_CONNECTED "[MBT][GAP] btmtk_gap_is_connected"
    BTLOG_MBT_GAP_IS_PROFILE_CONNECTED "[MBT][GAP] btmtk_gap_is_profile_connected: 0x%x"
    BTLOG_MBT_GAP_GET_LINK_STATE_REQ "[MBT][GAP] btmtk_gap_get_link_state_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_DISCOVERY_CANCEL_REQ "[MBT][GAP] btmtk_gap_discovery_cancel_request"
    BTLOG_MBT_GAP_WRITE_LOCAL_NAME_REQ "[MBT][GAP] btmtk_gap_write_local_name_request: name=%s"
    BTLOG_MBT_GAP_WRITE_REMOTE_NAME_REQ "[MBT][GAP] btmtk_gap_write_remote_name_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x, nickname=%s"
    BTLOG_MBT_GAP_IS_AUTHORIZED "[MBT][GAP] btmtk_gap_is_authorized: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_SET_AUTHORIZED "[MBT][GAP] btmtk_gap_set_authorize: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x, bAuthorize=%d"
    BTLOG_MBT_GAP_AUTHORIZE_RESPONSE "[MBT][GAP] btmtk_gap_authorize_response: AuthMode=%d, AuthSvc=0x%x"
    BTLOG_MBT_GAP_READ_REMOTE_NAME_REQ "[MBT][GAP] btmtk_gap_read_remote_name_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_READ_REMOTE_NAME_CANCEL_REQ "[MBT][GAP] btmtk_gap_read_remote_name_cancel_request"
    BTLOG_MBT_GAP_SET_VISIBLE_REQ "[MBT][GAP] btmtk_gap_set_visible_request: bVisible=%d"
    BTLOG_MBT_GAP_SET_CONNECTABLE_REQ "[MBT][GAP] btmtk_gap_set_connectable_request: bConnectable=%d"
    BTLOG_MBT_GAP_BONDING_REQ "[MBT][GAP] btmtk_gap_bonding_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x, len=%d, pin=%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"
    BTLOG_MBT_GAP_BONDING_CANCEL_REQ "[MBT][GAP] btmtk_gap_bonding_cancel_request"
    BTLOG_MBT_GAP_PAIRING_REQ "[MBT][GAP] btmtk_gap_pairing_request: bAccept=%d, len=%d, pin=%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"
    BTLOG_MBT_GAP_SERVICE_SEARCH_REQ "[MBT][GAP] btmtk_gap_service_search_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_SERVICE_SEARCH_FILTER_REQ "[MBT][GAP] btmtk_gap_service_search_filter_request=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_SERVICE_SEARCH_FILTER_REQ_PARAM "[MBT][GAP] btmtk_gap_service_search_filter_request=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BTLOG_MBT_GAP_SERVICE_SEARCH_CANCEL_REQ "[MBT][GAP] btmtk_gap_service_search_cancel_request"
    BTLOG_MBT_GAP_DELETE_TRUST_REQ "[MBT][GAP] btmtk_gap_delete_trust_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_DELETE_TRUST_ALL_REQ "[MBT][GAP] btmtk_gap_delete_trust_all_request"
    BTLOG_MBT_GAP_SECURITY_USER_CONFIRM_RES "[MBT][GAP] btmtk_gap_security_user_confirm_response: bAccept=%d"
    BTLOG_MBT_GAP_BLOCK_LIST_ADD_REQ "[MBT][GAP] btmtk_gap_block_list_add_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_BLOCK_LIST_REMOVE_REQ "[MBT][GAP] btmtk_gap_block_list_remove_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_SET_INIT "[MBT][GAP] btmtk_gap_set_init: 0x%x"
    BTLOG_MBT_GAP_HANDLE_POWER_ON_CNF "[MBT][GAP] btmtk_gap_handle_power_on_cnf: result=%d"
    BTLOG_MBT_GAP_HANDLE_POWER_OFF_CNF "[MBT][GAP] btmtk_gap_handle_power_off_cnf: result=%d"
    BTLOG_MBT_GAP_ERR_MAX_REACHED "[MBT][GAP] err: Maximum number reached"
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_BLOCKED "[MBT][GAP] err: address has been blocked"
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_SEARCHED "[MBT][GAP] err: address has been searched"
    BTLOG_MBT_GAP_ERR_ADDR_MISMATCHED "[MBT][GAP] err: address mismatched"
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_COD_MISMATCHED "[MBT][GAP] err: CoD mismatched"
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_SVC "[MBT][GAP] EIR services: 0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_SVC_MISMATCHED "[MBT][GAP] err: service not found"
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_RSSI_MISMATCHED "[MBT][GAP] err: RSSI mismatched"
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_POST_EVENT "[MBT][GAP] %d entries in searched list"
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_CNF "[MBT][GAP] btmtk_gap_handle_discovery_cnf: result=%d, found=%d"
    BTLOG_MBT_GAP_HANDLE_GET_SCATTERNET_STATE_CNF "[MBT][GAP] btmtk_gap_handle_get_scatternet_state_cnf: return %d"
    BTLOG_MBT_GAP_HANDLE_GET_LINK_STATE_CNF "[MBT][GAP] btmtk_gap_handle_get_link_state_cnf: profile 0x%x return %d"
    BTLOG_MBT_GAP_HANDLE_WRITE_LOCAL_NAME_CNF "[MBT][GAP] btmtk_gap_handle_write_local_name_cnf: return %d"
    BTLOG_MBT_GAP_ERR_CANCELED "[MBT][GAP] err: operation already cancelled"
    BTLOG_MBT_GAP_HANDLE_WRITE_SCANENABLE_CNF "[MBT][GAP] btmtk_gap_handle_write_scanenable_mode_cnf: return %d"
    BTLOG_MBT_GAP_HANDLE_PIN_CODE_IND_IS_BOND "[MBT][GAP] during bonding=%d"
    BTLOG_MBT_GAP_HANDLE_PIN_CODE_IND_ERR_NOT_21 "[MBT][GAP] err: peer do not support v2.1, try v2.0 bonding"
    BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_STATE_MISMATCHED "[MBT][GAP] err: not bonding state"
    BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_ADDR_MISMATCHED "[MBT][GAP] err: not bonding addr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_RECEIVED "[MBT][GAP] err: error bonding response received"
    BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_CNF_UPDATE_BLIST "[MBT][GAP] btmtk_gap_handle_delete_trust_cnf: update block list"
    BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_CNF "[MBT][GAP] btmtk_gap_handle_delete_trust_cnf: return %d"
    BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_ALL_CNF "[MBT][GAP] btmtk_gap_handle_delete_trust_all_cnf: return %d"
    BTLOG_MBT_GAP_HANDLE_LINK_STATE_IND "[MBT][GAP] btmtk_gap_handle_link_state_ind: link no=%d->%d, addr=0x%x:0x%x:0x%x"
    BTLOG_MBT_GAP_HANDLE_BLOCK_LIST_UPDATE_CNF "[MBT][GAP] btmtk_gap_handle_block_list_update_cnf: add=%d, rem=%d"
    BTLOG_MBT_GAP_HANDLE_AUTHORIZE_REQ "[MBT][GAP] btmtk_gap_handle_authorize_req: MBTSvcID=0x%x, addr=%02x:%02x:%02x:%02x:%02x:%02x"
    BTLOG_MBT_GAP_HANDLE_INT_MESSAGE "[MBT][GAP] btmtk_gap_handle_int_message: op=%d"
    BTLOG_MBT_GAP_INT_DUMP_CNTX "[MBT][GAP] btmtk_gap_int_dump_cntx(): op[%d] = %d"
    BTLOG_MBT_GAP_INT_SET_CNTX "[MBT][GAP] btmtk_gap_int_set_cntx(%d)"
    BTLOG_MBT_GAP_INT_RESET_CNTX "[MBT][GAP] btmtk_gap_int_reset_cntx(%d)"
    BTLOG_MBT_GAP_POST_EVENT "[MBT][GAP] post event %d"
    BTLOG_MBT_GAP_LOG_STRING "[MBT][GAP] str[10] = %c%c%c%c%c%c%c%c%c%c"
    BTLOG_MBT_GAP_BUSY "[MBT][GAP] GAP busy, unable to start request %d"

    BT_HFG_WISE_API_ENABLE "[AG][API] btmtk_ag_enable"
    BT_HFG_WISE_API_DISABLE "[AG][API] btmtk_ag_disable"
    BT_HFG_WISE_API_CONNECT "[AG][API] btmtk_ag_connect(addr=0x%02X%02X%02X%02X%02X%02X, svc=0x%04X)"
    BT_HFG_WISE_API_DISCONNECT "[AG][API] btmtk_ag_disconnect(addr=0x%02X%02X%02X%02X%02X%02X, svc=0x%04X)"
    BT_HFG_WISE_API_AUDIO_CONNECT "[AG][API] btmtk_ag_audioconnect"
    BT_HFG_WISE_API_AUDIO_DISCONNECT "[AG][API] btmtk_ag_audiodisconnect"
    BT_HFG_WISE_API_GET_CON_STATUS "[AG][API] btmtk_ag_getconstatus ret=%d"
    BT_HFG_WISE_API_GET_AUDIO_CON_STATUS "[AG][API] btmtk_ag_getaudiostatus ret=%d"
    BT_HFG_WISE_API_SET_CONNECTABLE "[AG][API] btmtk_ag_setconnectable(%d)"
    BT_HFG_WISE_API_SET_AUDIO_PATH "[AG][API] btmtk_ag_setaudiopath(%d)"
    BT_HFG_WISE_API_SET_SPK_VOLUME "[AG][API] btmtk_ag_setspkvolume(%d)"
    BT_HFG_WISE_API_CALL_STATE_CHANGE "[AG][API] btmtk_ag_callstatechange(%d)"
    BT_HFG_WISE_API_SET_NETWORK_STATUS "[AG][API] btmtk_ag_setnetworkstatus(%d)"
    BT_HFG_WISE_API_SET_CALLER_ID "[AG][API] btmtk_ag_setcid(Len=%d)"
    BT_HFG_WISE_API_SET_SIGNAL_STRENGTH "[AG][API] btmtk_ag_setsignalstrength(%d)"
    BT_HFG_WISE_API_SET_ROAMING_STATUS "[AG][API] btmtk_ag_setroamingstatus(%d)"
    BT_HFG_WISE_API_SET_BATTERY_LEVEL "[AG][API] btmtk_ag_setbatterylevel(%d)"
    BT_HFG_WISE_API_SET_CALLHELD_STATUS "[AG][API] btmtk_ag_setcallheldstatus(%d)"
    BT_HFG_WISE_API_SET_OPERATOR_SELECTION "[AG][API] btmtk_ag_setoperatorselection(mode=%d)"
    BT_HFG_WISE_API_SET_EXTENDED_ERROR "[AG][API] btmtk_ag_setextendederror(%d)"
    BT_HFG_WISE_API_SET_SUBSCRIBER_NUMBER "[AG][API] btmtk_ag_setsubscribernumber(Len=%d, type=%d, svc=%d, final=%d)"
    BT_HFG_WISE_API_SET_CALL_WAITING "[AG][API] btmtk_ag_setcallwaiting(Len=%d)"
    BT_HFG_WISE_API_SEND_RESPONSE "[AG][API] btmtk_ag_sendresponse(%d)"
    BT_HFG_WISE_API_SET_CIND "[AG][API] btmtk_ag_setcind(net=%d, call=%d, callsetup=%d, signal=%d, roam=%d, batt=%d, callheld=%d)"
    BT_HFG_WISE_API_SET_CURRENT_CALL_LIST "[AG][API] btmtk_ag_setcurrentcalllist(index=%d, dir=%d, status=%d, mode=%d, mpty=%d, type=%d, Len=%d, final=%d)"
    BT_HFG_WISE_API_START_VR "[AG][API] btmtk_ag_startvr"
    BT_HFG_WISE_API_STOP_VR "[AG][API] btmtk_ag_stopvr"
    BT_HFG_WISE_API_RING_START "[AG][API] btmtk_ag_ringstart"
    BT_HFG_WISE_API_RING_STOP "[AG][API] btmtk_ag_ringstop"
    BT_HFG_WISE_API_SEND_SUPPORTED_PB_LIST "[AG][API] btmtk_ag_sendsupportedpblist(num=%d)"
    BT_HFG_WISE_API_SEND_SELECTED_PB_INFO "[AG][API] btmtk_ag_sendselectedpbinfo(result=%d, used=%d, total=%d)"
    BT_HFG_WISE_API_SEND_PB_SELECT_RESULT "[AG][API] btmtk_ag_sendpbselectresult(result=%d, err=%d)"
    BT_HFG_WISE_API_SEND_PB_ENTRIES_INFO "[AG][API] btmtk_ag_sendpbentriesinfo(result=%d, start=%d, end=%d, maxLenNum=%d, maxLenText=%d)"
    BT_HFG_WISE_API_SEND_PB_READ_RESULT "[AG][API] btmtk_ag_sendpbreadresult(result=%d, index=%d, number=%s, type=%d, text=%s, final=%d)"
    BT_HFG_WISE_API_SEND_PB_FIND_ENTRIES_INFO "[AG][API] btmtk_ag_sendpbfindentriesinfo(result=%d, maxLenNum=%d, maxLenText=%d)"
    BT_HFG_WISE_API_SEND_PB_FIND_RESULT "[AG][API] btmtk_ag_sendpbfindresult(result=%d, index=%d, number=%s, type=%d, text=%s, final=%d)"
    BT_HFG_WISE_API_SEND_PB_WRITE_INFO "[AG][API] btmtk_ag_sendpbwriteinfo(result=%d, indStart=%d, indEnd=%d, maxLenNum=%d, typeStart=%d, typeEnd=%d, maxLenText=%d)"
    BT_HFG_WISE_API_SEND_PB_WRITE_RESULT "[AG][API] btmtk_ag_sendpbwriteresult(result=%d)"
    BT_HFG_WISE_API_SET_CGM "[AG][API] btmtk_ag_setcgm(manufacture=%s, model=%s)"
    BT_HFG_WISE_API_SET_CSCS "[AG][API] btmtk_ag_setcscs"
    BT_HFG_WISE_API_SET_MULTI_FUNCTION_KEY "[AG][API] btmtk_ag_setmultifunckey(%d)"
    BT_HFG_WISE_API_SET_CALL_STATUS "[AG][API] btmtk_ag_setcallstatus(%d)"
    BT_HFG_WISE_API_SET_CALLSETUP "[AG][API] btmtk_ag_setcallsetup(%d)"
    BT_HFG_WISE_API_SEND_BTRH "[AG][API] btmtk_ag_sendbtrh(%d)"
    BT_HFG_WISE_API_SEND_CMS_ERR "[AG][API] btmtk_ag_sendcmserr(%d)"
    BT_HFG_WISE_API_SET_MSG_SVC_LIST "[AG][API] btmtk_ag_setmsgsvclist(svc=%d, currentFlag=%d, currSvc=%d)"
    BT_HFG_WISE_API_SET_MSG_STO_LIST "[AG][API] btmtk_ag_setmsgstoragelist"
    BT_HFG_WISE_API_SEND_MSG_STO_SELECT_RESULT "[AG][API] btmtk_ag_sendmsgstorageselectresult(num=%d)"
    BT_HFG_WISE_API_SEND_MSG_STO_INFO "[AG][API] btmtk_ag_sendmsgstorageinfo(num=%d)"
    BT_HFG_WISE_API_SET_CMGF "[AG][API] btmtk_ag_setcmgf(currMode=%d)"
    BT_HFG_WISE_API_SEND_SCA "[AG][API] btmtk_ag_sendsca(opt=0x%X, sca=%s, type=%d)"
    BT_HFG_WISE_API_SEND_TEXT_MODE_PARAM "[AG][API] btmtk_ag_sendtextmodeparam(opt=0x%X, fo=%d, pid=%d, dcs=%d, intVP=%d, tsVP=%s)"
    BT_HFG_WISE_API_SET_CSDH "[AG][API] btmtk_ag_setcsdh(currShow=%d)"
    BT_HFG_WISE_API_SET_MSG_SETTING_LIST "[AG][API] btmtk_ag_setmsgsettinglist(Setting=%s, currFlag=%d, mode=%d, mt=%d, bm=%d, ds=%d, bfr=%d)"
    BT_HFG_WISE_API_SEND_MSG_INDICATION "[AG][API] btmtk_ag_sendmsgindication(mem=%d, index=%d)"
    BT_HFG_WISE_API_SEND_MSG_STATUS_LIST "[AG][API] btmtk_ag_sendmsgstatuslist(num=%d)"
    BT_HFG_WISE_API_SEND_MSG_LIST "[AG][API] btmtk_ag_sendmsglist(NoMsgFlag=%d, SMType=%d, index=%d, status=%d, final=%d)"
    BT_HFG_WISE_API_SEND_MSG "[AG][API] btmtk_ag_sendmsg(SMType=%d, status=%d)"
    BT_HFG_WISE_API_SEND_MSG_RESULT "[AG][API] btmtk_ag_sendmsgresult(MsRef=%d)"
    BT_HFG_WISE_API_IS_HSAG_CONNECTED "[AG][API] btmtk_hsag_is_connected ret=%d"
    BT_HFG_WISE_API_IS_HFAG_CONNECTED "[AG][API] btmtk_hfag_is_connected ret=%d"
    BT_HFG_WISE_API_HSAG_AUTHORIZE_RES "[AG][API] btmtk_hsag_authorize_res(mode=%d)"
    BT_HFG_WISE_API_HFAG_AUTHORIZE_RES "[AG][API] btmtk_hfag_authorize_res(mode=%d)"
    BT_HFG_WISE_CBK "[AG][CBK] handle=0x%X, evt=0x%X"
    BT_HFG_WISE_EVT "[AG][EVT] evt=%d, conn_idx=%d"
    BT_HFG_WISE_INFO_HDL_ACTIVATE_CNF "[AG][HDL] Profile %d activate cnf : status=%d"
    BT_HFG_WISE_INFO_HDL_DEACTIVATE_CNF "[AG][HDL] Profile %d deactivate cnf"
    BT_HFG_WISE_INFO_HDL_CONNECT_CNF "[AG][HDL] Profile %d connect cnf : status=%d"
    BT_HFG_WISE_INFO_HDL_DISCONNECT_CNF "[AG][HDL] Profile %d disconnect cnf"
    BT_HFG_WISE_INFO_HDL_ACCEPT_CNF "[AG][HDL] Profile %d accept cnf : status=%d"
    BT_HFG_WISE_INFO_HDL_REJECT_CNF "[AG][HDL] Profile %d reject cnf"
    BT_HFG_WISE_INFO_HDL_SCO_CONNECT_CNF "[AG][HDL] Profile %d sco connect cnf : status=%d"
    BT_HFG_WISE_INFO_HDL_SCO_DISCONNECT_CNF "[AG][HDL] Profile %d sco disconnect cnf"
    BT_HFG_WISE_INFO_HDL_CONNECTED_IND "[AG][HDL] Profile %d connected ind"
    BT_HFG_WISE_INFO_HDL_DISCONNECTED_IND "[AG][HDL] Profile %d disconnected ind"
    BT_HFG_WISE_INFO_HDL_AUDIO_CONNECTED_IND "[AG][HDL] Profile %d audio connected ind : status=%d"
    BT_HFG_WISE_INFO_HDL_AUDIO_DISCONNECTED_IND "[AG][HDL] Profile %d audio disconnected ind"
    BT_HFG_WISE_INFO_HDL_AUTH_IND "[AG][HDL] Profile %d auth ind : addr=0x%02X%02X%02X%02X%02X%02X"
    BT_HFG_WISE_INFO_HDL_READ_INDICATOR_IND "[AG][HDL] read indicator ind : svc=%d, call=%d, callsetup=%d, callheld=%d, batt=%d, signal=%d, roaming=%d"
    BT_HFG_WISE_INFO_HDL_HF_FEATURE_IND "[AG][HDL] Remote featur=0x%X"
    BT_HFG_WISE_INFO_HDL_AUTO_REJECT "[AG][HDL] Auto reject profile %d connection request"
    BT_HFG_WISE_INFO_SUPPORTED_PB_LIST "[AG][INFO] Supported PB list=0x%X"
    BT_HFG_WISE_INFO_MSG_STO_SELECT_RESULT "[AG][INFO] mem%d : used=%d, total=%d"
    BT_HFG_WISE_INFO_MSG_STO_INFO "[AG][INFO] mem%d : used=%d, total=%d"
    BT_HFG_WISE_INFO_MSG_STATUS_LIST "[AG][INFO] status list=%s"
    BT_HFG_WISE_INFO_PROFILE_STATE_CHANGE "[AG][INFO] profile %d : old state=%d, new state=%d"
    BT_HFG_WISE_INFO_SET_ACTIVE_PROFILE "[AG][INFO] active : profile=%d, context=0x%X"
    BT_HFG_WISE_INFO_RING_TIMER_START "[AG][INFO] Ring timer started"
    BT_HFG_WISE_INFO_RING_TIMER_STOP "[AG][INFO] Ring timer stopped"
    BT_HFG_WISE_INFO_RING_TIMER_TRIGGERED "[AG][INFO] Ring timer triggered"
    BT_HFG_WISE_INFO_INVALID_RING_TIMER "[AG][INFO] Invalid ring timer"
    BT_HFG_WISE_INFO_RING_TIMER_INVALID_INDEX "[AG][INFO] Ring timer indexc invalid : %d"
    BT_HFG_WISE_WARN_ALREADY_ENABLED "[AG][WARN] AG is already enabled"
    BT_HFG_WISE_WARN_ALREADY_DISABLED "[AG][WARN] AG is already disabled"
    BT_HFG_WISE_WARN_NOT_IN_ACTIVATED "[AG][WARN] Profile %d is not in activated state : state=%d"
    BT_HFG_WISE_WARN_NOT_CONNECTED "[AG][WARN] Profile %d is not connected : state=%d"
    BT_HFG_WISE_WARN_NO_AUDIO_CONNECTION "[AG][WARN] Profile %d has no audio connection : state=%d"
    BT_HFG_WISE_ERR_ACTIVATE_FAIL "[AG][ERR] profile=%d activate failed"
    BT_HFG_WISE_ERR_UNEXPECTED_STATE "[AG][ERR] Unexpected state : profile=%d, state=%d"
    BT_HFG_WISE_ERR_UNEXPECTED_AG_STATE "[AG][ERR] Unexpected AG state : state=%d, expected=%d"
    BT_HFG_WISE_ERR_CONFIRM_FAIL "[AG][ERR] Confirm failed : evt=%d, status=%d"
    BT_HFG_WISE_ERR_NO_CONNECTION "[AG][ERR] No connection"
    BT_HFG_WISE_ERR_ALLOC_MEM_FAIL "[AG][ERR] Allocate memory failed"

    BT_OPP_WISE_API_SERVER_ENABLE "[MBT][API] btmtk_opp_server_enable "
    BT_OPP_WISE_API_SERVER_DISABLE "[MBT][API] btmtk_opp_server_disable "
    BT_OPP_WISE_API_SERVER_DISCONNECT "[MBT][API] btmtk_opp_server_disconnect "
    BT_OPP_WISE_API_SERVER_ACCESS_RESPONSE "[MBT][API] btmtk_opp_server_access_response rspcoe:(%d)"
    BT_OPP_WISE_API_SERVER_CB "[MBT][CB] bt_opps_ui_cb u4OPPUIEvent:(%d) ucdata:(%d) mbterr:(%d)"
    BT_OPP_WISE_INFO_SERVER_ENABLE "[MBT][CB] btmtk_opp_server_enable ok:(%d)"
    BT_OPP_WISE_INFO_SERVER_DISABLE "[MBT][CB] btmtk_opp_server_disable ok:(%d)"
    BT_OPP_WISE_INFO_SERVER_AUTHORIZE_REQ "[MBT][API] btmtk_opp_server_authorize_request"
    BT_OPP_WISE_INFO_SERVER_PUSH_ACCESS "[MBT][API] btmtk_opp_server_push_access_request format:(%d)"
    BT_OPP_WISE_INFO_SERVER_PULL_ACCESS "[MBT][API] btmtk_opp_server_pull_access_request format:(%d)"
    BT_OPP_WISE_INFO_SERVER_PUSH_FINISH "[MBT][CB] btmtk_opp_server_push_finish() ok:(%d) reason:(%d)"
    BT_OPP_WISE_INFO_SERVER_PUSH_START "[MBT][CB] btmtk_opp_server_push_start() ok:(%d) reason:(%d)"
    BT_OPP_WISE_CHK_SERVER_STATE "[MBT] check opp server state:(%d)"
    BT_OPP_WISE_CHK_CLIENT_STATE "[MBT] check opp server state:(%d)"
    BT_OPP_WISE_API_OPP_IS_CONNECTED "[MBT][API] btmtk_opp_is_connected l_ret:%d"
    BT_OPP_WISE_API_OPP_IS_DEV_CONNECTED "[MBT][API] btmtk_opp_is_dev_connected l_ret:%d"
    BT_OPP_WISE_API_CLIENT_ENABLE "[MBT][API] btmtk_opp_client_enable"
    BT_OPP_WISE_API_CLIENT_DISABLE "[MBT][API] btmtk_opp_client_disable"
    BT_OPP_WISE_API_CLIENT_PUSHOBJECT "[MBT][API] btmtk_opp_client_pushobject type:(%d)"
    BT_OPP_WISE_API_CLIENT_PULLOBJECT "[MBT][API] btmtk_opp_client_pullobject type:(%d)"
    BT_OPP_WISE_API_CLIENT_EXCHOBJECT "[MBT][API] btmtk_opp_client_exchobject pushtype:(%d) pulltype:(%d)"
    BT_OPP_WISE_API_CLIENT_DISCONNECT "[MBT][API] btmtk_opp_client_disconnect"
    BT_OPP_WISE_API_POST_EVENT "[MBT][CB] post event:(%d) idx:(%d)"
    BT_OPP_WISE_API_SDC_STATUS "[MBT][CB] sdcOppStatus oper:%d state:%d reason:%d "
    BT_OPP_WISE_API_CLIENT_CB "[MBT][CB] bt_oppc_ui_cb u4OPPUIEvent:(%d) ucdata:(%d) mbterr:(%d)"
    BT_OPP_WISE_API_SERVER_AUTHORIZE_RES "[MBT][API] btmtk_opp_authorize_res authMode:(%d)"
    BT_OPP_WISE_ERR_CLIENT_DISCONNECT "[MBT][WRN] btmtk_opp_disconnect fail!"
    BT_OPP_WISE_ERR_CLIENT_EXCHOBJECT "[MBT][WRN] btmtk_opp_client_exchobject fail!"
    BT_OPP_WISE_ERR_CLIENT_PULLOBJECT "[MBT][WRN] btmtk_opp_client_pullobject fail!"
    BT_OPP_WISE_ERR_CLIENT_PUSHOBJECT "[MBT][WRN] btmtk_opp_client_pushobject fail!"
    BT_OPP_WISE_INFO_CLIENT_PUSH_START "[MBT][CB] btmtk_opp_client_push_start ok:(%d) reason:(%d) total:(%d)"
    BT_OPP_WISE_INFO_CLIENT_PUSH_CONTINUE "[MBT][CB] btmtk_opp_client_push_conti ok:(%d) reason:(%d) total:(%d)"
    BT_OPP_WISE_INFO_CLIENT_PUSH_FINISH "[MBT][CB] btmtk_opp_client_push_finish ok:(%d)"
    BT_OPP_WISE_INFO_CLIENT_PULL_START "[MBT][CB] btmtk_opp_client_pull_start ok:(%d) "
    BT_OPP_WISE_INFO_CLIENT_PULL_CONTINUE "[MBT][CB] btmtk_opp_client_pull_continue ok:(%d) size:(%d) total:(%d)"
    BT_OPP_WISE_INFO_CLIENT_PULL_FINISH "[MBT][CB] btmtk_opp_client_pull_finish ok:(%d) reason:(%d)"
    BT_OPP_WISE_INFO_CLIENT_EXCH_PUSH_CONTINUE "[MBT][CB] btmtk_opp_client_exchange_push_continue ok:(%d) size:(%d)"
    BT_OPP_WISE_INFO_CLIENT_EXCH_PUSH_FINISH "[MBT][CB] ok:(%d) size:(%d) reason:(%d)"
    BT_OPP_WISE_INFO_CLIENT_EXCH_PULL_CONTINUE "[MBT][CB] btmtk_opp_client_exchange_pull_continue ok:(%d) size:(%d) reason:(%d)"
    BT_OPP_WISE_INFO_CLIENT_EXCH_PULL_FINISH "[MBT][CB] btmtk_opp_client_exchange_pull_finish ok:(%d) reason:(%d)"
    BT_OPP_WISE_INFO_CLIENT_EXCH_START "[MBT][CB] btmtk_opp_client_exchange_start ok:(%d)"
    BT_OPP_WISE_INFO_CLIENT_EXCH_FINISH "[MBT][CB] btmtk_opp_client_exchange_finish"
    BT_OPP_WISE_INFO_CLIENT_ENABLE "[MBT][CB] btmtk_opp_client_enable_result ok:(%d)"
    BT_OPP_WISE_INFO_CLIENT_DISABLE "[MBT][CB] btmtk_opp_client_enable_result ok:(%d)"
    BT_OPP_WISE_INFO_CLIENT_ABORT_RESULT "[MBT][CB] btmtk_opp_client_abort_result"
    BT_OPP_WISE_INFO_CLIENT_DISCONNECT_RESULT "[MBT][CB] cbtmtk_opp_lient_disconnect_result"

    BT_SPP_MBT_ENABLE "[BT_SPP_MBT] btmtk_spp_mbt_enable()"
    BT_SPP_MBT_DISABLE "[BT_SPP_MBT] btmtk_spp_mbt_disable()"
    BT_SPP_MBT_CONNECT "[BT_SPP_MBT] btmtk_spp_mbt_connect()"
    BT_SPP_MBT_DISCONNECT "[BT_SPP_MBT] btmtk_spp_mbt_disconnect(), port=%d"
    BT_SPP_MBT_LISTEN "[BT_SPP_MBT] btmtk_spp_mbt_listen(), UUID=%x"
    BT_SPP_MBT_LISTENSTOP "[BT_SPP_MBT] btmtk_spp_mbt_listenstop(), port=%d"
    BT_SPP_MBT_SENDDATA "[BT_SPP_MBT] btmtk_spp_mbt_senddata(), port=%d, length=%d"
    BT_SPP_MBT_ISCONNECTED "[BT_SPP_MBT] btmtk_spp_is_connected()"
    BT_SPP_MBT_ISDEVCONNECTED "[BT_SPP_MBT] btmtk_spp_is_dev_connected()"
    BT_SPP_MBT_AUTHORIZE_RES "[BT_SPP_MBT] btmtk_spp_authorize_res(), result=%d"
    BT_SPP_MBT_CB_ENABLE_CNF "[BT_SPP_MBT] btmtk_spp_mbt_cb_enable_cnf()"
    BT_SPP_MBT_CB_DISABLE_CNF "[BT_SPP_MBT] btmtk_spp_mbt_cb_disable_cnf()"
    BT_SPP_MBT_CB_LISTEN_CNF "[BT_SPP_MBT] btmtk_spp_mbt_cb_listen_cnf()"
    BT_SPP_MBT_CB_LISTEN_STOP_CNF "[BT_SPP_MBT] btmtk_spp_mbt_cb_listen_stop_cnf()"
    BT_SPP_MBT_CB_CONNECT_CNF "[BT_SPP_MBT] btmtk_spp_mbt_cb_connect_cnf()"
    BT_SPP_MBT_CB_DISCONNECT_CNF "[BT_SPP_MBT] btmtk_spp_mbt_cb_disconnect_cnf()"
    BT_SPP_MBT_CB_SEND_DATA_CNF "[BT_SPP_MBT] btmtk_spp_mbt_cb_send_data_cnf()"
    BT_SPP_MBT_CB_RECEIVE_DATA_IND "[BT_SPP_MBT] btmtk_spp_mbt_cb_receive_data_ind()"
    BT_SPP_MBT_CB_CONNECT_IND_REQ "[BT_SPP_MBT] btmtk_spp_mbt_cb_connect_ind_req()"
    BT_SPP_MBT_CB_CONNECT_IND "[BT_SPP_MBT] btmtk_spp_mbt_cb_connect_ind()"
    BT_SPP_MBT_CB_DISCONNECT_IND "[BT_SPP_MBT] btmtk_spp_mbt_cb_disconnect_ind()"

    BT_SIMAP_MBT_ENABLE "[BT_SIMAP_MBT] btmtk_simap_mbt_enable()"
    BT_SIMAP_MBT_DISABLE "[BT_SIMAP_MBT] btmtk_simap_mbt_disable()"
    BT_SIMAP_MBT_SERVER_CONNECT_RESPONSE "[BT_SIMAP_MBT] btmtk_simap_server_connect_response(), result=%d"
    BT_SIMAP_MBT_DISCONNECT "[BT_SIMAP_MBT] btmtk_simap_mbt_disconnet(), disconnect type=%d"
    BT_SIMAP_MBT_IS_CONNECTED "[BT_SIMAP_MBT] btmtk_simap_is_connected()"
    BT_SIMAP_MBT_ISDEV_CONNECTED "[BT_SIMAP_MBT] btmtk_simap_is_dev_connected()"
    BT_SIMAP_MBT_AUTHORIZE_RES "[BT_SIMAP_MBT] btmtk_simap_authorize_res(), result=%d"
    BT_SIMAP_MBT_DEINIT "[BT_SIMAP_MBT] btmtk_simap_deinit()"
    BT_SIMAP_MBT_CB_ENABLE_CNF "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_enable_cnf()"
    BT_SIMAP_MBT_CB_DISABLE_CNF "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_disable_cnf()"
    BT_SIMAP_MBT_CB_AUTH_REQ "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_auth_req()"
    BT_SIMAP_MBT_CB_CONNECT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_connect_ind()"
    BT_SIMAP_MBT_CB_DISCONNECT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_disconnect_ind()"
    BT_SIMAP_MBT_CB_DISCONNECT_CNF "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_disconnect_cnf()"
    BT_SIMAP_MBT_CB_ATR_RSP_SENT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_atr_rsp_sent_ind()"
    BT_SIMAP_MBT_CB_APDU_RSP_SENT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_apdu_rsp_sent_ind()"
    BT_SIMAP_MBT_CB_SIM_ON_RSP_SENT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_on_rsp_sent_ind()"
    BT_SIMAP_MBT_CB_SIM_OFF_RSP_SENT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_off_rsp_sent_ind()"
    BT_SIMAP_MBT_CB_SIM_RESET_RSP_SENT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_reset_rsp_sent_ind()"
    BT_SIMAP_MBT_CB_CARD_STATUS_IND_SENT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_card_status_ind_sent_ind()"
    BT_SIMAP_MBT_CB_CARD_READER_STATUS_RSP_SENT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_card_reader_status_rsp_sent_ind()"
    BT_SIMAP_MBT_CB_SET_TRANSPORT_PROTOCOL_RSP_SENT_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_set_transport_protocol_rsp_sent_ind()"
    BT_SIMAP_MBT_CB_AUTH_REQ_TIMEOUT_RFCLOSE_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_auth_req_timeout_rfclose_ind()"
    BT_SIMAP_MBT_CB_SIM_CONNECT_FAILED_IND "[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_connect_failed_ind()"


    BT_PBAP_MBT_REGISTER_REQ "[BT_PBAP_MBT] btmtk_pbap_send_active_req()"
    BT_PBAP_MBT_DEREGISTER_REQ "[BT_PBAP_MBT] btmtk_pbap_send_deactive_req()"
    BT_PBAP_MBT_DISCONNECT_REQ "[BT_PBAP_MBT] btmtk_pbap_send_disconnect_req()"
    BT_PBAP_MBT_AUTHORIZE_RSP "[BT_PBAP_MBT] btmtk_pbap_send_authorize_rsp()"
    BT_PBAP_MBT_CLIENT_CONNECT_RSP "[BT_PBAP_MBT] btmtk_pbap_send_connect_rsp()"
    BT_PBAP_MBT_CLIENT_AUTH_CHALLENGE_RSP "[BT_PBAP_MBT] btmtk_pbap_send_obex_auth_challege_rsp()"
    BT_PBAP_MBT_SET_PATH_RSP "[BT_PBAP_MBT] btmtk_pbap_send_set_path_rsp()"
    BT_PBAP_MBT_READ_ENTRY_RSP "[BT_PBAP_MBT] btmtk_pbap_send_read_entry_rsp()"
    BT_PBAP_MBT_READ_FOLDER_RSP "[BT_PBAP_MBT] btmtk_pbap_send_read_folder_rsp()"
    BT_PBAP_MBT_READ_LIST_RSP "[BT_PBAP_MBT] btmtk_pbap_send_read_list_rsp()"
    BT_PBAP_MBT_EXT_HANDLE_MESSAGE "[BT_PBAP_MBT] pbap_external_adp_handle_message: message id = (%d)"
    BT_PBAP_MBT_INT_HANDLE_MESSAGE "[BT_PBAP_MBT] pbap_internal_adp_handle_message: message id = (%d)"
    BT_PBAP_MBT_POST_EVENT "[BT_PBAP_MBT]pbap_post_event: event id = (%d)"
    BT_PBAP_MBT_STATA_ERR "[BT_PBAP_MBT]pbap external adp recieve message at a error state"
    BT_PBAP_MBT_SET_STATE "[BT_PBAP_MBT]set state to (%d)"
    BT_PBAP_MBT_RSP_WITH_FAIL "[BT_PBAP_MBT]Sent Response to internal ADP wit h fail result"
    BT_PBAP_MBT_WISE_ENABLE "[BT_PBAP_MBT]btmtk_pbap_wise_server_enable"
    BT_PBAP_MBT_WISE_DISABLE "[BT_PBAP_MBT]btmtk_pbap_wise_server_disable"
    BT_PBAP_MBT_WISE_AUTHENTICATE "[BT_PBAP_MBT]btmtk_pbap_wise_server_authenticate"
    BT_PBAP_MBT_WISE_CLOSE "[BT_PBAP_MBT]btmtk_pbap_wise_server_close"
    BT_PBAP_MBT_WISE_WRITEDATA "[BT_PBAP_MBT]btmtk_pbap_wise_server_writedata"
    BT_PBAP_MBT_GAP_AUTH_RES "[BT_PBAP_MBT]btmtk_pbap_authorize_res"
    BT_PBAP_MBT_FILE_PATH "[BT_PBAP_MBT]SDC vcardout filepath:(%s)"
    BT_PBAP_MBT_FILE_PATH_LEN "[BT_PBAP_MBT]SDC vcardout filepath len:(%d)"


    BTLOG_MBT_MAP_LOG_STRING "[MBT][MAP] string log =%c%c%c%c%c%c%c%c%c%c"
    BTLOG_MBT_MAP_SERVER_ENABLE "[MBT][MAP] btmtk_map_server_enable"
    BTLOG_MBT_MAP_SERVER_DISABLE "[MBT][MAP] btmtk_map_server_disable"
    BTLOG_MBT_MAP_SERVER_REGISTER "[MBT][MAP] btmtk_map_server_register(instId=%d, msgType=%d)"
    BTLOG_MBT_MAP_SERVER_DEREGISTER "[MBT][MAP] btmtk_map_server_deregister(instId=%d)"
    BTLOG_MBT_MAPS_AUTHORIZE_RES "[MBT][MAP] btmtk_maps_authorize_res(%d)"
    BTLOG_MBT_MAPS_ACCESS_RESPONSE "[MBT][MAP] btmtk_map_server_access_response(addr=%02X:%02X:%02X:%02X:%02X:%02X, inst=%d, oper=%d, reply=%d)"
    BTLOG_MBT_MAP_SERVER_SEND_EVENT "[MBT][MAP] btmtk_map_server_send_event(inst=%d, notif=%d, handle=0x%x, msgType=0x%x)"
    BTLOG_MBT_MAP_SERVER_MNS_DISCONNECT "[MBT][MAP] btmtk_map_server_mns_disconnect(addr=%02X:%02X:%02X:%02X:%02X:%02X)"
    BTLOG_MBT_MAP_SERVER_MAS_DISCONNECT "[MBT][MAP] btmtk_map_server_mas_disconnect(addr=%02X:%02X:%02X:%02X:%02X:%02X, inst=%d)"
    BTLOG_MBT_MAP_SERVER_DISCONNECT "[MBT][MAP] btmtk_map_server_disconnect(inst=%d)"
    BTLOG_MBT_MAP_INT_DUMP_CNTX "[MBT][MAP] btmtk_map_int_dump_cntx(): op[%d] = %d"
    BTLOG_MBT_MAP_INT_SET_CNTX "[MBT][MAP] btmtk_map_int_set_cntx(%d)"
    BTLOG_MBT_MAP_INT_RESET_CNTX "[MBT][MAP] btmtk_map_int_reset_cntx(%d)"
    BTLOG_MBT_MAP_INT_RESET_CLIENT_CNTX "[MBT][MAP] btmtk_map_int_reset_client_cntx(%d)"
    BTLOG_MBT_MAP_HANDLE_INT_MESSAGE "[MBT][MAP] btmtk_map_handle_int_message: op=%d"
    BTLOG_MBT_MAP_POST_EVENT "[MBT][MAP] post event %d (index=%d)"
    BTLOG_MBT_MAP_INT_SERVER_DISABLE "[MBT][MAP] btmtk_map_int_server_disable: state=%d"
    BTLOG_MBT_MAP_INT_SERVER_REGISTER_DUPLICATE "[MBT][MAP] btmtk_map_int_server_register: Already registered"
    BTLOG_MBT_MAP_INT_SERVER_REGISTER_CONFLICT "[MBT][MAP] btmtk_map_int_server_register: Conlict with registered server"
    BTLOG_MBT_MAP_INT_SERVER_DEREGISTER_DUPLICATE "[MBT][MAP] btmtk_map_int_server_deregister: Same request already in progressing"
    BTLOG_MBT_MAP_INT_DISCONNECT_IN_PROGRESS "[MBT][MAP] btmtk_maps_int_disconnect: already in progress"
    BTLOG_MBT_MAP_WRITE_XML_ERROR "[MBT][MAP] Create XML failed (storageType=%d)"
    BTLOG_MBT_MAP_WRITE_FILE_ERROR "[MBT][MAP] Buffer to file failed (storageType=%d)"
    BTLOG_MBT_MAP_WRITE_VCARD_ERROR "[MBT][MAP] Create vCard failed (storageType=%d)"
    BTLOG_MBT_MAP_PARSE_VCARD_ERROR "[MBT][MAP] Parse vCard failed (storageType=%d)"
    BTLOG_MBT_MAP_PARSE_VCARD_WRONG_STORAGE "[MBT][MAP] Parse vCard wrong storageType=%d"
    BTLOG_MBT_MAP_HANDLE_ACTIVATE_CNF "[MBT][MAP] btmtk_maps_handle_activate_cnf: result=%d"
    BTLOG_MBT_MAP_HANDLE_DEACTIVATE_CNF "[MBT][MAP] btmtk_maps_handle_deactivate_cnf: result=%d"
    BTLOG_MBT_MAP_HANDLE_REGISTER_CNF "[MBT][MAP] btmtk_maps_handle_register_cnf: result=%d, MAS instance=%d"
    BTLOG_MBT_MAP_HANDLE_DEREGISTER_CNF "[MBT][MAP] btmtk_maps_handle_deregister_cnf: result=%d, MAS instance=%d"
    BTLOG_MBT_MAP_HANDLE_AUTHORIZE_IND "[MBT][MAP] btmtk_maps_handle_authorize_ind: %02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_HANDLE_CONNECT_IND "[MBT][MAP] btmtk_maps_handle_connect_ind: conn=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, MAS instance=%d"
    BTLOG_MBT_MAP_HANDLE_SET_FOLDER_IND "[MBT][MAP] btmtk_maps_handle_set_folder_ind: conn=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, flag=%d"
    BTLOG_MBT_MAP_CONNECTION_NOT_FOUND "[MBT][MAP] SDC entry not found"
    BTLOG_MBT_MAP_FOLDER_NOT_FOUND "[MBT][MAP] Folder not found"
    BTLOG_MBT_MAP_HANDLE_GET_FOLDER_LIST_IND "[MBT][MAP] btmtk_maps_handle_get_folder_listing_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, offset=%d, size=%d"
    BTLOG_MBT_MAP_HANDLE_GET_MSG_LIST_IND "[MBT][MAP] btmtk_maps_handle_get_message_listing_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, offset=%d, size=%d"
    BTLOG_MBT_MAP_HANDLE_GET_MSG_IND "[MBT][MAP] btmtk_maps_handle_get_message_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, fraction=%d"
    BTLOG_MBT_MAP_HANDLE_PUSH_MSG_IND "[MBT][MAP] btmtk_maps_handle_push_message_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_HANDLE_SET_NOTIF_IND "[MBT][MAP] btmtk_maps_handle_set_notif_registration_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, enable=%d"
    BTLOG_MBT_MAP_HANDLE_SET_MSG_STATUS_IND "[MBT][MAP] btmtk_maps_handle_set_message_status_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, status=%d"
    BTLOG_MBT_MAP_HANDLE_UPDATE_INBOX_IND "[MBT][MAP] btmtk_maps_handle_update_inbox_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_HANDLE_MNS_CONNECT_CNF "[MBT][MAP] btmtk_maps_handle_mns_connect_cnf: result=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_HANDLE_MNS_SEND_EVENT_CNF "[MBT][MAP] btmtk_maps_handle_mns_send_event_cnf: result=%d, MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_HANDLE_MNS_DISCONNECT_IND "[MBT][MAP] btmtk_maps_handle_mns_disconnect_ind: addr=%02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_HANDLE_MNS_DISCONNECT_CNF "[MBT][MAP] btmtk_maps_handle_mns_disconnect_cnf: result=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_HANDLE_ABORT_CNF "[MBT][MAP] btmtk_maps_handle_abort_cnf: result=%d, MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_HANDLE_DISCONNECT_CNF "[MBT][MAP] btmtk_maps_handle_disconnect_cnf: result=%d, MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_HANDLE_DISCONNECT_IND "[MBT][MAP] btmtk_maps_handle_disconnect_cnf: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X"
    BTLOG_MBT_MAP_WRITE_LIST "[MBT][MAP] Write folder/message list: start entry=%d, writing num=%d"

BT_MBT_TRACE_END "BT_MBT_TRACE_END"



BT_BLE_TRACE_START "BT_BLE_TRACE_START"
    BT_LE_ADFLAG "bdc->adFlag=0x%x, bdc->devType=%d"
    BT_LE_CURRENT_INQUIRY_TYPE "current inquiry type=0x%x"

    BT_MEIF_ME_LE_INQUIRY "ME_LE_Inquiry(): stackState=%d"
    BT_MEIF_ME_LE_CANCELINQUIRY "ME_LE_CancelInquiry(): stackState=%d"
    BT_MEIF_ME_LE_GETREMOTEDEVICENAME "ME_LE_GetRemoteDeviceName(): stackState=%d, tokenID=%d"
    BT_MEIF_ME_LE_GETREMOTEDEVICENAME1 "cb=0x%x, isOnOpList=%d, isOnCmdList=%d"
    BT_MEIF_ME_LE_CREATELINK "ME_LE_CreateLink(): stackState=%d, privacy=%d"
    BT_MEIF_ME_LE_CREATELINK1 "ME_LE_CreateLink(): remDev->state=0x%x"
    BT_DEVICE_NOT_FOUND "device not found, %d"
    BT_MEIF_ME_LE_DISCLINK "ME_LE_DiscLink(): stackState=%d, reason=0x%x"
    BT_MEIF_ME_LE_ENCRYPTLINK "ME_LE_EncryptLink(): stackState=%d, state=0x%x, authState=0x%x, encryptState=0x%x"
    BT_MEIF_ME_LE_ENCRYPTLINK_RESTART "ME_LE_EncryptLink(): restart"
    BT_MEIF_ME_LE_SIGNDATA "ME_LE_SignData(): stackState=%d"
    BT_MEIF_ME_LE_SIGNDATA1 "signCounter=%d"
    BT_MEIF_ME_LE_VERIFYSIGNDATA "ME_LE_VerifySignedData(): stackState=%d"

    BT_MELE_LEALLOCHCITOKEN "LeAllocHciToken(): cmd=0x%x"
    BT_MELE_LEUTILCOMPOSEADVERTISEDATA "leUtilComposeAdvertiseData(): EirFlag=0x%x, nameLen=%d"
    BT_MELE_LEHCISETEVENTMASK "LeHciSetEventMask(): 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BT_MELE_LEHCIREADBUFFERSIZE "LeHciReadBufferSize()"
    BT_MELE_LEHCIREADLOCALFEATURES "LeHciReadLocalFeatures()"
    BT_MELE_LEHCISETRANDOMADDRESS "LeHciSetRandomAddress(): addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BT_MELE_LEHCISETADVERTISEPARM "LeHciSetAdvertiseParm(): INTmin=0x%x, INTmax=0x%x, adv==0x%x, OaddrType=%d, DaddrType=%d, map=0x%x, filter=0x%x"
    BT_MELE_LEHCIREADADVERTISETXPOWER "LeHciReadAdvertiseTxPower()"
    BT_MELE_LEHCISETADVERTISEDATA "LeHciSetAdvertiseData(): dataLen=%d"
    BT_MELE_LEHCISETSCANRSPDATA "LeHciSetScanRspData(): dataLen=%d"
    BT_MELE_LEHCISETADVERTISEENABLE "LeHciSetAdvertiseEnable(): enable=%d"
    BT_MELE_LEHCISETSCANPARM "LeHciSetScanParm(): type=0x%x, interval=0x%x, window=0x%x, OaddrType=0x%x, filter=0x%x"
    BT_MELE_LEHCISETSCANENABLE "LeHciSetScanEnable(): enable=%d, filterDup=%d"
    BT_MELE_LEHCICREATECONNECTION "LeHciCreateConnection(): INT=0x%x, WIN=0x%x, filter=0x%x, PaddrType=0x%x, OaddrType=0x%x"
    BT_MELE_LEHCICREATECONNECTION2 "INTmin=0x%x, INTmax=0x%x, latency=0x%x, SupTO=0x%x, CEMin=0x%x, CEMax=0x%x"
    BT_MELE_LEHCICREATECONNECTIONCANCEL "LeHciCreateConnectionCancel()"
    BT_MELE_LEHCIREADWHITELISTSIZE "LeHciReadWhiteListSize()"
    BT_MELE_LEHCICLEARWHITELIST "LeHciClearWhiteList()"
    BT_MELE_LEHCIADDTOWHITELIST "LeHciAddToWhiteList(): addrType=0x%x, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BT_MELE_LEHCIREMOVEFROMWHITELIST "LeHciRemoveFromWhiteList(): addrType=0x%x, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BT_MELE_LEHCIUPDATECONNECTION "LeHciUpdateConnection(): handle=0x%x, INTmin=0x%x, INTmax=0x%x, latency=0x%x, sTimeout=0x%x, ceMin=0x%x, ceMax=0x%x"
    BT_MELE_LEHCISETCHANNELMAP "LeHciSetChannelMap(): map=0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BT_MELE_LEHCIREADCHANNELMAP "LeHciReadChannelMap(): handle=0x%x"
    BT_MELE_LEHCIREADREMOTEFEATURES "LeHciReadRemoteFeatures(): handle=0x%x"
    BT_MELE_LEHCIAES128ENCRYPT "LeHciAES128Encrypt(): cb=0x%x"
    BT_MELE_LEHCIRAND "LeHciRand(): cb=0x%x"
    BT_MELE_LEHCISTARTENCRYPTION "LeHciStartEncryption(): handle=0x%x, random=0x%x, ediv=0x%x"
    BT_MELE_LEHCILTKREQUESTREPLY "LeHciLTKRequestReply(): handle=0x%x"
    BT_MELE_LEHCILTKREQUESTNEGREPLY "LeHciLTKRequestNegReply(): handle=0x%x"
    BT_MELE_LEHCIREADSUPPORTEDSTATES "LeHciReadSupportedStates()"
    BT_MELE_LEHANDLEOP "LeHandleOp(): event=0x%x, cmd=0x%x, parmLen=%d"
    BT_MELE_LEHANDLEOP2 "errCode=0x%x"
    BT_MELE_HANDLELEADVERTISEREPORT "HandleLeAdvertiseReport(): len=%d, reportNo=%d"
    BT_MELE_HANDLELEADVERTISEREPORT1 "advType=0x%x, size=%d"
    BT_MELE_HANDLELEADVERTISEREPORT2 "addrType=0x%x, rssi=%d"
    BT_MELE_HANDLELECONNECTCOMPLETE "HandleLeConnectComplete(): status=0x%x, handle=0x%x 0x%x, role=%d, pAddrType=%d"
    BT_MELE_HANDLELECONNECTCOMPLETE2 "handle=0x%x, role(m0s1)=%d, superTO=0x%x"
    BT_MELE_HANDLELEREADREMOTEFEATURE "HandleLeReadRemoteFeature(): status=0x%x, handle=0x%x"
    BT_MELE_HANDLELELTKREQUEST "HandleLeLTKRequest(): handle=0x%x"
    BT_MELE_HANDLELELTKREQUEST1 "authState=0x%x"
    BT_MELE_LEHANDLEEVENTS "LeHandleEvents(): subevent=0x%x"
    BT_MELE_LEHANDLECONNECTTIMEOUT "LeHandleConnectTimeout()"
    BT_MELE_LEHCIRECEIVERTEST "LeHciReceiverTest(): rxFreq=0x%x"
    BT_MELE_LEHCITRANSMITTERTEST "LeHciTransmitterTest(): txFreq=0x%x, len=0x%x, payload=0x%x"
    BT_MELE_LEHCITESTEND "LeHciTestEnd()"

    BT_SM_SM_INIT "SM_Init()"
    BT_SM_SM_HANDLEREQTIMEOUT "SM_HandleReqTimeout()"
    BT_SM_SM_GENLTK "SM_GenLTK(): keySize=%d"
    BT_SM_SM_GENEDIV "SM_GenEDIV(): ediv=0x%x"
    BT_SM_SM_GENCSRK "SM_GenCSRK()"
    BT_SM_SM_GENIRK "SM_GenIRK()"
    BT_SM_SM_GETSESSION_NOT_FOUND "SM_GetSession(): not found"
    BT_SM_SM_STARTSESSION "SM_StartSession(): type(b0p1)=%d, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BT_SM_SM_UPDATESESSION "SM_UpdateSession()"
    BT_SM_SM_UPDATESESSIONFSM "SM_UpdateSessionFSM(): GCstate=%d"
    BT_SM_SM_ENDSESSION "SM_EndSession(): status=0x%x, smState=%d"
    BT_SM_SM_SETPAIRINFO "SM_SetPairInfo(): type(b0p1)=%d, ioCap=%d, oob=%d, auth=0x%x, keySize=%d, initKey=0x%x, respKey=0x%x"
    BT_SM_SM_BOND "SM_Bond(): bdc->under_used=0x%x, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BT_SM_SM_PASSKEYENTRY "SM_PasskeyEntry(): addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, accept=%d, passkey=%d"
    BT_SM_SM_SETOOBDATA "SM_SetOobData(): addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, accept=%d"
    BT_SM_SM_PASSKEYENTRY1 "type(b0p1)=%d, smState=%d"
    BT_SM_SM_HANDLEEVENT "SM_HandleEvent(): event=%d, errCode=0x%x"
    BT_SM_SM_PHASEFSM_SESSION_NOT_FOUND "SM_Phase%dFSM(): session not found"
    BT_SM_SM_PHASEFSM "SM_PhaseFSM(): type(b0p1)=%d, smState=%d"
    BT_SM_SM_PHASE3KEYRECEIVE "SM_Phase3_KeyReceive(): event=%d, allKeys=0x%x"
    BT_SM_SM_PHASE3KEYSEND "SM_Phase3_KeySend(): sent=0x%x, allKeys=0x%x"
    BT_SM_SM_CMACFSM "SM_CMAC_FSM(): cmac state=%d"
    BT_SM_SM_CMAC "SM_CMAC(): mLen=%d, tLen=%d"
    BT_SM_SM_CMACVERIFYCB "SM_CMAC_VerifyCB(): errCode=0x%x"
    BT_SM_SM_CMACVERIFY "SM_CMAC_Verify()"
    BT_SM_SM_RECVDATA "SM_RecvData: PduType=0x%x, smState=%d, encryptState=0x%x"
    BT_SM_SM_L2CAPCALLBACK "SM_L2capCallback: l2cap event=%d, smState=%d"
    BT_SM_SM_HANDLEDISCDELAYTIMEOUT "SM_HandleDiscDelayTimeout(): to-be-sent=%d, delay=%d"

    BT_SMP_SMP_INIT "SMP_Init()"
    BT_SMP_SM_GETPAIRMODELBYIO "SM_GetPairModelByIo(): iIO=0x%x, rIO=0x%x"
    BT_SMP_SM_GETPASSKEYROLE "SM_GetPasskeyRole(): type(b0p1)=%d, iIO=0x%x, rIO=0x%x"
    BT_SMP_SM_SENDPAIRREQ "SM_SendPairReq(): io=0x%x, oob=%d, bond=%d, mitm=%d, keySize=%d, distKey=0x%x,  respKey=0x%x"
    BT_SMP_SM_SENDPAIRRSP "SM_SendPairRsp(): io=0x%x, oob=%d, bond=%d, mitm=%d, keySize=%d, distKey=0x%x,  respKey=0x%x"
    BT_SMP_SM_SENDPAIRCONFIRM "SM_SendPairConfirm()"
    BT_SMP_SM_SENDPAIRRANDOM "SM_SendPairRandom()"
    BT_SMP_SM_SENDPAIRFAILED "SM_SendPairFailed(): reason=0x%x"
    BT_SMP_SM_SENDENCRYPTINFO "SM_SendEncryptInfo()"
    BT_SMP_SM_SENMASTERIDENTITY "SM_SendMasterIdentity(): ediv=%d, rand=%ul"
    BT_SMP_SM_SENDIDENTITYINFO "SM_SendIdentityInfo()"
    BT_SMP_SM_SENDIDENTITYADDRINFO "SM_SendIdentityAddrInfo(): addrType=%d, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x"
    BT_SMP_SM_SENDSIGNINGINFO "SM_SendSigningInfo()"
    BT_SMP_SM_SENDSECURITYREQ "SM_SendSecurityReq(): bond=%d, mitm=%d"
    BT_SMP_SM_CALCPAIRCONFIRMFSM "SM_CalcPairConfirm_FSM(): encryptCount=%d, errCode=0x%x"
    BT_SMP_SM_CALCPAIRCONFIRM "SM_CalcPairConfirm(): iat=%d, rat=%d, tk, rand, preq, pres"
    BT_SMP_SM_CALCSTK "SM_CalcSTK(): tk, srand, mrand"
    BT_SMP_SM_RANDFSM "SM_Rand_FSM(): len=%d, count=%d"
    BT_SMP_SM_RAND "SM_Rand(): len=%d"

BT_BLE_TRACE_END "BT_BLE_TRACE_END"


    FTP_CLIENT_CREATE_BUFFER "[GOEP] create Client:0x%x pl2capRawData:0x%x"
    FTP_CLIENT_GOEP_CALLBACK "[FTP][UTIL][CHECK] check_progress curr:%d total:%d last:%d "
    FTP_UTIL_READ_RESULT "[FTP][M] Read - pre-read result:%d read:%d start:%d"
    FTP_UTIL_OBSREAD_PARAM "[FTPCFLOW] FTPOBS_Read obsh:0x%x ocx:0x%x maxlen:%d"
    FTP_UTIL_OBSWRITE_PARAM "[FTPCFLOW] FTPOBS_Write obsh:0x%x ocx:0x%x inputlen:%d"
    FTP_UTIL_CHECK_PROGRESS "[FTP][UTIL][CHECK] check_progress curr:%d total:%d last:%d "
    FTP_UTIL_GET_FILESIZE "[FTP] btmtk_fs_get_filesize_ucs2 ret:%d size:%d"
    FTP_UTIL_FLUSH "[FTPCFLOW] FTPOBS_Flush obsh:0x%x ocx:0x%x "
    FTP_START_ABORT_TIMER "[FTP] start a abort timer to disconnect 0x%x"
    FTP_STOP_ABORT_TIMER "[FTP] stop abortTimer 0x%x "
    FTP_ADP_CALLBACK "[FTP] ftpsAdpCallback GOEP_Event:%d "
    FTP_GOEP_SERVER_CALLBACK "[FTP] FtpGoepServerCallback GOEP_EVENT=%d, GOEP_OPER=%d, goep_conn_id=%d"
    FTP_GOEP_CLIENT_CONTINUE_RESULT "[SRM] GOEP_ClientContinue status:%d"
    FTP_UTIL_CHECK_PROGRESS_RET "[FTP][UTIL] check_progress curr:%d total:%d last:%d ret:%d"
    FTP_RESERVED_15 "FTP_RESERVED_15"
    FTP_RESERVED_16 "FTP_RESERVED_16"
    FTP_RESERVED_17 "FTP_RESERVED_17"
    FTP_RESERVED_18 "FTP_RESERVED_18"
    FTP_RESERVED_19 "FTP_RESERVED_19"
    FTP_RESERVED_20 "FTP_RESERVED_20"
    GOEP_L2CAP_RAWDATA_BUFF "[GOEP] RegisterClient pl2capRawDataAddr is 0x%x "
    GOEP_CLIENT_SRM_FLAG "[OBEX:] OCC(srm_client):0x%x"
    GOEP_L2CAP_CHANNEL_STATUS "[GOEP] RegisterClient pl2capRawDataAddr is 0x%x "
    GOEP_SERVER_L2CAP_RAWDATA_BUFF "[GOEP][SERV] RegisterServer pl2capRawDataAddr is 0x%x"
    GOEP_CLIENT_SENDCOMMAND "[OBEX][CLIENT] ClientSendCommand OCH(txLength)=%d OCC(txLength)=%d"
    GOEP_SERVER_PROCESS_PUT_OPER "GOEP_RESERVED_6"
    GOEP_RESERVED_7 "GOEP_RESERVED_7"
    GOEP_RESERVED_8 "GOEP_RESERVED_8"
    GOEP_RESERVED_9 "GOEP_RESERVED_9"
    GOEP_RESERVED_10 "GOEP_RESERVED_10"
    GOEP_RESERVED_11 "GOEP_RESERVED_11"
    GOEP_RESERVED_12 "GOEP_RESERVED_12"
    GOEP_RESERVED_13 "GOEP_RESERVED_13"
    GOEP_RESERVED_14 "GOEP_RESERVED_14"
    GOEP_RESERVED_15 "GOEP_RESERVED_15"
    GOEP_RESERVED_16 "GOEP_RESERVED_16"
    GOEP_RESERVED_17 "GOEP_RESERVED_17"
    GOEP_RESERVED_18 "GOEP_RESERVED_18"
    GOEP_RESERVED_19 "GOEP_RESERVED_19"
    GOEP_RESERVED_20 "GOEP_RESERVED_20"
    L2CAP_CHANNEL_DUMP_INFO "%d: localCid:%02x, remoteCid:%02x, channel state:%02x"
    L2CAP_REGULAR_MOVE_AMP_PARAM "a,b,c:%d,%d,%d,%d"
    L2CAP_REGULAR_MOVE_AMP_TIMER "L2Cap_StartRegularMoveAMPChannelTimer"
    L2CAP_RESERVED_4 "L2CAP_RESERVED_4"
    L2CAP_RESERVED_5 "L2CAP_RESERVED_5"
    L2CAP_RESERVED_6 "L2CAP_RESERVED_6"
    L2CAP_RESERVED_7 "L2CAP_RESERVED_7"
    L2CAP_RESERVED_8 "L2CAP_RESERVED_8"
    L2CAP_RESERVED_9 "L2CAP_RESERVED_9"
    L2CAP_RESERVED_10 "L2CAP_RESERVED_10"
    L2CAP_RESERVED_11 "L2CAP_RESERVED_11"
    L2CAP_RESERVED_12 "L2CAP_RESERVED_12"
    L2CAP_RESERVED_13 "L2CAP_RESERVED_13"
    L2CAP_RESERVED_14 "L2CAP_RESERVED_14"
    L2CAP_RESERVED_15 "L2CAP_RESERVED_15"
    L2CAP_RESERVED_16 "L2CAP_RESERVED_16"
    L2CAP_RESERVED_17 "L2CAP_RESERVED_17"
    L2CAP_RESERVED_18 "L2CAP_RESERVED_18"
    L2CAP_RESERVED_19 "L2CAP_RESERVED_19"
    L2CAP_RESERVED_20 "L2CAP_RESERVED_20"
    DDB_LINKKEY_RECORD "linkkey:[%02x%02x%02x%02x%02x%02x]%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"



END_MODULE_MSG
