# 1 "database/parse_db.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "database/parse_db.c"
# 96 "database/parse_db.c"
# 1 "../include/common/bt_types.h" 1
# 102 "../include/common/bt_types.h"
# 1 "../include/common/bt_config.h" 1
# 103 "../include/common/bt_types.h" 2
# 111 "../include/common/bt_types.h"
typedef unsigned long kal_uint32;
typedef unsigned short kal_uint16;
typedef unsigned char kal_uint8;

typedef unsigned char kal_bool;

typedef long kal_int32;
typedef short kal_int16;
typedef char kal_int8;
typedef char kal_char;

typedef unsigned short WCHAR;
# 97 "database/parse_db.c" 2
# 1 "../include/common/bt_message.h" 1
# 103 "../include/common/bt_message.h"
typedef enum
{
    MSG_ID_BT_START = 0,
    MSG_ID_BT_RANGE = 100,


    MSG_ID_BT_GAP_GROUP_START = (MSG_ID_BT_START + MSG_ID_BT_RANGE),
    MSG_ID_BT_GAP_GROUP_RANGE = 100,


    MSG_ID_BT_SDP_GROUP_START = (MSG_ID_BT_GAP_GROUP_START + MSG_ID_BT_GAP_GROUP_RANGE),
    MSG_ID_BT_SDP_GROUP_RANGE = 100,


    MSG_ID_BT_A2DP_GROUP_START = (MSG_ID_BT_SDP_GROUP_START + MSG_ID_BT_SDP_GROUP_RANGE),
    MSG_ID_BT_A2DP_GROUP_RANGE = 100,


    MSG_ID_BT_A2DP_DATA_GROUP_START = (MSG_ID_BT_A2DP_GROUP_START + MSG_ID_BT_A2DP_GROUP_RANGE),
    MSG_ID_BT_A2DP_DATA_GROUP_RANGE = 100,


    MSG_ID_BT_AVRCP_GROUP_START = (MSG_ID_BT_A2DP_DATA_GROUP_START + MSG_ID_BT_A2DP_DATA_GROUP_RANGE),
    MSG_ID_BT_AVRCP_GROUP_RANGE = 200,


    MSG_ID_BT_BIPI_GROUP_START = (MSG_ID_BT_AVRCP_GROUP_START + MSG_ID_BT_AVRCP_GROUP_RANGE),
    MSG_ID_BT_BIPI_GROUP_RANGE = 100,


    MSG_ID_BT_BIPR_GROUP_START = (MSG_ID_BT_BIPI_GROUP_START + MSG_ID_BT_BIPI_GROUP_RANGE),
    MSG_ID_BT_BIPR_GROUP_RANGE = 100,


    MSG_ID_BT_BPP_GROUP_START = (MSG_ID_BT_BIPR_GROUP_START + MSG_ID_BT_BIPR_GROUP_RANGE),
    MSG_ID_BT_BPP_GROUP_RANGE = 100,


    MSG_ID_BT_DUN_GROUP_START = (MSG_ID_BT_BPP_GROUP_START + MSG_ID_BT_BPP_GROUP_RANGE),
    MSG_ID_BT_DUN_GROUP_RANGE = 100,


    MSG_ID_BT_FAX_GROUP_START = (MSG_ID_BT_DUN_GROUP_START + MSG_ID_BT_DUN_GROUP_RANGE),
    MSG_ID_BT_FAX_GROUP_RANGE = 100,


    MSG_ID_BT_FTPC_GROUP_START = (MSG_ID_BT_FAX_GROUP_START + MSG_ID_BT_FAX_GROUP_RANGE),
    MSG_ID_BT_FTPC_GROUP_RANGE = 100,


    MSG_ID_BT_FTPS_GROUP_START = (MSG_ID_BT_FTPC_GROUP_START + MSG_ID_BT_FTPC_GROUP_RANGE),
    MSG_ID_BT_FTPS_GROUP_RANGE = 100,


    MSG_ID_BT_GOEPC_GROUP_START = (MSG_ID_BT_FTPS_GROUP_START + MSG_ID_BT_FTPS_GROUP_RANGE),
    MSG_ID_BT_GOEPC_GROUP_RANGE = 100,


    MSG_ID_BT_GOEPS_GROUP_START = (MSG_ID_BT_GOEPC_GROUP_START + MSG_ID_BT_GOEPC_GROUP_RANGE),
    MSG_ID_BT_GOEPS_GROUP_RANGE = 100,


    MSG_ID_BT_HFG_GROUP_START = (MSG_ID_BT_GOEPS_GROUP_START + MSG_ID_BT_GOEPS_GROUP_RANGE),
    MSG_ID_BT_HFG_GROUP_RANGE = 300,


    MSG_ID_BT_HID_GROUP_START = (MSG_ID_BT_HFG_GROUP_START + MSG_ID_BT_HFG_GROUP_RANGE),
    MSG_ID_BT_HID_GROUP_RANGE = 100,


    MSG_ID_BT_HSG_GROUP_START = (MSG_ID_BT_HID_GROUP_START + MSG_ID_BT_HID_GROUP_RANGE),
    MSG_ID_BT_HSG_GROUP_RANGE = 100,


    MSG_ID_BT_OPPC_GROUP_START = (MSG_ID_BT_HSG_GROUP_START + MSG_ID_BT_HSG_GROUP_RANGE),
    MSG_ID_BT_OPPC_GROUP_RANGE = 100,


    MSG_ID_BT_OPPS_GROUP_START = (MSG_ID_BT_OPPC_GROUP_START + MSG_ID_BT_OPPC_GROUP_RANGE),
    MSG_ID_BT_OPPS_GROUP_RANGE = 100,


    MSG_ID_BT_PBAP_GROUP_START = (MSG_ID_BT_OPPS_GROUP_START + MSG_ID_BT_OPPS_GROUP_RANGE),
    MSG_ID_BT_PBAP_GROUP_RANGE = 100,


    MSG_ID_BT_SIMAP_GROUP_START = (MSG_ID_BT_PBAP_GROUP_START + MSG_ID_BT_PBAP_GROUP_RANGE),
    MSG_ID_BT_SIMAP_GROUP_RANGE = 100,


    MSG_ID_BT_SPP_GROUP_START = (MSG_ID_BT_SIMAP_GROUP_START + MSG_ID_BT_SIMAP_GROUP_RANGE),
    MSG_ID_BT_SPP_GROUP_RANGE = 100,


    MSG_ID_BT_JSR82_GROUP_START = (MSG_ID_BT_SPP_GROUP_START + MSG_ID_BT_SPP_GROUP_RANGE),
    MSG_ID_BT_JSR82_GROUP_RANGE = 100,


    MSG_ID_BT_CHN_GROUP_START = (MSG_ID_BT_JSR82_GROUP_START + MSG_ID_BT_JSR82_GROUP_RANGE),
    MSG_ID_BT_CHN_GROUP_RANGE = 100,


    MSG_ID_BT_MAP_GROUP_START = (MSG_ID_BT_CHN_GROUP_START + MSG_ID_BT_CHN_GROUP_RANGE),
    MSG_ID_BT_MAP_GROUP_RANGE = 100,


    MSG_ID_BT_PRXM_GROUP_START = (MSG_ID_BT_MAP_GROUP_START + MSG_ID_BT_MAP_GROUP_RANGE),
    MSG_ID_BT_PRXM_GROUP_RANGE = 100,
    MSG_ID_BT_PRXR_GROUP_START = (MSG_ID_BT_PRXM_GROUP_START + MSG_ID_BT_PRXM_GROUP_RANGE),
    MSG_ID_BT_PRXR_GROUP_RANGE = 100,


    MSG_ID_BT_PAN_GROUP_START = (MSG_ID_BT_PRXR_GROUP_START + MSG_ID_BT_PRXR_GROUP_RANGE),
    MSG_ID_BT_PAN_GROUP_RANGE = 100,


    MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_GROUP_START = (MSG_ID_BT_PAN_GROUP_START + MSG_ID_BT_PAN_GROUP_RANGE),
    MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_GROUP_RANGE = 100,


 MSG_ID_BT_TIMEC_GROUP_START = (MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_GROUP_START + MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_GROUP_RANGE),
 MSG_ID_BT_TIMEC_GROUP_RANGE = 100,
 MSG_ID_BT_TIMES_GROUP_START = (MSG_ID_BT_TIMEC_GROUP_START + MSG_ID_BT_TIMEC_GROUP_RANGE),
 MSG_ID_BT_TIMES_GROUP_RANGE = 100,


    MSG_ID_BT_HDP_GROUP_START = (MSG_ID_BT_TIMES_GROUP_START + MSG_ID_BT_TIMES_GROUP_RANGE),
    MSG_ID_BT_HDP_GROUP_RANGE = 100,


    MSG_ID_BT_HTP_GROUP_START = (MSG_ID_BT_HDP_GROUP_START + MSG_ID_BT_HDP_GROUP_RANGE),
    MSG_ID_BT_HTP_GROUP_RANGE = 100,


    MSG_ID_BT_FMP_GROUP_START = (MSG_ID_BT_HTP_GROUP_START + MSG_ID_BT_HTP_GROUP_RANGE),
    MSG_ID_BT_FMP_GROUP_RANGE = 100,

    CUSTOM_MSG_ID_BEGIN = (MSG_ID_BT_FMP_GROUP_START + MSG_ID_BT_FMP_GROUP_RANGE + 1000),



    MSG_ID_EXT_MSG_CODE_BEGIN = 0x80000000,
    MSG_ID_PAL_MSG_CODE_BEGIN = MSG_ID_EXT_MSG_CODE_BEGIN,
    MSG_ID_PAL_MSG_CODE_RANGE = 300,

 MSG_ID_BT_SDAP_TESTER_GROUP_START = MSG_ID_PAL_MSG_CODE_BEGIN + MSG_ID_PAL_MSG_CODE_RANGE,
 MSG_ID_BT_SDAP_TESTER_GROUP_RANGE = 100,

} MSG_ID_CODE_BEGIN;

typedef enum
{
# 1 "../include/bluetooth_sap.h" 1
# 426 "../include/bluetooth_sap.h"
    MSG_ID_BT_NOTIFY_EVM_IND = MSG_ID_BT_START,
    MSG_ID_TIMER_EXPIRY,

    MSG_ID_BT_HOST_WAKE_UP_IND,
# 454 "../include/bluetooth_sap.h"
    MSG_ID_WMT_BT_QUERY_STATE_REQ,
    MSG_ID_WMT_BT_QUERY_STATE_CNF,
    MSG_ID_WMT_BT_SET_BWCS_REQ,
    MSG_ID_WMT_BT_QUERY_RSSI_REQ,
    MSG_ID_WMT_BT_QUERY_RSSI_IND,
    MSG_ID_WMT_BT_SET_RX_RANGE_REQ,
    MSG_ID_WMT_BT_SET_RX_RANGE_CNF,
    MSG_ID_WMT_BT_SET_DEFAULT_TX_POWER_REQ,
    MSG_ID_WMT_BT_SET_DEFAULT_TX_POWER_CNF,
    MSG_ID_WMT_BT_UPDATE_CONN_TX_POWER_REQ,
    MSG_ID_WMT_BT_UPDATE_CONN_TX_POWER_CNF,
    MSG_ID_WMT_BT_STATUS_IND,

    MSG_ID_BT_SSP_DEBUG_MODE_REQ,
    MSG_ID_BT_SSP_DEBUG_MODE_CNF,

    MSG_ID_BT_DBG_QUERY_CONTEXT_REQ,
    MSG_ID_BT_DBG_QUERY_CONTEXT_CNF,
    MSG_ID_BT_DBG_HCI_CONTEXT_IND,
    MSG_ID_BT_DBG_ME_CONTEXT_IND,
    MSG_ID_BT_DBG_RMG_CONTEXT_IND,
    MSG_ID_BT_DBG_L2CAP_CONTEXT_IND,
    MSG_ID_BT_DBG_RXBUF_CONTEXT_IND,
    MSG_ID_BT_DBG_SDPS_CONTEXT_IND,
    MSG_ID_BT_DBG_SDPC_CONTEXT_IND,
    MSG_ID_BT_DBG_RFC_CONTEXT_IND,
    MSG_ID_BT_DBG_A2MP_CONTEXT_IND,
    MSG_ID_BT_DBG_ATT_CONTEXT_IND,
    MSG_ID_BT_DBG_GATT_CONTEXT_IND,
    MSG_ID_BT_DBG_WDDEV_CONTEXT_IND,
    MSG_ID_BT_DBG_WDTRANS_CONTEXT_IND,
    MSG_ID_BT_DBG_MANUAL_DUMP_REQ,

    MSG_ID_BT_ENGINEER_MODE_LOG_MASK_REQ,
    MSG_ID_BT_ENGINEER_MODE_LOG_MASK_CNF,
    MSG_ID_BT_ENGINEER_MODE_LOG_TO_FILE_REQ,
    MSG_ID_BT_ENGINEER_MODE_LOG_TO_FILE_CNF,
    MSG_ID_BT_SET_SCO_ACCEPT_REQ,
    MSG_ID_BT_SET_SCO_ACCEPT_CNF,
    MSG_ID_BT_SET_DUAL_PCM_SETTING_REQ,
    MSG_ID_BT_SET_DUAL_PCM_SETTING_CNF,
    MSG_ID_BT_SET_DUAL_PCM_SWITCH_REQ,
    MSG_ID_BT_SET_DUAL_PCM_SWITCH_CNF,
    MSG_ID_BT_TEST_CMD_REQ,
    MSG_ID_BT_TEST_CMD_CNF,
    MSG_ID_BT_TEST_MODE_REQ,
    MSG_ID_BT_TEST_MODE_CNF,
    MSG_ID_BT_BTTM_SWITCH_PORT_REQ,
    MSG_ID_BT_BTTM_SWITCH_PORT_CNF,
    MSG_ID_BT_END = MSG_ID_BT_BTTM_SWITCH_PORT_CNF,



# 1 "../include/profiles/bluetooth_gap_message.h" 1
# 111 "../include/profiles/bluetooth_gap_message.h"
    MSG_ID_BT_POWERON_REQ = MSG_ID_BT_GAP_GROUP_START,

    MSG_ID_BT_POWEROFF_REQ,
    MSG_ID_BT_RESET_REQ_IND,
# 128 "../include/profiles/bluetooth_gap_message.h"
    MSG_ID_BT_BM_DISCOVERY_REQ,
    MSG_ID_BT_BM_DISCOVERY_CANCEL_REQ,
    MSG_ID_BT_BM_WRITE_LOCAL_NAME_REQ,
    MSG_ID_BT_BM_READ_LOCAL_NAME_REQ,
    MSG_ID_BT_BM_READ_REMOTE_NAME_REQ,
    MSG_ID_BT_BM_READ_REMOTE_NAME_CANCEL_REQ,
    MSG_ID_BT_BM_WRITE_SCANENABLE_MODE_REQ,
    MSG_ID_BT_BM_READ_SCANENABLE_MODE_REQ,
    MSG_ID_BT_BM_READ_LOCAL_ADDR_REQ,
    MSG_ID_BT_BM_READ_LOCAL_COD_REQ,
    MSG_ID_BT_BM_WRITE_LOCAL_COD_REQ,
    MSG_ID_BT_BM_READ_LOCAL_UUID_REQ,
    MSG_ID_BT_BM_READ_PROPERTY_REQ,
    MSG_ID_BT_BM_WRITE_AUTHENTICATION_MODE_REQ,
    MSG_ID_BT_BM_PIN_CODE_RSP,
    MSG_ID_BT_BM_SECURITY_USER_CONFIRM_RSP,
    MSG_ID_BT_BM_SECURITY_PASSKEY_ENTRY_RSP,
    MSG_ID_BT_BM_SECURITY_PASSKEY_NOTIFY_RSP,
    MSG_ID_BT_BM_SECURITY_KEYPRESS_NOTIFY_RSP,
    MSG_ID_BT_BM_SECURITY_KEYPRESS_NOTIFY_CANCEL_REQ,
    MSG_ID_BT_BM_SECURITY_OOB_DATA_RSP,
    MSG_ID_BT_BM_BLOCK_ACTIVE_LINK_REQ,
    MSG_ID_BT_BM_BLOCK_LIST_UPDATE_REQ,
    MSG_ID_BT_BM_BONDING_REQ,
    MSG_ID_BT_BM_DELETE_TRUST_REQ,
    MSG_ID_BT_BM_DELETE_TRUST_ALL_REQ,
    MSG_ID_BT_BM_BONDING_CANCEL_REQ,
    MSG_ID_BT_BM_PAIRING_CANCEL_REQ,
    MSG_ID_BT_BM_SAVE_SETTING_REQ,
    MSG_ID_BT_BM_RESTORE_SETTING_REQ,
    MSG_ID_BT_BM_SERVICE_SEARCH_REQ,
    MSG_ID_BT_BM_SERVICE_SEARCH_CANCEL_REQ,
    MSG_ID_BT_BM_SEARCH_ATTRIBUTE_REQ,
    MSG_ID_BT_BM_SEARCH_RAW_REQ,
    MSG_ID_BT_BM_LINK_ALLOW_REQ,
    MSG_ID_BT_BM_LINK_DISALLOW_REQ,
    MSG_ID_BT_BM_LINK_CONNECT_ACCEPT_NOT_AUTO_REQ,
    MSG_ID_BT_BM_LINK_CONNECT_ACCEPT_RSP,
    MSG_ID_BT_BM_GET_LINK_STATE_REQ,
    MSG_ID_BT_BM_SET_LINK_STATE_REQ,
    MSG_ID_BT_BM_GET_SCATTERNET_STATE_REQ,
    MSG_ID_BT_READ_RSSI_REQ,

    MSG_ID_BT_POWERON_CNF,
    MSG_ID_BT_POWEROFF_CNF,
    MSG_ID_BT_BM_DISCOVERY_RESULT_IND,
    MSG_ID_BT_BM_DISCOVERY_UPDATE_IND,
    MSG_ID_BT_BM_DISCOVERY_CNF,
    MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF,
    MSG_ID_BT_BM_WRITE_LOCAL_NAME_CNF,
    MSG_ID_BT_BM_READ_LOCAL_NAME_CNF,
    MSG_ID_BT_BM_READ_REMOTE_NAME_CNF,
    MSG_ID_BT_BM_READ_REMOTE_NAME_CANCEL_CNF,
    MSG_ID_BT_BM_WRITE_SCANENABLE_MODE_CNF,
    MSG_ID_BT_BM_READ_SCANENABLE_MODE_CNF,
    MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF,
    MSG_ID_BT_BM_READ_LOCAL_COD_CNF,
    MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF,
    MSG_ID_BT_BM_READ_LOCAL_UUID_CNF,
    MSG_ID_BT_BM_READ_PROPERTY_CNF,
    MSG_ID_BT_BM_WRITE_AUTHENTICATION_MODE_CNF,
    MSG_ID_BT_BM_PIN_CODE_IND,
    MSG_ID_BT_BM_SECURITY_USER_CONFIRM_IND,
    MSG_ID_BT_BM_SECURITY_PASSKEY_ENTRY_IND,
    MSG_ID_BT_BM_SECURITY_PASSKEY_NOTIFY_IND,
    MSG_ID_BT_BM_SECURITY_KEYPRESS_NOTIFY_IND,
    MSG_ID_BT_BM_SECURITY_OOB_DATA_IND,
    MSG_ID_BT_BM_BLOCK_ACTIVE_LINK_CNF,
    MSG_ID_BT_BM_BLOCK_LIST_UPDATE_CNF,
    MSG_ID_BT_BM_BONDING_CNF,
    MSG_ID_BT_BM_BONDING_RESULT_IND,
    MSG_ID_BT_BM_DELETE_TRUST_CNF,
    MSG_ID_BT_BM_DELETE_TRUST_ALL_CNF,
    MSG_ID_BT_BM_BONDING_CANCEL_CNF,
    MSG_ID_BT_BM_PAIRING_CANCEL_CNF,
    MSG_ID_BT_BM_SAVE_SETTING_CNF,
    MSG_ID_BT_BM_RESTORE_SETTING_CNF,
    MSG_ID_BT_BM_SERVICE_SEARCH_RESULT_IND,
    MSG_ID_BT_BM_SERVICE_SEARCH_CNF,
    MSG_ID_BT_BM_SERVICE_SEARCH_CANCEL_CNF,
    MSG_ID_BT_BM_SEARCH_ATTRIBUTE_RESULT_IND,
    MSG_ID_BT_BM_SEARCH_ATTRIBUTE_CNF,
    MSG_ID_BT_BM_SEARCH_RAW_RESULT,
    MSG_ID_BT_BM_SEARCH_RAW_CNF,
    MSG_ID_BT_BM_LINK_STATE_IND,
    MSG_ID_BT_BM_LINK_ALLOW_CNF,
    MSG_ID_BT_BM_LINK_DISALLOW_CNF,
    MSG_ID_BT_BM_LINK_CONNECT_ACCEPT_IND,
    MSG_ID_BT_BM_GET_LINK_STATE_CNF,
    MSG_ID_BT_BM_SET_LINK_STATE_CNF,
    MSG_ID_BT_BM_GET_SCATTERNET_STATE_CNF,
    MSG_ID_BT_READ_RSSI_CNF,
    MSG_ID_BT_BM_REMOTE_NAME_IND,
    MSG_ID_BT_BM_GET_LINK_KEY_REQ,
    MSG_ID_BT_BM_GET_LINK_KEY_CNF,
    MSG_ID_BT_GAP_GROUP_END = MSG_ID_BT_BM_GET_LINK_KEY_CNF,
# 508 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_sdp_message.h" 1
# 111 "../include/profiles/bluetooth_sdp_message.h"
    MSG_ID_BT_SDPDB_REGISTER_REQ = MSG_ID_BT_SDP_GROUP_START,


    MSG_ID_BT_SDPDB_DEREGISTER_REQ,
    MSG_ID_BT_SDPDB_REGISTER_CNF,
    MSG_ID_BT_SDPDB_DEREGISTER_CNF,


    MSG_ID_BT_APP_SDPDB_GET_HANDLE_REQ,
    MSG_ID_BT_APP_SDPDB_REGISTER_REQ,
    MSG_ID_BT_APP_SDPDB_RETRIEVE_RECOED_REQ,
    MSG_ID_BT_APP_SDPDB_DEREGISTER_REQ,
    MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF,
    MSG_ID_BT_APP_SDPDB_REGISTER_CNF,
    MSG_ID_BT_APP_SDPDB_RETRIEVE_RECOED_CNF,
    MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF,
    MSG_ID_BT_SDP_GROUP_END = MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF,
# 511 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_a2dp_message.h" 1
# 111 "../include/profiles/bluetooth_a2dp_message.h"
    MSG_ID_BT_A2DP_ACTIVATE_REQ = MSG_ID_BT_A2DP_GROUP_START,

   MSG_ID_BT_A2DP_ACTIVATE_CNF,
   MSG_ID_BT_A2DP_DEACTIVATE_REQ,
   MSG_ID_BT_A2DP_DEACTIVATE_CNF,


   MSG_ID_BT_A2DP_APPI_BT_COMMAND,
   MSG_ID_BT_A2DP_APPI_BT_CONNECT_ACCEPT_RSP,
   MSG_ID_BT_A2DP_APPI_BT_SDK_PAUSE_REQ,
   MSG_ID_BT_A2DP_APPI_BT_SDK_RESUME_REQ,

   MSG_ID_BT_MEDIA_A2DP_CODEC_OPEN_CNF,
   MSG_ID_BT_MEDIA_A2DP_CODEC_CLOSE_CNF,


   MSG_ID_BT_A2DP_STREAM_RECONFIG_REQ,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_CNF,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_IND,
   MSG_ID_BT_A2DP_STREAM_RECONFIG_RES,
   MSG_ID_BT_A2DP_STREAM_OPEN_REQ,
   MSG_ID_BT_A2DP_STREAM_OPEN_CNF,
   MSG_ID_BT_A2DP_STREAM_OPEN_IND,
   MSG_ID_BT_A2DP_STREAM_OPEN_RES,
   MSG_ID_BT_A2DP_STREAM_START_REQ,
   MSG_ID_BT_A2DP_STREAM_START_CNF,
   MSG_ID_BT_A2DP_STREAM_START_IND,
   MSG_ID_BT_A2DP_STREAM_START_RES,
   MSG_ID_BT_A2DP_STREAM_PAUSE_REQ,
   MSG_ID_BT_A2DP_STREAM_PAUSE_CNF,
   MSG_ID_BT_A2DP_STREAM_PAUSE_IND,
   MSG_ID_BT_A2DP_STREAM_PAUSE_RES,
   MSG_ID_BT_A2DP_STREAM_QOS_IND,
   MSG_ID_BT_A2DP_STREAM_CLOSE_REQ,
   MSG_ID_BT_A2DP_STREAM_CLOSE_CNF,
   MSG_ID_BT_A2DP_STREAM_CLOSE_IND,
   MSG_ID_BT_A2DP_STREAM_CLOSE_RES,
   MSG_ID_BT_A2DP_STREAM_ABORT_REQ,
   MSG_ID_BT_A2DP_STREAM_ABORT_CNF,
   MSG_ID_BT_A2DP_STREAM_ABORT_IND,
   MSG_ID_BT_A2DP_STREAM_ABORT_RES,
   MSG_ID_BT_A2DP_GROUP_END = MSG_ID_BT_A2DP_STREAM_ABORT_RES,
   MSG_ID_BT_A2DP_STREAM_DATA_OUT = MSG_ID_BT_A2DP_DATA_GROUP_START,
   MSG_ID_BT_A2DP_STREAM_DATA_SEND_REQ,
   MSG_ID_BT_A2DP_STREAM_DATA_CONFIG_GET,
   MSG_ID_BT_A2DP_STREAM_DATA_CONFIG_CNF,
   MSG_ID_BT_A2DP_STREAM_DATA_CONFIG_CHANGE,
   MSG_ID_BT_A2DP_STREAM_DATA_START_CNF,
   MSG_ID_BT_A2DP_STREAM_DATA_STOP_CNF,
   MSG_ID_BT_A2DP_STREAM_DATA_DISC_IND,
   MSG_ID_BT_A2DP_STREAM_DATA_DISCONNECTING_IND,
   MSG_ID_BT_A2DP_STREAM_DATA_WIFI_CONNECTED,
   MSG_ID_BT_A2DP_STREAM_DATA_WIFI_DISCONNECTED,
   MSG_ID_BT_A2DP_DATA_GROUP_END = MSG_ID_BT_A2DP_STREAM_DATA_DISCONNECTING_IND,
   MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_START_REQ = MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_GROUP_START,
   MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_STOP_REQ,
   MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_SUSPEND_REQ,
   MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_RESUME_REQ,
   MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_GROUP_END = MSG_ID_BT_A2DP_FM_VIA_CONTROLLER_RESUME_REQ,
# 514 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_avrcp_message.h" 1
# 111 "../include/profiles/bluetooth_avrcp_message.h"
    MSG_ID_BT_AVRCP_ACTIVATE_REQ = MSG_ID_BT_AVRCP_GROUP_START,

   MSG_ID_BT_AVRCP_ACTIVATE_CNF,
   MSG_ID_BT_AVRCP_DEACTIVATE_REQ,
   MSG_ID_BT_AVRCP_DEACTIVATE_CNF,
   MSG_ID_BT_AVRCP_CONNECT_REQ,
   MSG_ID_BT_AVRCP_CONNECT_CNF,
   MSG_ID_BT_AVRCP_CONNECT_IND,
   MSG_ID_BT_AVRCP_CONNECT_IND_RSP,
   MSG_ID_BT_AVRCP_BROWSE_CONNECT_REQ,
   MSG_ID_BT_AVRCP_BROWSE_CONNECT_CNF,
   MSG_ID_BT_AVRCP_BROWSE_CONNECT_IND,
   MSG_ID_BT_AVRCP_DISCONNECT_REQ,
   MSG_ID_BT_AVRCP_DISCONNECT_CNF,
   MSG_ID_BT_AVRCP_DISCONNECT_IND,
   MSG_ID_BT_AVRCP_CONNECT_ACCEPT_RSP,
   MSG_ID_BT_AVRCP_BROWSE_DISCONNECT_REQ,
   MSG_ID_BT_AVRCP_BROWSE_DISCONNECT_IND,
   MSG_ID_BT_AVRCP_CMD_FRAME_REQ,
   MSG_ID_BT_AVRCP_CMD_FRAME_CNF,
   MSG_ID_BT_AVRCP_CMD_FRAME_IND,
   MSG_ID_BT_AVRCP_CMD_FRAME_IND_RSP,
   MSG_ID_BT_AVRCP_GET_CAPABILITIES_IND,
   MSG_ID_BT_AVRCP_GET_CAPABILITIES_RSP,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_ATTRIBUTE_IND,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_ATTRIBUTE_RSP,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_VALUE_IND,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_VALUE_RSP,
   MSG_ID_BT_AVRCP_GET_CURPLAYERAPP_VALUE_IND,
   MSG_ID_BT_AVRCP_GET_CURPLAYERAPP_VALUE_RSP,
   MSG_ID_BT_AVRCP_SET_PLAYERAPP_VALUE_IND,
   MSG_ID_BT_AVRCP_SET_PLAYERAPP_VALUE_RSP,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_ATTRIBUTETEXT_IND,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_ATTRIBUTETEXT_RSP,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_VALUETEXT_IND,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_VALUETEXT_RSP,
   MSG_ID_BT_AVRCP_INFORM_DISPLAY_CHARSET_IND,
   MSG_ID_BT_AVRCP_INFORM_DISPLAY_CHARSET_RSP,
   MSG_ID_BT_AVRCP_INFORM_BATTERY_STATUSOFCT_IND,
   MSG_ID_BT_AVRCP_INFORM_BATTERY_STATUSOFCT_RSP,
   MSG_ID_BT_AVRCP_GET_ELEMENT_ATTRIBUTES_IND,
   MSG_ID_BT_AVRCP_GET_ELEMENT_ATTRIBUTES_RSP,
   MSG_ID_BT_AVRCP_GET_PLAYERSTATUS_IND,
   MSG_ID_BT_AVRCP_GET_PLAYERSTATUS_RSP,
   MSG_ID_BT_AVRCP_REGISTER_NOTIFICATION_IND,
   MSG_ID_BT_AVRCP_REGISTER_NOTIFICATION_RSP,
   MSG_ID_BT_AVRCP_ABORT_CONTINUERESPONSE_IND,
   MSG_ID_BT_AVRCP_ABORT_CONTINUERESPONSE_RSP,
   MSG_ID_BT_AVRCP_SET_ABSOLUTE_VOLUME_IND,
   MSG_ID_BT_AVRCP_SET_ABSOLUTE_VOLUME_RSP,
   MSG_ID_BT_AVRCP_SET_ADDRESSEDPLAYER_IND,
   MSG_ID_BT_AVRCP_SET_ADDRESSEDPLAYER_RSP,
   MSG_ID_BT_AVRCP_GET_PLAYERITEMS_IND,
   MSG_ID_BT_AVRCP_GET_PLAYERITEMS_RSP,
   MSG_ID_BT_AVRCP_GET_FOLDERITEMS_IND,
   MSG_ID_BT_AVRCP_GET_FOLDERITEMS_RSP,
   MSG_ID_BT_AVRCP_SET_BROWSEDPLAYER_IND,
   MSG_ID_BT_AVRCP_SET_BROWSEDPLAYER_RSP,
   MSG_ID_BT_AVRCP_CHANGE_PATH_IND,
   MSG_ID_BT_AVRCP_CHANGE_PATH_RSP,
   MSG_ID_BT_AVRCP_GET_ITEMATTRIBUTES_IND,
   MSG_ID_BT_AVRCP_GET_ITEMATTRIBUTES_RSP,
   MSG_ID_BT_AVRCP_PLAY_ITEMS_IND,
   MSG_ID_BT_AVRCP_PLAY_ITEMS_RSP,
   MSG_ID_BT_AVRCP_SEARCH_IND,
   MSG_ID_BT_AVRCP_SEARCH_RSP,
   MSG_ID_BT_AVRCP_ADD_TONOWPLAYING_IND,
   MSG_ID_BT_AVRCP_ADD_TONOWPLAYING_RSP,
   MSG_ID_BT_AVRCP_GET_CAPABILITIES_REQ,
   MSG_ID_BT_AVRCP_GET_CAPABILITIES_CNF,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_ATTRIBUTE_REQ,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_ATTRIBUTE_CNF,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_VALUE_REQ,
   MSG_ID_BT_AVRCP_LIST_PLAYERAPP_VALUE_CNF,
   MSG_ID_BT_AVRCP_GET_CURPLAYERAPP_VALUE_REQ,
   MSG_ID_BT_AVRCP_GET_CURPLAYERAPP_VALUE_CNF,
   MSG_ID_BT_AVRCP_SET_PLAYERAPP_VALUE_REQ,
   MSG_ID_BT_AVRCP_SET_PLAYERAPP_VALUE_CNF,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_ATTRIBUTETEXT_REQ,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_ATTRIBUTETEXT_CNF,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_VALUETEXT_REQ,
   MSG_ID_BT_AVRCP_GET_PLAYERAPP_VALUETEXT_CNF,
   MSG_ID_BT_AVRCP_INFORM_DISPLAY_CHARSET_REQ,
   MSG_ID_BT_AVRCP_INFORM_DISPLAY_CHARSET_CNF,
   MSG_ID_BT_AVRCP_INFORM_BATTERY_STATUSOFCT_REQ,
   MSG_ID_BT_AVRCP_INFORM_BATTERY_STATUSOFCT_CNF,
   MSG_ID_BT_AVRCP_GET_ELEMENT_ATTRIBUTES_REQ,
   MSG_ID_BT_AVRCP_GET_ELEMENT_ATTRIBUTES_CNF,
   MSG_ID_BT_AVRCP_GET_PLAYERSTATUS_REQ,
   MSG_ID_BT_AVRCP_GET_PLAYERSTATUS_CNF,
   MSG_ID_BT_AVRCP_REGISTER_NOTIFICATION_REQ,
   MSG_ID_BT_AVRCP_REGISTER_NOTIFICATION_CNF,
   MSG_ID_BT_AVRCP_ABORT_CONTINUERESPONSE_REQ,
   MSG_ID_BT_AVRCP_ABORT_CONTINUERESPONSE_CNF,
   MSG_ID_BT_AVRCP_SET_ABSOLUTE_VOLUME_REQ,
   MSG_ID_BT_AVRCP_SET_ABSOLUTE_VOLUME_CNF,
   MSG_ID_BT_AVRCP_SET_ADDRESSEDPLAYER_REQ,
   MSG_ID_BT_AVRCP_SET_ADDRESSEDPLAYER_CNF,
   MSG_ID_BT_AVRCP_GET_PLAYERITEMS_REQ,
   MSG_ID_BT_AVRCP_GET_PLAYERITEMS_CNF,
   MSG_ID_BT_AVRCP_GET_FOLDERITEMS_REQ,
   MSG_ID_BT_AVRCP_GET_FOLDERITEMS_CNF,
   MSG_ID_BT_AVRCP_SET_BROWSEDPLAYER_REQ,
   MSG_ID_BT_AVRCP_SET_BROWSEDPLAYER_CNF,
   MSG_ID_BT_AVRCP_CHANGE_PATH_REQ,
   MSG_ID_BT_AVRCP_CHANGE_PATH_CNF,
   MSG_ID_BT_AVRCP_GET_ITEMATTRIBUTES_REQ,
   MSG_ID_BT_AVRCP_GET_ITEMATTRIBUTES_CNF,
   MSG_ID_BT_AVRCP_PLAY_ITEMS_REQ,
   MSG_ID_BT_AVRCP_PLAY_ITEMS_CNF,
   MSG_ID_BT_AVRCP_SEARCH_REQ,
   MSG_ID_BT_AVRCP_SEARCH_CNF,
   MSG_ID_BT_AVRCP_ADD_TONOWPLAYING_REQ,
   MSG_ID_BT_AVRCP_ADD_TONOWPLAYING_CNF,
   MSG_ID_BT_AVRCP_GROUP_END = MSG_ID_BT_AVRCP_ADD_TONOWPLAYING_CNF,
# 517 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_bipi_message.h" 1
# 102 "../include/profiles/bluetooth_bipi_message.h"
   MSG_ID_BT_BIP_CONNECT_REQ = MSG_ID_BT_BIPI_GROUP_START,
   MSG_ID_BT_BIP_CONNECT_CNF,
   MSG_ID_BT_BIP_DISCONNECT_REQ,
   MSG_ID_BT_BIP_GET_CAPABILITIES_REQ,
   MSG_ID_BT_BIP_GET_CAPABILITIES_CNF,
   MSG_ID_BT_BIP_PUT_IMG_REQ,
   MSG_ID_BT_BIP_PUT_IMG_CNF,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_REQ,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_CNF,
   MSG_ID_BT_BIP_GET_IMG_LIST_REQ,
   MSG_ID_BT_BIP_GET_IMG_LIST_PARSING_IND,
   MSG_ID_BT_BIP_GET_IMG_LIST_CNF,
   MSG_ID_BT_BIP_GET_IMG_PROP_REQ,
   MSG_ID_BT_BIP_GET_IMG_PROP_CNF,
   MSG_ID_BT_BIP_GET_IMG_REQ,
   MSG_ID_BT_BIP_GET_IMG_CNF,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_REQ,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_CNF,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_REQ,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_CNF,
   MSG_ID_BT_BIP_ABORT_REQ,
   MSG_ID_BT_BIP_ABORT_CNF,
   MSG_ID_BT_BIP_RESUME_XMLPARSE_IND,

   MSG_ID_BT_BIPI_CMD,

   MSG_ID_BT_BIPI_OBEX_AUTH_IND,
   MSG_ID_BT_BIPI_OBEX_AUTH_RSP,
   MSG_ID_BT_BIPI_OBEX_AUTH_REQ,
   MSG_ID_BT_BIPI_OBEX_AUTH_CNF,
   MSG_ID_BT_BIPI_GROUP_END = MSG_ID_BT_BIPI_OBEX_AUTH_CNF,
# 520 "../include/bluetooth_sap.h" 2
# 1 "../include/profiles/bluetooth_bipr_message.h" 1
# 102 "../include/profiles/bluetooth_bipr_message.h"
   MSG_ID_BT_BIP_ACTIVATE_REQ = MSG_ID_BT_BIPR_GROUP_START,
   MSG_ID_BT_BIP_ACTIVATE_CNF,

   MSG_ID_BT_BIPR_REGISTER_REQ,
   MSG_ID_BT_BIPR_REGISTER_CNF,

   MSG_ID_BT_BIP_DEACTIVATE_REQ,
   MSG_ID_BT_BIP_DEACTIVATE_CNF,

   MSG_ID_BT_BIPR_DEREGISTER_REQ,
   MSG_ID_BT_BIPR_DEREGISTER_CNF,

   MSG_ID_BT_BIP_ENTER_USB_MODE_REQ,
   MSG_ID_BT_BIP_ENTER_USB_MODE_CNF,
   MSG_ID_BT_BIP_AUTHORIZE_IND,
   MSG_ID_BT_BIP_AUTHORIZE_RSP,
   MSG_ID_BT_BIP_CONNECT_IND,
   MSG_ID_BT_BIP_CONNECT_RSP,
   MSG_ID_BT_BIP_GET_CAPABILITIES_IND,
   MSG_ID_BT_BIP_GET_CAPABILITIES_RSP,
   MSG_ID_BT_BIP_PUT_IMG_IND,
   MSG_ID_BT_BIP_PUT_IMG_RSP,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_IND,
   MSG_ID_BT_BIP_PUT_LINKED_THUMBNAIL_RSP,
   MSG_ID_BT_BIP_GET_IMG_LIST_IND,
   MSG_ID_BT_BIP_GET_IMG_LIST_RSP,
   MSG_ID_BT_BIP_GET_IMG_PROP_IND,
   MSG_ID_BT_BIP_GET_IMG_PROP_RSP,
   MSG_ID_BT_BIP_GET_IMG_IND,
   MSG_ID_BT_BIP_GET_IMG_RSP,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_IND,
   MSG_ID_BT_BIP_GET_LINKED_THUMBNAIL_RSP,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_IND,
   MSG_ID_BT_BIP_GET_MONITORING_IMG_RSP,
   MSG_ID_BT_BIP_CONTINUE_IND,
   MSG_ID_BT_BIP_CONTINUE_RSP,
   MSG_ID_BT_BIP_ABORT_IND,
   MSG_ID_BT_BIP_COMPLETE_IND,
   MSG_ID_BT_BIP_DISCONNECT_IND,

   MSG_ID_BT_BIPR_CMD,

   MSG_ID_BT_BIPR_OBEX_AUTH_IND,
   MSG_ID_BT_BIPR_OBEX_AUTH_RSP,
   MSG_ID_BT_BIPR_OBEX_AUTH_REQ,
   MSG_ID_BT_BIPR_OBEX_AUTH_CNF,
   MSG_ID_BT_BIPR_GROUP_END = MSG_ID_BT_BIPR_OBEX_AUTH_CNF,
# 521 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_bpp_message.h" 1
# 106 "../include/profiles/bluetooth_bpp_message.h"
   MSG_ID_BT_BPP_CONNECT_REQ = MSG_ID_BT_BPP_GROUP_START,


   MSG_ID_BT_BPP_CONNECT_CNF,
   MSG_ID_BT_BPP_GET_PRINTER_ATTR_REQ,
   MSG_ID_BT_BPP_GET_PRINTER_ATTR_CNF,
   MSG_ID_BT_BPP_PRINT_DOC_REQ,
   MSG_ID_BT_BPP_PRINT_DOC_CNF,
   MSG_ID_BT_BPP_JOB_STATUS_IND,
   MSG_ID_BT_BPP_PROGRESS_IND,
   MSG_ID_BT_BPP_PROGRESS_RSP,
   MSG_ID_BT_BPP_AUTH_IND,
   MSG_ID_BT_BPP_AUTH_RSP,
   MSG_ID_BT_BPP_CANCEL_REQ,
   MSG_ID_BT_BPP_CANCEL_CNF,
   MSG_ID_BT_BPP_DISCONNECT_REQ,
   MSG_ID_BT_BPP_DISCONNECT_CNF,
   MSG_ID_BT_BPP_DISCONNECT_IND,

   MSG_ID_BT_BPP_GROUP_END = MSG_ID_BT_BPP_DISCONNECT_IND,
# 523 "../include/bluetooth_sap.h" 2



# 1 "../include/profiles/bluetooth_ftpc_message.h" 1
# 110 "../include/profiles/bluetooth_ftpc_message.h"
    MSG_ID_BT_FTPC_REGISTER_CLIENT_REQ = MSG_ID_BT_FTPC_GROUP_START,

 MSG_ID_BT_FTPC_REGISTER_CLIENT_CNF,
 MSG_ID_BT_FTPC_DEREGISTER_CLIENT_REQ,
 MSG_ID_BT_FTPC_DEREGISTER_CLIENT_CNF,
 MSG_ID_BT_FTPC_CONNECT_REQ,
 MSG_ID_BT_FTPC_CONNECT_CNF,
 MSG_ID_BT_FTPC_PUSH_REQ,
 MSG_ID_BT_FTPC_PUSH_CNF,
 MSG_ID_BT_FTPC_PULL_REQ,
 MSG_ID_BT_FTPC_PULL_CNF,
 MSG_ID_BT_FTPC_SET_FOLDER_REQ,
 MSG_ID_BT_FTPC_SET_FOLDER_CNF,
 MSG_ID_BT_FTPC_ABORT_REQ,
 MSG_ID_BT_FTPC_ABORT_CNF,
 MSG_ID_BT_FTPC_DISCONNECT_REQ,
 MSG_ID_BT_FTPC_DISCONNECT_CNF,
 MSG_ID_BT_FTPC_TPDISCONNECT_IND,
 MSG_ID_BT_FTPC_AUTH_IND,
 MSG_ID_BT_FTPC_AUTH_RSP,
 MSG_ID_BT_FTPC_SUPPORTED_FORMATS_IND,
 MSG_ID_BT_FTPC_CLIENT_INTERNAL_RW,
 MSG_ID_BT_FTPC_ACTION_REQ,
 MSG_ID_BT_FTPC_ACTION_CNF,
 MSG_ID_BT_FTPC_AUTH_REQ,
 MSG_ID_BT_FTPC_AUTH_CNF,
 MSG_ID_BT_FTPC_PUSHFILE_REQ,
 MSG_ID_BT_FTPC_PUSHFILE_CNF,
 MSG_ID_BT_FTPC_PULLFILE_REQ,
 MSG_ID_BT_FTPC_PULLFILE_CNF,
 MSG_ID_BT_FTPC_ABORTFILE_REQ,
 MSG_ID_BT_FTPC_ABORTFILE_CNF,
 MSG_ID_BT_FTPC_FILE_PROGRESS_IND,
 MSG_ID_BT_FTPC_GROUP_END = MSG_ID_BT_FTPC_FILE_PROGRESS_IND,
# 527 "../include/bluetooth_sap.h" 2
# 1 "../include/profiles/bluetooth_ftps_message.h" 1
# 110 "../include/profiles/bluetooth_ftps_message.h"
    MSG_ID_BT_FTPS_REGISTER_SERVER_REQ = MSG_ID_BT_FTPS_GROUP_START,

 MSG_ID_BT_FTPS_REGISTER_SERVER_CNF,
 MSG_ID_BT_FTPS_DEREGISTER_SERVER_REQ,
 MSG_ID_BT_FTPS_DEREGISTER_SERVER_CNF,
 MSG_ID_BT_FTPS_CONNECT_IND,
 MSG_ID_BT_FTPS_CONNECT_RSP,
 MSG_ID_BT_FTPS_PUSH_IND,
 MSG_ID_BT_FTPS_PUSH_RSP,
 MSG_ID_BT_FTPS_PULL_IND,
 MSG_ID_BT_FTPS_PULL_RSP,
 MSG_ID_BT_FTPS_SET_FOLDER_IND,
 MSG_ID_BT_FTPS_SET_FOLDER_RSP,
 MSG_ID_BT_FTPS_ABORT_IND,
 MSG_ID_BT_FTPS_ABORT_RSP,
 MSG_ID_BT_FTPS_AUTH_REQ,
 MSG_ID_BT_FTPS_AUTH_CNF,
 MSG_ID_BT_FTPS_AUTH_IND,
 MSG_ID_BT_FTPS_AUTH_RSP,
 MSG_ID_BT_FTPS_DISCONNECT_IND,
 MSG_ID_BT_FTPS_DISCONNECT_RSP,
 MSG_ID_BT_FTPS_TPDISCONNECT_REQ,
 MSG_ID_BT_FTPS_TPDISCONNECT_IND,
 MSG_ID_BT_FTPS_AUTHORIZE_IND,
 MSG_ID_BT_FTPS_AUTHORIZE_RSP,
 MSG_ID_BT_FTPS_SERVER_INTERNAL_RW,
 MSG_ID_BT_FTPS_ACTION_IND,
 MSG_ID_BT_FTPS_ACTION_RSP,
 MSG_ID_BT_FTPS_PUSHFILE_IND,
 MSG_ID_BT_FTPS_PUSHFILE_RSP,
 MSG_ID_BT_FTPS_PUSHFILE_RSP_IND,
 MSG_ID_BT_FTPS_PULLFILE_IND,
 MSG_ID_BT_FTPS_PULLFILE_RSP,
 MSG_ID_BT_FTPS_PULLFILE_RSP_IND,
 MSG_ID_BT_FTPS_ABORTFILE_REQ,
 MSG_ID_BT_FTPS_ABORTFILE_CNF,
 MSG_ID_BT_FTPS_FILE_PROGRESS_IND,
 MSG_ID_BT_FTPS_GROUP_END = MSG_ID_BT_FTPS_FILE_PROGRESS_IND,
# 528 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_goepc_message.h" 1
# 110 "../include/profiles/bluetooth_goepc_message.h"
    MSG_ID_BT_GOEPC_REGISTER_CLIENT_REQ = MSG_ID_BT_GOEPC_GROUP_START,

 MSG_ID_BT_GOEPC_REGISTER_CLIENT_CNF,
 MSG_ID_BT_GOEPC_DEREGISTER_CLIENT_REQ,
 MSG_ID_BT_GOEPC_DEREGISTER_CLIENT_CNF,
 MSG_ID_BT_GOEPC_CONNECT_REQ,
 MSG_ID_BT_GOEPC_CONNECT_CNF,
 MSG_ID_BT_GOEPC_PUSH_REQ,
 MSG_ID_BT_GOEPC_PUSH_CNF,
 MSG_ID_BT_GOEPC_PULL_REQ,
 MSG_ID_BT_GOEPC_PULL_CNF,
 MSG_ID_BT_GOEPC_SET_FOLDER_REQ,
 MSG_ID_BT_GOEPC_SET_FOLDER_CNF,
 MSG_ID_BT_GOEPC_ABORT_REQ,
 MSG_ID_BT_GOEPC_ABORT_CNF,
 MSG_ID_BT_GOEPC_DISCONNECT_REQ,
 MSG_ID_BT_GOEPC_DISCONNECT_CNF,
 MSG_ID_BT_GOEPC_TPDISCONNECT_IND,
 MSG_ID_BT_GOEPC_AUTH_IND,
 MSG_ID_BT_GOEPC_AUTH_RSP,
 MSG_ID_BT_GOEPC_SUPPORTED_FORMATS_IND,
 MSG_ID_BT_GOEPC_CLIENT_INTERNAL_RW,
 MSG_ID_BT_GOEPC_ACTION_REQ,
 MSG_ID_BT_GOEPC_ACTION_CNF,
 MSG_ID_BT_GOEPC_AUTH_REQ,
 MSG_ID_BT_GOEPC_AUTH_CNF,
 MSG_ID_BT_GOEPC_PUSHFILE_REQ,
 MSG_ID_BT_GOEPC_PUSHFILE_CNF,
 MSG_ID_BT_GOEPC_PULLFILE_REQ,
 MSG_ID_BT_GOEPC_PULLFILE_CNF,
 MSG_ID_BT_GOEPC_ABORTFILE_REQ,
 MSG_ID_BT_GOEPC_ABORTFILE_CNF,
 MSG_ID_BT_GOEPC_GROUP_END = MSG_ID_BT_GOEPC_ABORTFILE_CNF,
# 530 "../include/bluetooth_sap.h" 2
# 1 "../include/profiles/bluetooth_goeps_message.h" 1
# 110 "../include/profiles/bluetooth_goeps_message.h"
    MSG_ID_BT_GOEPS_REGISTER_SERVER_REQ = MSG_ID_BT_GOEPS_GROUP_START,

 MSG_ID_BT_GOEPS_REGISTER_SERVER_CNF,
 MSG_ID_BT_GOEPS_DEREGISTER_SERVER_REQ,
 MSG_ID_BT_GOEPS_DEREGISTER_SERVER_CNF,
 MSG_ID_BT_GOEPS_CONNECT_IND,
 MSG_ID_BT_GOEPS_CONNECT_RSP,
 MSG_ID_BT_GOEPS_PUSH_IND,
 MSG_ID_BT_GOEPS_PUSH_RSP,
 MSG_ID_BT_GOEPS_PULL_IND,
 MSG_ID_BT_GOEPS_PULL_RSP,
 MSG_ID_BT_GOEPS_SET_FOLDER_IND,
 MSG_ID_BT_GOEPS_SET_FOLDER_RSP,
 MSG_ID_BT_GOEPS_ABORT_IND,
 MSG_ID_BT_GOEPS_ABORT_RSP,
 MSG_ID_BT_GOEPS_AUTH_REQ,
 MSG_ID_BT_GOEPS_AUTH_CNF,
 MSG_ID_BT_GOEPS_AUTH_IND,
 MSG_ID_BT_GOEPS_AUTH_RSP,
 MSG_ID_BT_GOEPS_DISCONNECT_IND,
 MSG_ID_BT_GOEPS_DISCONNECT_RSP,
 MSG_ID_BT_GOEPS_TPDISCONNECT_REQ,
 MSG_ID_BT_GOEPS_TPDISCONNECT_IND,
 MSG_ID_BT_GOEPS_AUTHORIZE_IND,
 MSG_ID_BT_GOEPS_AUTHORIZE_RSP,
 MSG_ID_BT_GOEPS_SERVER_INTERNAL_RW,
 MSG_ID_BT_GOEPS_ACTION_IND,
 MSG_ID_BT_GOEPS_ACTION_RSP,
 MSG_ID_BT_GOEPS_PUSHFILE_IND,
 MSG_ID_BT_GOEPS_PUSHFILE_RSP,
 MSG_ID_BT_GOEPS_PUSHFILE_RSP_IND,
 MSG_ID_BT_GOEPS_PULLFILE_IND,
 MSG_ID_BT_GOEPS_PULLFILE_RSP,
 MSG_ID_BT_GOEPS_PULLHFILE_RSP_IND,
 MSG_ID_BT_GOEPS_ABORTFILE_REQ,
 MSG_ID_BT_GOEPS_ABORTFILE_CNF,
 MSG_ID_BT_GOEPS_GROUP_END = MSG_ID_BT_GOEPS_ABORTFILE_CNF,
# 531 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_hfg_message.h" 1
# 110 "../include/profiles/bluetooth_hfg_message.h"
    MSG_ID_BT_HFG_ACTIVATE_REQ = MSG_ID_BT_HFG_GROUP_START,

    MSG_ID_BT_HFG_ACTIVATE_CNF,
    MSG_ID_BT_HFG_DEACTIVATE_REQ,
    MSG_ID_BT_HFG_DEACTIVATE_CNF,
    MSG_ID_BT_HFG_CONNECT_REQ,
    MSG_ID_BT_HFG_CONNECT_CNF,
    MSG_ID_BT_HFG_ACCEPT_CHANNEL_REQ,
    MSG_ID_BT_HFG_ACCEPT_CHANNEL_CNF,
    MSG_ID_BT_HFG_REJECT_CHANNEL_REQ,
    MSG_ID_BT_HFG_REJECT_CHANNEL_CNF,
    MSG_ID_BT_HFG_DISCONNECT_REQ,
    MSG_ID_BT_HFG_DISCONNECT_CNF,
    MSG_ID_BT_HFG_SCO_CONNECT_REQ,
    MSG_ID_BT_HFG_SCO_CONNECT_CNF,
    MSG_ID_BT_HFG_SCO_DISCONNECT_REQ,
    MSG_ID_BT_HFG_SCO_DISCONNECT_CNF,
    MSG_ID_BT_HFG_GET_STATUS_REQ,
    MSG_ID_BT_HFG_GET_STATUS_CNF,







    MSG_ID_BT_HFG_OK_REQ,
    MSG_ID_BT_HFG_OK_CNF,
    MSG_ID_BT_HFG_ERROR_REQ,
    MSG_ID_BT_HFG_ERROR_CNF,
    MSG_ID_BT_HFG_NO_CARRIER_REQ,
    MSG_ID_BT_HFG_NO_CARRIER_CNF,
    MSG_ID_BT_HFG_BUSY_REQ,
    MSG_ID_BT_HFG_BUSY_CNF,
    MSG_ID_BT_HFG_NO_ANSWER_REQ,
    MSG_ID_BT_HFG_NO_ANSWER_CNF,
    MSG_ID_BT_HFG_DELAYED_REQ,
    MSG_ID_BT_HFG_DELAYED_CNF,
    MSG_ID_BT_HFG_BLACKLISTED_REQ,
    MSG_ID_BT_HFG_BLACKLISTED_CNF,
    MSG_ID_BT_HFG_RING_REQ,
    MSG_ID_BT_HFG_RING_CNF,
    MSG_ID_BT_HFG_CALL_WAITING_REQ,
    MSG_ID_BT_HFG_CALL_WAITING_CNF,
    MSG_ID_BT_HFG_READ_INDICATOR_REQ,
    MSG_ID_BT_HFG_READ_INDICATOR_CNF,
    MSG_ID_BT_HFG_CALL_LIST_REQ,
    MSG_ID_BT_HFG_CALL_LIST_CNF,
    MSG_ID_BT_HFG_CALL_ID_REQ,
    MSG_ID_BT_HFG_CALL_ID_CNF,
    MSG_ID_BT_HFG_INDICATOR_REPORT_REQ,
    MSG_ID_BT_HFG_INDICATOR_REPORT_CNF,
    MSG_ID_BT_HFG_SUBSCRIBER_NUMBER_REQ,
    MSG_ID_BT_HFG_SUBSCRIBER_NUMBER_CNF,
    MSG_ID_BT_HFG_OPERATOR_NAME_REQ,
    MSG_ID_BT_HFG_OPERATOR_NAME_CNF,
    MSG_ID_BT_HFG_VOICE_TAG_REQ,
    MSG_ID_BT_HFG_VOICE_TAG_CNF,
    MSG_ID_BT_HFG_VOICE_REC_REQ,
    MSG_ID_BT_HFG_VOICE_REC_CNF,
    MSG_ID_BT_HFG_RESPONSE_HOLD_REQ,
    MSG_ID_BT_HFG_RESPONSE_HOLD_CNF,
    MSG_ID_BT_HFG_SPEAKER_GAIN_REQ,
    MSG_ID_BT_HFG_SPEAKER_GAIN_CNF,
    MSG_ID_BT_HFG_MIC_GAIN_REQ,
    MSG_ID_BT_HFG_MIC_GAIN_CNF,
    MSG_ID_BT_HFG_RINGTONE_STATUS_REQ,
    MSG_ID_BT_HFG_RINGTONE_STATUS_CNF,
    MSG_ID_BT_HFG_SUPPORTED_CHARSET_REQ,
    MSG_ID_BT_HFG_SUPPORTED_CHARSET_CNF,
    MSG_ID_BT_HFG_SELECTED_CHARSET_REQ,
    MSG_ID_BT_HFG_SELECTED_CHARSET_CNF,
    MSG_ID_BT_HFG_MODEL_ID_REQ,
    MSG_ID_BT_HFG_MODEL_ID_CNF,
    MSG_ID_BT_HFG_MANUFACTURE_ID_REQ,
    MSG_ID_BT_HFG_MANUFACTURE_ID_CNF,
    MSG_ID_BT_HFG_SEND_DATA_REQ,
    MSG_ID_BT_HFG_SEND_DATA_CNF,






    MSG_ID_BT_HFG_SUPPORTED_PHONEBOOK_REQ,
    MSG_ID_BT_HFG_SUPPORTED_PHONEBOOK_CNF,



    MSG_ID_BT_HFG_SELECTED_PHONEBOOK_REQ,
    MSG_ID_BT_HFG_SELECTED_PHONEBOOK_CNF,



    MSG_ID_BT_HFG_READ_PHONEBOOK_INFO_REQ,
    MSG_ID_BT_HFG_READ_PHONEBOOK_INFO_CNF,



    MSG_ID_BT_HFG_READ_PHONEBOOK_REQ,
    MSG_ID_BT_HFG_READ_PHONEBOOK_CNF,



    MSG_ID_BT_HFG_FIND_PHONEBOOK_INFO_REQ,
    MSG_ID_BT_HFG_FIND_PHONEBOOK_INFO_CNF,



    MSG_ID_BT_HFG_FIND_PHONEBOOK_REQ,
    MSG_ID_BT_HFG_FIND_PHONEBOOK_CNF,



    MSG_ID_BT_HFG_WRITE_PHONEBOOK_INFO_REQ,
    MSG_ID_BT_HFG_WRITE_PHONEBOOK_INFO_CNF,






    MSG_ID_BT_HFG_SUPPORTED_SMS_SERVICE_REQ,
    MSG_ID_BT_HFG_SUPPORTED_SMS_SERVICE_CNF,



    MSG_ID_BT_HFG_SELECTED_SMS_SERVICE_REQ,
    MSG_ID_BT_HFG_SELECTED_SMS_SERVICE_CNF,



    MSG_ID_BT_HFG_SMS_SERVICE_REQ,
    MSG_ID_BT_HFG_SMS_SERVICE_CNF,



    MSG_ID_BT_HFG_SUPPORTED_PREF_MSG_STORAGE_REQ,
    MSG_ID_BT_HFG_SUPPORTED_PREF_MSG_STORAGE_CNF,



    MSG_ID_BT_HFG_SELECTED_PREF_MSG_STORAGE_REQ,
    MSG_ID_BT_HFG_SELECTED_PREF_MSG_STORAGE_CNF,



    MSG_ID_BT_HFG_PREF_MSG_STORAGE_REQ,
    MSG_ID_BT_HFG_PREF_MSG_STORAGE_CNF,



    MSG_ID_BT_HFG_SUPPORTED_MSG_FORMAT_REQ,
    MSG_ID_BT_HFG_SUPPORTED_MSG_FORMAT_CNF,



    MSG_ID_BT_HFG_SELECTED_MSG_FORMAT_REQ,
    MSG_ID_BT_HFG_SELECTED_MSG_FORMAT_CNF,



    MSG_ID_BT_HFG_SERVICE_CENTRE_REQ,
    MSG_ID_BT_HFG_SERVICE_CENTRE_CNF,



    MSG_ID_BT_HFG_TEXT_MODE_PARAMS_REQ,
    MSG_ID_BT_HFG_TEXT_MODE_PARAMS_CNF,



    MSG_ID_BT_HFG_SUPPORTED_SHOW_PARAMS_REQ,
    MSG_ID_BT_HFG_SUPPORTED_SHOW_PARAMS_CNF,



    MSG_ID_BT_HFG_SELECTED_SHOW_PARAMS_REQ,
    MSG_ID_BT_HFG_SELECTED_SHOW_PARAMS_CNF,



    MSG_ID_BT_HFG_SUPPORTED_NEW_MSG_INDICATION_REQ,
    MSG_ID_BT_HFG_SUPPORTED_NEW_MSG_INDICATION_CNF,



    MSG_ID_BT_HFG_SELECTED_NEW_MSG_INDICATION_REQ,
    MSG_ID_BT_HFG_SELECTED_NEW_MSG_INDICATION_CNF,



    MSG_ID_BT_HFG_NEW_MSG_INDICATION_REQ,
    MSG_ID_BT_HFG_NEW_MSG_INDICATION_CNF,



    MSG_ID_BT_HFG_SUPPORTED_LIST_STATUS_REQ,
    MSG_ID_BT_HFG_SUPPORTED_LIST_STATUS_CNF,
# 321 "../include/profiles/bluetooth_hfg_message.h"
    MSG_ID_BT_HFG_LIST_MSG_REQ,
    MSG_ID_BT_HFG_LIST_MSG_CNF,
# 337 "../include/profiles/bluetooth_hfg_message.h"
    MSG_ID_BT_HFG_READ_MSG_REQ,
    MSG_ID_BT_HFG_READ_MSG_CNF,




    MSG_ID_BT_HFG_SEND_MSG_REQ,
    MSG_ID_BT_HFG_SEND_MSG_CNF,




    MSG_ID_BT_HFG_SEND_STORED_MSG_REQ,
    MSG_ID_BT_HFG_SEND_STORED_MSG_CNF,




    MSG_ID_BT_HFG_WRITE_MSG_REQ,
    MSG_ID_BT_HFG_WRITE_MSG_CNF,


    MSG_ID_BT_HFG_SMS_ERROR_REQ,
    MSG_ID_BT_HFG_SMS_ERROR_CNF,
# 376 "../include/profiles/bluetooth_hfg_message.h"
    MSG_ID_BT_HFG_CONNECT_REQ_IND,
    MSG_ID_BT_HFG_RFCOMM_CONNECTED_IND,
    MSG_ID_BT_HFG_CONNECTED_IND,
    MSG_ID_BT_HFG_DISCONNECTED_IND,
    MSG_ID_BT_HFG_SCO_CONNECTED_IND,
    MSG_ID_BT_HFG_SCO_DISCONNECTED_IND,







    MSG_ID_BT_HFG_QUERY_SUPPORTED_PHONEBOOK_IND,


    MSG_ID_BT_HFG_SELECT_PHONEBOOK_IND,


    MSG_ID_BT_HFG_QUERY_SELECTED_PHONEBOOK_IND,



    MSG_ID_BT_HFG_READ_PHONEBOOK_INFO_IND,


    MSG_ID_BT_HFG_READ_PHONEBOOK_IND,



    MSG_ID_BT_HFG_FIND_PHONEBOOK_INFO_IND,


    MSG_ID_BT_HFG_FIND_PHONEBOOK_IND,



    MSG_ID_BT_HFG_WRITE_PHONEBOOK_INFO_IND,


    MSG_ID_BT_HFG_WRITE_PHONEBOOK_IND,







    MSG_ID_BT_HFG_QUERY_SUPPORTED_SMS_SERVICE_IND,


    MSG_ID_BT_HFG_QUERY_SELECTED_SMS_SERVICE_IND,


    MSG_ID_BT_HFG_SELECT_SMS_SERVICE_IND,



    MSG_ID_BT_HFG_QUERY_SUPPORTED_PREF_MSG_STORAGE_IND,


    MSG_ID_BT_HFG_QUERY_SELECTED_PREF_MSG_STORAGE_IND,


    MSG_ID_BT_HFG_SELECT_PREF_MSG_STORAGE_IND,



    MSG_ID_BT_HFG_QUERY_SUPPORTED_MSG_FORMAT_IND,


    MSG_ID_BT_HFG_QUERY_SELECTED_MSG_FORMAT_IND,


    MSG_ID_BT_HFG_SELECT_MSG_FORMAT_IND,



    MSG_ID_BT_HFG_QUERY_SERVICE_CENTRE_IND,


    MSG_ID_BT_HFG_SET_SERVICE_CENTRE_IND,



    MSG_ID_BT_HFG_QUERY_TEXT_MODE_PARAMS_IND,


    MSG_ID_BT_HFG_SET_TEXT_MODE_PARAMS_IND,



    MSG_ID_BT_HFG_QUERY_SUPPORTED_SHOW_PARAMS_IND,


    MSG_ID_BT_HFG_QUERY_SELECTED_SHOW_PARAMS_IND,


    MSG_ID_BT_HFG_SET_SHOW_PARAMS_IND,



    MSG_ID_BT_HFG_QUERY_SUPPORTED_NEW_MSG_INDICATION_IND,


    MSG_ID_BT_HFG_QUERY_SELECTED_NEW_MSG_INDICATION_IND,


    MSG_ID_BT_HFG_SET_NEW_MSG_INDICATION_IND,



    MSG_ID_BT_HFG_QUERY_SUPPORTED_LIST_STATUS_IND,


    MSG_ID_BT_HFG_LIST_MSG_IND,



    MSG_ID_BT_HFG_READ_MSG_IND,




    MSG_ID_BT_HFG_SEND_MSG_IND,



    MSG_ID_BT_HFG_SEND_STORED_MSG_IND,




    MSG_ID_BT_HFG_WRITE_MSG_IND,



    MSG_ID_BT_HFG_DELETE_MSG_IND,




    MSG_ID_BT_HFG_HANDSFREE_FEATURES_IND,
    MSG_ID_BT_HFG_QUERY_INDICATOR_VALUE_IND,
    MSG_ID_BT_HFG_ENABLE_EXTENDED_ERRORS_IND,
    MSG_ID_BT_HFG_ANSWER_CALL_IND,
    MSG_ID_BT_HFG_DIAL_NUMBER_IND,
    MSG_ID_BT_HFG_MEMORY_DIAL_IND,
    MSG_ID_BT_HFG_REDIAL_IND,
    MSG_ID_BT_HFG_CALL_HOLD_IND,
    MSG_ID_BT_HFG_QUERY_RESPONSE_HOLD_IND,
    MSG_ID_BT_HFG_SET_RESPONSE_HOLD_IND,
    MSG_ID_BT_HFG_HANGUP_IND,
    MSG_ID_BT_HFG_GENERATE_DTMF_IND,
    MSG_ID_BT_HFG_GET_LAST_VOICE_TAG_IND,
    MSG_ID_BT_HFG_LIST_CURRENT_CALLS_IND,
    MSG_ID_BT_HFG_QUERY_SUBSCRIBER_NUMBER_IND,
    MSG_ID_BT_HFG_QUERY_NETWORK_OPERATOR_IND,
    MSG_ID_BT_HFG_REPORT_MIC_VOLUME_IND,
    MSG_ID_BT_HFG_REPORT_SPK_VOLUME_IND,
    MSG_ID_BT_HFG_ENABLE_CALLER_ID_IND,
    MSG_ID_BT_HFG_ENABLE_CALL_WAITING_IND,
    MSG_ID_BT_HFG_DISABLE_NREC_IND,
    MSG_ID_BT_HFG_ENABLE_VOICE_RECOGNITION_IND,
    MSG_ID_BT_HFG_KEYPAD_CONTROL_IND,

    MSG_ID_BT_HFG_QUERY_SUPPORTED_CHARSET_IND,
    MSG_ID_BT_HFG_QUERY_SELECTED_CHARSET_IND,
    MSG_ID_BT_HFG_SELECT_CHARSET_IND,
    MSG_ID_BT_HFG_QUERY_MODEL_ID_IND,
    MSG_ID_BT_HFG_QUERY_MANUFACTURE_ID_IND,
    MSG_ID_BT_HFG_AT_COMMAND_DATA_IND,
    MSG_ID_BT_HFG_GROUP_END = MSG_ID_BT_HFG_AT_COMMAND_DATA_IND,
# 533 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_hid_message.h" 1
# 109 "../include/profiles/bluetooth_hid_message.h"
   MSG_ID_BT_HIDD_DEVICE_START = MSG_ID_BT_HID_GROUP_START,
   MSG_ID_BT_HIDD_ACTIVATE_REQ = MSG_ID_BT_HIDD_DEVICE_START,
   MSG_ID_BT_HIDD_DEACTIVATE_REQ,
   MSG_ID_BT_HIDD_CONNECT_REQ,
   MSG_ID_BT_HIDD_CONNECTION_AUTHORIZE_RSP,
   MSG_ID_BT_HIDD_UNPLUG_REQ,
   MSG_ID_BT_HIDD_DISCONNECT_REQ,
   MSG_ID_BT_HIDD_INTERRUPT_DATA_REQ,
   MSG_ID_BT_HIDD_REQ_EXT,
   MSG_ID_BT_HIDD_GET_REPORT_RSP,
   MSG_ID_BT_HIDD_SET_REPORT_RSP,
   MSG_ID_BT_HIDD_GET_PROTOCOL_RSP,
   MSG_ID_BT_HIDD_SET_PROTOCOL_RSP,
   MSG_ID_BT_HIDD_GET_IDLE_RATE_RSP,
   MSG_ID_BT_HIDD_SET_IDLE_RATE_RSP,


   MSG_ID_BT_HIDD_ACTIVATE_CNF,
   MSG_ID_BT_HIDD_DEACTIVATE_CNF,
   MSG_ID_BT_HIDD_CONNECT_CNF,
   MSG_ID_BT_HIDD_CONNECT_IND,
   MSG_ID_BT_HIDD_CONNECTION_AUTHORIZE_IND,
   MSG_ID_BT_HIDD_DISCONNECT_CNF,
   MSG_ID_BT_HIDD_DISCONNECT_IND,
   MSG_ID_BT_HIDD_UNPLUG_CNF,
   MSG_ID_BT_HIDD_CONTROL_IND,
   MSG_ID_BT_HIDD_INTERRUPT_DATA_CNF,
   MSG_ID_BT_HIDD_INTERRUPT_DATA_IND,
   MSG_ID_BT_HIDD_GET_REPORT_IND,
   MSG_ID_BT_HIDD_SET_REPORT_IND,
   MSG_ID_BT_HIDD_GET_PROTOCOL_IND,
   MSG_ID_BT_HIDD_SET_PROTOCOL_IND,
   MSG_ID_BT_HIDD_GET_IDLE_RATE_IND,
   MSG_ID_BT_HIDD_SET_IDLE_RATE_IND,
   MSG_ID_BT_HIDD_DEVICE_END = MSG_ID_BT_HIDD_SET_IDLE_RATE_IND,



   MSG_ID_BT_HIDH_HOST_START,
   MSG_ID_BT_HIDH_ACTIVATE_REQ = MSG_ID_BT_HIDH_HOST_START,
   MSG_ID_BT_HIDH_DEACTIVATE_REQ,
   MSG_ID_BT_HIDH_GET_DESCLIST_REQ,
   MSG_ID_BT_HIDH_CONNECT_REQ,
   MSG_ID_BT_HIDH_DISCONNECT_REQ,
   MSG_ID_BT_HIDH_RECONNECT_REQ,
   MSG_ID_BT_HIDH_SEND_CONTROL_REQ,
   MSG_ID_BT_HIDH_SET_REPORT_REQ,
   MSG_ID_BT_HIDH_GET_REPORT_REQ,
   MSG_ID_BT_HIDH_SET_PROTOCOL_REQ,
   MSG_ID_BT_HIDH_GET_PROTOCOL_REQ,
   MSG_ID_BT_HIDH_SET_IDLE_RATE_REQ,
   MSG_ID_BT_HIDH_GET_IDLE_RATE_REQ,
   MSG_ID_BT_HIDH_SEND_OUTPUT_REPORT,
   MSG_ID_BT_HIDH_REQ_EXT,
   MSG_ID_BT_HIDH_CONNECTION_AUTHORIZE_RSP,


   MSG_ID_BT_HIDH_ACTIVATE_CNF,
   MSG_ID_BT_HIDH_DEACTIVATE_CNF,
   MSG_ID_BT_HIDH_DESCINFO_CNF,
   MSG_ID_BT_HIDH_CONNECT_CNF,
   MSG_ID_BT_HIDH_DISCONNECT_CNF,
   MSG_ID_BT_HIDH_SEND_CONTROL_CNF,
   MSG_ID_BT_HIDH_SET_REPORT_CNF,
   MSG_ID_BT_HIDH_GET_REPORT_CNF,
   MSG_ID_BT_HIDH_SET_PROTOCOL_CNF,
   MSG_ID_BT_HIDH_GET_PROTOCOL_CNF,
   MSG_ID_BT_HIDH_SET_IDLE_RATE_CNF,
   MSG_ID_BT_HIDH_GET_IDLE_RATE_CNF,
   MSG_ID_BT_HIDH_INTERRUPT_DATA_CNF,
   MSG_ID_BT_HIDH_CONNECTION_AUTHORIZE_IND,
   MSG_ID_BT_HIDH_CONNECT_IND,
   MSG_ID_BT_HIDH_DISCONNECT_IND,
   MSG_ID_BT_HIDH_UNPLUG_IND,
   MSG_ID_BT_HIDH_INTERRUPT_DATA_IND,
   MSG_ID_BT_HIDH_HOST_END = MSG_ID_BT_HIDH_INTERRUPT_DATA_IND,
   MSG_ID_BT_HID_GROUP_END = MSG_ID_BT_HIDH_HOST_END,
# 535 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_oppc_message.h" 1
# 109 "../include/profiles/bluetooth_oppc_message.h"
    MSG_ID_BT_OPPC_REGISTER_CLIENT_REQ = MSG_ID_BT_OPPC_GROUP_START,

 MSG_ID_BT_OPPC_REGISTER_CLIENT_CNF,
 MSG_ID_BT_OPPC_DEREGISTER_CLIENT_REQ,
 MSG_ID_BT_OPPC_DEREGISTER_CLIENT_CNF,
 MSG_ID_BT_OPPC_CONNECT_REQ,
 MSG_ID_BT_OPPC_CONNECT_CNF,
 MSG_ID_BT_OPPC_PUSH_REQ,
 MSG_ID_BT_OPPC_PUSH_CNF,
 MSG_ID_BT_OPPC_PULL_REQ,
 MSG_ID_BT_OPPC_PULL_CNF,
 MSG_ID_BT_OPPC_SET_FOLDER_REQ,
 MSG_ID_BT_OPPC_SET_FOLDER_CNF,
 MSG_ID_BT_OPPC_ABORT_REQ,
 MSG_ID_BT_OPPC_ABORT_CNF,
 MSG_ID_BT_OPPC_DISCONNECT_REQ,
 MSG_ID_BT_OPPC_DISCONNECT_CNF,
 MSG_ID_BT_OPPC_TPDISCONNECT_IND,
 MSG_ID_BT_OPPC_AUTH_IND,
 MSG_ID_BT_OPPC_AUTH_RSP,
 MSG_ID_BT_OPPC_OPP_SUPPORTED_FORMATS_IND,
 MSG_ID_BT_OPPC_CLIENT_INTERNAL_RW,
 MSG_ID_BT_OPPC_ACTION_REQ,
 MSG_ID_BT_OPPC_ACTION_CNF,
 MSG_ID_BT_OPPC_AUTH_REQ,
 MSG_ID_BT_OPPC_AUTH_CNF,
 MSG_ID_BT_OPPC_PUSHFILE_REQ,
 MSG_ID_BT_OPPC_PUSHFILE_CNF,
 MSG_ID_BT_OPPC_PULLFILE_REQ,
 MSG_ID_BT_OPPC_PULLFILE_CNF,
 MSG_ID_BT_OPPC_ABORTFILE_REQ,
 MSG_ID_BT_OPPC_ABORTFILE_CNF,
 MSG_ID_BT_OPPC_GROUP_END = MSG_ID_BT_OPPC_ABORTFILE_CNF,
# 538 "../include/bluetooth_sap.h" 2
# 1 "../include/profiles/bluetooth_opps_message.h" 1
# 110 "../include/profiles/bluetooth_opps_message.h"
    MSG_ID_BT_OPPS_REGISTER_SERVER_REQ = MSG_ID_BT_OPPS_GROUP_START,

 MSG_ID_BT_OPPS_REGISTER_SERVER_CNF,
 MSG_ID_BT_OPPS_DEREGISTER_SERVER_REQ,
 MSG_ID_BT_OPPS_DEREGISTER_SERVER_CNF,
 MSG_ID_BT_OPPS_CONNECT_IND,
 MSG_ID_BT_OPPS_CONNECT_RSP,
 MSG_ID_BT_OPPS_PUSH_IND,
 MSG_ID_BT_OPPS_PUSH_RSP,
 MSG_ID_BT_OPPS_PULL_IND,
 MSG_ID_BT_OPPS_PULL_RSP,
 MSG_ID_BT_OPPS_SET_FOLDER_IND,
 MSG_ID_BT_OPPS_SET_FOLDER_RSP,
 MSG_ID_BT_OPPS_ABORT_IND,
 MSG_ID_BT_OPPS_ABORT_RSP,
 MSG_ID_BT_OPPS_AUTH_REQ,
 MSG_ID_BT_OPPS_AUTH_CNF,
 MSG_ID_BT_OPPS_AUTH_IND,
 MSG_ID_BT_OPPS_AUTH_RSP,
 MSG_ID_BT_OPPS_DISCONNECT_IND,
 MSG_ID_BT_OPPS_DISCONNECT_RSP,
 MSG_ID_BT_OPPS_TPDISCONNECT_REQ,
 MSG_ID_BT_OPPS_TPDISCONNECT_IND,
 MSG_ID_BT_OPPS_AUTHORIZE_IND,
 MSG_ID_BT_OPPS_AUTHORIZE_RSP,
 MSG_ID_BT_OPPS_SERVER_INTERNAL_RW,
 MSG_ID_BT_OPPS_ACTION_IND,
 MSG_ID_BT_OPPS_ACTION_RSP,
 MSG_ID_BT_OPPS_PUSHFILE_IND,
 MSG_ID_BT_OPPS_PUSHFILE_RSP,
 MSG_ID_BT_OPPS_PUSHFILE_RSP_IND,
 MSG_ID_BT_OPPS_PULLFILE_IND,
 MSG_ID_BT_OPPS_PULLFILE_RSP,
 MSG_ID_BT_OPPS_PULLHFILE_RSP_IND,
 MSG_ID_BT_OPPS_ABORTFILE_REQ,
 MSG_ID_BT_OPPS_ABORTFILE_CNF,
 MSG_ID_BT_OPPS_GROUP_END = MSG_ID_BT_OPPS_ABORTFILE_CNF,
# 539 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_pbap_message.h" 1
# 110 "../include/profiles/bluetooth_pbap_message.h"
   MSG_ID_BT_PBAP_REGISTER_REQ = MSG_ID_BT_PBAP_GROUP_START+1,
   MSG_ID_BT_PBAP_REGISTER_CNF,
   MSG_ID_BT_PBAP_DEREGISTER_REQ,
   MSG_ID_BT_PBAP_DEREGISTER_CNF,
   MSG_ID_BT_PBAP_DISCONNECT_REQ,
   MSG_ID_BT_PBAP_DISCONNECT_IND,
   MSG_ID_BT_PBAP_AUTHORIZE_IND,
   MSG_ID_BT_PBAP_AUTHORIZE_RSP,
   MSG_ID_BT_PBAP_CLIENT_CONNECT_IND,
   MSG_ID_BT_PBAP_CLIENT_CONNECT_RSP,
   MSG_ID_BT_PBAP_CLIENT_AUTH_CHALLENGE_IND,
   MSG_ID_BT_PBAP_CLIENT_AUTH_CHALLENGE_RSP,
   MSG_ID_BT_PBAP_SET_PATH_IND,
   MSG_ID_BT_PBAP_SET_PATH_RSP,
   MSG_ID_BT_PBAP_READ_ENTRY_IND,
   MSG_ID_BT_PBAP_READ_ENTRY_RSP,
   MSG_ID_BT_PBAP_READ_FOLDER_IND,
   MSG_ID_BT_PBAP_READ_CONTINUE_IND,
   MSG_ID_BT_PBAP_READ_FOLDER_RSP,
   MSG_ID_BT_PBAP_READ_LIST_IND,
   MSG_ID_BT_PBAP_READ_LIST_RSP,
   MSG_ID_BT_PBAP_ABORT_IND,
   MSG_ID_BT_PBAP_OPER_SUCCESS_IND,
   MSG_ID_BT_PBAP_GROUP_END,
# 541 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_simap_message.h" 1
# 108 "../include/profiles/bluetooth_simap_message.h"
 MSG_ID_BT_SIMAP_ACTIVATE_REQ = MSG_ID_BT_SIMAP_GROUP_START,

 MSG_ID_BT_SIMAP_DEACTIVATE_REQ,
 MSG_ID_BT_SIMAP_AUTH_RSP,
 MSG_ID_BT_SIMAP_SEND_STATUS_IND_WITH_UNAVAILABLE_REQ,

 MSG_ID_BT_SIMAP_DISCONNECT_REQ,



 MSG_ID_BT_SIMAP_ACTIVATE_CNF,
 MSG_ID_BT_SIMAP_DEACTIVATE_CNF,
 MSG_ID_BT_SIMAP_AUTH_REQ,
 MSG_ID_BT_SIMAP_CONNECT_CNF,
 MSG_ID_BT_SIMAP_CONNECT_IND,
 MSG_ID_BT_SIMAP_DISCONNECT_CNF,

 MSG_ID_BT_SIMAP_DISCONNECT_IND,
 MSG_ID_BT_SIMAP_ATR_RSP_SENT_IND,
 MSG_ID_BT_SIMAP_APDU_RSP_SENT_IND,
 MSG_ID_BT_SIMAP_SIM_ON_RSP_SENT_IND,
 MSG_ID_BT_SIMAP_SIM_OFF_RSP_SENT_IND,
 MSG_ID_BT_SIMAP_SIM_RESET_RSP_SENT_IND,
 MSG_ID_BT_SIMAP_CARD_STATUS_IND_SENT_IND,
 MSG_ID_BT_SIMAP_CARD_READER_STATUS_RSP_SENT_IND,
 MSG_ID_BT_SIMAP_SET_TRANSPORT_PROTOCOL_RSP_SENT_IND,
 MSG_ID_BT_SIMAP_AUTH_REQ_TIMEOUT_RFCLOSE_IND,
 MSG_ID_BT_SIMAP_SIM_CONNECT_FAILED_IND,
 MSG_ID_BT_SIMAP_BT_RESET_IND,


 MSG_ID_BT_SIM_CONNECT_REQ,
 MSG_ID_BT_SIM_RESET_REQ,
 MSG_ID_BT_SIM_APDU_REQ,
 MSG_ID_BT_SIM_DISCONNECT_REQ,
 MSG_ID_BT_SIM_POWER_OFF_REQ,


 MSG_ID_BT_SIM_CONNECT_CNF,
 MSG_ID_BT_SIM_RESET_CNF,
 MSG_ID_BT_SIM_APDU_CNF,
 MSG_ID_BT_SIM_DISCONNECT_CNF,
 MSG_ID_BT_SIM_POWER_OFF_CNF,


 MSG_ID_BT_SIMAP_INJECT_MESSAGE,

 MSG_ID_BT_SIMAP_TERMINATE_SERVICE,

 MSG_ID_BT_SIMAP_GROUP_END = MSG_ID_BT_SIMAP_TERMINATE_SERVICE,
# 543 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_spp_message.h" 1
# 110 "../include/profiles/bluetooth_spp_message.h"
 MSG_ID_BT_SPP_ACTIVATE_REQ = MSG_ID_BT_SPP_GROUP_START,

 MSG_ID_BT_SPP_CONNECT_REQ,
 MSG_ID_BT_SPP_SCO_CONNECT_REQ,
 MSG_ID_BT_SPP_SEND_DATA_REQ,
 MSG_ID_BT_SPP_GET_DATA_REQ,
 MSG_ID_BT_SPP_DEACTIVATE_REQ,
 MSG_ID_BT_SPP_DISCONNECT_REQ,
 MSG_ID_BT_SPP_AUDIO_CONNECT_REQ,
 MSG_ID_BT_SPP_AUDIO_DISCONNECT_REQ,
 MSG_ID_BT_SPP_CONNECT_IND_RSP,
 MSG_ID_BT_SPP_AUTH_RSP,

 MSG_ID_BT_SPP_UART_OWNER_CNF,

 MSG_ID_BT_SPP_UART_PLUGOUT_CNF,
 MSG_ID_BT_DUN_CONNECT_REQ,
 MSG_ID_BT_DUN_ACTIVATE_REQ,
 MSG_ID_BT_DUN_DEACTIVATE_REQ,
 MSG_ID_BT_DUN_DISCONNECT_REQ,
 MSG_ID_BT_DUN_CONNECT_IND_RSP,
 MSG_ID_BT_DUN_AUTH_RSP,


 MSG_ID_BT_FAX_ACTIVATE_REQ,
 MSG_ID_BT_FAX_DEACTIVATE_REQ,
 MSG_ID_BT_FAX_DISCONNECT_REQ,
 MSG_ID_BT_FAX_CONNECT_IND_RSP,
 MSG_ID_BT_FAX_AUTH_RSP,
 MSG_ID_BT_FAX_CONNECT_REQ,


 MSG_ID_BT_SPP_INITIALIZE_REQ,
 MSG_ID_BT_SPP_INITIALIZE_CNF,
 MSG_ID_BT_SPP_REGISTER_CALLBACK_REQ,
 MSG_ID_BT_SPP_REGISTER_CALLBACK_CNF,


 MSG_ID_BT_SPP_UART_OPEN_REQ,
 MSG_ID_BT_SPP_UART_OPEN_CNF,
 MSG_ID_BT_SPP_UART_CLOSE_REQ,
 MSG_ID_BT_SPP_UART_CLOSE_CNF,
 MSG_ID_BT_SPP_UART_GET_BYTES_REQ,
 MSG_ID_BT_SPP_UART_GET_BYTES_CNF,
 MSG_ID_BT_SPP_UART_PUT_BYTES_REQ,
 MSG_ID_BT_SPP_UART_PUT_BYTES_CNF,
 MSG_ID_BT_SPP_UART_GET_BYTES_AVAIL_REQ,
 MSG_ID_BT_SPP_UART_GET_BYTES_AVAIL_CNF,
 MSG_ID_BT_SPP_UART_GET_TX_ROOM_LEFT_REQ,
 MSG_ID_BT_SPP_UART_GET_TX_ROOM_LEFT_CNF,
 MSG_ID_BT_SPP_UART_SET_OWNER_REQ,
 MSG_ID_BT_SPP_UART_SET_OWNER_CNF,
 MSG_ID_BT_SPP_UART_CTRL_DCD_REQ,
 MSG_ID_BT_SPP_UART_CTRL_DCD_CNF,
 MSG_ID_BT_SPP_UART_CTRL_BREAK_REQ,
 MSG_ID_BT_SPP_UART_CTRL_BREAK_CNF,
 MSG_ID_BT_SPP_UART_CLR_RX_BUFFER_REQ,
 MSG_ID_BT_SPP_UART_CLR_RX_BUFFER_CNF,
 MSG_ID_BT_SPP_UART_CLR_TX_BUFFER_REQ,
 MSG_ID_BT_SPP_UART_CLR_TX_BUFFER_CNF,
 MSG_ID_BT_SPP_UART_GET_OWNER_ID_REQ,
 MSG_ID_BT_SPP_UART_GET_OWNER_ID_CNF,

 MSG_ID_BT_SPP_UART_PLUGOUT_IND,
 MSG_ID_BT_SPP_UART_READY_TO_READ_IND,
 MSG_ID_BT_SPP_UART_READY_TO_WRITE_IND,




 MSG_ID_BT_SPP_CONNECT_IND,
 MSG_ID_BT_SPP_CONNECT_IND_REQ,
 MSG_ID_BT_SPP_SCO_CONNECT_IND,
 MSG_ID_BT_SPP_DISCONNECT_IND,
 MSG_ID_BT_SPP_ACTIVATE_CNF,
 MSG_ID_BT_SPP_DEACTIVATE_CNF,
 MSG_ID_BT_SPP_DISCONNECT_CNF,
 MSG_ID_BT_SPP_AUTH_REQ,
 MSG_ID_BT_SPP_AUDIO_CONNECT_CNF,
 MSG_ID_BT_SPP_AUDIO_CONNECT_IND,
 MSG_ID_BT_SPP_AUDIO_DISCONNECT_CNF,
 MSG_ID_BT_SPP_AUDIO_DISCONNECT_IND,
 MSG_ID_BT_SPP_SCO_RSSI_IND,
 MSG_ID_BT_SPP_CONNECT_CNF,

 MSG_ID_BT_SPP_UART_OWNER_IND,


 MSG_ID_BT_DUN_CONNECT_IND,
 MSG_ID_BT_DUN_CONNECT_IND_REQ,
 MSG_ID_BT_DUN_DISCONNECT_IND,
 MSG_ID_BT_DUN_ACTIVATE_CNF,
 MSG_ID_BT_DUN_DEACTIVATE_CNF,
 MSG_ID_BT_DUN_DISCONNECT_CNF,
 MSG_ID_BT_DUN_AUTH_REQ,
 MSG_ID_BT_DUN_CONNECT_CNF,


 MSG_ID_BT_FAX_CONNECT_IND,
 MSG_ID_BT_FAX_CONNECT_IND_REQ,
 MSG_ID_BT_FAX_DISCONNECT_IND,
 MSG_ID_BT_FAX_ACTIVATE_CNF,
 MSG_ID_BT_FAX_DEACTIVATE_CNF,
 MSG_ID_BT_FAX_DISCONNECT_CNF,
 MSG_ID_BT_FAX_AUTH_REQ,
 MSG_ID_BT_FAX_CONNECT_CNF,


 MSG_ID_BT_SPP_UART_DATA_AVAILABLE_IND,
 MSG_ID_BT_SPP_UART_DATA_AVAILABLE_IND_RSP,


 MSG_ID_BT_UART_ASSIGN_BUFFER_REQ,
 MSG_ID_BT_UART_ASSIGN_BUFFER_CNF,



 MSG_ID_BT_SPP_ENABLE_REQ,
 MSG_ID_BT_SPP_ENABLE_CNF,
 MSG_ID_BT_SPP_DISABLE_REQ,
 MSG_ID_BT_SPP_DISABLE_CNF,

 MSG_ID_BT_SPP_GROUP_END = MSG_ID_BT_SPP_DISABLE_CNF,
# 545 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_jsr82_message.h" 1
# 108 "../include/profiles/bluetooth_jsr82_message.h"
 MSG_ID_BT_JSR_ACTIVE_REQ = MSG_ID_BT_JSR82_GROUP_START,


 MSG_ID_BT_JSR_ACTIVE_CNF,
 MSG_ID_BT_JSR_DEACTIVE_REQ,
 MSG_ID_BT_JSR_DEACTIVE_CNF,
 MSG_ID_BT_JSR_POWER_OFF_IND,
 MSG_ID_BT_JSR_POWER_OFF_REQ,
 MSG_ID_BT_JSR_KICK_NEW_COMMAND,
 MSG_ID_BT_JSR_PANIC,
 MSG_ID_BT_JSR82_AUTHENTICATION_REQ,
 MSG_ID_BT_JSR82_AUTHORIZATION_REQ,
 MSG_ID_BT_JSR82_ENCRYPTION_REQ,
 MSG_ID_BT_JSR82_AUTHENTICATION_CNF,
 MSG_ID_BT_JSR82_AUTHORIZATION_CNF,
 MSG_ID_BT_JSR82_ENCRYPTION_CNF,
 MSG_ID_BT_JSR82_RESTROE_ACL_REQ,
 MSG_ID_BT_JSR82_RESTROE_ACL_CNF,
 MSG_ID_BT_JSR82_CONNECT_REQ,
 MSG_ID_BT_JSR82_CONNECT_CNF,
 MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ,
 MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF,
 MSG_ID_BT_JSR82_TURNON_SERVICE_REQ,
 MSG_ID_BT_JSR82_TURNON_SERVICE_CNF,
 MSG_ID_BT_JSR82_TURNOFF_SERVICE_REQ,
 MSG_ID_BT_JSR82_TURNOFF_SERVICE_CNF,
 MSG_ID_BT_JSR82_DISABLE_SERVICE_REQ,
 MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF,
 MSG_ID_BT_JSR82_CONNECT_IND,
 MSG_ID_BT_JSR82_CONNECT_RSP,
 MSG_ID_BT_JSR82_DISCONNECT_REQ,
 MSG_ID_BT_JSR82_DISCONNECT_IND,
 MSG_ID_BT_JSR82_TX_DATA_REQ,
 MSG_ID_BT_JSR82_TX_DATA_CFN,
 MSG_ID_BT_JSR82_RX_DATA_IND,
 MSG_ID_BT_JSR82_RX_DATA_RSP,

 MSG_ID_BT_JSR82_RX_READY_IND,
 MSG_ID_BT_JSR82_TX_READY_IND,
 MSG_ID_BT_JSR82_ALLOCATE_TXRX_BUF_REQ,
 MSG_ID_BT_JSR82_ALLOCATE_TXRX_BUF_CNF,

 MSG_ID_BT_JSR82_SET_ACL_SECURITY_REQ,
 MSG_ID_BT_JSR82_SET_ACL_SECURITY_CNF,
 MSG_ID_BT_JSR82_SPP_GET_DATA_REQ,


 MSG_ID_BT_JSR82_PUT_BYTES_REQ,
 MSG_ID_BT_JSR82_PUT_BYTES_CNF,
 MSG_ID_BT_JSR82_GET_BYTES_REQ,
 MSG_ID_BT_JSR82_GET_BYTES_CNF,
 MSG_ID_BT_JSR82_DATA_AVAILABLE_IND,
 MSG_ID_BT_JSR82_DATA_AVAILABLE_IND_RSP,
 MSG_ID_BT_JSR82_ASSIGN_BUFFER_REQ,
 MSG_ID_BT_JSR82_ASSIGN_BUFFER_CNF,

 MSG_ID_BT_JSR82_GROUP_END = MSG_ID_BT_JSR82_ASSIGN_BUFFER_CNF,
# 547 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_chn_message.h" 1
# 110 "../include/profiles/bluetooth_chn_message.h"
    MSG_ID_BT_CHN_ACTIVATE_REQ = MSG_ID_BT_CHN_GROUP_START,

    MSG_ID_BT_CHN_ACTIVATE_CNF,
    MSG_ID_BT_CHN_DEACTIVATE_REQ,
    MSG_ID_BT_CHN_DEACTIVATE_CNF,
    MSG_ID_BT_CHN_CONNECT_REQ,
    MSG_ID_BT_CHN_CONNECT_CNF,
    MSG_ID_BT_CHN_ACCEPT_CHANNEL_REQ,
    MSG_ID_BT_CHN_ACCEPT_CHANNEL_CNF,
    MSG_ID_BT_CHN_REJECT_CHANNEL_REQ,
    MSG_ID_BT_CHN_REJECT_CHANNEL_CNF,
    MSG_ID_BT_CHN_DISCONNECT_REQ,
    MSG_ID_BT_CHN_DISCONNECT_CNF,
    MSG_ID_BT_CHN_SCO_CONNECT_REQ,
    MSG_ID_BT_CHN_SCO_CONNECT_CNF,
    MSG_ID_BT_CHN_SCO_DISCONNECT_REQ,
    MSG_ID_BT_CHN_SCO_DISCONNECT_CNF,

    MSG_ID_BT_CHN_SEND_DATA_REQ,
    MSG_ID_BT_CHN_SEND_DATA_CNF,

    MSG_ID_BT_CHN_CONNECT_REQ_IND,
    MSG_ID_BT_CHN_CONNECTED_IND,
    MSG_ID_BT_CHN_DISCONNECTED_IND,
    MSG_ID_BT_CHN_SCO_CONNECTED_IND,
    MSG_ID_BT_CHN_SCO_DISCONNECTED_IND,

    MSG_ID_BT_CHN_RX_DATA_IND,
    MSG_ID_BT_CHN_GROUP_END = MSG_ID_BT_CHN_RX_DATA_IND,
# 549 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_map_message.h" 1
# 106 "../include/profiles/bluetooth_map_message.h"
    MSG_ID_BT_MAP_INTERNAL_IND = MSG_ID_BT_MAP_GROUP_START,

    MSG_ID_BT_MAPS_ACTIVATE_REQ,
    MSG_ID_BT_MAPS_ACTIVATE_CNF,
    MSG_ID_BT_MAPS_DEACTIVATE_REQ,
    MSG_ID_BT_MAPS_DEACTIVATE_CNF,

    MSG_ID_BT_MAPS_REGISTER_REQ,
    MSG_ID_BT_MAPS_REGISTER_CNF,
    MSG_ID_BT_MAPS_DEREGISTER_REQ,
    MSG_ID_BT_MAPS_DEREGISTER_CNF,
    MSG_ID_BT_MAPS_AUTHORIZE_IND,
    MSG_ID_BT_MAPS_AUTHORIZE_RSP,
    MSG_ID_BT_MAPS_CONNECT_IND,
    MSG_ID_BT_MAPS_CONNECT_RSP,
    MSG_ID_BT_MAPS_DISCONNECT_REQ,
    MSG_ID_BT_MAPS_DISCONNECT_IND,
    MSG_ID_BT_MAPS_DISCONNECT_CNF,
    MSG_ID_BT_MAPS_SET_FOLDER_IND,
    MSG_ID_BT_MAPS_SET_FOLDER_RSP,
    MSG_ID_BT_MAPS_GET_FOLDER_LISTING_IND,
    MSG_ID_BT_MAPS_GET_FOLDER_LISTING_RSP,
    MSG_ID_BT_MAPS_GET_MESSAGE_LISTING_IND,
    MSG_ID_BT_MAPS_GET_MESSAGE_LISTING_RSP,
    MSG_ID_BT_MAPS_GET_MESSAGE_IND,
    MSG_ID_BT_MAPS_GET_MESSAGE_RSP,
    MSG_ID_BT_MAPS_SET_NOTIF_REGISTRATION_IND,
    MSG_ID_BT_MAPS_SET_NOTIF_REGISTRATION_RSP,
    MSG_ID_BT_MAPS_SET_MESSAGE_STATUS_IND,
    MSG_ID_BT_MAPS_SET_MESSAGE_STATUS_RSP,
    MSG_ID_BT_MAPS_PUSH_MESSAGE_IND,
    MSG_ID_BT_MAPS_PUSH_MESSAGE_RSP,
    MSG_ID_BT_MAPS_UPDATE_INBOX_IND,
    MSG_ID_BT_MAPS_UPDATE_INBOX_RSP,
    MSG_ID_BT_MAPS_MNS_CONNECT_REQ,
    MSG_ID_BT_MAPS_MNS_CONNECT_CNF,
    MSG_ID_BT_MAPS_MNS_DISCONNECT_REQ,
    MSG_ID_BT_MAPS_MNS_DISCONNECT_IND,
    MSG_ID_BT_MAPS_MNS_DISCONNECT_CNF,
    MSG_ID_BT_MAPS_MNS_SEND_EVENT_REQ,
    MSG_ID_BT_MAPS_MNS_SEND_EVENT_CNF,
    MSG_ID_BT_MAPS_ABORT_REQ,
    MSG_ID_BT_MAPS_ABORT_CNF,

    MSG_ID_BT_MAPC_ACTIVATE_REQ,
    MSG_ID_BT_MAPC_ACTIVATE_CNF,
    MSG_ID_BT_MAPC_DEACTIVATE_REQ,
    MSG_ID_BT_MAPC_DEACTIVATE_CNF,
    MSG_ID_BT_MAPC_CONNECT_REQ,
    MSG_ID_BT_MAPC_CONNECT_CNF,
    MSG_ID_BT_MAPC_DISCONNECT_REQ,
    MSG_ID_BT_MAPC_DISCONNECT_CNF,
    MSG_ID_BT_MAPC_DISCONNECT_IND,
    MSG_ID_BT_MAPC_SET_FOLDER_REQ,
    MSG_ID_BT_MAPC_SET_FOLDER_CNF,
    MSG_ID_BT_MAPC_GET_FOLDER_LISTING_SIZE_REQ,
    MSG_ID_BT_MAPC_GET_FOLDER_LISTING_SIZE_CNF,
    MSG_ID_BT_MAPC_GET_FOLDER_LISTING_REQ,
    MSG_ID_BT_MAPC_GET_FOLDER_LISTING_CNF,
    MSG_ID_BT_MAPC_GET_MESSAGE_LISTING_SIZE_REQ,
    MSG_ID_BT_MAPC_GET_MESSAGE_LISTING_SIZE_CNF,
    MSG_ID_BT_MAPC_GET_MESSAGE_LISTING_REQ,
    MSG_ID_BT_MAPC_GET_MESSAGE_LISTING_CNF,
    MSG_ID_BT_MAPC_GET_MESSAGE_REQ,
    MSG_ID_BT_MAPC_GET_MESSAGE_CNF,
    MSG_ID_BT_MAPC_SET_NOTIF_REGISTRATION_REQ,
    MSG_ID_BT_MAPC_SET_NOTIF_REGISTRATION_CNF,
    MSG_ID_BT_MAPC_SET_MESSAGE_STATUS_REQ,
    MSG_ID_BT_MAPC_SET_MESSAGE_STATUS_CNF,
    MSG_ID_BT_MAPC_PUSH_MESSAGE_REQ,
    MSG_ID_BT_MAPC_PUSH_MESSAGE_CNF,
    MSG_ID_BT_MAPC_UPDATE_INBOX_REQ,
    MSG_ID_BT_MAPC_UPDATE_INBOX_CNF,
    MSG_ID_BT_MAPC_ABORT_REQ,
    MSG_ID_BT_MAPC_ABORT_CNF,
    MSG_ID_BT_MAPC_MNS_AUTHORIZE_IND,
    MSG_ID_BT_MAPC_MNS_AUTHORIZE_RSP,
    MSG_ID_BT_MAPC_MNS_DISCONNECT_REQ,
    MSG_ID_BT_MAPC_MNS_DISCONNECT_CNF,
    MSG_ID_BT_MAPC_MNS_SEND_EVENT_IND,
    MSG_ID_BT_MAPC_MNS_SEND_EVENT_RSP,

    MSG_ID_BT_MAP_GROUP_END = MSG_ID_BT_MAPC_MNS_SEND_EVENT_RSP,
# 552 "../include/bluetooth_sap.h" 2

# 1 "../include/profiles/bluetooth_prx_message.h" 1
# 71 "../include/profiles/bluetooth_prx_message.h"
 MSG_ID_BT_PRXM_CONNECT_REQ = MSG_ID_BT_PRXM_GROUP_START,
 MSG_ID_BT_PRXM_CONNECT_CNF,
 MSG_ID_BT_PRXM_DISCONNECT_REQ,
 MSG_ID_BT_PRXM_DISCONNECT_IND,
 MSG_ID_BT_PRXM_GET_CAPABILITY_REQ,
 MSG_ID_BT_PRXM_GET_CAPABILITY_CNF,
 MSG_ID_BT_PRXM_GET_REMOTE_TXPOWER_REQ,
 MSG_ID_BT_PRXM_GET_REMOTE_TXPOWER_CNF,
 MSG_ID_BT_PRXM_SET_PATHLOSS_REQ,
 MSG_ID_BT_PRXM_SET_PATHLOSS_CNF,
 MSG_ID_BT_PRXM_SET_LINKLOSS_REQ,
 MSG_ID_BT_PRXM_SET_LINKLOSS_CNF,
    MSG_ID_BT_PRXM_GET_RSSI_REQ,
    MSG_ID_BT_PRXM_GET_RSSI_CNF,
 MSG_ID_BT_PRXM_GET_LINKLOSS_REQ,
 MSG_ID_BT_PRXM_GET_LINKLOSS_CNF,
 MSG_ID_BT_PRXM_GROUP_END,




 MSG_ID_BT_PRXR_REGISTER_REQ = MSG_ID_BT_PRXR_GROUP_START,
 MSG_ID_BT_PRXR_REGISTER_CNF,
 MSG_ID_BT_PRXR_DEREGISTER_REQ,
 MSG_ID_BT_PRXR_DEREGISTER_CNF,
 MSG_ID_BT_PRXR_AUTHORIZE_IND,
 MSG_ID_BT_PRXR_AUTHORIZE_RSP,
 MSG_ID_BT_PRXR_CONNECT_IND,
 MSG_ID_BT_PRXR_DISCONNECT_REQ,
 MSG_ID_BT_PRXR_DISCONNECT_IND,
 MSG_ID_BT_PRXR_PATHLOSS_IND,
 MSG_ID_BT_PRXR_LINKLOSS_IND,
 MSG_ID_BT_PRXR_UPDATE_TXPOWER_REQ,
 MSG_ID_BT_PRXR_UPDATE_TXPOWER_CNF,

 MSG_ID_BT_PRXR_GROUP_END,
# 554 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_pan_message.h" 1
# 71 "../include/profiles/bluetooth_pan_message.h"
    MSG_ID_BT_PAN_ACTIVATE_REQ = MSG_ID_BT_PAN_GROUP_START,
    MSG_ID_BT_PAN_DEACTIVATE_REQ,
    MSG_ID_BT_PAN_CONNECT_REQ,
    MSG_ID_BT_PAN_DISCONNECT_REQ,
    MSG_ID_BT_PAN_CONNECTION_AUTHORIZE_RSP,
    MSG_ID_BT_PAN_SET_NETTYPE_FILETER_REQ,
    MSG_ID_BT_PAN_SET_MULTIADDR_FILETER_REQ,
    MSG_ID_BT_PAN_SEND_PACKET_REQ,
    MSG_ID_BT_PAN_SEND_PENDING_PACKET_REQ,
    MSG_ID_BT_PAN_PTS_TEST_SEND_PACKET_REQ,

    MSG_ID_BT_PAN_CMD,


    MSG_ID_BT_PAN_ACTIVATE_CNF,
    MSG_ID_BT_PAN_DEACTIVATE_CNF,
    MSG_ID_BT_PAN_CONNECT_CNF,
    MSG_ID_BT_PAN_DISCONNECT_CNF,
    MSG_ID_BT_PAN_SET_NETTYPE_FILETER_CNF,
    MSG_ID_BT_PAN_SET_MULTIADDR_FILETER_CNF,
    MSG_ID_BT_PAN_CONNECTION_AUTHORIZE_IND,
    MSG_ID_BT_PAN_CONNECT_IND,
    MSG_ID_BT_PAN_DISCONNECT_IND,
    MSG_ID_BT_PAN_SET_NETTYPE_FILTER_IND,
    MSG_ID_BT_PAN_SET_MULTIADDR_FILTER_IND,
    MSG_ID_BT_PAN_GROUP_END = MSG_ID_BT_PAN_SET_MULTIADDR_FILTER_IND,
# 557 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_time_message.h" 1
# 71 "../include/profiles/bluetooth_time_message.h"
 MSG_ID_BT_TIMEC_REGISTER_REQ = MSG_ID_BT_TIMEC_GROUP_START,
 MSG_ID_BT_TIMEC_REGISTER_CNF,
 MSG_ID_BT_TIMEC_DEREGISTER_REQ,
 MSG_ID_BT_TIMEC_DEREGISTER_CNF,
 MSG_ID_BT_TIMEC_CONNECT_REQ,
 MSG_ID_BT_TIMEC_CONNECT_CNF,
 MSG_ID_BT_TIMEC_DISCONNECT_REQ,
 MSG_ID_BT_TIMEC_DISCONNECT_IND,
 MSG_ID_BT_TIMEC_GET_CTTIME_REQ,
 MSG_ID_BT_TIMEC_GET_CTTIME_CNF,
 MSG_ID_BT_TIMEC_GET_CTTIME_NOTIFY_REQ,
 MSG_ID_BT_TIMEC_GET_CTTIME_NOTIFY_CNF,
 MSG_ID_BT_TIMEC_SET_CTTIME_NOTIFY_REQ,
 MSG_ID_BT_TIMEC_SET_CTTIME_NOTIFY_CNF,
 MSG_ID_BT_TIMEC_UPDATE_CTTIME_IND,
 MSG_ID_BT_TIMEC_UPDATE_CTTIME_RSP,
 MSG_ID_BT_TIMEC_GET_LOCAL_TIME_INFO_REQ,
 MSG_ID_BT_TIMEC_GET_LOCAL_TIME_INFO_CNF,
 MSG_ID_BT_TIMEC_GET_REF_TIME_INFO_REQ,
 MSG_ID_BT_TIMEC_GET_REF_TIME_INFO_CNF,
 MSG_ID_BT_TIMEC_GET_DST_REQ,
 MSG_ID_BT_TIMEC_GET_DST_CNF,
 MSG_ID_BT_TIMEC_REQUEST_SERVER_UPDATE_REQ,
 MSG_ID_BT_TIMEC_REQUEST_SERVER_UPDATE_CNF,
 MSG_ID_BT_TIMEC_CANCEL_SERVER_UPDATE_REQ,
 MSG_ID_BT_TIMEC_CANCEL_SERVER_UPDATE_CNF,
 MSG_ID_BT_TIMEC_GET_SERVER_UPDATE_STATUS_REQ,
 MSG_ID_BT_TIMEC_GET_SERVER_UPDATE_STATUS_CNF,
 MSG_ID_BT_TIMEC_GROUP_END,




 MSG_ID_BT_TIMES_REGISTER_REQ = MSG_ID_BT_TIMES_GROUP_START,
 MSG_ID_BT_TIMES_REGISTER_CNF,
 MSG_ID_BT_TIMES_DEREGISTER_REQ,
 MSG_ID_BT_TIMES_DEREGISTER_CNF,
 MSG_ID_BT_TIMES_AUTHORIZE_IND,
 MSG_ID_BT_TIMES_AUTHORIZE_RSP,
 MSG_ID_BT_TIMES_CONNECT_REQ,
 MSG_ID_BT_TIMES_CONNECT_IND,
 MSG_ID_BT_TIMES_DISCONNECT_REQ,
 MSG_ID_BT_TIMES_DISCONNECT_IND,
 MSG_ID_BT_TIMES_GET_CTTIME_IND,
 MSG_ID_BT_TIMES_GET_CTTIME_RSP,
 MSG_ID_BT_TIMES_GET_CTTIME_NOTIFY_IND,
 MSG_ID_BT_TIMES_GET_CTTIME_NOTIFY_RSP,
 MSG_ID_BT_TIMES_SET_CTTIME_NOTIFY_IND,
 MSG_ID_BT_TIMES_SET_CTTIME_NOTIFY_RSP,
 MSG_ID_BT_TIMES_UPDATE_CTTIME_REQ,
 MSG_ID_BT_TIMES_UPDATE_CTTIME_CNF,
 MSG_ID_BT_TIMES_SET_LOCAL_TIME_INFO_REQ,
 MSG_ID_BT_TIMES_SET_LOCAL_TIME_INFO_CNF,
 MSG_ID_BT_TIMES_SET_REF_TIME_INFO_REQ,
 MSG_ID_BT_TIMES_SET_REF_TIME_INFO_CNF,
 MSG_ID_BT_TIMES_SET_DST_REQ,
 MSG_ID_BT_TIMES_SET_DST_CNF,
 MSG_ID_BT_TIMES_REQUEST_SERVER_UPDATE_IND,
 MSG_ID_BT_TIMES_REQUEST_SERVER_UPDATE_RSP,
 MSG_ID_BT_TIMES_CANCEL_SERVER_UPDATE_IND,
 MSG_ID_BT_TIMES_CANCEL_SERVER_UPDATE_RSP,
 MSG_ID_BT_TIMES_GET_SERVER_UPDATE_STATUS_IND,
 MSG_ID_BT_TIMES_GET_SERVER_UPDATE_STATUS_RSP,
 MSG_ID_BT_TIMES_GROUP_END,
# 560 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_hdp_message.h" 1
# 46 "../include/profiles/bluetooth_hdp_message.h"
    MSG_ID_BT_HDP_ACTIVATE_REQ = MSG_ID_BT_HDP_GROUP_START,
    MSG_ID_BT_HDP_ACTIVATE_CNF,
    MSG_ID_BT_HDP_DEACTIVATE_REQ,
    MSG_ID_BT_HDP_DEACTIVATE_CNF,
    MSG_ID_BT_HDP_REGISTER_INSTANCE_REQ,
    MSG_ID_BT_HDP_REGISTER_INSTANCE_CNF,
    MSG_ID_BT_HDP_DEREGISTER_INSTANCE_REQ,
    MSG_ID_BT_HDP_DEREGISTER_INSTANCE_CNF,

    MSG_ID_BT_HDP_CONNECT_REQ,
    MSG_ID_BT_HDP_CONNECT_CNF,
    MSG_ID_BT_HDP_DISCONNECT_REQ,
    MSG_ID_BT_HDP_DISCONNECT_CNF,
    MSG_ID_BT_HDP_REMOVE_CONNECTION_REQ,
    MSG_ID_BT_HDP_REMOVE_CONNECTION_CNF,
    MSG_ID_BT_HDP_CHANNEL_OPENED_IND,
    MSG_ID_BT_HDP_CHANNEL_OPENED_RSP,
    MSG_ID_BT_HDP_CHANNEL_CLOSED_IND,

    MSG_ID_BT_HDP_GET_MAIN_CHANNEL_REQ,
    MSG_ID_BT_HDP_GET_MAIN_CHANNEL_CNF,
    MSG_ID_BT_HDP_GET_INSTANCE_REQ,
    MSG_ID_BT_HDP_GET_INSTANCE_CNF,
    MSG_ID_BT_HDP_GET_L2CAP_CHANNEL_REQ,
    MSG_ID_BT_HDP_GET_L2CAP_CHANNEL_CNF,

 MSG_ID_BT_HDP_ECHO_REQ,
 MSG_ID_BT_HDP_ECHO_CNF,

 MSG_ID_BT_HDP_RECONNECT_REQ,

    MSG_ID_BT_HDP_GROUP_END,
# 563 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_htp_message.h" 1
# 34 "../include/profiles/bluetooth_htp_message.h"
    MSG_ID_BT_HTPC_GROUP_START = MSG_ID_BT_HTP_GROUP_START,
    MSG_ID_BT_HTPC_ACTIVATE_REQ = MSG_ID_BT_HTPC_GROUP_START,
    MSG_ID_BT_HTPC_DEACTIVATE_REQ,
    MSG_ID_BT_HTPC_CONNECT_REQ,
    MSG_ID_BT_HTPC_DISCONNECT_REQ,
    MSG_ID_BT_HTPC_SEARCH_ATTRIBUTE_REQ,
    MSG_ID_BT_HTPC_GET_TEMPERATURE_TYPE_REQ,
    MSG_ID_BT_HTPC_GET_CONFIG_REQ,
    MSG_ID_BT_HTPC_GET_INTERVAL_VALUE_REQ,
    MSG_ID_BT_HTPC_GET_INTERVAL_RANGE_REQ,
    MSG_ID_BT_HTPC_SET_CONFIG_REQ,
    MSG_ID_BT_HTPC_SET_INTERVAL_VALUE_REQ,
    MSG_ID_BT_HTPC_REMOVE_DEV_REQ,


    MSG_ID_BT_HTPC_ACTIVATE_CNF,
    MSG_ID_BT_HTPC_DEACTIVATE_CNF,
    MSG_ID_BT_HTPC_CONNECT_CNF,
    MSG_ID_BT_HTPC_DISCONNECT_CNF,
    MSG_ID_BT_HTPC_SEARCH_ATTRIBUTE_CNF,
    MSG_ID_BT_HTPC_SET_CONFIG_CNF,
    MSG_ID_BT_HTPC_SET_INTERVAL_VALUE_CNF,
    MSG_ID_BT_HTPC_DISCONNECT_IND,
    MSG_ID_BT_HTPC_TEMPERATURE_IND,
    MSG_ID_BT_HTPC_INTERMEDIATE_TEMPERATURE_IND,
    MSG_ID_BT_HTPC_SET_INTERVAL_VALUE_IND,
    MSG_ID_BT_HTPC_GROUP_END = MSG_ID_BT_HTPC_SET_INTERVAL_VALUE_IND,



    MSG_ID_BT_HTPT_GROUP_START,
    MSG_ID_BT_HTPT_ACTIVATE_REQ = MSG_ID_BT_HTPT_GROUP_START,
    MSG_ID_BT_HTPT_DEACTIVATE_REQ,
    MSG_ID_BT_HTPT_DISCONNECT_REQ,
    MSG_ID_BT_HTPT_SEND_TEMPERATURE,
    MSG_ID_BT_HTPT_SEND_INTERMEDIATE_TEMPERATURE,
    MSG_ID_BT_HTPT_SET_INTERVAL_VALUE_REQ,
     MSG_ID_BT_HTPT_SEND_INTERVAL_VALUE_INDICATION,


    MSG_ID_BT_HTPT_ACTIVATE_CNF,
    MSG_ID_BT_HTPT_DEACTIVATE_CNF,
    MSG_ID_BT_HTPT_DISCONNECT_CNF,
    MSG_ID_BT_HTPT_SEND_TEMPERATURE_CNF,
    MSG_ID_BT_HTPT_SEND_INTERMEDIATE_TEMPERATURE_CNF,
    MSG_ID_BT_HTPT_SET_INTERVAL_VALUE_CNF,
    MSG_ID_BT_HTPT_SEND_INTERVAL_VALUE_INDICATION_CNF,
    MSG_ID_BT_HTPT_CONNECT_IND,
    MSG_ID_BT_HTPT_DISCONNECT_IND,
    MSG_ID_BT_HTPT_SET_CONFIG_IND,
    MSG_ID_BT_HTPT_SET_INTERVAL_VALUE_IND,
    MSG_ID_BT_HTPT_GROUP_END = MSG_ID_BT_HTPT_SET_INTERVAL_VALUE_IND,

    MSG_ID_BT_HTP_CMD,

    MSG_ID_BT_HTP_GROUP_END = MSG_ID_BT_HTP_CMD,
# 566 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_fmp_message.h" 1
# 34 "../include/profiles/bluetooth_fmp_message.h"
    MSG_ID_BT_FMP_ACTIVATE_REQ = MSG_ID_BT_FMP_GROUP_START,
    MSG_ID_BT_FMP_DEACTIVATE_REQ,
    MSG_ID_BT_FMP_CONNECT_REQ,
    MSG_ID_BT_FMP_DISCONNECT_REQ,
    MSG_ID_BT_FMP_SET_ALERT_LEVEL_REQ,
    MSG_ID_BT_FMP_SEARCH_ATTRIBUTE_REQ,
    MSG_ID_BT_FMP_REMOVE_DEV_REQ,


    MSG_ID_BT_FMP_ACTIVATE_CNF,
    MSG_ID_BT_FMP_DEACTIVATE_CNF,
    MSG_ID_BT_FMP_CONNECT_CNF,
    MSG_ID_BT_FMP_DISCONNECT_CNF,
    MSG_ID_BT_FMP_SET_ALERT_LEVEL_CNF,
    MSG_ID_BT_FMP_SEARCH_ATTRIBUTE_CNF,
    MSG_ID_BT_FMP_CONNECT_IND,
    MSG_ID_BT_FMP_DISCONNECT_IND,
    MSG_ID_BT_FMP_SET_ALERT_LEVEL_IND,
    MSG_ID_BT_FMP_GROUP_END = MSG_ID_BT_FMP_SET_ALERT_LEVEL_IND,
# 569 "../include/bluetooth_sap.h" 2

    MSG_ID_BT_CUSTOM_MSG_ID_BEGIN,



# 1 "../include/pal/pal_sap.h" 1
# 106 "../include/pal/pal_sap.h"
MSG_ID_PAL_WNDRV_MAC_START_IND = MSG_ID_PAL_MSG_CODE_BEGIN,
MSG_ID_PAL_WNDRV_MAC_CONNECT_IND,
MSG_ID_PAL_WNDRV_MAC_CONNECT_FAIL_IND,
MSG_ID_PAL_WNDRV_MAC_DISCONNECT_IND,
MSG_ID_PAL_WNDRV_MAC_CANCEL_IND,
MSG_ID_PAL_WNDRV_QUERY_STATUS_IND,
MSG_ID_PAL_WNDRV_SYNC_TSF_IND,

MSG_ID_PAL_WNDRV_DATA_IND,
MSG_ID_PAL_WNDRV_DATA_BLOCK_FREE_NUM_IND,





MSG_TAG_PAL_BT_SEND_START,
MSG_TAG_PAL_BT_FIRST_REQ_MSG = MSG_TAG_PAL_BT_SEND_START,
MSG_ID_PAL_BT_READ_LOCAL_VERSION_INFO_COMMAND = MSG_TAG_PAL_BT_FIRST_REQ_MSG,
MSG_ID_PAL_BT_READ_LOCAL_AMP_INFO_COMMAND,
MSG_ID_PAL_BT_READ_LOCAL_AMP_ASSOC_COMMAND,
MSG_ID_PAL_BT_RESET_COMMAND,
MSG_ID_PAL_BT_READ_DATA_BLOCK_SIZE_COMMAND,

MSG_ID_PAL_BT_READ_LINK_QUALITY_COMMAND,
MSG_ID_PAL_BT_READ_RSSI_COMMAND,
MSG_ID_PAL_BT_WRITE_REMOTE_AMP_ASSOC_COMMAND,
MSG_ID_PAL_BT_CREATE_PHYSICAL_LINK_COMMAND,
MSG_ID_PAL_BT_ACCEPT_PHYSICAL_LINK_COMMAND,
MSG_ID_PAL_BT_READ_LINK_SUPERVISON_TIMEOUT_COMMAND,
MSG_ID_PAL_BT_DISCONNECT_PHYSICAL_LINK_COMMAND,
MSG_ID_PAL_BT_WRITE_LINK_SUPERVISON_TIMEOUT_COMMAND,

MSG_ID_PAL_BT_CREATE_LOGICAL_LINK_COMMAND,
MSG_ID_PAL_BT_ACCEPT_LOGICAL_LINK_COMMAND,
MSG_ID_PAL_BT_FLOW_SPEC_MODIFY_COMMAND,
MSG_ID_PAL_BT_DISCONNECT_LOGICAL_LINK_COMMAND,
MSG_ID_PAL_BT_LOGICAL_LINK_CANCEL_COMMAND,
MSG_ID_PAL_BT_READ_LOGICAL_LINK_ACCEPT_TIMEOUT_COMMAND,
MSG_ID_PAL_BT_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT_COMMAND,

MSG_ID_PAL_BT_ENHANCED_FLUSH_COMMAND,
MSG_ID_PAL_BT_SHORT_RANGE_MODE_COMMAND,
MSG_ID_PAL_BT_DATA_COMMAND,
MSG_TAG_PAL_BT_SEND_END = MSG_ID_PAL_BT_DATA_COMMAND,




MSG_ID_PAL_WNDRV_MAC_START_REQ,
MSG_ID_PAL_WNDRV_MAC_CONNECT_REQ,
MSG_ID_PAL_WNDRV_ADD_KEY_REQ,
MSG_ID_PAL_WNDRV_MAC_DISCONNECT_REQ,
MSG_ID_PAL_WNDRV_MAC_CANCEL_REQ,
MSG_ID_PAL_WNDRV_DATA_REQ,
MSG_ID_PAL_WNDRV_QUERY_STATUS_REQ,
MSG_ID_PAL_WNDRV_SET_ACTIVITY_REPORT_REQ,
MSG_ID_PAL_WNDRV_SHORT_RANGE_MODE_REQ,





MSG_TAG_PAL_BT_RECV_START,
MSG_ID_PAL_BT_READ_LOCAL_VERSION_COMPLETE_EVENT = MSG_TAG_PAL_BT_RECV_START,
MSG_ID_PAL_BT_READ_LOCAL_AMP_INFO_COMPLETE_EVENT,
MSG_ID_PAL_BT_READ_LOCAL_AMP_ASSOC_COMPLETE_EVENT,
MSG_ID_PAL_BT_CHNAGE_AMP_STATUS_EVENT,
MSG_ID_PAL_BT_RESET_COMPLETE_EVENT,
MSG_ID_PAL_BT_READ_DATA_BLOCK_SIZE_COMPLETE_EVENT,

MSG_ID_PAL_BT_CHANNEL_SELECTED_EVENT,
MSG_ID_PAL_BT_READ_LINK_QUALITY_COMPLETE_EVENT,
MSG_ID_PAL_BT_READ_RSSI_COMPLETE_EVENT,
MSG_ID_PAL_BT_WRITE_REMOTE_AMP_ASSOC_COMPLETE_EVENT,
MSG_ID_PAL_BT_CREATE_PHYSICAL_LINK_STATUS_EVENT,
MSG_ID_PAL_BT_ACCEPT_PHYSICAL_LINK_STATUS_EVENT,
MSG_ID_PAL_BT_PHYSICAL_LINK_COMPLETE_EVENT,
MSG_ID_PAL_BT_READ_LINK_SUPERVISON_TIMEOUT_COMPLETE_EVENT,
MSG_ID_PAL_BT_DISCONNECT_PHYSICAL_LINK_STATUS_EVENT,
MSG_ID_PAL_BT_DISCONNECT_PHYSICAL_LINK_COMPLETE_EVENT,
MSG_ID_PAL_BT_PHYSICAL_LINK_LOSS_EARLY_WARNING_EVENT,
MSG_ID_PAL_BT_WRITE_LINK_SUPERVISON_TIMEOUT_COMPLETE_EVENT,

MSG_ID_PAL_BT_CREATE_LOGICAL_LINK_STATUS_EVENT,
MSG_ID_PAL_BT_ACCEPT_LOGICAL_LINK_STATUS_EVENT,
MSG_ID_PAL_BT_FLOW_SPEC_MODIFY_STATUS_EVENT,
MSG_ID_PAL_BT_FLOW_SPEC_MODIFY_COMPLETE_EVENT,
MSG_ID_PAL_BT_LOGICAL_LINK_COMPLETE_EVENT,
MSG_ID_PAL_BT_DISCONNECT_LOGICAL_LINK_STATUS_EVENT,
MSG_ID_PAL_BT_DISCONNECT_LOGICAL_LINK_COMPLETE_EVENT,
MSG_ID_PAL_BT_LOGICAL_LINK_CANCEL_STATUS_EVENT,
MSG_ID_PAL_BT_LOGICAL_LINK_CANCEL_COMPLETE_EVENT,
MSG_ID_PAL_BT_READ_LOGICAL_LINK_ACCEPT_TIMEOUT_COMPLETE_EVENT,
MSG_ID_PAL_BT_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT_COMPLETE_EVENT,

MSG_ID_PAL_BT_NUM_OF_COMPLETE_DATA_BLOCKS_EVENT,
MSG_ID_PAL_BT_ENHANCED_FLUSH_STATUS_EVENT,
MSG_ID_PAL_BT_ENHANCED_FLUSH_COMPLETE_EVENT,
MSG_ID_PAL_BT_SHORT_RANGE_MODE_STATUS_EVENT,
MSG_ID_PAL_BT_SHORT_RANGE_MODE_CHNAGE_COMPLETE_EVENT,
MSG_ID_PAL_BT_DATA_EVENT,
MSG_TAG_PAL_BT_LAST_REQ_MSG = MSG_ID_PAL_BT_DATA_EVENT,
# 575 "../include/bluetooth_sap.h" 2


# 1 "../include/profiles/bluetooth_sdap_tester_message.h" 1
# 41 "../include/profiles/bluetooth_sdap_tester_message.h"
 MSG_ID_BT_SDAP_TESTER_CMD = MSG_ID_BT_SDAP_TESTER_GROUP_START,
 MSG_ID_BT_SDAP_TESTER_GROUP_END,
# 578 "../include/bluetooth_sap.h" 2


    MSG_ID_END = 0xFFFFFFFF
# 256 "../include/common/bt_message.h" 2
} msg_type;
# 98 "database/parse_db.c" 2

# 1 "../include/common/default/bt_mmi.h" 1
# 111 "../include/common/default/bt_mmi.h"
# 1 "../dummyinc/tst_codegen.h" 1
# 42 "../dummyinc/tst_codegen.h"
typedef int socklen_t;

typedef unsigned short sa_family_t;

struct sockaddr_un {
 sa_family_t sun_family;
 char sun_path[108];
};
# 112 "../include/common/default/bt_mmi.h" 2
# 122 "../include/common/default/bt_mmi.h"
typedef enum {
   MOD_BT = 0,
   MOD_TIMER,
   MOD_MMI,
   MOD_BWCS,
   MOD_TST,
   MOD_SPP_DEFAULT,
   MOD_PAL,
   END_OF_MOD_ID
} module_type;
# 144 "../include/common/default/bt_mmi.h"
typedef enum {
     io_low=0,
    io_high
} IO_level;
# 167 "../include/common/default/bt_mmi.h"
typedef struct {
 unsigned char used;
 unsigned long msg_id;
 void *local_para_ptr;


    module_type src_mod_id;
    module_type dest_mod_id;
    unsigned char sap_id;



    void *peer_buff_ptr;
    unsigned char ilm_data[2048];

} ilm_struct;

typedef struct {
    unsigned char used;
    unsigned long msg_id;
    void *local_para_ptr;

    module_type src_mod_id;
    module_type dest_mod_id;
    unsigned char sap_id;
    void *peer_buff_ptr;
    unsigned char ilm_data[4*2048];
} pal_ilm_struct;



typedef struct local_para_struct {
   kal_uint8 ref_count; kal_uint16 msg_len;
} local_para_struct;



typedef enum {
   TD_UL = 0x01 << 0,
   TD_DL = 0x01 << 1,
   TD_CTRL = 0x01 << 2,
   TD_RESET = 0x01 << 3
} transfer_direction;
# 255 "../include/common/default/bt_mmi.h"
typedef enum
{
    PROFILE_A2DP = 0,
    PROFILE_A2DP_DATA,
    PROFILE_HFP,
    PROFILE_SPP,
    PROFILE_AVRCP,
    PROFILE_OPP,
    PROFILE_BIP,
    PROFILE_BPP,
    PROFILE_FTP,
    PROFILE_PBAP,
    PROFILE_HID,
    PROFILE_PAN,
 PROFILE_SIMAP,
    PROFILE_JSR82,
    PROFILE_PRX,
    PROFILE_MAP,
    PROFILE_TIME,
    PROFILE_HDP,
    PROFILE_HTP,
    PROFILE_FMP,
    PROFILE_GAP,
    PROFILE_ADVANCED,
    NUM_OF_PROFILE,
}PROFILE_enum;

typedef struct _PROFILE_ADDR
{
    struct sockaddr_un addr;
    socklen_t addrlen;
}PROFILE_ADDR;

kal_bool bt_setProfileAddress(PROFILE_enum profile, struct sockaddr_un *addr, socklen_t addrlen);
void bt_removeProfileAddress(PROFILE_enum profile);
void bt_messagehdl_init(void);
kal_uint8 bt_enQueue_message(module_type mod_type, void *ptr, kal_uint16 size);
void *bt_deQueue_message(module_type mod_type);
void bt_ResumeThread(module_type type);






void free_ilm(void *ptr);
void *construct_local_para(kal_uint16 size, kal_uint8 type);
void free_local_para(void *ptr);

void *bt_win_malloc(kal_uint32 size);
void bt_win_free(void *ptr);
# 315 "../include/common/default/bt_mmi.h"
void btmtk_assert(char* expr, char* file, kal_uint32 line);
# 100 "database/parse_db.c" 2

# 1 "../btadp_int/include/bt_adp_msg.h" 1
# 102 "../btadp_int/include/bt_adp_msg.h"
void BTCoreSendNotifySelfMessage(void);



kal_uint8 BT_SendMessage(msg_type msg_id, module_type dest_mod, void *ptr, kal_uint16 size);

kal_uint8 BT_SendPalMessage(msg_type msg_id, void *ptr, kal_uint16 size);
void btmtk_adp_check_msg_id_range(void);
# 102 "database/parse_db.c" 2
# 1 "../btadp_int/include/bt_adp_log.h" 1
# 134 "../btadp_int/include/bt_adp_log.h"
typedef enum
{
   TRACE_FUNC,
   TRACE_STATE,
   TRACE_INFO,
   TRACE_WARNING,
   TRACE_ERROR,
   TRACE_GROUP_1,
   TRACE_GROUP_2,
   TRACE_GROUP_3,
   TRACE_GROUP_4,
   TRACE_GROUP_5,
   TRACE_GROUP_6,
   TRACE_GROUP_7,
   TRACE_GROUP_8,
   TRACE_GROUP_9,
   TRACE_GROUP_10,
   TRACE_PEER
}trace_class_enum;


typedef enum {
   INVALID_SAP = 0,

   BCHS_L4C_SAP,
   BCHS_MMI_SAP,
   BT_A2DP_SAP,
   BT_APP_SAP,
   BT_AVRCP_SAP,
   BT_HFG_SAP,
   BT_BPP_SAP,
   BT_BIP_SAP,
   BT_PBAP_SAP,
   BT_OBEX_SAP,

   PS_SIM_SAP,

   LAST_SAP_CODE = 0xFFFFFFFF
} sap_type;

typedef struct
{
   kal_uint32 frame_number;
   kal_uint32 time_stamp;
   kal_uint32 msg_index;
   trace_class_enum trace_class;
   kal_uint16 buf_length;
} tst_index_trace_header_struct;

typedef struct
{
   kal_uint32 frame_number;
   kal_uint32 time_stamp;
   module_type module_id;
   kal_uint16 buf_length;
} tst_prompt_trace_header_struct;

typedef struct
{
 const kal_uint8* pTraceHeader;
 const kal_uint8* pData;
 const kal_uint8* pData2;
 kal_uint32 lenTraceHeader;
 kal_uint32 lenData;
 kal_uint32 lenData2;
 kal_uint32 frameMessageType;
} tst_trace_frame_arg;

typedef struct
{
   kal_uint32 frame_number;
   kal_uint32 time_stamp;
   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   kal_uint16 local_len;
   kal_uint16 peer_len;
   kal_uint32 local_addr;
   kal_uint32 peer_addr;
} tst_log_prim_header_struct;

void bt_trace( trace_class_enum trc_class, kal_uint32 msg_index, const char *arg_type,...);



void bt_prompt_trace(module_type mod_id, const char *fmt,...);
void bt_log_primitive(ilm_struct* ilm_ptr);
void bt_fw_assert(kal_uint32 panic);
void bt_assert(char* expr, char* file, kal_uint32 line);
void bt_assert_reset(char* expr, char* file, kal_uint32 line);
void bt_log_setting(kal_uint32 trace, kal_uint8 primitive, kal_uint8 prompt);
# 103 "database/parse_db.c" 2
# 1 "include/tst_def.h" 1
# 328 "include/tst_def.h"
typedef enum
{
 TST_NULL_COMMAND,
 TST_LOG_ON_OFF,
 TST_SET_PRIM_MOD_FILTER,
 TST_SET_PRIM_SAP_FILTER,
 TST_SET_PS_TRC_FILTER,
 TST_SET_L1_TRC_FILTER,
 TST_INJECT_STRING_TO_MODULE,
 TST_INJECT_AT_CMD,
 TST_REBOOT_TARGET_CMD,
 TST_SET_TRAP_FILTER,
 TST_READ_GLOBAL_VARIABLE,
 TST_WRITE_GLOBAL_VARIABLE,
 TST_EM_MODE_CONFIG,
 TST_SIM_FILE_INFO_REQ,
 TST_SIM_READ_REQ,
 TST_SIM_WRITE_REQ,





 TST_FT_MODE_CONFIG,
 TST_NVRAM_EXCEPTION_CMD,
 TST_READ_MEMORY_ADDR_CMD,
    TST_NVRAM_STATISTIC_CMD,
 TST_QUERY_MEMORY_RANGE_CMD,
 TST_FORCE_ASSERT_CMD,





  TST_SET_DSP_FILTER_CMD = 0x33,
  TST_QUERY_SOFT_FC_CHAR_CMD,
  TST_KDWP_RECV_CMD,
  TST_KDWP_CONTROL_CMD,
  TST_FLUSH_SWDBG_CMD,
  TST_CTI_COMMAND_CMD,
 TST_WRITE_MEMORY_CMD,

 TST_GDI_SNAPSHOT_CMD,
 TST_SLEEP_MODE_CMD,
 TST_FILE_TRANSFER_CMD,

 TST_CONFIG_SWLA_CMD,
 TST_ST_START_CMD,
 TST_ST_STOP_CMD,
 TST_SET_TRAP_MSG_CMD,
 TST_REBOOT_FOR_MMI_AUTO_TEST_CMD,
 TST_UBDB_CMD,
 TST_SET_3G_FILTER_CMD,
 TST_VC_CMD,
 TST_SIMPLE_CMD,
 TST_COMMAND_TYPE_LAST_CMD

}
tst_command_type;

typedef struct
{
    kal_uint8 dummy;
}
tst_command_type_last_cmd_struct;


typedef struct
{
    void *address;
    kal_uint32 length;
    kal_uint8 token;
}
tst_read_memory_addr_cmd_struct;

typedef struct
{
    void *address;
    kal_uint32 length;
    kal_uint8 data[1];
}
tst_write_memory_cmd_struct;

typedef struct
{
    kal_uint32 token;
}
tst_gdi_snapshot_cmd_struct;

typedef struct
{
    kal_uint32 token;
    kal_uint8 cmd;
}
tst_sleep_mode_cmd_struct;


typedef struct
{
    kal_uint32 token;
    kal_uint32 start_address;
    kal_uint32 buf_length;
    kal_uint8 buf[1];
}
tst_file_transfer_cmd_struct;
typedef struct
{
   kal_uint8 token;
   kal_uint8 command;

    kal_uint16 length;
    kal_uint8 buf[1];
}
tst_ubdb_cmd_struct;

typedef struct {
  kal_uint16 filter;
}
tst_set_3g_filter_cmd_struct;

typedef struct
{
   kal_uint8 token;
   kal_uint8 command;
   kal_uint16 length;
}
tst_ubdb_response_header_struct;

typedef struct
{
   kal_uint8 token;
   kal_uint8 command;
   kal_uint16 length;
   kal_uint8 buf[1];
}
tst_ubdb_response_struct;

typedef struct
{
    kal_uint32 token;
    kal_uint8 mode;


    kal_uint8 threshold;
}
tst_config_swla_cmd_struct;


typedef struct
{
    kal_uint32 address_softLA;
    kal_uint32 length_softLA;
    kal_uint32 ptr_softLA;
    kal_uint32 noOfSystemElement;
    kal_uint32 noOfDspElement;
    kal_uint32 noOfMcuElement;
}
tst_query_memory_range_report_header_struct;

typedef struct
{
    kal_uint32 address_softLA;
    kal_uint32 length_softLA;
    kal_uint32 ptr_softLA;
    kal_uint32 noOfSystemElement;
    kal_uint32 noOfDspElement;
    kal_uint32 noOfMcuElement;
    kal_uint32 buf[1];
}
tst_query_memory_range_report_struct;

typedef struct
{
    kal_uint32 fc_chars;
}
tst_query_soft_fc_char_report_struct;

typedef struct
{
    kal_uint8 token;
    kal_uint8 encoded;
    const void *address;
    kal_uint32 length;

}
tst_read_memory_addr_report_header_struct;

typedef struct
{
    kal_uint8 token;
    kal_uint8 encoded;
    const void *address;
    kal_uint32 length;
    kal_uint8 buf[1];
}
tst_read_memory_addr_report_struct;

typedef struct
{
    kal_uint32 frame_number;
    kal_uint32 time_stamp;



   kal_uint32 token;
    kal_uint16 status;
    kal_uint8 layer_count;
    kal_uint8 drive_index;
    kal_uint16 clip_index;
    kal_uint32 clip_length;
}
tst_gdi_snapshot_report_header_struct;

typedef struct
{
    kal_uint32 frame_number;
    kal_uint32 time_stamp;



   kal_uint32 token;
    kal_uint16 status;
    kal_uint8 layer_count;
    kal_uint8 drive_index;
    kal_uint16 clip_index;
    kal_uint32 clip_length;
    kal_uint8 buf[1];
}
tst_gdi_snapshot_report_struct;
# 571 "include/tst_def.h"
typedef enum
{
 TSCT_USB_LOGGING_CONNECT,
 TSCT_USB_LOGGING_DISCONNECT,

 TSCT_LAST_ID
}
tst_simple_command_type;

typedef struct {
  kal_uint16 token;
  tst_simple_command_type cmd;
}
tst_simple_cmd_struct;

typedef struct
{
  kal_uint16 token;
  tst_simple_command_type cmd;
}
tst_simple_ack_struct;

typedef enum
{
   NVRAM_READ,
   NVRAM_RESET,
   NVRAM_WRITE,
   NVRAM_RESET_FLAG,
   NVRAM_READ_DYNAMIC
}
nvram_actions;

typedef struct
{
    nvram_actions act;
}
tst_nvram_exception_cmd_struct;

typedef struct
{
    nvram_actions act;
}
tst_nvram_statistic_cmd_struct;
# 642 "include/tst_def.h"
typedef struct
{
    kal_uint8 enable;
}
tst_ft_mode_config_struct;


typedef struct
{





  kal_uint8 enable;

}
tst_em_mode_config_struct;



typedef struct
{
 kal_uint16 file_idx;
 kal_uint8 file_path[6];
}
tst_sim_file_info_req_struct;

typedef struct
{
 kal_uint16 file_idx;
 kal_uint16 para;
 kal_uint16 length;
 kal_uint8 file_path[6];
}
tst_sim_read_req_struct;

typedef struct
{

 kal_uint16 file_idx;
 kal_uint16 para;
 kal_uint8 data[260];
 kal_uint16 length;
 kal_uint8 file_path[6];
}
tst_sim_write_req_struct;
# 721 "include/tst_def.h"
typedef struct
{
    kal_uint32 token;
    kal_char data[1];
}
tst_read_global_variable_struct;

typedef struct
{
    kal_uint16 size1;
    kal_uint16 size2;
}
tst_write_global_variable_struct;

typedef struct
{
   kal_uint8 token;
   kal_uint16 size;
   kal_char data[1];
}
tst_gv_return;

typedef struct
{
 kal_uint8 token;
   kal_uint16 size;
}
tst_gv_header_struct;



typedef kal_uint8 tst_null_command_struct ;

typedef kal_uint8 tst_set_l1_trc_filter_struct;

typedef kal_uint8 tst_reboot_target_cmd_struct;

typedef kal_uint8 tst_query_memory_range_cmd_struct;

typedef kal_uint8 tst_query_soft_fc_char_cmd_struct;


typedef kal_uint8 tst_force_assert_cmd_struct;

typedef kal_uint8 tst_flush_swdbg_cmd_struct;

typedef kal_uint8 tst_st_stop_cmd_struct;

typedef kal_uint8 tst_reboot_for_mmi_auto_test_cmd_struct;

typedef struct
{
   kal_bool is_logging;
}
tst_log_on_off_struct;

typedef struct
{
   kal_uint8 mod_filter[((END_OF_MOD_ID+7)/8)];
}
tst_set_prim_mod_filter_struct;

typedef struct
{
   kal_uint8 sap_filter[(LAST_SAP_CODE+1)];
}
tst_set_prim_sap_filter_struct;

typedef struct
{
 kal_uint16 sap_id;
 kal_uint8 is_trap;
}
tst_set_trap_filter_struct;

typedef struct
{
   kal_uint16 sap_filter[END_OF_MOD_ID+1];
}tst_set_ps_trc_filter_struct;


typedef struct
{
   module_type dest_mod;
   kal_uint8 index;
   kal_uint8 string[(128)];
}tst_inject_string_to_module_struct;


typedef struct
{
   kal_uint8 ref_count;
   kal_uint16 params_len;
   kal_uint8 index;
   kal_uint8 string[(128)];
}
tst_inject_string_struct;




typedef struct
{
   kal_uint8 atcmd[(128)];
}tst_inject_at_cmd_struct;

typedef struct {
 kal_uint32 m_CmdCount;
} tst_set_dsp_filter_cmd_struct;

typedef struct {
 void *m_Addr;
 kal_uint16 m_Value;
} tst_dsp_command;

typedef struct
{
   kal_uint32 frame_number;



   kal_uint32 time_stamp;



   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   kal_uint16 local_len;
   kal_uint16 peer_len;
   kal_uint32 local_addr;
   kal_uint32 peer_addr;
}
tst_log_prim_header_struct;


typedef struct
{

   kal_uint32 frame_number;



   kal_uint32 time_stamp;
   kal_int16 sfn;
   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   kal_uint16 local_len;
   kal_uint16 peer_len;
   kal_uint32 local_addr;
   kal_uint32 peer_addr;


   kal_uint8 offset[2];
   kal_uint16 org_len[2];
}
tst_log_prim_header_compressed_struct;

typedef struct
{
   kal_uint32 frame_number;
   kal_uint32 time_stamp;
   kal_int16 sfn;
   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   kal_uint16 local_len;
   kal_uint16 peer_len;
   kal_uint32 local_addr;
   kal_uint32 peer_addr;
   kal_uint8 offset[5];
   kal_uint16 cpr_len[5];
   kal_uint16 org_len[5];
}
tst_log_prim_header_cphy_container_struct;

typedef struct
{
   kal_uint32 frame_number;
   kal_uint32 time_stamp;




   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   kal_uint16 local_len;
   kal_uint16 peer_len;
}
tst_log_prim_header_factory_mode_struct;

typedef struct
{
   kal_uint32 frame_number;



   kal_uint32 time_stamp;



   kal_uint32 msg_index;
   trace_class_enum trace_class;



   kal_uint16 buf_length;
}
tst_index_trace_header_struct;

typedef struct
{
   kal_uint32 frame_number;



   kal_uint32 time_stamp;



   module_type module_id;
   kal_uint16 buf_length;
}
tst_prompt_trace_header_struct;

typedef struct
{
   kal_uint32 frame_number;



   kal_uint32 time_stamp;



   kal_uint32 msg_index;
   trace_class_enum trace_class;
   kal_uint16 rawdata_length;
}
tst_rawdata_trace2_header_struct;

typedef struct
{
  kal_uint32 frame_number;
  kal_uint32 time_stamp;



 kal_uint32 token;
 kal_uint8 status;
}
tst_sleep_mode_report_struct;

typedef struct
{
    kal_uint32 frame_number;
    kal_uint32 time_stamp;



    kal_uint32 token;
    kal_uint32 start_address;
    kal_uint32 path_length;
    kal_uint32 data_length;

}
tst_file_transfer_report_header_struct;

typedef struct
{
    kal_uint32 frame_number;
    kal_uint32 time_stamp;



    kal_uint32 token;
    kal_uint32 start_address;
    kal_uint32 path_length;
    kal_uint32 data_length;
    kal_uint8 buf[1];
}
tst_file_transfer_report_struct;

typedef struct
{
    kal_uint32 frame_number;
    kal_uint32 time_stamp;



    kal_uint32 buf_length;
}
tst_dynamic_stack_statistics_header;



typedef struct
{
    kal_uint32 frame_number;
    kal_uint32 time_stamp;



    kal_uint32 buf_length;
}
tst_query_HISR_name_header;


typedef struct
{
    kal_uint32 frame_number;
    kal_uint32 time_stamp;



    kal_uint32 buf_length;
    kal_uint8 buf[1];
}
tst_dynamic_stack_statistics;


typedef struct
{

    kal_int32 trace_time_scale;
    kal_bool all_task;
    kal_bool trace_register;
    kal_bool trace_call_stack;
    kal_bool trace_data;
    kal_int32 task_filter[6];
    kal_int32 trace_stack_size;
    kal_int32* data_address[16];
    kal_int32 reserved[16];
}
tst_st_start_cmd_struct;

typedef struct
{
    kal_uint32 frame_number;
    kal_uint32 time_stamp;

    kal_int32 start_time1;
    kal_int32 start_time2;
    kal_int32* buffer_start_addr;
    kal_int32* buffer_end_addr;
    kal_int32* buffer_current_index_addr;
    kal_int32 time_scale_for_one_sec;
    kal_int32 reserved[4];
    kal_bool buffer_wrap_around;
}
tst_st_report_struct;

typedef struct
{
    kal_uint32 frame_number;



    kal_uint32 time_stamp;



    module_type module_id;
    trace_class_enum trace_class;
    kal_uint16 buf_length;
}
tst_wap_trace_header_struct;


typedef struct
{
   kal_uint32 frame_number;



   kal_uint32 time_stamp;



   kal_uint16 buf_length;
}
tst_sys_trace_header_struct;


typedef struct
{
   tst_command_type command_type;
   kal_uint16 cmd_len;
}
tst_command_header_struct;


typedef struct
{
   tst_command_header_struct command;
   kal_uint16 received_cmd_length;
   kal_uint16 received_data_length;
   kal_uint8 *header_buf;
   kal_uint8 *command_buf;
}
tst_current_handle_command;


typedef struct
{
   module_type src_mod_id;
   module_type dest_mod_id;
   sap_type sap_id;
   msg_type msg_id;
   kal_uint16 local_len;
   kal_uint16 peer_len;
}
tst_inject_primitive_header_struct;


typedef struct
{
   tst_inject_primitive_header_struct inject_prim;
   kal_uint16 received_prim_header_length;
   kal_uint16 received_prim_local_para_length;
   kal_uint16 received_prim_peer_length;
   kal_uint8 *header_ptr;
   kal_uint8 *local_ptr;
   kal_uint8 *peer_ptr;
}
tst_current_handle_primitive;



typedef struct {
    kal_uint16 no_peer_buff_ptr;
    kal_uint16 peer_buff_ptr_size;
    kal_uint8 *peer_buff_ptr;
    kal_uint8 ref_count;
    kal_uint8 header_len;
    kal_uint8 tail_len;
    kal_uint8 unused1;
} asn_peer_buff_struct;

typedef struct {
    kal_uint8 ref_count;
    kal_uint16 no_local_params_ptr;
    kal_uint16 local_params_ptr_size;
    kal_uint8 *local_params_ptr;
} asn_local_para_struct;

typedef struct {
    module_type src_mod_id;
    module_type dest_mod_id;
    sap_type sap_id;
    msg_type msg_id;
    asn_local_para_struct local_params;
    asn_peer_buff_struct peer_buff;
} ilmessage;


typedef struct
{
 kal_uint16 received_data_length;
 kal_uint16 data_length;
 kal_char *data;
 kal_char *iterator;
}
tst_current_handle_ut_primitive;


typedef union
{
    tst_current_handle_command command;
    tst_current_handle_primitive primitive;
    tst_current_handle_ut_primitive ut_primitive;
}
tst_current_handle_rs232_frame;

typedef struct
{
 const kal_uint8* pTraceHeader;
 const kal_uint8* pData;
 const kal_uint8* pData2;
 kal_uint32 lenTraceHeader;
 kal_uint32 lenData;
 kal_uint32 lenData2;





 kal_uint32 frameMessageType;
}
tst_trace_frame_arg;
# 1226 "include/tst_def.h"
typedef struct
{
 kal_uint32 count_on;
 kal_uint32 count_log[3];
 kal_uint32 count_lost[3];
 kal_uint32 count_lost_no_buffer[3][7];
 kal_uint32 count_lost_full_queue[3];
}
tst_statistics_struct;


typedef struct
{
 kal_uint32 type_count[3];
 kal_uint32 lost_size;
 kal_uint32 request_size;
}
tst_usage_statistics_struct;
# 1265 "include/tst_def.h"
typedef struct
{
   kal_uint32 buf_length;
}
tst_kdwp_packet_header_struct;

typedef struct
{
   kal_uint32 buf_length;
}
tst_cti_response_header_struct;

typedef struct
{
    kal_uint8* pData;
}
tst_kdwp_recv_cmd_struct;

typedef struct
{
    kal_uint8* pData;
}
tst_cti_command_cmd_struct;

typedef struct
{
   kal_uint8 kdwp_control;
}
tst_kdwp_control_cmd_struct;






typedef struct
{
 kal_uint16 nHWVerLen;
 kal_uint16 nSWVerLen;
}
tst_report_version_header_struct;


extern void tst_switch_sleep_mode(kal_uint32 token, kal_uint32 cmd);
extern void tst_dump_file_clip(const tst_file_transfer_cmd_struct *pCmd);
kal_uint32 tst_RLE_Encode(kal_uint32 nBytesPerPixel, const kal_uint8* pRawDataBuffer, kal_uint32 RawDataLength, kal_uint8* pOutputBuffer, kal_uint32 *pOutputLength, kal_uint32 *pReadLength);



typedef struct
{
  kal_uint16 nCount;
  kal_uint16 MsgIDs[1];
}
tst_set_trap_msg_cmd_struct;



typedef struct
{
   kal_uint8 channel_id;
   kal_uint32 buf_length;
}
tst_vc_packet_header_struct;

typedef struct
{
    kal_uint8 channel_id;
    kal_uint8 pData[1];
}
tst_vc_cmd_struct;


extern kal_uint32 L1I_GetTimeStamp(void);
# 104 "database/parse_db.c" 2

# 1 "../include/common/bluetooth_struct.h" 1
# 484 "../include/common/bluetooth_struct.h"
# 1 "../include/common/bt_types.h" 1
# 485 "../include/common/bluetooth_struct.h" 2





typedef struct
{
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_addr_struct;

# 1 "../include/profiles/bluetooth_avrcp_struct.h" 1
# 239 "../include/profiles/bluetooth_avrcp_struct.h"
typedef struct _bt_avrcp_dev_addr_struct
{
 kal_uint32 lap;
 kal_uint8 uap;
 kal_uint16 nap;
} bt_avrcp_dev_addr_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 local_role;
    kal_uint8 version;
    kal_uint8 sdpfeature;
} bt_avrcp_activate_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint16 result;
    kal_uint8 version;
} bt_avrcp_activate_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
} bt_avrcp_deactivate_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint16 result;
} bt_avrcp_deactivate_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 local_role;
    bt_avrcp_dev_addr_struct device_addr;
} bt_avrcp_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 connect_id;
    kal_uint16 result;
    bt_avrcp_dev_addr_struct device_addr;
    kal_uint16 browse_channel;
    kal_uint16 remote_tg_support_feature;
    kal_uint16 remote_ct_support_feature;
} bt_avrcp_connect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 connect_id;
    bt_avrcp_dev_addr_struct device_addr;
    kal_uint8 device_name_size;
    kal_uint8 device_name[60];
    kal_uint16 psm_value;
} bt_avrcp_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_bool accept_conn;
    kal_uint16 psm_value;
} bt_avrcp_connect_ind_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
} bt_avrcp_disconnect_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 connect_id;
    kal_uint16 result;
} bt_avrcp_disconnect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 connect_id;
} bt_avrcp_disconnect_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 c_type;
    kal_uint8 subunit_type;
    kal_uint8 subunit_id;
    kal_uint16 data_len;
    kal_uint8 frame_data[200];
} bt_avrcp_cmd_frame_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 c_type;
    kal_uint8 subunit_type;
    kal_uint8 subunit_id;
    kal_uint16 data_len;
    kal_uint8 frame_data[200];
} bt_avrcp_cmd_frame_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 c_type;
    kal_uint8 subunit_type;
    kal_uint8 subunit_id;
    kal_uint16 data_len;
    kal_uint16 profile_id;
    kal_uint8 frame_data[200];
} bt_avrcp_cmd_frame_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 c_type;
    kal_uint8 subunit_type;
    kal_uint8 subunit_id;
    kal_uint16 data_len;
    kal_uint16 profile_id;
    kal_uint8 frame_data[200];
} bt_avrcp_cmd_frame_ind_rsp_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 accept;
} bt_avrcp_connect_accept_res;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 local_role;
} bt_avrcp_browse_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 connect_id;
    kal_uint16 result;
    kal_uint16 bws_mtu;
} bt_avrcp_browse_connect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 connect_id;
    kal_uint16 bws_mtu;
} bt_avrcp_browse_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
} bt_avrcp_browse_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
} bt_avrcp_browse_disconnect_ind_struct;
# 440 "../include/profiles/bluetooth_avrcp_struct.h"
typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 capability_id;
} bt_avrcp_get_capabilities_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 capability_id;
 kal_uint8 count;
 kal_uint8 capability[20];
} bt_avrcp_get_capabilities_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
} bt_avrcp_list_playerapp_attribute_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint8 count;
 kal_uint8 reject; kal_uint8 error_code;
 kal_uint8 attribute_id[4];
} bt_avrcp_list_playerapp_attribute_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint8 attribute_id;
} bt_avrcp_list_playerapp_value_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
 kal_uint8 attribute_id;
 kal_uint8 count;
 kal_uint8 attribute_values[4];
} bt_avrcp_list_playerapp_value_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint8 count;
 kal_uint8 attribute_id[4];
} bt_avrcp_get_curplayerapp_value_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
 kal_uint8 count;
 kal_uint8 attribute_id[4];
 kal_uint8 attribute_value[4];
} bt_avrcp_get_curplayerapp_value_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint8 count;
 kal_uint8 attribute_id[4];
 kal_uint8 values[4];
} bt_avrcp_set_playerapp_value_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
} bt_avrcp_set_playerapp_value_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint8 count;
 kal_uint8 attribute_id[4];
} bt_avrcp_get_playerapp_attributetext_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
 kal_uint8 count;
 kal_uint8 attribute_id[4];
    kal_uint16 charset[4];
    kal_uint8 attribute_string_len[4];
    kal_uint8 attribute_string[4][80];
} bt_avrcp_get_playerapp_attributetext_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 attribute_id;
    kal_uint8 count;
 kal_uint8 value_ids[4];
} bt_avrcp_get_playerapp_valuetext_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 attribute_id;
    kal_uint8 count;
 kal_uint8 value_ids[4];
    kal_uint16 charset[4];
    kal_uint8 value_string_len[4];
    kal_uint8 value_string[4][80];
} bt_avrcp_get_playerapp_valuetext_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 count;
    kal_uint16 charset_ids[4];
} bt_avrcp_inform_display_charset_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
} bt_avrcp_inform_display_charset_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 battery_status;
} bt_avrcp_inform_battery_statusofct_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
} bt_avrcp_inform_battery_statusofct_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 identifier[8];
    kal_uint8 count;
    kal_uint32 attributes[10];
} bt_avrcp_get_element_attributes_ind_struct;


typedef struct
{
    kal_uint32 attribute_id;
    kal_uint16 charset;
    kal_uint16 value_len;
    kal_uint16 value_text_offset;
}bt_avrcp_element_attributes_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 count;
    bt_avrcp_element_attributes_struct elements[10];
    kal_uint8 element_data[512];
} bt_avrcp_get_element_attributes_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
} bt_avrcp_get_playerstatus_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint32 song_length;
    kal_uint32 song_position;
    kal_uint8 play_status;
} bt_avrcp_get_playerstatus_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 event_id;
    kal_uint32 playback_interval;
} bt_avrcp_register_notification_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 is_interim;
    kal_uint8 event_id;
    kal_uint8 status;
    kal_uint8 identifier[8];
 kal_uint8 count;
 kal_uint8 attribute_id[4];
 kal_uint8 attribute_value[4];
 kal_uint16 id;
 kal_uint16 uid_counter;
 kal_uint8 volume;
 kal_uint32 pos;
} bt_avrcp_register_notification_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 pdu_id;
} bt_avrcp_abort_continueresponse_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 pdu_id;
} bt_avrcp_abort_continueresponse_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 volume;
} bt_avrcp_set_absolute_volume_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 volume;
} bt_avrcp_set_absolute_volume_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 player_id;
} bt_avrcp_set_addressedplayer_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 status;
} bt_avrcp_set_addressedplayer_rsp_struct;



typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint16 start_item;
    kal_uint16 end_item;
    kal_uint8 count;
    kal_uint32 attribute_ids[4];
} bt_avrcp_get_playeritems_ind_struct;


typedef struct {
    kal_uint8 item_type;
    kal_uint16 item_len;
    kal_uint16 player_id;
    kal_uint8 major_play_type;
    kal_uint8 player_sub_type[4];
    kal_uint8 play_status;
    kal_uint8 feature_bitmask[16];
    kal_uint16 charset;
    kal_uint16 name_len;
    kal_uint8 name[60];
} avrcp_media_player_item;

typedef struct
{
    kal_uint32 attribute_id;
    kal_uint16 charset;
    kal_uint16 attribute_value_len;
    kal_uint16 attribute_value_string_offset;
} bt_avrcp_attrbute_struct;

typedef struct {
    kal_uint8 item_type;
    kal_uint16 item_length;
    kal_uint8 uid[8];
    kal_uint16 player_id;
    kal_uint8 specific_type;
    kal_uint8 is_playable;
    kal_uint32 sub_type;
    kal_uint8 status;
    kal_uint8 mask[16];
    kal_uint16 charset;
    kal_uint16 name_length;
    kal_uint16 name_offset;
    kal_uint8 attribute_count;
    bt_avrcp_attrbute_struct attributes[7];
} avrcp_folder_mixed_item;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint16 uid_counter;
    kal_uint16 counter;
    avrcp_media_player_item players[20];
} bt_avrcp_get_playeritems_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint32 start_item;
    kal_uint32 end_item;
    kal_uint8 count;
    kal_uint32 attribute_ids[4];
} bt_avrcp_get_folderitems_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint16 uid_counter;
    kal_uint16 counter;
    avrcp_folder_mixed_item items[8];
    kal_uint8 data[512];
    kal_uint16 data_len;
} bt_avrcp_get_folderitems_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 player_id;
} bt_avrcp_set_browsedplayer_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint16 uid_counter;
    kal_uint32 num_of_items;
    kal_uint16 char_set;
    kal_uint8 folder_depth;
    kal_uint16 foldername_len[60];
    kal_uint16 foldername_offset[60];
    kal_uint8 folder_data[512];
} bt_avrcp_set_browsedplayer_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 uid_counter;
    kal_uint8 direction;
    kal_uint8 folder_uid[8];
} bt_avrcp_change_path_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint32 num_of_items;
} bt_avrcp_change_path_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint8 uid[8];
    kal_uint16 uid_counter;
    kal_uint8 count;
    kal_uint32 attribute_ids[7];
} bt_avrcp_get_itemattributes_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint8 counter;
    kal_uint32 attribute_id[8];
    kal_uint16 charset[8];
    kal_uint16 attribute_value_len[8];
    kal_uint8 attribute_value_string[8][80];
} bt_avrcp_get_itemattributes_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint8 uid[8];
    kal_uint16 uid_counter;
} bt_avrcp_play_items_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 status;
} bt_avrcp_play_items_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 charset;
    kal_uint16 length;
    kal_uint8 search_string[128];
} bt_avrcp_search_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint16 uid_counter;
    kal_uint32 found_num_of_items;
} bt_avrcp_search_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint8 uid[8];
    kal_uint16 uid_counter;
} bt_avrcp_add_tonowplaying_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 reject; kal_uint8 error_code;
    kal_uint8 status;
} bt_avrcp_add_tonowplaying_rsp_struct;
# 1010 "../include/profiles/bluetooth_avrcp_struct.h"
typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 capability_id;
} bt_avrcp_get_capabilities_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 capability_id;
 kal_uint8 count;
 kal_uint8 capability[20];
 kal_uint8 company_id_size;
 kal_uint8 company_id[80];
} bt_avrcp_get_capabilities_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
} bt_avrcp_list_playerapp_attribute_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint16 result; kal_uint8 error_code;
 kal_uint8 count;
 kal_uint8 attribute_ids[4];
} bt_avrcp_list_playerapp_attribute_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint8 attribute_id;
} bt_avrcp_list_playerapp_value_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
 kal_uint8 attribute_id;
 kal_uint8 count;
 kal_uint8 attribute_values[4];
} bt_avrcp_list_playerapp_value_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint8 count;
 kal_uint8 attribute_ids[4];
} bt_avrcp_get_curplayerapp_value_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
 kal_uint8 count;
 kal_uint8 attribute_ids[4];
 kal_uint8 attribute_values[4];
} bt_avrcp_get_curplayerapp_value_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint8 count;
 kal_uint8 attribute_ids[4];
 kal_uint8 values[4];
} bt_avrcp_set_playerapp_value_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
} bt_avrcp_set_playerapp_value_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
 kal_uint8 count;
 kal_uint8 attribute_ids[4];
} bt_avrcp_get_playerapp_attributetext_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
 kal_uint8 count;
 kal_uint8 attribute_id[4];
    kal_uint16 charset[4];
    kal_uint8 attribute_string_len[4];
    kal_uint8 attribute_string[4][80];
} bt_avrcp_get_playerapp_attributetext_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 attribute_id;
    kal_uint8 count;
 kal_uint8 value_ids[4];
} bt_avrcp_get_playerapp_valuetext_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 attribute_id;
    kal_uint8 count;
 kal_uint8 value_ids[4];
    kal_uint16 charset[4];
    kal_uint8 value_string_len[4];
    kal_uint8 value_string[4][80];
} bt_avrcp_get_playerapp_valuetext_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 count;
    kal_uint16 charset_ids[4];
} bt_avrcp_inform_display_charset_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
} bt_avrcp_inform_display_charset_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 battery_status;
} bt_avrcp_inform_battery_statusofct_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
} bt_avrcp_inform_battery_statusofct_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 identifier[8];
    kal_uint8 count;
    kal_uint32 attributes[10];
} bt_avrcp_get_element_attributes_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 count;
    bt_avrcp_element_attributes_struct elements[10];
    kal_uint8 element_data[512];
} bt_avrcp_get_element_attributes_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
} bt_avrcp_get_playerstatus_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint32 song_length;
    kal_uint32 song_position;
    kal_uint8 play_status;
} bt_avrcp_get_playerstatus_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 event_id;
    kal_uint32 playback_interval;
} bt_avrcp_register_notification_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 is_interim;
    kal_uint8 event_id;
    kal_uint8 status;
    kal_uint8 identifier[8];
 kal_uint8 count;
 kal_uint8 attribute_id[4];
 kal_uint8 attribute_value[4];
 kal_uint16 id;
 kal_uint16 uid_counter;
 kal_uint8 volume;
 kal_uint32 pos;
} bt_avrcp_register_notification_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 pdu_id;
} bt_avrcp_abort_continueresponse_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 pdu_id;
} bt_avrcp_abort_continueresponse_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 volume;
} bt_avrcp_set_absolute_volume_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 volume;
} bt_avrcp_set_absolute_volume_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 player_id;
} bt_avrcp_set_addressedplayer_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 status;
} bt_avrcp_set_addressedplayer_cnf_struct;



typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint32 start_item;
    kal_uint32 end_item;
    kal_uint8 count;
    kal_uint32 attribute_ids[4];
} bt_avrcp_get_playeritems_req_struct;



typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint16 uid_counter;
    kal_uint16 counter;
    avrcp_media_player_item players[20];
} bt_avrcp_get_playeritems_cnf_struct;




typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint32 start_item;
    kal_uint32 end_item;
    kal_uint8 count;
    kal_uint32 attribute_ids[4];
} bt_avrcp_get_folderitems_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint16 uid_counter;
    kal_uint16 counter;
    avrcp_folder_mixed_item items[8];
    kal_uint16 data_len;
    kal_uint8 data[512];
} bt_avrcp_get_folderitems_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 player_id;
} bt_avrcp_set_browsedplayer_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint16 uid_counter;
    kal_uint32 num_of_items;
    kal_uint16 char_set;
    kal_uint8 folder_depth;
    kal_uint16 foldername_len[60];
    kal_uint16 foldername_offset[60];
    kal_uint8 folder_data[512];
} bt_avrcp_set_browsedplayer_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 uid_counter;
    kal_uint8 direction;
    kal_uint8 folder_uid[8];
} bt_avrcp_change_path_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint32 num_of_items;
} bt_avrcp_change_path_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint8 uid[8];
    kal_uint16 uid_counter;
    kal_uint8 count;
    kal_uint32 attribute_ids[7];
} bt_avrcp_get_itemattributes_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint8 counter;
    kal_uint32 attribute_id[8];
    kal_uint16 charset[8];
    kal_uint16 attribute_value_len[8];
    kal_uint8 attribute_value_string[8][80];
} bt_avrcp_get_itemattributes_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint8 uid[8];
    kal_uint16 uid_counter;
} bt_avrcp_play_items_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 status;
} bt_avrcp_play_items_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 charset;
    kal_uint16 length;
    kal_uint8 search_string[128];
} bt_avrcp_search_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 status;
    kal_uint16 uid_counter;
    kal_uint32 found_num_of_items;
} bt_avrcp_search_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint8 scope;
    kal_uint8 uid[8];
    kal_uint16 uid_counter;
} bt_avrcp_add_tonowplaying_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 chnl_num;
    kal_uint8 seq_id;
    kal_uint16 result; kal_uint8 error_code;
    kal_uint8 status;
} bt_avrcp_add_tonowplaying_cnf_struct;
# 498 "../include/common/bluetooth_struct.h" 2


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
 kal_uint8 seq1[16];
 kal_uint8 seq2[16];

} bt_hf_connect_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_hf_send_data_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_poweron_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_engineer_mode_poweron_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_poweroff_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_bool afh;

    kal_uint8 chnl_map[10];

    kal_uint32 freq;

    kal_uint8 hb;

    kal_bool pta;
    kal_uint8 pta_action;
} bt_wifi_set_chnl_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_mmi_reset_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint8 mode;



} bt_test_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;


    kal_bool result;
} bt_test_mode_cnf_struct;



typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 on;
} bt_ssp_debug_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_ssp_debug_mode_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 name[32];
    kal_uint8 bd_addr[6];
    kal_uint8 dcs;
} bt_set_bd_param_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 external_pa;
    kal_uint8 internal_pa;
    kal_uint16 output_power;
} bt_set_power_table_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint16 trim_value;
} bt_set_ana_trim_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_pcm_lb_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;





    char chip_version[20];
    char lmp_version[20];
    char patch_version[20];

} bt_get_bt_version_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_l4c_at_general_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_engineer_mode_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 trace;
    kal_uint8 primitive;
    kal_uint8 prompt;
} bt_engineer_mode_log_mask_req_struct;

typedef bt_engineer_mode_cnf_struct bt_engineer_mode_log_mask_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 name[128];
} bt_engineer_mode_log_to_file_req_struct;

typedef bt_engineer_mode_cnf_struct bt_engineer_mode_log_to_file_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool bttm;
} bt_bttm_switch_port_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_bttm_switch_port_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 pattern;
    kal_uint8 channel_hopping;
    kal_uint8 tx_freq;
    kal_uint8 rx_freq;
    kal_uint8 poll_period;
    kal_uint8 packet_type;
    kal_uint16 packet_length;
} bt_engineer_mode_txrx_test_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_engineer_mode_txrx_test_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 level;
} bt_engineer_mode_power_test_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_engineer_mode_txrx_power_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 addr[12];
} bt_engineer_mode_device_test_req_struct;
# 752 "../include/common/bluetooth_struct.h"
typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;



} bt_read_bd_addr_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
    kal_uint8 bd_addr[6];
} bt_read_bd_addr_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 test_cmd_content[256];
} bt_test_cmd_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint16 result;
    kal_uint8 test_cmd_content[256];
} bt_test_cmd_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 test_cmd_rsp_buf[256];
    kal_uint16 length;
} bt_test_cmd_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
}bt_read_rssi_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 result;
    kal_int8 rssi_value;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
}bt_read_rssi_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 value;
}bt_set_sco_accept_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 value;
}bt_set_sco_accept_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint16 val_len;
    kal_uint8 value[32];
}bt_set_dual_pcm_setting_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint16 val_len;
    kal_uint8 value[32];
}bt_set_dual_pcm_switch_req_struct;
# 915 "../include/common/bluetooth_struct.h"
typedef kal_uint8 GoepRspCode;
# 965 "../include/common/bluetooth_struct.h"
typedef enum
{
    GOEP_TP_BT = 0,
    GOEP_TP_IRDA
} goep_tp_type_enum;

typedef enum
{
    GOEP_FIRST_PKT = 0,
    GOEP_NORMAL_PKT,
    GOEP_FINAL_PKT,
    GOEP_SINGLE_PKT
} goep_pkt_type_enum;

typedef enum
{
    GOEP_FORWARD_FOLDER = 0,
    GOEP_BACK_FOLDER,
    GOEP_ROOT_FOLDER,
    GOEP_CREATE_FOLDER
} goep_set_folder_type_enum;

typedef enum
{
    GOEP_PUT_NORMAL = 0,
    GOEP_PUT_DELETE,
    GOEP_CREATEEMPTY
} goep_put_type_enum;

typedef enum
{
    GOEP_SERVER_ROLE = 0,
    GOEP_CLIENT_ROLE
} goep_role_enum;



typedef enum
{
    BT_BIP_IMAGE_PUSH = 0x01,
    BT_BIP_IMAGE_PULL = 0x02,
    BT_BIP_ADVANCED_PRINTING = 0x04,
    BT_BIP_REMOTE_CAMERA = 0x08,
    BT_BIP_AUTO_ARCHIVE = 0x10,
    BT_BIP_REMOTE_DISPLAY = 0x20
} bt_bip_service_enum;

typedef enum
{
    BT_BIP_CNF_SUCCESS = 0x70,
    BT_BIP_CNF_FAILED,
    BT_BIP_PARTIAL_CONTENT,
    BT_BIP_XML_GEN_FAIL,
    BT_BIP_FILE_OPEN_FAIL,
    BT_BIP_FILE_READ_FAIL,
    BT_BIP_FILE_WRITE_FAIL,
    BT_BIP_FILE_MOVE_FAIL,
    BT_BIP_INVALID_PARM,
    BT_BIP_DISK_FULL,
    BT_BIP_ROOT_DIR_FULL,
    BT_BIP_FS_MEDIA_CHANGED,
    BT_BIP_SCO_REJECT,
    BT_BIP_BTCHIP_REJECT,
    BT_BIP_XML_PARSE_FAIL,
    BT_BIP_FS_QUOTA_FULL,
    BT_BIP_DISCONNECTED,
    BT_BIP_FS_WRITE_PROTECTION,
    BT_BIP_DRM_NO_RIGHTS,
    BT_BIP_CNF_CHALLENGE_OK,
    BT_BIP_CNF_CHALLENGE_FAILED,
    BT_BIP_AUTHENTICATE_FAILED,

    BT_BIP_LAST_CNF_CODE
} bt_bip_cnf_enum;

typedef enum
{
    BT_BIP_IMG_TYPE_UNSUPPORT = 0x00000000,
    BT_BIP_IMG_TYPE_JPEG = 0x00000001,
    BT_BIP_IMG_TYPE_BMP = 0x00000002,
    BT_BIP_IMG_TYPE_GIF = 0x00000004,
    BT_BIP_IMG_TYPE_WBMP = 0x00000008,
    BT_BIP_IMG_TYPE_PNG = 0x00000010
} bt_bip_img_format_enum;





typedef bt_addr_struct goep_bd_addr_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 req_id;
    goep_tp_type_enum tp_type;
    kal_bool need_auth;
    kal_uint8 *buf_ptr;
    kal_uint16 buf_size;
    kal_uint8 rawheader;
    kal_uint8 tptype;
    kal_uint8 obexver;
} goep_register_server_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 req_id;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
} goep_register_server_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 goep_conn_id;
} goep_deregister_server_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    goep_bd_addr_struct bd_addr;
    kal_uint8 dev_name[80];
} goep_authorize_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    goep_bd_addr_struct bd_addr;
    kal_uint8 dev_name[80];
    kal_uint16 peer_mru;
    kal_uint32 cm_conn_id;
    kal_uint8 client_auth;
    kal_uint8 server_auth;
    kal_uint8 tptype;
    kal_uint8 obexver;
} goep_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 goep_conn_id;
    kal_uint8 rsp_code;
    kal_uint8 client_pwd[16];
    kal_uint8 client_pwd_len;
    kal_uint8 client_userid[20];
    kal_uint8 client_userid_len;
    kal_uint8 server_pwd[16];
    kal_uint8 server_pwd_len;
    kal_uint8 server_realm[20];
    kal_uint8 server_realm_len;
} goep_connect_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    goep_pkt_type_enum pkt_type;
    goep_put_type_enum put_type;
    kal_uint32 total_obj_len;
    kal_uint8 obj_name[(256 * 2)];
    kal_uint8 obj_mime_type[80];
    kal_uint8 *frag_ptr;
    kal_uint16 frag_len;



} goep_push_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 obj_name[(256 * 2)];
    kal_uint8 obj_mime_type[80];
    goep_pkt_type_enum pkt_type;
} goep_pull_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 goep_conn_id;
    goep_pkt_type_enum pkt_type;
    kal_uint8 rsp_code;
    kal_uint8 obj_mime_type[80];
    kal_uint32 total_obj_len;
    kal_uint8 *frag_ptr;
    kal_uint16 frag_len;
} goep_pull_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 folder_name[(256 * 2)];
    goep_set_folder_type_enum setpath_flag;
} goep_set_folder_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
} goep_abort_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 server_supported_formats;
} goep_opp_supported_formats_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 req_id;
    kal_uint8 goep_conn_id;
    kal_uint8 passwd[16];
    kal_uint8 passwd_len;
    kal_uint8 realm_str[20];
    kal_uint8 realm_len;
    goep_role_enum goep_role;
} goep_auth_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 req_id;
    goep_bd_addr_struct bd_addr;
    goep_tp_type_enum tp_type;
    kal_uint8 *buf_ptr;
    kal_uint16 buf_size;
    kal_bool auth_use;
    kal_uint8 client_pwd[16];
    kal_uint8 client_pwd_len;
    kal_uint8 client_realm[20];
    kal_uint8 client_realm_len;
    kal_uint8 tptype;
    kal_uint8 obexver;
} goep_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 req_id;
    kal_uint8 goep_conn_id;
    kal_uint8 rsp_code;
    kal_uint16 peer_mru;
    kal_uint32 cm_conn_id;
    kal_uint8 tptype;
    kal_uint8 obexver;
    kal_uint8 srmdefault;
} goep_connect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    goep_pkt_type_enum pkt_type;
    goep_put_type_enum put_type;
    kal_uint8 obj_mime_type[80];
    kal_uint32 total_obj_len;
    kal_uint8 obj_name[(256 * 2)];
    kal_uint8 *frag_ptr;
    kal_uint16 frag_len;
} goep_push_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 rsp_code;
    kal_uint8 reason;



} goep_push_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    goep_pkt_type_enum pkt_type;
    kal_uint8 obj_mime_type[80];
    kal_uint8 obj_name[(256 * 2)];
} goep_pull_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    goep_pkt_type_enum pkt_type;
    kal_uint8 rsp_code;
    kal_uint32 total_obj_len;
    kal_uint8 *frag_ptr;
    kal_uint16 frag_len;
    kal_bool to_self;
    kal_uint8 reason;
} goep_pull_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    goep_set_folder_type_enum setpath_flag;
    kal_uint8 folder_name[(256 * 2)];
} goep_set_folder_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 rsp_code;
    kal_uint8 reason;
} goep_set_folder_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 folder_name[(256 * 2)];
    kal_uint8 dst_name[(256 * 2)];
    kal_uint8 action_id;
    kal_uint32 permission;
} goep_action_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 rsp_code;
    kal_uint8 reason;
} goep_action_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 folder_name[(256 * 2)];
    kal_uint8 dst_name[(256 * 2)];
    kal_uint8 action_id;
    kal_uint32 permission;
} goep_action_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 rsp_code;
    kal_uint8 reason;
} goep_action_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
} goep_abort_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 req_id;
    kal_uint8 goep_conn_id;
} goep_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 rsp_code;
} goep_disconnect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 req_id;
    kal_uint8 goep_conn_id;
    kal_uint8 reason;
} goep_disconnect_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 req_id;
    kal_uint8 realm[20];
    kal_uint8 realm_len;
    kal_uint8 dev_name[80];
    goep_bd_addr_struct bd_addr;
    kal_uint8 options;
} goep_auth_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 goep_conn_id;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 passwd[16];
    kal_uint8 passwd_len;
    kal_uint8 userid[20];
    kal_uint8 userid_len;
} goep_auth_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 req_id;
    kal_uint8 goep_conn_id;
    kal_uint32 timeticker;
} goep_register_client_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 req_id;
    kal_uint8 goep_conn_id;
    kal_uint32 timeticker;
} goep_register_client_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 rsp_code;
} goep_cnf_struct;

typedef goep_cnf_struct goep_deregister_server_cnf_struct;
typedef goep_cnf_struct goep_auth_cnf_struct;
typedef goep_cnf_struct goep_abort_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 goep_conn_id;
    kal_uint8 rsp_code;
} goep_rsp_struct;

typedef goep_rsp_struct goep_authorize_rsp_struct;
typedef goep_rsp_struct goep_push_rsp_struct;
typedef goep_rsp_struct goep_set_folder_rsp_struct;
typedef goep_rsp_struct goep_abort_rsp_struct;
# 1518 "../include/common/bluetooth_struct.h"
typedef goep_register_server_req_struct bt_goeps_register_server_req_struct;
typedef goep_register_server_cnf_struct bt_goeps_register_server_cnf_struct;
typedef goep_deregister_server_req_struct bt_goeps_deregister_server_req_struct;
typedef goep_deregister_server_cnf_struct bt_goeps_deregister_server_cnf_struct;
typedef goep_connect_ind_struct bt_goeps_connect_ind_struct;
typedef goep_connect_rsp_struct bt_goeps_connect_rsp_struct;
typedef goep_push_ind_struct bt_goeps_push_ind_struct;
typedef goep_push_rsp_struct bt_goeps_push_rsp_struct;
typedef goep_pull_ind_struct bt_goeps_pull_ind_struct;
typedef goep_pull_rsp_struct bt_goeps_pull_rsp_struct;
typedef goep_set_folder_ind_struct bt_goeps_set_folder_ind_struct;
typedef goep_set_folder_rsp_struct goeps_set_folder_rsp_struct;
typedef goep_action_ind_struct bt_goeps_action_ind_struct;
typedef goep_action_rsp_struct goeps_action_rsp_struct;
typedef goep_abort_ind_struct bt_goeps_abort_ind_struct;
typedef goep_abort_rsp_struct bt_goeps_abort_rsp_struct;
typedef goep_auth_req_struct bt_goeps_auth_req_struct;
typedef goep_auth_cnf_struct bt_goeps_auth_cnf_struct;
typedef goep_disconnect_req_struct bt_goeps_disconnect_req_struct;
typedef goep_disconnect_ind_struct bt_goeps_disconnect_ind_struct;
typedef goep_auth_ind_struct bt_goeps_auth_ind_struct;
typedef goep_auth_rsp_struct bt_goeps_auth_rsp_struct;
typedef goep_authorize_ind_struct bt_goeps_authorize_ind_struct;
typedef goep_authorize_rsp_struct bt_goeps_authorize_rsp_struct;
typedef goep_disconnect_ind_struct bt_goeps_tpdisconnect_ind_struct;


typedef goep_connect_req_struct bt_goepc_connect_req_struct;
typedef goep_connect_cnf_struct bt_goepc_connect_cnf_struct;
typedef goep_push_req_struct bt_goepc_push_req_struct;
typedef goep_push_cnf_struct bt_goepc_push_cnf_struct;
typedef goep_pull_req_struct bt_goepc_pull_req_struct;
typedef goep_pull_cnf_struct bt_goepc_pull_cnf_struct;
typedef goep_set_folder_req_struct bt_goepc_set_folder_req_struct;
typedef goep_set_folder_cnf_struct bt_goepc_set_folder_cnf_struct;
typedef goep_action_req_struct bt_goepc_action_req_struct;
typedef goep_action_cnf_struct bt_goepc_action_cnf_struct;
typedef goep_abort_req_struct bt_goepc_abort_req_struct;
typedef goep_abort_cnf_struct bt_goepc_abort_cnf_struct;
typedef goep_disconnect_req_struct bt_goepc_disconnect_req_struct;
typedef goep_disconnect_cnf_struct bt_goepc_disconnect_cnf_struct;
typedef goep_disconnect_ind_struct bt_goepc_disconnect_ind_struct;
typedef goep_auth_ind_struct bt_goepc_auth_ind_struct;
typedef goep_auth_rsp_struct bt_goepc_auth_rsp_struct;
typedef goep_opp_supported_formats_ind_struct bt_goepc_opp_supported_formats_ind_struct;
typedef goep_disconnect_ind_struct bt_goepc_tpdisconnect_ind_struct;

typedef goep_register_server_req_struct bt_opps_register_server_req_struct;
typedef goep_register_server_cnf_struct bt_opps_register_server_cnf_struct;
typedef goep_deregister_server_req_struct bt_opps_deregister_server_req_struct;
typedef goep_deregister_server_cnf_struct bt_opps_deregister_server_cnf_struct;
typedef goep_connect_ind_struct bt_opps_connect_ind_struct;
typedef goep_connect_rsp_struct bt_opps_connect_rsp_struct;
typedef goep_push_ind_struct bt_opps_push_ind_struct;
typedef goep_push_rsp_struct bt_opps_push_rsp_struct;
typedef goep_pull_ind_struct bt_opps_pull_ind_struct;
typedef goep_pull_rsp_struct bt_opps_pull_rsp_struct;
typedef goep_set_folder_ind_struct bt_opps_set_folder_ind_struct;
typedef goep_set_folder_rsp_struct bt_opps_set_folder_rsp_struct;
typedef goep_action_ind_struct bt_opps_action_ind_struct;
typedef goep_action_rsp_struct bt_opps_action_rsp_struct;
typedef goep_abort_ind_struct bt_opps_abort_ind_struct;
typedef goep_abort_rsp_struct bt_opps_abort_rsp_struct;
typedef goep_auth_req_struct bt_opps_auth_req_struct;
typedef goep_auth_cnf_struct bt_opps_auth_cnf_struct;
typedef goep_disconnect_req_struct bt_opps_disconnect_req_struct;
typedef goep_disconnect_ind_struct bt_opps_disconnect_ind_struct;
typedef goep_auth_ind_struct bt_opps_auth_ind_struct;
typedef goep_auth_rsp_struct bt_opps_auth_rsp_struct;
typedef goep_authorize_ind_struct bt_opps_authorize_ind_struct;
typedef goep_authorize_rsp_struct bt_opps_authorize_rsp_struct;
typedef goep_disconnect_ind_struct bt_opps_tpdisconnect_ind_struct;

typedef goep_connect_req_struct bt_oppc_connect_req_struct;
typedef goep_connect_cnf_struct bt_oppc_connect_cnf_struct;
typedef goep_push_req_struct bt_oppc_push_req_struct;
typedef goep_push_cnf_struct bt_oppc_push_cnf_struct;
typedef goep_pull_req_struct bt_oppc_pull_req_struct;
typedef goep_pull_cnf_struct bt_oppc_pull_cnf_struct;
typedef goep_set_folder_req_struct bt_oppc_set_folder_req_struct;
typedef goep_set_folder_cnf_struct bt_oppc_set_folder_cnf_struct;
typedef goep_action_req_struct bt_oppc_action_req_struct;
typedef goep_action_cnf_struct bt_oppc_action_cnf_struct;
typedef goep_abort_req_struct bt_oppc_abort_req_struct;
typedef goep_abort_cnf_struct bt_oppc_abort_cnf_struct;
typedef goep_disconnect_req_struct bt_oppc_disconnect_req_struct;
typedef goep_disconnect_cnf_struct bt_oppc_disconnect_cnf_struct;
typedef goep_disconnect_ind_struct bt_oppc_disconnect_ind_struct;
typedef goep_auth_ind_struct bt_oppc_auth_ind_struct;
typedef goep_auth_rsp_struct bt_oppc_auth_rsp_struct;
typedef goep_opp_supported_formats_ind_struct bt_oppc_opp_supported_formats_ind_struct;
typedef goep_disconnect_ind_struct bt_oppc_tpdisconnect_ind_struct;


typedef goep_register_server_req_struct bt_ftps_register_server_req_struct;
typedef goep_register_server_cnf_struct bt_ftps_register_server_cnf_struct;
typedef goep_deregister_server_req_struct bt_ftps_deregister_server_req_struct;
typedef goep_deregister_server_cnf_struct bt_ftps_deregister_server_cnf_struct;
typedef goep_connect_ind_struct bt_ftps_connect_ind_struct;
typedef goep_connect_rsp_struct bt_ftps_connect_rsp_struct;
typedef goep_push_ind_struct bt_ftps_push_ind_struct;
typedef goep_push_rsp_struct bt_ftps_push_rsp_struct;
typedef goep_pull_ind_struct bt_ftps_pull_ind_struct;
typedef goep_pull_rsp_struct bt_ftps_pull_rsp_struct;
typedef goep_set_folder_ind_struct bt_ftps_set_folder_ind_struct;
typedef goep_set_folder_rsp_struct bt_ftps_set_folder_rsp_struct;
typedef goep_action_ind_struct bt_ftps_action_ind_struct;
typedef goep_action_rsp_struct bt_ftps_action_rsp_struct;
typedef goep_abort_ind_struct bt_ftps_abort_ind_struct;
typedef goep_abort_rsp_struct bt_ftps_abort_rsp_struct;
typedef goep_auth_req_struct bt_ftps_auth_req_struct;
typedef goep_auth_cnf_struct bt_ftps_auth_cnf_struct;
typedef goep_disconnect_req_struct bt_ftps_disconnect_req_struct;
typedef goep_disconnect_ind_struct bt_ftps_disconnect_ind_struct;
typedef goep_auth_ind_struct bt_ftps_auth_ind_struct;
typedef goep_auth_rsp_struct bt_ftps_auth_rsp_struct;
typedef goep_authorize_ind_struct bt_ftps_authorize_ind_struct;
typedef goep_authorize_rsp_struct bt_ftps_authorize_rsp_struct;
typedef goep_disconnect_ind_struct bt_ftps_tpdisconnect_ind_struct;



typedef goep_connect_req_struct bt_ftpc_connect_req_struct;
typedef goep_connect_cnf_struct bt_ftpc_connect_cnf_struct;
typedef goep_push_req_struct bt_ftpc_push_req_struct;
typedef goep_push_cnf_struct bt_ftpc_push_cnf_struct;
typedef goep_pull_req_struct bt_ftpc_pull_req_struct;
typedef goep_pull_cnf_struct bt_ftpc_pull_cnf_struct;
typedef goep_set_folder_req_struct bt_ftpc_set_folder_req_struct;
typedef goep_set_folder_cnf_struct bt_ftpc_set_folder_cnf_struct;
typedef goep_action_req_struct bt_ftpc_action_req_struct;
typedef goep_action_cnf_struct bt_ftpc_action_cnf_struct;
typedef goep_abort_req_struct bt_ftpc_abort_req_struct;
typedef goep_abort_cnf_struct bt_ftpc_abort_cnf_struct;
typedef goep_disconnect_req_struct bt_ftpc_disconnect_req_struct;
typedef goep_disconnect_cnf_struct bt_ftpc_disconnect_cnf_struct;
typedef goep_disconnect_ind_struct bt_ftpc_disconnect_ind_struct;
typedef goep_auth_ind_struct bt_ftpc_auth_ind_struct;
typedef goep_auth_rsp_struct bt_ftpc_auth_rsp_struct;
typedef goep_opp_supported_formats_ind_struct bt_ftpc_opp_supported_formats_ind_struct;
typedef goep_disconnect_ind_struct bt_ftpc_tpdisconnect_ind_struct;




typedef goep_register_server_req_struct ftps_register_server_req_struct;
typedef goep_register_server_cnf_struct ftps_register_server_cnf_struct;
typedef goep_deregister_server_req_struct ftps_deregister_server_req_struct;
typedef goep_deregister_server_cnf_struct ftps_deregister_server_cnf_struct;
typedef goep_connect_ind_struct ftps_connect_ind_struct;
typedef goep_connect_rsp_struct ftps_connect_rsp_struct;
typedef goep_push_ind_struct ftps_push_ind_struct;
typedef goep_push_rsp_struct ftps_push_rsp_struct;
typedef goep_pull_ind_struct ftps_pull_ind_struct;
typedef goep_pull_rsp_struct ftps_pull_rsp_struct;
typedef goep_set_folder_ind_struct ftps_set_folder_ind_struct;
typedef goep_set_folder_rsp_struct ftps_set_folder_rsp_struct;
typedef goep_action_ind_struct ftps_action_ind_struct;
typedef goep_action_rsp_struct ftps_action_rsp_struct;
typedef goep_abort_ind_struct ftps_abort_ind_struct;
typedef goep_abort_rsp_struct ftps_abort_rsp_struct;
typedef goep_auth_req_struct ftps_auth_req_struct;
typedef goep_auth_cnf_struct ftps_auth_cnf_struct;
typedef goep_disconnect_req_struct ftps_disconnect_req_struct;
typedef goep_disconnect_ind_struct ftps_disconnect_ind_struct;
typedef goep_auth_ind_struct ftps_auth_ind_struct;
typedef goep_auth_rsp_struct ftps_auth_rsp_struct;
typedef goep_authorize_ind_struct ftps_authorize_ind_struct;

typedef goep_disconnect_ind_struct ftps_tpdisconnect_ind_struct;

typedef goep_connect_req_struct ftpc_connect_req_struct;
typedef goep_connect_cnf_struct ftpc_connect_cnf_struct;
typedef goep_push_req_struct ftpc_push_req_struct;
typedef goep_push_cnf_struct ftpc_push_cnf_struct;
typedef goep_pull_req_struct ftpc_pull_req_struct;
typedef goep_pull_cnf_struct ftpc_pull_cnf_struct;
typedef goep_set_folder_req_struct ftpc_set_folder_req_struct;
typedef goep_set_folder_cnf_struct ftpc_set_folder_cnf_struct;
typedef goep_action_req_struct ftpc_action_req_struct;
typedef goep_action_cnf_struct ftpc_action_cnf_struct;
typedef goep_abort_req_struct ftpc_abort_req_struct;
typedef goep_abort_cnf_struct ftpc_abort_cnf_struct;
typedef goep_disconnect_req_struct ftpc_disconnect_req_struct;
typedef goep_disconnect_cnf_struct ftpc_disconnect_cnf_struct;
typedef goep_disconnect_ind_struct ftpc_disconnect_ind_struct;
typedef goep_auth_ind_struct ftpc_auth_ind_struct;
typedef goep_auth_rsp_struct ftpc_auth_rsp_struct;
typedef goep_opp_supported_formats_ind_struct ftpc_opp_supported_formats_ind_struct;
typedef goep_disconnect_ind_struct ftpc_tpdisconnect_ind_struct;

typedef goep_cnf_struct ftp_cnf_struct;


typedef goep_cnf_struct ftps_abort_cnf_struct;
typedef goep_rsp_struct ftps_authorize_rsp_struct;
# 1722 "../include/common/bluetooth_struct.h"
typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 obj_mime_type[80];
    kal_uint8 obj_name[(256 * 2)];
    kal_uint32 filepath_len;
    kal_uint8 filepath[512];
    kal_uint8 srm_enable;
    kal_uint8 srm_waitcount;
} bt_ftpc_pushfile_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
    kal_uint8 reason;
    kal_uint8 srm_enable;
} bt_ftpc_pushfile_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 obj_mime_type[80];
    kal_uint8 obj_name[(256 * 2)];
    kal_uint32 filepath_len;
    kal_uint8 filepath[512];
    kal_uint8 srm_enable;
    kal_uint8 srm_waitcount;
} bt_ftpc_pullfile_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
    kal_uint32 total_obj_len;
    kal_uint8 reason;
    kal_uint8 srm_enable;
} bt_ftpc_pullfile_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
} bt_ftpc_abortfile_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
} bt_ftpc_abortfile_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint32 total_obj_len;
    kal_uint8 obj_name[(256 * 2)];
    kal_uint8 obj_mime_type[80];
    kal_uint8 srm_enable;
} bt_ftps_pushfile_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
    kal_uint8 filepath[512];
    kal_uint16 filepath_len;
    kal_uint8 srm_enable;
    kal_uint8 srm_waitcount;
} bt_ftps_pushfile_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
    kal_uint32 total_obj_len;
} bt_ftps_pushfile_rsp_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 goep_conn_id;
    kal_uint8 obj_name[(256 * 2)];
    kal_uint8 obj_mime_type[80];
    kal_uint8 srm_enable;
} bt_ftps_pullfile_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
    kal_uint8 filepath[512];
    kal_uint16 filepath_len;
    kal_uint8 srm_enable;
    kal_uint8 srm_waitcount;
} bt_ftps_pullfile_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
} bt_ftps_pullfile_rsp_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
} bt_ftps_abortfile_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 rsp_code;
    kal_uint8 goep_conn_id;
} bt_ftps_abortfile_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 goep_conn_id;
    kal_uint8 operation;
    kal_uint32 total_length;
    kal_uint32 curr_length;
} bt_ftps_file_progress_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 goep_conn_id;
    kal_uint8 operation;
    kal_uint32 total_length;
    kal_uint32 curr_length;
} bt_ftpc_file_progress_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 goep_conn_id;
 kal_uint8 param;
} bt_ftps_server_internal_rw_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 goep_conn_id;
 kal_uint8 param;
} bt_ftpc_client_internal_rw_ind_struct;


typedef enum
{
    BT_OPP_READY_FEATURE ,
    BT_OPP_PULL_FEATURE = 1,
    BT_OPP_PUSH_FEATURE = 2,
    BT_OPP_EXCHANGE_FEATURE
} BT_OPC_FEATURE;
# 1966 "../include/common/bluetooth_struct.h"
typedef enum
{
    BT_BIP_NULL,
    BT_BIP_INITIATOR_ROLE,
    BT_BIP_RESPONDER_ROLE
} bt_bip_session_role_enum;

typedef enum
{
    BT_BIP_TRANS_NONE,
    BT_BIP_TRANS_STRECH,
    BT_BIP_TRANS_CROP,
    BT_BIP_TRANS_FILL,
    BT_BIP_TRANS_MAX
} bt_bip_img_trans_enum;

typedef struct
{
    bt_bip_img_format_enum encoding;
    kal_bool define_pixel_with_range;
    kal_uint16 max_pixel_width;
    kal_uint16 min_pixel_width;
    kal_uint16 max_pixel_height;
    kal_uint16 min_pixel_height;
    kal_uint16 specified_pixel_width;
    kal_uint16 specified_pixel_height;
    kal_uint8 img_handle[8];
    kal_uint8 friendly_name[(256 * 2)];
    kal_uint32 size;
    kal_uint8 created[18];
    kal_uint8 modified[18];
} bt_bip_img_info_struct;

typedef struct
{
 kal_uint16 width;
 kal_uint16 height;
 kal_uint16 width2;
 kal_uint16 height2;
} bt_bip_pixel_struct;

typedef struct
{
 kal_uint32 encoding;
 bt_bip_pixel_struct pixel;
 kal_uint32 size;
 kal_uint32 transformation;
} bt_bip_img_desc_struct;

typedef bt_addr_struct bt_bip_bd_addr_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 result;
    kal_uint8 option;
    kal_uint8 realm_len;
    kal_uint8 realm[20];
} bt_bip_obex_auth_ind_struct;

typedef struct
{
    kal_uint8 uid[20];
    kal_int8 uid_len;
    kal_uint8 pwd[16];
    kal_uint8 pwd_len;
} bt_bip_dig_response_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 result;

    bt_bip_dig_response_struct dig_rsp;
} bt_bip_obex_auth_rsp_struct;

typedef struct
{
    kal_uint8 uid[20];
    kal_int8 uid_len;
    kal_uint8 pwd[16];
    kal_uint8 pwd_len;
    kal_uint8 realm[20];
    kal_uint8 realm_len;
} bt_bip_dig_challenge_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;

    bt_bip_dig_challenge_struct dig_chal;
} bt_bip_obex_auth_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;

    kal_uint8 cnf_code;
} bt_bip_obex_auth_cnf_struct;




typedef struct
{
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;
    kal_uint8 passwd[16];
    kal_uint8 passwd_len;
    kal_uint8 realm_str[20];
    kal_uint8 realm_len;
} auth_chal_struct;

typedef kal_uint8(*AUTH_IND_HANDLER) (goep_auth_ind_struct *auth_ind);

struct auth_ind_handler_struct
{
    kal_uint8 uuid[16];
    kal_uint8 uuid_len;

    AUTH_IND_HANDLER auth_ind_handler;

    struct auth_ind_handler_struct *next;

};

typedef struct auth_ind_handler_struct auth_ind_handler_struct;
# 106 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_a2dp_struct.h" 1
# 265 "../include/profiles/bluetooth_a2dp_struct.h"
typedef struct _A2dpCodec
{
    kal_uint8 codecType;
    kal_uint8 elemLen;
    kal_uint8 *elements;
} A2dpCodec;



typedef struct
{
 kal_uint32 lap;
 kal_uint8 uap;
 kal_uint16 nap;
} bt_device_addr_struct;

typedef struct
{
 kal_bool in_use;
 kal_uint8 seid;
 kal_uint8 media_type;
 kal_uint8 sep_type;
} bt_sep_info_struct;



typedef struct
{
 kal_uint8 min_bit_pool;
 kal_uint8 max_bit_pool;
 kal_uint8 block_len;
 kal_uint8 subband_num;
 kal_uint8 alloc_method;
 kal_uint8 sample_rate;
 kal_uint8 channel_mode;
} bt_a2dp_sbc_codec_cap_struct;

typedef struct
{
 kal_uint8 layer;
 kal_bool CRC;
 kal_uint8 channel_mode;
 kal_bool MPF;
 kal_uint8 sample_rate;
 kal_bool VBR;
 kal_uint16 bit_rate;
} bt_a2dp_mp3_codec_cap_struct;

typedef struct
{
 kal_uint8 object_type;
 kal_uint16 sample_rate;
 kal_uint8 channels;
 kal_bool VBR;
 kal_uint32 bit_rate;
} bt_a2dp_aac_codec_cap_struct;

typedef struct
{
 kal_uint8 version;
 kal_uint8 channel_mode;
 kal_uint8 sample_rate;
 kal_bool VBR;
 kal_uint32 bit_rate;
 kal_uint16 max_sul;
} bt_a2dp_atrac_codec_cap_struct;

typedef struct{
    kal_uint32(*GetPayload)(kal_uint8 *, kal_uint32, kal_uint32 *);
    void (*GetPayloadDone)(void);
    void (*QueryPayloadSize)(kal_uint32 *, kal_uint32 *);
    kal_uint32 (*AdjustBitRateFromQos)(kal_uint8);
    kal_uint32 (*SetBitRate)(kal_uint32);
    kal_uint8 state;
} A2DP_codec_struct;


typedef union
{
 bt_a2dp_sbc_codec_cap_struct sbc;
 bt_a2dp_mp3_codec_cap_struct mp3;
 bt_a2dp_aac_codec_cap_struct aac;
 bt_a2dp_atrac_codec_cap_struct atrac;
} bt_a2dp_audio_codec_cap_struct;


typedef struct
{
 kal_uint8 codec_type;
 bt_a2dp_audio_codec_cap_struct codec_cap;
} bt_a2dp_audio_cap_struct;



typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 local_role;
 kal_uint8 sep_num;
 bt_a2dp_audio_cap_struct local_sep[(1)];
} bt_a2dp_activate_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
} bt_a2dp_deactivate_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct device_addr;
 kal_uint8 local_role;
} bt_a2dp_signal_connect_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct device_addr;
    kal_uint8 accept;
} bt_a2dp_signal_connect_res_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
} bt_a2dp_signal_disconnect_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 command;
    kal_uint8 size;
    kal_uint8 data[6];

    kal_uint8 req_fm_a2dp_data;

} bt_a2dp_appi_bt_command_struct;
# 453 "../include/profiles/bluetooth_a2dp_struct.h"
typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
 bt_a2dp_audio_cap_struct audio_cap;
} bt_a2dp_stream_reconfig_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
 kal_uint8 stream_handle;
} bt_a2dp_stream_reconfig_res_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct device_addr;
 kal_uint8 local_role;
} bt_a2dp_stream_open_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 accept;
 kal_uint8 stream_handle;
} bt_a2dp_stream_open_res_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_start_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
 kal_uint8 stream_handle;
} bt_a2dp_stream_start_res_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_pause_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
 kal_uint8 stream_handle;
} bt_a2dp_stream_pause_res_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;

 kal_uint16 len;
 kal_uint32 sample_count;
 kal_uint8 data[800];
} bt_a2dp_stream_data_send_req_struct;
# 532 "../include/profiles/bluetooth_a2dp_struct.h"
typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_close_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
 kal_uint8 stream_handle;
} bt_a2dp_stream_close_res_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_abort_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_abort_res_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
} bt_a2dp_activate_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
} bt_a2dp_deactivate_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
 kal_uint16 result;
 bt_addr_struct device_addr;
} bt_a2dp_signal_connect_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct device_addr;
    kal_uint8 device_name_size;
    kal_uint8 device_name[60];
} bt_a2dp_signal_connect_ind_struct;



typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
 kal_uint16 result;
} bt_a2dp_signal_disconnect_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
} bt_a2dp_signal_disconnect_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
 kal_uint16 result;
 kal_uint8 sep_num;
 bt_sep_info_struct sep_list[(4)];
} bt_a2dp_sep_discover_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
} bt_a2dp_sep_discover_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
 kal_uint16 result;
    kal_uint8 audio_cap_size;
 bt_a2dp_audio_cap_struct audio_cap;
} bt_a2dp_capabilities_get_result_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
 kal_uint16 result;
} bt_a2dp_capabilities_get_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
 kal_uint8 acp_seid;
} bt_a2dp_capabilities_get_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
 kal_uint16 result;
 kal_uint8 stream_handle;
} bt_a2dp_stream_config_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 connect_id;
 kal_uint8 acp_seid;
 kal_uint8 int_seid;
 kal_uint8 stream_handle;
 bt_a2dp_audio_cap_struct audio_cap;
} bt_a2dp_stream_config_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
 kal_uint8 stream_handle;
} bt_a2dp_stream_reconfig_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
 bt_a2dp_audio_cap_struct audio_cap;
} bt_a2dp_stream_reconfig_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint16 result;
    kal_uint8 stream_handle;
    bt_addr_struct device_addr;
    kal_uint8 device_name[60];
    kal_uint8 device_name_len;
} bt_a2dp_stream_open_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 stream_handle;
    bt_addr_struct device_addr;
    kal_uint8 device_name_len;
    kal_uint8 device_name[60];
} bt_a2dp_stream_open_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
 kal_uint8 stream_handle;
    kal_uint16 prefer_size;
    bt_a2dp_audio_cap_struct current_config;
} bt_a2dp_stream_start_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
    kal_uint16 prefer_size;
    bt_a2dp_audio_cap_struct current_config;
} bt_a2dp_stream_start_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
 kal_uint8 stream_handle;
} bt_a2dp_stream_pause_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_pause_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint16 result;
 kal_uint8 stream_handle;
} bt_a2dp_stream_close_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_close_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_abort_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_abort_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
 kal_uint8 qos;
} bt_a2dp_stream_qos_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 stream_handle;
} bt_a2dp_stream_data_out_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_a2dp_audio_cap_struct audio_cap;
} bt_a2dp_stream_data_config_change_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
} bt_a2dp_stream_data_config_get_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_a2dp_audio_cap_struct audio_cap;
} bt_a2dp_stream_data_config_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    unsigned short result;
    kal_uint16 prefer_size;
    bt_a2dp_audio_cap_struct current_config;
} bt_a2dp_stream_data_start_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint16 prefer_size;
    bt_a2dp_audio_cap_struct current_config;
} bt_a2dp_stream_data_start_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 unsigned short result;
} bt_a2dp_stream_data_stop_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
} bt_a2dp_stream_data_disc_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
} bt_a2dp_stream_data_disconnecting_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 accept;
    kal_uint8 stream_handle;
} bt_a2dp_connect_accept_res_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 stream_handle;
    kal_uint8 seq_no;
} bt_media_a2dp_codec_open_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 stream_handle;
    kal_uint8 seq_no;
} bt_media_a2dp_codec_close_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;

    void* req_context;
}bt_a2dp_header_struct;

typedef enum
{
  BT_A2DP_BAD_HEADER_FORMAT=0x1,

 BT_A2DP_BAD_LENGTH=0x11,
 BT_A2DP_BAD_ACP_SEID,
 BT_A2DP_SEP_IN_USE,
 BT_A2DP_SEP_NOT_IN_USE,
 BT_A2DP_BAD_SERV_CATEGORY=0x17,
 BT_A2DP_BAD_PAYLOAD_FORMAT,
 BT_A2DP_NOT_SUPPORTED_COMMAND,
 BT_A2DP_INVALID_CAPABILITIES,

 BT_A2DP_BAD_RECOVERY_TYPE=0x22,
 BT_A2DP_BAD_MEDIA_TRANSPORT_FORMAT,
 BT_A2DP_BAD_RECOVERY_FORMAT=0x25,
 BT_A2DP_BAD_ROHC_FORMAT,
 BT_A2DP_BAD_CP_FORMAT,
 BT_A2DP_BAD_MULTIPLEXING_FORMAT,
 BT_A2DP_UNSUPPORTED_CONFIGURATION,

 BT_A2DP_BAD_STATE=0x31,



 BT_A2DP_INVALID_CODEC_TYPE=0xC1,
 BT_A2DP_NOT_SUPPORTED_CODEC_TYPE,
 BT_A2DP_INVALID_SAMPLING_FREQUENCY,
 BT_A2DP_NOT_SUPPORTED_SAMPLING_FREQUENCY,
 BT_A2DP_INVALID_CHANNEL_MODE,
 BT_A2DP_NOT_SUPPORTED_CHANNEL_MODE,
 BT_A2DP_INVALID_SUBBANDS,
 BT_A2DP_NOT_SUPPORTED_SUBBANDS,
 BT_A2DP_INVALID_ALLOCATION_METHOD,
 BT_A2DP_NOT_SUPPORTED_ALLOCATION_METHOD,
 BT_A2DP_INVALID_MINIMUM_BITPOOL_VALUE,
 BT_A2DP_NOT_SUPPORTED_MINIMUM_BITPOOL_VALUE,
 BT_A2DP_INVALID_MAXIMUM_BITPOOL_VALUE,
 BT_A2DP_NOT_SUPPORTED_MAXIMUM_BITPOOL_VALUE,
 BT_A2DP_INVALID_LAYER,
 BT_A2DP_NOT_SUPPORTED_LAYER,
 BT_A2DP_NOT_SUPPORTED_CRC,
 BT_A2DP_NOT_SUPPORTED_MPF,
 BT_A2DP_NOT_SUPPORTED_VBR,
 BT_A2DP_INVALID_BIT_RATE,
 BT_A2DP_NOT_SUPPORTED_BIT_RATE,
 BT_A2DP_INVALID_OBJECT_TYPE,
 BT_A2DP_NOT_SUPPORTED_OBJECT_TYPE,
 BT_A2DP_INVALID_CHANNELS,
 BT_A2DP_NOT_SUPPORTED_CHANNELS,
 BT_A2DP_INVALID_VERSION,
 BT_A2DP_NOT_SUPPORTED_VERSION,
 BT_A2DP_NOT_SUPPORTED_MAXIMUM_SUL,
 BT_A2DP_INVALID_BLOCK_LENGTH,

 BT_A2DP_INVALID_CP_TYPE=0xE0,
 BT_A2DP_INVALID_CP_FORMAT,

 BT_A2DP_RESULT_OK=0x0100,
 BT_A2DP_RESULT_TIMEOUT,
 BT_A2DP_RESULT_BAD_STATE,
 BT_A2DP_RESULT_FATAL_ERROR,
 BT_A2DP_RESULT_NO_CONNECTION,
 BT_A2DP_RESULT_SEP_IND_USE,
 BT_A2DP_RESULT_BAD_ACP_SEID,
 BT_A2DP_RESULT_PANIC
} BT_A2DP_RESULT_ENUM;

typedef enum
{
 BT_AUDIO_STREAM_RECONFIG_FAIL,
 BT_AUDIO_STREAM_START_FAIL,
 BT_AUDIO_STREAM_PAUSE_FAIL
} MED_BT_AUDIO_ERROR_CAUSE_ENUM;
# 107 "database/parse_db.c" 2

# 1 "../include/profiles/bluetooth_gap_struct.h" 1
# 220 "../include/profiles/bluetooth_gap_struct.h"
typedef enum
{
    BTBM_ADP_SUCCESS,
    BTBM_ADP_FAILED,
    BTBM_ADP_FAIL_BUSY,
    BTBM_ADP_FAIL_NOT_ALLOW,
    BTBM_ADP_FAIL_TIMEOUT,
    BTBM_ADP_FAIL_KEYERR,
    BTBM_ADP_FAIL_REMOTE_REJECT,
    BTBM_ADP_FAIL_LINK_KEY_DISMISSED,
    BTBM_ADP_FAIL_NO_RESOURCE,
} btbm_gap_result;

typedef enum
{
    BTBM_ADP_P_OFF_I_OFF = 0x0,
    BTBM_ADP_P_OFF_I_ON = 0x1,
    BTBM_ADP_P_ON_I_OFF = 0x2,
    BTBM_ADP_P_ON_I_ON = 0x3,
    BTBM_ADP_P_ON_I_ON_L = 0x13
} btbm_scan_enable_type;

typedef enum
{
    BT_JSR82_SERVICE_SEARCH_REQ,
    BT_JSR82_SERVICE_ATTRIBUTE_REQ,
    BT_JSR82_SERVICE_SEARCH_ATTRIBUTE_REQ,
} btbm_search_type;

typedef enum
{
    BTBM_UUID_16,
    BTBM_UUID_128
} btbm_uuid_type;

typedef bt_addr_struct btbm_bd_addr_t;

typedef enum
{
    BTBM_ADP_NONVISIBLE = 0,
    BTBM_ADP_VISIBLE
} btbm_visual_mode;

typedef enum
{
    BTBM_ADP_NONPAGEABLE = 0,
    BTBM_ADP_PAGEABLE
} btbm_page_mode;

typedef enum
{
    BTBM_AUTHENTICATION_DISABLE = 0,
    BTBM_AUTHENTICATION_ENABLE,
    BTBM_AUTHENTICATION_ENABLE_LEVEL3_ENCRYPT_OFF,
    BTBM_AUTHENTICATION_ENABLE_LEVEL3_ENCRYPT_ON
} btbm_authentication_mode;

typedef enum
{
    BTBM_SECURITY_LEVEL1 = 1,
    BTBM_SECURITY_LEVEL2,
    BTBM_SECURITY_LEVEL3,
    BTBM_SECURITY_LEVEL4
} btbm_security_level_mode;

typedef enum
{
    BTBM_GENERAL_INQUIRY = 0,
    BTBM_LIMITED_INQUIRY
} btbm_inquiry_channel_mode;

typedef enum
{
    BTBM_DISCOVERY_WITH_NAME = 0,
    BTBM_DISCOVERY_WITHOUT_NAME
} btbm_discovery_mode;

typedef enum
{
    BTBM_DISCOVERY_BR_EDR_ONLY,
    BTBM_DISCOVERY_LE_ONLY,
    BTBM_DISCOVERY_DUAL
} btbm_discovery_type;

typedef enum
{
    BTBM_DEVICE_TYPE_LE,
    BTBM_DEVICE_TYPE_BR_EDR,
    BTBM_DEVICE_TYPE_BR_EDR_LE
} btbm_device_type;

typedef enum
{
    BTBM_TYPE_PAIRING = 0,
    BTBM_TYPE_BONDING
} btbm_pairing_mode;

typedef enum
{
    BTBM_WRITE_COD_RESTORE = 0,
    BTBM_WRITE_COD_MASK,
    BTBM_WRITE_COD_NEW
} btbm_write_cod_type;

typedef enum
{
    BTBM_SSP_KEYPRESS_STARTED = 0,
    BTBM_SSP_KEYPRESS_ENTERED,
    BTBM_SSP_KEYPRESS_ERASED,
    BTBM_SSP_KEYPRESS_CLEARED,
    BTBM_SSP_KEYPRESS_COMPLETED
} btbm_ssp_keypress_type;

typedef enum
{
    BTBM_LINK_KEY_TYPE_COMBINATION = 0,
    BTBM_LINK_KEY_TYPE_LOCAL_UNIT,
    BTBM_LINK_KEY_TYPE_REMOTE_UNIT,
    BTBM_LINK_KEY_TYPE_DEBUG_COMBINATION,
    BTBM_LINK_KEY_TYPE_UNAUTHENTICATED,
    BTBM_LINK_KEY_TYPE_AUTHENTICATED,
    BTBM_LINK_KEY_TYPE_CHANGED_COMBINATION,
} btbm_link_key_type;
# 354 "../include/profiles/bluetooth_gap_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 cod;



    kal_uint8 inquiry_length;
    kal_uint8 inquiry_number;
    btbm_inquiry_channel_mode access_mode;
    btbm_discovery_mode discovery_mode;
    btbm_discovery_type discovery_type;
} bt_bm_discovery_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_bool supported_eir;
    kal_bool supported_servlist;
    kal_bool servlist_completed;
    kal_uint32 service_list1;
    kal_uint32 service_list2;
    kal_uint32 service_list3;
    kal_uint32 service_list4;
    kal_uint32 service_list5;
    kal_uint32 service_list6;
    kal_int8 rssi;
    kal_uint32 cod;
    btbm_device_type device_type;


    kal_uint8 name_len;
    kal_uint8 name[(248)];
} bt_bm_discovery_result_ind_struct;

typedef bt_bm_discovery_result_ind_struct bt_bm_discovery_update_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 total_number;
} bt_bm_discovery_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 total_number;
} bt_bm_discovery_cancel_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 name_len;
    kal_uint8 name[(248)];
} bt_bm_write_local_name_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
} bt_bm_write_local_name_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 name_len;
    kal_uint8 name[(248)];
} bt_bm_read_local_name_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_read_remote_name_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
    kal_uint32 cod;
    kal_uint8 name_len;
    kal_uint8 name[(248)];
} bt_bm_read_remote_name_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 name_len;
    kal_uint8 name[(248)];
}bt_bm_remote_name_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
} bt_bm_read_remote_name_cancel_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_scan_enable_type mode;
} bt_bm_write_scanenable_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
} bt_bm_write_scanenable_mode_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 modenotconnected;
    kal_uint8 modeconnected;
} bt_bm_read_scanenable_mode_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
} bt_bm_read_local_addr_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint32 cod;
} bt_bm_read_local_cod_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 cod;
    btbm_write_cod_type write_type;
} bt_bm_write_local_cod_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
} bt_bm_write_local_cod_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint32 service_list1;
    kal_uint32 service_list2;
    kal_uint32 service_list3;
    kal_uint32 service_list4;
    kal_uint32 service_list5;
    kal_uint32 service_list6;
} bt_bm_read_local_uuid_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 spec_version;
    kal_uint8 master_switch;
    kal_uint8 retrievable_max;
    kal_uint8 connected_max;
    kal_uint16 received_l2cap_mtu;
    kal_uint8 sdp_transaction_max;
    btbm_visual_mode connected_inquiry_scan;
    btbm_page_mode connected_page_scan;
    btbm_visual_mode connected_inquiry;
    btbm_page_mode connected_page;
} bt_bm_read_property_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_authentication_mode mode;
} bt_bm_write_authentication_mode_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_security_level_mode security_level;
} bt_bm_write_authentication_mode_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 enable_16digits_pin_code;
    kal_uint32 cod;
    kal_uint8 name_len;
    kal_uint8 name[(248)];
} bt_bm_pin_code_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 numeric[6];
    kal_bool display_numeric;
    kal_uint32 cod;
    kal_uint8 name_len;
    kal_uint8 name[(248)];
} bt_bm_security_user_confirm_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint32 cod;
    kal_uint8 name_len;
    kal_uint8 name[(248)];
} bt_bm_security_oob_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 pin_len;
    kal_uint8 pin_code[16];
} bt_bm_pin_code_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 accept;
} bt_bm_security_user_confirm_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 accept;
    kal_uint8 c[16];
    kal_uint8 r[16];
} bt_bm_security_oob_data_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint32 cod;


    kal_uint8 name_len;
    kal_uint8 name[(248)];
} bt_bm_security_passkey_entry_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint32 passkey;
    kal_uint32 cod;


    kal_uint8 name_len;
    kal_uint8 name[(248)];
} bt_bm_security_passkey_notify_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 event;
} bt_bm_security_keypress_notify_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_security_passkey_notify_cancel_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_bool accept;
    kal_uint32 passkey;
} bt_bm_security_passkey_entry_rsp_struct;

typedef bt_bm_security_user_confirm_rsp_struct bt_bm_security_passkey_notify_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_block_active_link_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 num_block_list;
    btbm_bd_addr_t block_list[(25)];
} bt_bm_block_list_update_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
} bt_bm_block_list_update_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_delete_trust_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
} bt_bm_delete_trust_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
} bt_bm_delete_trust_all_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_bonding_cancel_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
} bt_bm_bonding_cancel_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_pairing_cancel_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
} bt_bm_pairing_cancel_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 sdap_len;
    kal_uint32 sdap_uuid[(30)];
} bt_bm_bonding_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
} bt_bm_bonding_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_acl_link_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_acl_link_close_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
    kal_uint32 cod;
    btbm_link_key_type link_key_type;
    kal_uint8 link_key[(16)];
    btbm_device_type device_type;
} bt_bm_bonding_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_get_link_key_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
    kal_uint32 cod;
    btbm_link_key_type link_key_type;
    kal_uint8 link_key[(16)];
    btbm_device_type device_type;
    kal_uint8 persist;
} bt_bm_get_link_key_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 sdap_len;
    kal_uint32 sdap_uuid[(30)];
} bt_bm_service_search_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_service_search_cancel_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 uuid;
    btbm_bd_addr_t bd_addr;
} bt_bm_service_search_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
    kal_uint8 searched_number;
} bt_bm_service_search_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
    kal_uint8 searched_number;
} bt_bm_service_search_cancel_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    btbm_uuid_type type;
    kal_uint32 sdap_uuid_16;
    kal_uint8 sdap_uuid_128[16];
    kal_uint16 attribute_id;
    kal_uint32 identify;
} bt_bm_search_attribute_req_struct;
# 818 "../include/profiles/bluetooth_gap_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    btbm_search_type search_type;
    kal_uint8 search_pattern[150];
    kal_uint8 search_pattern_size;

} bt_bm_search_raw_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint16 len;
    kal_uint8 data[100];
} bt_bm_search_raw_result_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint8 result;
} bt_bm_search_raw_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
    kal_uint16 len;
    kal_uint8 data[56];
} bt_bm_search_attribut_result_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;

    kal_uint16 len;
    kal_uint8 data[56];

    kal_uint32 identify;
} bt_bm_search_attribute_cnf_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
} bt_bm_save_setting_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
} bt_bm_restore_setting_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 string[100];
} bt_test_cmd_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    btbm_bd_addr_t bd_addr;
} bt_bm_link_connect_accept_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    btbm_bd_addr_t bd_addr;
} bt_bm_link_connect_accept_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 max_number;
    kal_uint8 current_number;
    btbm_bd_addr_t bd_addr;
} bt_bm_link_state_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 bdaddr[6];
} bt_bm_get_link_state_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 result;
    kal_bool is_master;
    kal_bool is_authenticated;
    kal_bool is_encrypted;
} bt_bm_get_link_state_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 piconet;
    kal_uint8 scatternet;
    kal_uint8 sco;
    kal_uint8 esco;
} bt_bm_get_scatternet_state_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint16 appearance;
} bt_bm_write_appearance_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
} bt_bm_write_appearance_cnf_struct;
# 109 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_hfg_struct.h" 1
# 108 "../include/profiles/bluetooth_hfg_struct.h"
# 1 "../include/profiles/bluetooth_hfg_common.h" 1
# 47 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgDiscReason;
# 61 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint16 HfgHandsFreeVersion;
# 86 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint32 HfgHandsFreeFeatures;
# 120 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgIndicator;
# 174 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgCallSetupState;
# 195 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgHoldState;
# 218 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgCallStatus;
# 257 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgCallMode;
# 276 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgHoldAction;
# 310 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgResponseHold;
# 331 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgNumberFormat;
# 357 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgOperFormat;
# 381 "../include/profiles/bluetooth_hfg_common.h"
typedef struct _HfgCallWaitParms
{

    const char *number;

    kal_uint8 classmap;

    kal_uint8 type;
} HfgCallWaitParms;






typedef struct _HfgReadIndicatorParms
{

        kal_uint8 num;
        struct
        {

            kal_uint8 value;
        } ind[7];
} HfgReadIndicatorParms;







typedef struct _HfgCallerIdParms
{

    const char *number;


    kal_uint8 type;
} HfgCallerIdParms;
# 430 "../include/profiles/bluetooth_hfg_common.h"
typedef struct _HfgCallListParms
{

    kal_uint8 index;


    kal_uint8 dir;


    HfgCallStatus state;


    HfgCallMode mode;


    kal_uint8 multiParty;


    const char *number;


    kal_uint8 type;
} HfgCallListParms;







typedef struct _HfgSubscriberNum
{

    const char *number;



    HfgNumberFormat type;


    kal_uint8 service;
} HfgSubscriberNum;






typedef struct _HfgNetworkOperator
{



    kal_uint8 mode;



    HfgOperFormat format;


    const char *oper;
} HfgNetworkOperator;






typedef struct _HfgHold
{

    HfgHoldAction action;




    kal_uint8 index;
} HfgHold;






typedef struct _HfgAtData
{
    kal_uint8 *rawData;
    kal_uint16 dataLen;
} HfgAtData;


typedef kal_uint8 HfgCHarsetType;
# 540 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint16 HfgPbStorageType;
# 572 "../include/profiles/bluetooth_hfg_common.h"
typedef struct
{

    kal_uint16 select;
} HfgPbStorage;


typedef struct
{

    kal_uint16 first;




    kal_uint16 last;
} HfgPbRead;


typedef struct
{

    const char *text;
} HfgPbFind;


typedef struct
{

    kal_uint16 index;


    kal_uint8 type;


    const char *number;




    const char *text;
} HfgPbWrite;



typedef struct
{

    kal_uint16 selected;


    kal_uint16 used;


    kal_uint16 total;

} HfgPbStorageSelected;


typedef struct
{

    kal_uint16 supported;
} HfgPbStorageSupported;



typedef struct
{

    kal_uint16 index;


    kal_uint8 type;


    const char *number;




    const char *text;
} HfgPbEntry;


typedef struct
{



    const char *range;


    kal_uint16 numLength;


    kal_uint16 textLength;
} HfgPbReadInfo;


typedef struct
{

    kal_uint16 numLength;


    kal_uint16 textLength;
} HfgPbFindInfo;


typedef struct
{



    const char *range;


    kal_uint16 numLength;




    const char *types;


    kal_uint16 textLength;
} HfgPbWriteInfo;





typedef kal_uint16 HfgSMSMask;
# 723 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgSMSStat;
# 732 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgSMSStorage;
# 742 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgSMSMsgFormat;





typedef kal_uint8 HfgSMSType;
# 761 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgSMSCNMIMode;


typedef kal_uint8 HfgSMSCNMIMt;


typedef kal_uint8 HfgSMSCNMIBm;


typedef kal_uint8 HfgSMSCNMIDs;


typedef kal_uint8 HfgSMSCNMIBfr;


typedef kal_uint8 HfgSMSCmdType;
# 786 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgSMSService_cmd;





typedef struct _HfgSMSPrefStorage_cmd
{
    HfgSMSStorage read;
    HfgSMSStorage write;
    HfgSMSStorage recv;
}HfgSMSPrefStorage_cmd;





typedef kal_uint8 HfgSMSFormat_cmd;





typedef struct _HfgSMSSrviceCentre_cmd
{
    HfgSMSMask mask;
    const char *sca;
    kal_uint8 tosca;

}HfgSMSSrviceCentre_cmd;





typedef struct _HfgSMSTextModeParam_cmd
{
    HfgSMSMask mask;
    kal_uint8 fo;
    kal_uint8 intVp;
    const char* strVp;
    kal_uint8 pid;
    kal_uint8 dcs;
}HfgSMSTextModeParam_cmd;





typedef kal_uint8 HfgSMSShowParams_cmd;





typedef struct _HfgSMSIndSetting_cmd
{
    HfgSMSCNMIMode mode;
    HfgSMSCNMIMt mt;
    HfgSMSCNMIBm bm;
    HfgSMSCNMIDs ds;
    HfgSMSCNMIBfr bfr;
}HfgSMSIndSetting_cmd;





typedef HfgSMSStat HfgSMSList_cmd;





typedef kal_uint16 HfgSMSRead_cmd;







typedef struct _HfgSMSSend_cmd
{
    HfgSMSMask mask;
    const char *destAddr;
    kal_uint8 addrType;
    kal_uint16 pduLen;
    const char *msg;

}HfgSMSSend_cmd;





typedef struct _HfgSMSSendStored_cmd
{
    HfgSMSMask mask;
    kal_uint16 index;
    const char *destAddr;
    kal_uint8 addrType;
}HfgSMSSendStored_cmd;







typedef struct _HfgSMSWrite_cmd
{
    HfgSMSMask mask;
    const char *addr;
    kal_uint8 addrType;
    kal_uint16 pduLen;
    HfgSMSStat stat;
    const char *msg;
}HfgSMSWrite_cmd;





typedef kal_uint16 HfgSMSDelete_cmd;
# 928 "../include/profiles/bluetooth_hfg_common.h"
typedef struct _HfgSMSService_read
{
    kal_uint8 service;
    kal_uint8 mt;
    kal_uint8 mo;
    kal_uint8 bm;
}HfgSMSService_read;






typedef struct _HfgSMSService_result
{
    kal_uint8 mt;
    kal_uint8 mo;
    kal_uint8 bm;
}HfgSMSService_result;






typedef struct _HfgSMSPrefStorage_test
{


    HfgSMSStorage read;
    HfgSMSStorage write;
    HfgSMSStorage recv;
}HfgSMSPrefStorage_test;






typedef struct _HfgSMSPrefStorage_read
{
    HfgSMSStorage read;
    kal_uint16 readUsed;
    kal_uint16 readTotal;
    HfgSMSStorage write;
    kal_uint16 writeUsed;
    kal_uint16 writeTotal;
    HfgSMSStorage recv;
    kal_uint16 recvUsed;
    kal_uint16 recvTotal;
}HfgSMSPrefStorage_read;






typedef struct _HfgSMSPrefStorage_result
{
    kal_uint8 count;
    kal_uint16 readUsed;
    kal_uint16 readTotal;
    kal_uint16 writeUsed;
    kal_uint16 writeTotal;
    kal_uint16 recvUsed;
    kal_uint16 recvTotal;
}HfgSMSPrefStorage_result;
# 1008 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgSMSFormat_read;






typedef struct _HfgSMSSrviceCentre_read
{
    const char *sca;
    kal_uint8 tosca;
}HfgSMSSrviceCentre_read;






typedef struct _HfgSMSTextModeParam_read
{
    kal_uint8 fo;
    kal_uint8 intVp;
    const char* strVp;
    kal_uint8 pid;
    kal_uint8 dcs;
}HfgSMSTextModeParam_read;
# 1047 "../include/profiles/bluetooth_hfg_common.h"
typedef kal_uint8 HfgSMSShowParams_read;
# 1061 "../include/profiles/bluetooth_hfg_common.h"
typedef struct _HfgSMSIndSetting_read
{
    HfgSMSCNMIMode mode;
    HfgSMSCNMIMt mt;
    HfgSMSCNMIBm bm;
    HfgSMSCNMIDs ds;
    HfgSMSCNMIBfr bfr;
}HfgSMSIndSetting_read;
# 1092 "../include/profiles/bluetooth_hfg_common.h"
typedef struct _HfgSMSCMGLDeliver
{
    HfgSMSMask mask;
    const char *addr;
    kal_uint8 addrType;
    const char *alpha;
    const char *SCTimeStamp;
    const char *data;
    kal_uint16 length;
}HfgSMSCMGLDeliver, HfgSMSCMGLSubmit;

typedef struct _HfgSMSCMGLStatus
{
    HfgSMSMask mask;
    kal_uint8 fo;
    kal_uint8 mr;
    const char *ra;
    kal_uint8 addrType;
    const char *SCTimeStamp;
    const char *dt;
    kal_uint8 st;
}HfgSMSCMGLStatus;

typedef struct _HfgSMSCMGLCommand
{
    kal_uint8 fo;
    HfgSMSCmdType ct;
}HfgSMSCMGLCommand;

typedef struct _HfgSMSCbm
{
    kal_uint16 sn;
    kal_uint16 mid;
    kal_uint8 page;
    const char *data;
    kal_uint16 length;
    kal_uint8 dcs;
}HfgSMSCMGLCbm;

typedef struct _HfgSMSCMGLPdu
{
    HfgSMSMask mask;
    const char *alpha;
    const char *PDU;
    kal_uint16 length;
}HfgSMSCMGLPdu;

typedef struct _HfgSMSList_result
{
    HfgSMSType type;
    kal_uint16 index;
    HfgSMSStat stat;
    union
    {
        HfgSMSCMGLDeliver deliver;
        HfgSMSCMGLSubmit submit;
        HfgSMSCMGLStatus status;
        HfgSMSCMGLCommand cmd;
        HfgSMSCMGLCbm cbm;
        HfgSMSCMGLPdu pdu;
    }msg;
}HfgSMSList_result;
# 1176 "../include/profiles/bluetooth_hfg_common.h"
typedef struct
{
    HfgSMSMask mask;
    const char *addr;
    kal_uint8 addrType;
    const char *alpha;
    const char *SCTimeStamp;
    kal_uint8 fo;
    kal_uint8 pid;
    kal_uint8 dcs;
    const char *SCAddr;
    kal_uint8 SCAddrType;
    const char *data;
    kal_uint16 length;
}HfgSMSCMGRDeliver;


typedef struct
{
    HfgSMSMask mask;
    const char *addr;
    kal_uint8 addrType;
    const char *alpha;
    kal_uint8 fo;
    kal_uint8 pid;
    kal_uint8 dcs;
    kal_uint8 intVp;
    const char *strVp;
    const char *SCAddr;
    kal_uint8 SCAddrType;
    const char *data;
    kal_uint16 length;
}HfgSMSCMGRSubmit;


typedef HfgSMSCMGLStatus HfgSMSCMGRStatus;


typedef struct
{
    HfgSMSMask mask;
    kal_uint8 fo;
    kal_uint8 ct;
    kal_uint8 pid;
    kal_uint8 mn;
    const char *destAddr;
    kal_uint8 addrType;
    const char *cmdData;
    kal_uint16 length;
}HfgSMSCMGRCommand;


typedef HfgSMSCMGLCbm HfgSMSCMGRCbm;


typedef HfgSMSCMGLPdu HfgSMSCMGRPdu;


typedef struct
{
    HfgSMSType type;
    HfgSMSStat stat;
    union
    {
        HfgSMSCMGRDeliver deliver;
        HfgSMSCMGRSubmit submit;
        HfgSMSCMGRStatus status;
        HfgSMSCMGRCommand cmd;
        HfgSMSCMGRCbm cbm;
        HfgSMSCMGRPdu pdu;
    }msg;
}HfgSMSRead_result;







typedef struct _HfgSMSSend_result
{
    HfgSMSMask mask;
    kal_uint8 mr;
    const char *scts;
    const char *ackpdu;
}HfgSMSSend_result;







typedef HfgSMSSend_result HfgSMSSendStored_result;






typedef kal_uint16 HfgSMSWrite_result;






typedef struct _HfgSMSNewMsgInd
{
    HfgSMSStorage mem;
    kal_uint16 index;
}HfgSMSNewMsgInd;
# 109 "../include/profiles/bluetooth_hfg_struct.h" 2
# 142 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct _MTK_BD_ADDR
{
    kal_uint8 addr[6];
} MTK_BD_ADDR;



typedef enum
{
    hfg_status_nrec,
    hfg_status_inbandring,
    hfg_status_callidnotify,
    hfg_status_vr,
    hfg_status_callwaiting,
    num_of_hfg_status,
}hfg_status_type;

typedef union
{
    kal_bool nrec;
    kal_bool inbandring;
    kal_bool callidnotify;
    kal_bool vr;
    kal_bool callwaiting;
}hfg_status;


typedef enum
{
    hsg_idle,
    hsg_activated,
    hsg_connected,
    hsg_sco_connected,

    hsg_activating,
    hsg_deactivating,
    hsg_connecting,
    hsg_disconnecting,
    hsg_sco_connecting,
    hsg_sco_disconnecting,
    hsg_authorizing

} bt_hsg_state;

typedef enum
{
    hfg_idle,
    hfg_activated,
    hfg_connected,
    hfg_sco_connected,

    hfg_activating,
    hfg_deactivating,
    hfg_connecting,
    hfg_disconnecting,
    hfg_sco_connecting,
    hfg_sco_disconnecting,
    hfg_authorizing

} bt_hfg_state;

typedef enum
{
    hfg_connect_accept_cnf_result_accepted,
    hfg_connect_accept_cnf_result_rejected,
    hfg_connect_accept_cnf_total

} bt_hfg_connect_accept_confirm_enum;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
}bt_hfg_header_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 result;
}bt_hfg_general_cnf_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_bool bHeadset;
} bt_hfg_activate_req_struct;


typedef bt_hfg_general_cnf_struct bt_hfg_activate_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
} bt_hfg_deactivate_req_struct;


typedef bt_hfg_general_cnf_struct bt_hfg_deactivate_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    MTK_BD_ADDR bt_addr;
} bt_hfg_connect_req_struct;


typedef bt_hfg_general_cnf_struct bt_hfg_connect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    MTK_BD_ADDR bt_addr;
} bt_hfg_connected_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    MTK_BD_ADDR bt_addr;
} bt_hfg_connect_req_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    MTK_BD_ADDR bt_addr;
} bt_hfg_rfcomm_connected_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
} bt_hfg_accept_channel_req_struct;


typedef bt_hfg_general_cnf_struct bt_hfg_accept_channel_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
} bt_hfg_reject_channel_req_struct;


typedef bt_hfg_general_cnf_struct bt_hfg_reject_channel_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
} bt_hfg_disconnect_req_struct;


typedef bt_hfg_general_cnf_struct bt_hfg_disconnect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    MTK_BD_ADDR bt_addr;
    HfgDiscReason reason;
} bt_hfg_disconnected_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
} bt_hfg_sco_connect_req_struct;


typedef bt_hfg_general_cnf_struct bt_hfg_sco_connect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint16 status;
} bt_hfg_sco_connected_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
} bt_hfg_sco_disconnect_req_struct;


typedef bt_hfg_general_cnf_struct bt_hfg_sco_disconnect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
} bt_hfg_sco_disconnected_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    hfg_status_type type;
}bt_hfg_get_status_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 result;
    hfg_status status;
} bt_hfg_get_status_cnf_struct;


typedef enum
{
    BT_HFG_RESULT_OK = 0,
    BT_HFG_RESULT_FAIL,
    BT_HFG_RESULT_CHIP_REASON,
    BT_HFG_RESULT_TIMEOUT,
    BT_HFG_RESULT_MED_ERROR
} BT_HFG_RESULT_ENUM;
# 410 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* pAtContext;
    kal_uint16 type;
    kal_bool done;
    kal_uint16 parmLen;
    kal_uint32 parms;
    kal_uint32 data_len;
    kal_uint8 data[1];
} bt_hfg_send_result_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
} bt_hfg_common_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint32 data;
} bt_hfg_common_int_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_bool enable;
} bt_hfg_common_bool_req_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 result;
} bt_hfg_req_complete_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
} bt_hfg_common_ind_struct;



typedef bt_hfg_common_req_struct bt_hfg_ok_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_ok_cnf_struct;



typedef bt_hfg_common_int_req_struct bt_hfg_error_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_error_cnf_struct;



typedef bt_hfg_common_req_struct bt_hfg_no_carrier_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_no_carrier_cnf_struct;



typedef bt_hfg_common_req_struct bt_hfg_busy_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_busy_cnf_struct;



typedef bt_hfg_common_req_struct bt_hfg_no_answer_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_no_answer_cnf_struct;



typedef bt_hfg_common_req_struct bt_hfg_delayed_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_delayed_cnf_struct;



typedef bt_hfg_common_req_struct bt_hfg_blacklisted_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_blacklisted_cnf_struct;



typedef bt_hfg_common_req_struct bt_hfg_ring_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_ring_cnf_struct;







typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 numsize;
    kal_uint8 number[64 +1];
    kal_uint8 classmap;
    kal_uint8 type;
} bt_hfg_call_waiting_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_call_waiting_cnf_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    HfgReadIndicatorParms indicators;
} bt_hfg_read_indicator_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_read_indicator_cnf_struct;
# 558 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 index;
    kal_uint8 dir;
    HfgCallStatus state;
    HfgCallMode mode;
    kal_uint8 multiParty;
    kal_uint16 numsize;
    kal_uint8 number[64 +1];
    kal_uint8 type;
    kal_bool bFinal;
} bt_hfg_call_list_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_call_list_cnf_struct;
# 583 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint32 data_size;
    kal_uint16 numsize;
    kal_uint8 number[64 +1];
    kal_uint8 type;
} bt_hfg_call_id_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_call_id_cnf_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    HfgIndicator indicator;
    kal_uint8 value;
} bt_hfg_indicator_report_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_indicator_report_cnf_struct;







typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 numsize;
    kal_uint8 number[64 +1];
    HfgNumberFormat type;
    kal_uint8 service;
    kal_bool bFinal;
} bt_hfg_subscriber_number_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_subscriber_number_cnf_struct;
# 639 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 mode;
    HfgOperFormat format;
    kal_uint16 opersize;
    kal_uint8 oper[36 +1];
} bt_hfg_operator_name_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_operator_name_cnf_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint32 data_size;
    char number[64 +1];
} bt_hfg_voice_tag_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_voice_tag_cnf_struct;



typedef bt_hfg_common_bool_req_struct bt_hfg_voice_rec_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_voice_rec_cnf_struct;



typedef bt_hfg_common_int_req_struct bt_hfg_response_hold_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_response_hold_cnf_struct;



typedef bt_hfg_common_int_req_struct bt_hfg_speaker_gain_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_speaker_gain_cnf_struct;



typedef bt_hfg_common_int_req_struct bt_hfg_mic_gain_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_mic_gain_cnf_struct;



typedef bt_hfg_common_int_req_struct bt_hfg_speaker_gain_ind_struct;



typedef bt_hfg_common_int_req_struct bt_hfg_mic_gain_ind_struct;



typedef bt_hfg_common_bool_req_struct bt_hfg_ringtone_status_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_ringtone_status_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint32 data_size;
    char supported_charset[64 +1];
} bt_hfg_supported_charset_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_supported_charset_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint32 data_size;
    char selected_charset[8 +1];
} bt_hfg_selected_charset_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_selected_charset_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint32 data_size;
    char modelId[40 +1];
} bt_hfg_model_id_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_model_id_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint32 data_size;
    char manufactureId[40 +1];
} bt_hfg_manufacture_id_req_struct;

typedef bt_hfg_req_complete_cnf_struct bt_hfg_manufacture_id_cnf_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_bool bDone;
    kal_uint32 data_size;
    char atresult[256];
} bt_hfg_send_data_req_struct;
typedef bt_hfg_common_int_req_struct bt_hfg_send_data_ind_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 supported;
} bt_hfg_supported_phonebook_req_struct;







typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 selected;
    kal_uint16 used;
    kal_uint16 total;
} bt_hfg_selected_phonebook_req_struct;
# 806 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 rangesize;
    char range[36];
    kal_uint16 numLength;
    kal_uint16 textLength;
} bt_hfg_read_phonebook_info_req_struct;
# 825 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 index;
    HfgNumberFormat type;
    char number[64 +1];
    char text[64 +1];
    kal_bool bFinal;
} bt_hfg_read_phonebook_req_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 numLength;
    kal_uint16 textLength;
} bt_hfg_find_phonebook_info_req_struct;
# 859 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 index;
    HfgNumberFormat type;
    char number[64 +1];
    char text[64 +1];
    kal_bool bFinal;
} bt_hfg_find_phonebook_req_struct;
# 880 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 rangesize;
    char range[64 +1];
    kal_uint16 numLength;
    kal_uint16 typesize;
    char types[64 +1];
    kal_uint16 textLength;
} bt_hfg_write_phonebook_info_req_struct;
# 900 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgHandsFreeFeatures hfFeatures;
} bt_hfg_handsfree_features_ind_struct;



typedef bt_hfg_common_ind_struct bt_hfg_query_indicator_value_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_enable_extended_errors_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_answer_call_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint16 datasize;
    char number[64 +1];
} bt_hfg_dial_number_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint16 index;
} bt_hfg_memory_dial_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_redial_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgHold hold;
} bt_hfg_call_hold_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
} bt_hfg_query_response_hold_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgResponseHold respHold;
} bt_hfg_set_response_hold_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_hang_up_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint8 dtmf;
} bt_hfg_generate_dtmf_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_get_last_voice_tag_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_list_current_calls_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_query_subscriber_number_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_query_network_operator_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint8 vol;
} bt_hfg_report_mic_volume_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint8 vol;
} bt_hfg_report_speaker_volume_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_enable_caller_id_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_bool enable;
} bt_hfg_enable_call_waiting_ind_struct;



typedef bt_hfg_common_ind_struct bt_hfg_disable_nrec_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_bool enable;
} bt_hfg_enable_voice_recognition_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint8 button;
} bt_hfg_keypad_control_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_query_supported_charset_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_query_selected_charset_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    char charset[8 +1];
} bt_hfg_select_charset_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_query_model_id_ind_struct;


typedef bt_hfg_common_ind_struct bt_hfg_query_manufacture_id_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint16 datasize;
    char atcmd[256];
} bt_hfg_at_command_data_ind_struct;






typedef bt_hfg_common_ind_struct bt_hfg_query_supported_phonebook_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint16 selected;
} bt_hfg_select_phonebook_ind_struct;



typedef bt_hfg_common_ind_struct bt_hfg_query_selected_phonebook_ind_struct;



typedef bt_hfg_common_ind_struct bt_hfg_read_phonebook_info_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgPbRead read;
} bt_hfg_read_phonebook_ind_struct;



typedef bt_hfg_common_ind_struct bt_hfg_find_phonebook_info_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    char text[36 +1];
} bt_hfg_find_phonebook_ind_struct;



typedef bt_hfg_common_ind_struct bt_hfg_write_phonebook_info_ind_struct;
# 1138 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint16 index;
    kal_uint8 type;
    char number[32 +1];
    char text[64 +1];
} bt_hfg_write_phonebook_ind_struct;
# 1157 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 supportedServiceLen;
    char supportedService[64 +1];
} bt_hfg_suppoted_sms_service_req_struct;
# 1175 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 type;
    kal_uint8 mt;
    kal_uint8 mo;
    kal_uint8 bm;
} bt_hfg_selected_sms_service_req_struct;
# 1194 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 mt;
    kal_uint8 mo;
    kal_uint8 bm;
} bt_hfg_sms_service_req_struct;
# 1212 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    HfgSMSStorage read;
    HfgSMSStorage write;
    HfgSMSStorage recv;
} bt_hfg_supported_pref_msg_storage_req_struct;
# 1230 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    HfgSMSStorage read;
    kal_uint16 readUsed;
    kal_uint16 readTotal;
    HfgSMSStorage write;
    kal_uint16 writeUsed;
    kal_uint16 writeTotal;
    HfgSMSStorage recv;
    kal_uint16 recvUsed;
    kal_uint16 recvTotal;
} bt_hfg_selected_pref_msg_storage_req_struct;
# 1254 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 count;
    kal_uint16 readUsed;
    kal_uint16 readTotal;
    kal_uint16 writeUsed;
    kal_uint16 writeTotal;
    kal_uint16 recvUsed;
    kal_uint16 recvTotal;
} bt_hfg_pref_msg_storage_req_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 supportedFormatLen;
    char supportedFormat[64 +1];
} bt_hfg_supported_msg_format_req_struct;







typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 mode;
} bt_hfg_selected_msg_format_req_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 addrLen;
    char addr[32 +1];
    kal_uint8 addrType;
} bt_hfg_service_centre_req_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 fo;
    kal_uint8 intVp;
    char strVp[21];
    kal_uint8 pid;
    kal_uint8 dcs;
} bt_hfg_text_mode_params_req_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 supportedShowLen;
    char supportedShow[64 +1];
} bt_hfg_supported_show_text_mode_params_req_struct;







typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 show;
} bt_hfg_selected_show_text_mode_params_req_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 supportedNewMsgIndLen;
    char supportedNewMsgInd[64 +1];
}bt_hfg_supported_new_msg_indication_req_struct;
# 1380 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint8 mode;
    kal_uint8 mt;
    kal_uint8 bm;
    kal_uint8 ds;
    kal_uint8 bfr;
}bt_hfg_selected_new_msg_indication_req_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    HfgSMSStorage mem;
    kal_uint16 index;
}bt_hfg_new_msg_indication_req_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 supportedListStatusLen;
    char supportedListStatus[64 +1];
}bt_hfg_supported_list_status_req_struct;
# 1452 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    HfgSMSType type;
    kal_uint16 index;
    HfgSMSStat stat;
    union{
        struct{
            HfgSMSMask mask;
            char addr[32 +1];
            kal_uint8 addrType;
            char alpha[8 +1];
            char SCTimeStamp[21];
            char data[120 +1];
            kal_uint16 length;
        }deliver;

        struct{
            HfgSMSMask mask;
            char addr[32 +1];
            kal_uint8 addrType;
            char alpha[8 +1];
            char SCTimeStamp[21];
            char data[120 +1];
            kal_uint16 length;
        }submit;

        struct{
            HfgSMSMask mask;
            kal_uint8 fo;
            kal_uint8 mr;
            char ra[32 +1];
            kal_uint8 addrType;
            char SCTimeStamp[21];
            char dt[21];
            kal_uint8 st;
        }status;
        struct{
            kal_uint8 fo;
            kal_uint8 ct;
        }command;
        struct{
            kal_uint16 sn;
            kal_uint16 mid;
            kal_uint8 page;
            char data[120 +1];
            kal_uint16 length;
            kal_uint8 dcs;
        }cbm;
        struct{
            HfgSMSMask mask;
            char alpha[8 +1];
            char data[120 +1];
            kal_uint16 length;
        }pdu;
    }msg;
    kal_bool bFinal;
}bt_hfg_list_msg_req_struct;
# 1553 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    HfgSMSType type;
    HfgSMSStat stat;
    union{
        struct{
            HfgSMSMask mask;
            char addr[32 +1];
            kal_uint8 addrType;
            char alpha[8 +1];
            char SCTimeStamp[21];
            kal_uint8 fo;
            kal_uint8 pid;
            kal_uint8 dcs;
            char SCAddr[32 +1];
            kal_uint8 SCAddrType;
            char data[120 +1];
            kal_uint16 length;
        }deliver;

        struct{
            HfgSMSMask mask;
            char addr[32 +1];
            kal_uint8 addrType;
            char alpha[8 +1];
            kal_uint8 fo;
            kal_uint8 pid;
            kal_uint8 dcs;
            kal_uint8 intVp;
            char strVp[21];
            char SCAddr[32 +1];
            kal_uint8 SCAddrType;
            char data[120 +1];
            kal_uint16 length;
        }submit;

        struct{
            HfgSMSMask mask;
            kal_uint8 fo;
            kal_uint8 mr;
            char ra[32 +1];
            kal_uint8 addrType;
            char SCTimeStamp[21];
            char dt[21];
            kal_uint8 st;
        }status;

        struct{
            HfgSMSMask mask;
            kal_uint8 fo;
            kal_uint8 ct;
            kal_uint8 pid;
            kal_uint8 mn;
            char destAddr[32 +1];
            kal_uint8 addrType;
            char cmdData[120 +1];
            kal_uint16 length;
        }command;

        struct{
            kal_uint16 sn;
            kal_uint16 mid;
            kal_uint8 page;
            char data[120 +1];
            kal_uint16 length;
            kal_uint8 dcs;
        }cbm;

        struct{
            HfgSMSMask mask;
            char alpha[8 +1];
            char data[120 +1];
            kal_uint16 length;
        }pdu;
    }msg;

}bt_hfg_read_msg_req_struct;
# 1643 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    HfgSMSMask mask;
    kal_uint8 mr;
    char scts[21];
    char ackpdu[120 +1];
}bt_hfg_send_msg_req_struct;







typedef bt_hfg_send_msg_req_struct bt_hfg_send_stored_msg_req_struct;







typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 index;
}bt_hfg_write_msg_req_struct;






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* req_context;
    kal_uint16 error;
}bt_hfg_sms_error_req_struct;
# 1697 "../include/profiles/bluetooth_hfg_struct.h"
typedef bt_hfg_common_ind_struct bt_hfg_query_supported_sms_service_ind_struct;





typedef bt_hfg_common_ind_struct bt_hfg_query_selected_sms_service_ind_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint8 service;
} bt_hfg_select_sms_service_ind_struct;
# 1724 "../include/profiles/bluetooth_hfg_struct.h"
typedef bt_hfg_common_ind_struct bt_hfg_query_supported_pref_msg_storage_ind_struct;





typedef bt_hfg_common_ind_struct bt_hfg_query_selected_pref_msg_storage_ind_struct;







typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgSMSStorage read;
    HfgSMSStorage write;
    HfgSMSStorage recv;
} bt_hfg_select_pref_msg_storage_ind_struct;
# 1755 "../include/profiles/bluetooth_hfg_struct.h"
typedef bt_hfg_common_ind_struct bt_hfg_query_supported_msg_format_ind_struct;




typedef bt_hfg_common_ind_struct bt_hfg_query_selected_msg_format_ind_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint8 format;
} bt_hfg_select_msg_format_ind_struct;
# 1781 "../include/profiles/bluetooth_hfg_struct.h"
typedef bt_hfg_common_ind_struct bt_hfg_query_service_centre_ind_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgSMSMask mask;
    char addr[32 +1];
    kal_uint8 addrType;
} bt_hfg_set_service_centre_ind_struct;
# 1804 "../include/profiles/bluetooth_hfg_struct.h"
typedef bt_hfg_common_ind_struct bt_hfg_query_text_mode_params_ind_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgSMSMask mask;
    kal_uint8 fo;
    kal_uint8 intVp;
    char strVp[21];
    kal_uint8 pid;
    kal_uint8 dcs;
} bt_hfg_set_text_mode_params_ind_struct;
# 1830 "../include/profiles/bluetooth_hfg_struct.h"
typedef bt_hfg_common_ind_struct bt_hfg_query_supported_show_params_ind_struct;




typedef bt_hfg_common_ind_struct bt_hfg_query_selected_show_params_ind_struct;




typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint8 show;
} bt_hfg_set_show_params_ind_struct;
# 1855 "../include/profiles/bluetooth_hfg_struct.h"
typedef bt_hfg_common_ind_struct bt_hfg_query_supported_new_msg_indication_ind_struct;




typedef bt_hfg_common_ind_struct bt_hfg_query_selected_new_msg_indication_ind_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint8 mode;
    kal_uint8 mt;
    kal_uint8 bm;
    kal_uint8 ds;
    kal_uint8 bfr;
} bt_hfg_set_new_msg_indication_ind_struct;
# 1885 "../include/profiles/bluetooth_hfg_struct.h"
typedef bt_hfg_common_ind_struct bt_hfg_query_supported_list_status_ind_struct;





typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgSMSStat stat;
} bt_hfg_list_msg_ind_struct;
# 1906 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint16 index;
} bt_hfg_read_msg_ind_struct;
# 1924 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgSMSMask mask;
    char addr[32 +1];
    kal_uint8 addrType;
    kal_uint16 pduLen;
    char msg[120 +1];
} bt_hfg_send_msg_ind_struct;
# 1944 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgSMSMask mask;
    kal_uint16 index;
    char addr[32 +1];
    kal_uint8 addrType;
} bt_hfg_send_stored_msg_ind_struct;
# 1966 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    HfgSMSMask mask;
    char addr[32 +1];
    kal_uint8 addrType;
    kal_uint16 pduLen;
    HfgSMSStat stat;
    char msg[120 +1];
} bt_hfg_write_msg_ind_struct;
# 1986 "../include/profiles/bluetooth_hfg_struct.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    void* pContext;
    void* user_context;
    kal_uint16 index;
} bt_hfg_delete_msg_ind_struct;
# 110 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_pbap_struct.h" 1
# 139 "../include/profiles/bluetooth_pbap_struct.h"
typedef struct _PbapVcardFilter
{

    kal_uint8 byte[8];
} PbapVcardFilter;

typedef struct
{
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_pbap_bd_addr_struct;




typedef kal_uint8 PbapVcardFormat;




typedef kal_uint8 PbapPhonebookName;
# 170 "../include/profiles/bluetooth_pbap_struct.h"
typedef kal_uint8 PbapPhonebookStrorage;
# 207 "../include/profiles/bluetooth_pbap_struct.h"
typedef kal_uint8 PbStatus;
# 218 "../include/profiles/bluetooth_pbap_struct.h"
typedef kal_uint8 PbapRespCode;
# 264 "../include/profiles/bluetooth_pbap_struct.h"
typedef enum
{
    PBAP_FORWARD_FOLDER = 0,
    PBAP_BACK_FOLDER,
    PBAP_ROOT_FOLDER
} pbap_set_folder_type_enum;


typedef enum
{
    PBAP_CNF_SUCCESS,
    PBAP_CNF_FAILED,
    PBAP_CNF_TOTAL
} bt_pbap_cnf_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 security_level;
    kal_uint8 support_repositories;

    struct sockaddr_un addr;
    socklen_t addrlen;

} bt_pbap_register_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 register_result;
} bt_pbap_register_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
} bt_pbap_deregister_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 deregister_result;
} bt_pbap_deregister_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
} bt_pbap_abort_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
} bt_pbap_oper_success_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
} bt_pbap_disconnect_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_pbap_bd_addr_struct bd_addr;
    kal_uint8 dev_name[80];
} bt_pbap_authorize_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 cnf_code;
} bt_pbap_authorize_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    bt_pbap_bd_addr_struct bd_addr;
    kal_uint8 dev_name[80];
} bt_pbap_client_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;
} bt_pbap_client_connect_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_bool disconnect_tp_directly;
} bt_pbap_disconnect_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 dev_name[80];
    kal_uint8 auth_option;
} bt_pbap_client_auth_challenge_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 cancel;

    kal_uint8 password[20];

    kal_uint8 userId[20];
} bt_pbap_client_auth_challenge_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    pbap_set_folder_type_enum type;
    kal_uint16 name[128/2+1];
} bt_pbap_set_path_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint16 result;
} bt_pbap_set_path_rsp_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint16 objectName[128/2+1];
    PbapVcardFilter filter;
    PbapVcardFormat format;
} bt_pbap_read_entry_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 pbap_data_file[256];
    kal_uint8 cont;
} bt_pbap_read_entry_rsp_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint16 pbName[128/2+1];
    PbapVcardFilter filter;
    PbapVcardFormat format;
    kal_uint16 maxListCount;
    kal_uint16 listStartOffset;

} bt_pbap_read_folder_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 folderName[128/2+1];
    kal_uint8 searchAttribute;
    kal_uint8 searchValue[128 + 1];
    kal_uint8 searchValueLength;
    kal_uint8 order;
    kal_uint16 maxListCount;
    kal_uint16 listStartOffset;

} bt_pbap_read_list_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
} bt_pbap_continue_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 cont;
    kal_uint16 phoneBookSize;
    kal_uint16 newMissedCalls;
    kal_uint8 pbap_data_file[256];
} bt_pbap_read_rsp_struct;

typedef bt_pbap_read_rsp_struct bt_pbap_read_folder_rsp_struct;
typedef bt_pbap_read_rsp_struct bt_pbap_read_list_rsp_struct;
# 111 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_bpp_struct.h" 1
# 105 "../include/profiles/bluetooth_bpp_struct.h"
# 1 "../include/profiles/bluetooth_bpp_common.h" 1
# 111 "../include/profiles/bluetooth_bpp_common.h"
typedef int PRINTER_HANDLE;
# 164 "../include/profiles/bluetooth_bpp_common.h"
typedef enum
{

    BPP_ERROR_LINK_DISC = -127,
    BPP_ERROR_PEER_ABORT,
    BPP_ERROR_USER_ABORT,
    BPP_ERROR_CREATE_JOB_FAILED,
    BPP_ERROR_SCO_REJECT,
    BPP_ERROR_SERVICE_NOT_FOUND,
    BPP_ERROR_INTERNAL_ERR,
    BPP_ERROR_DEVICE_BUSY,
    BPP_ERROR_DISC_STATUS_FIRST,
    BPP_ERROR_INVALID_PARAM,

    BPP_ERROR = -1,
    BPP_SUCCESS = 0,
    BPP_PENDING

} BPP_ERROR_CODE;



typedef enum
{
 BPP_MIME_TYPE_UNKNOWN = 0,


 BPP_MIME_APPLICATION_XHTML_PRINT_095 = 1,
 BPP_MIME_APPLICATION_XHTML_PRINT_100,


 BPP_MIME_APPLICATION_MULTIPLEXED,


 BPP_MIME_TEXT_PLAIN,
 BPP_MIME_TEXT_VCARD,
 BPP_MIME_TEXT_VCARD30,
 BPP_MIME_TEXT_VCALENDAR,
 BPP_MIME_TEXT_ICALENDAR20,
 BPP_MIME_TEXT_VMESSAGE,
 BPP_MIME_TEXT_VNOTE,


 BPP_MIME_IMAGE_JPEG,
 BPP_MIME_IMAGE_GIF,
 BPP_MIME_IMAGE_BMP,
 BPP_MIME_IMAGE_WBMP,
 BPP_MIME_IMAGE_PNG,
 BPP_MIME_IMAGE_SVG,

 BPP_MIME_TYPE_MAX_ENUM

} bt_bpp_mime_type;



typedef enum
{
 BPP_MODEL_SIMPLE_PUSH,

 BPP_MODEL_JOB_BASE

}bt_bpp_print_model;



typedef enum
{
 BPP_SIDES_IGNORED = 0x00,
    BPP_ONE_SIDED = 0x01,
    BPP_TWO_SIDED_LONG_EDGE = 0x02,
    BPP_TWO_SIDED_SHORT_EDGE = 0x04

} bt_bpp_sided_enum;


typedef enum
{
 BPP_ORIENT_IGNORED = 0x00,
    BPP_ORIENT_PORTRAIT = 0x01,
    BPP_ORIENT_LANDSCAPE = 0x02,
    BPP_ORIENT_REVERSE_PORTRAIT = 0x04,
    BPP_ORIENT_REVERSE_LANDSCAPE = 0x08

} bt_bpp_orient_enum;


typedef enum
{
    BPP_QUALITY_IGNORED = 0x00,
    BPP_QUALITY_NORMAL = 0x01,
    BPP_QUALITY_DRAFT = 0x02,
    BPP_QUALITY_HIGH = 0x04

} bt_bpp_quality_enum;


typedef enum
{
    BPP_ONE_PAGE_PER_SIDE = 1,
    BPP_TWO_PAGE_PER_SIDE = 2,
    BPP_FOUR_PAGE_PER_SIDE = 4,

    BPP_NUMBERUP_MAX_ENUM

} bt_bpp_numberup_enum;



typedef enum
{
    BPP_MEDIA_TYPE_UNDEF = 0,
    BPP_MEDIA_TYPE_STATIONERY,
    BPP_MEDIA_TYPE_STATIONERY_COATED,
    BPP_MEDIA_TYPE_STATIONERY_INKJET,
    BPP_MEDIA_TYPE_STATIONERY_PREPRINTED,
    BPP_MEDIA_TYPE_STATIONERY_LETTERHEAD,
    BPP_MEDIA_TYPE_STATIONERY_PREPUNCHED,
    BPP_MEDIA_TYPE_STATIONERY_FINE,
    BPP_MEDIA_TYPE_STATIONERY_HEAVYWEIGHT,
    BPP_MEDIA_TYPE_STATIONERY_LIGHTWEIGHT,
    BPP_MEDIA_TYPE_TRANSPARENCY,
    BPP_MEDIA_TYPE_ENVELOPE,
    BPP_MEDIA_TYPE_ENVELOPE_PLAIN,
    BPP_MEDIA_TYPE_ENVELOPE_WINDOW,
    BPP_MEDIA_TYPE_CONTINUOUS,
    BPP_MEDIA_TYPE_CONTINUOUS_LONG,
    BPP_MEDIA_TYPE_CONTINUOUS_SHORT,
    BPP_MEDIA_TYPE_TAB_STOCK,
    BPP_MEDIA_TYPE_PRE_CUT_TABS,
    BPP_MEDIA_TYPE_FULL_CUT_TABS,
    BPP_MEDIA_TYPE_MULTI_PART_FORM,
    BPP_MEDIA_TYPE_LABELS,
    BPP_MEDIA_TYPE_MULTI_LAYER,
    BPP_MEDIA_TYPE_SCREEN,
    BPP_MEDIA_TYPE_SCREEN_PAGED,
    BPP_MEDIA_TYPE_PHOTOGRAPHIC,
    BPP_MEDIA_TYPE_PHOTOGRAPHIC_GLOSSY,
    BPP_MEDIA_TYPE_PHOTOGRAPHIC_HIGH_GLOSS,
    BPP_MEDIA_TYPE_PHOTOGRAPHIC_SEMI_GLOSS,
    BPP_MEDIA_TYPE_PHOTOGRAPHIC_SATIN,
    BPP_MEDIA_TYPE_PHOTOGRAPHIC_MATTE,
    BPP_MEDIA_TYPE_PHOTOGRAPHIC_FILM,
    BPP_MEDIA_TYPE_BACK_PRINT_FILM,
    BPP_MEDIA_TYPE_CARDSTOCK,
    BPP_MEDIA_TYPE_ROLL,

    BPP_MEDIA_TYPE_MAX_ENUM

} bt_bpp_media_type_enum;


typedef enum
{
    BPP_MEDIA_SIZE_A10,
    BPP_MEDIA_SIZE_A9,
    BPP_MEDIA_SIZE_A8,
    BPP_MEDIA_SIZE_A7,
    BPP_MEDIA_SIZE_A6,
    BPP_MEDIA_SIZE_A5,
    BPP_MEDIA_SIZE_A5_EXTRA,
    BPP_MEDIA_SIZE_A4,
    BPP_MEDIA_SIZE_A4_TAB,
    BPP_MEDIA_SIZE_A4_EXTRA,
    BPP_MEDIA_SIZE_A3,
    BPP_MEDIA_SIZE_A2,
    BPP_MEDIA_SIZE_A1,
    BPP_MEDIA_SIZE_A0,
    BPP_MEDIA_SIZE_2A0,
    BPP_MEDIA_SIZE_B10,
    BPP_MEDIA_SIZE_B9,
    BPP_MEDIA_SIZE_B8,
    BPP_MEDIA_SIZE_B7,
    BPP_MEDIA_SIZE_B6,
    BPP_MEDIA_SIZE_B6_C4,
    BPP_MEDIA_SIZE_B5,
    BPP_MEDIA_SIZE_B5_EXTRA,
    BPP_MEDIA_SIZE_B4,
    BPP_MEDIA_SIZE_B3,
    BPP_MEDIA_SIZE_B2,
    BPP_MEDIA_SIZE_B1,
    BPP_MEDIA_SIZE_B0,
    BPP_MEDIA_SIZE_C10,
    BPP_MEDIA_SIZE_C9,
    BPP_MEDIA_SIZE_C8,
    BPP_MEDIA_SIZE_C7,
    BPP_MEDIA_SIZE_C7_C6,
    BPP_MEDIA_SIZE_C6,
    BPP_MEDIA_SIZE_C6_C5,
    BPP_MEDIA_SIZE_C5,
    BPP_MEDIA_SIZE_C4,
    BPP_MEDIA_SIZE_C3,
    BPP_MEDIA_SIZE_C2,
    BPP_MEDIA_SIZE_C1,
    BPP_MEDIA_SIZE_C0,
    BPP_MEDIA_SIZE_4X6_POSTCARD,
    BPP_MEDIA_SIZE_LETTER,

    BPP_MEDIA_SIZE_MAX_ENUM

} bt_bpp_media_size_enum;




typedef enum
{
    BPP_PRINTER_STATE_UNKNOWN = 0,
    BPP_PRINTER_STATE_IDLE,
    BPP_PRINTER_STATE_PROCESSING,
    BPP_PRINTER_STATE_STOPPED

} bt_bpp_printer_state_enum;


typedef enum
{
    BPP_STRN_NONE = 0,
    BPP_STRN_ATTENTION_REQUIRED,
    BPP_STRN_MEDIA_JAM,
    BPP_STRN_PAUSED,
    BPP_STRN_DOOR_OPEN,
    BPP_STRN_MEDIA_LOW,
    BPP_STRN_MEDIA_EMPTY,
    BPP_STRN_OUTPUT_AREA_ALMOST_FULL,
    BPP_STRN_OUTPUT_AREA_FULL,
    BPP_STRN_MARKER_SUPPLY_LOW,
    BPP_STRN_MARKER_SUPPLY_EMPTY,
    BPP_STRN_MARKER_FAILURE

}bt_bpp_printer_state_reason;


typedef enum
{
    BPP_JOB_STATE_UNKNOWN = 0,
    BPP_JOB_STATE_PRINTING,
    BPP_JOB_STATE_WAITING,
    BPP_JOB_STATE_STOPPED,
    BPP_JOB_STATE_COMPLETED,
    BPP_JOB_STATE_ABORTED,
    BPP_JOB_STATE_CANCELED
} bt_bpp_job_state_enum;
# 415 "../include/profiles/bluetooth_bpp_common.h"
typedef struct
{
 kal_uint8 options;

    kal_uint8 realm[20];
    kal_uint8 realm_len;

}bt_bpp_obex_auth_chal_info;



typedef struct
{
 char cancel;
 char userid[20 + 1];
 kal_uint8 userid_len;
 char passwd[20 + 1];
 kal_uint8 passwd_len;

}bt_bpp_obex_auth_resp;


typedef struct
{
 kal_uint16 copies;
 bt_bpp_numberup_enum numberup;
 bt_bpp_sided_enum sides;
 bt_bpp_orient_enum orient;
 bt_bpp_quality_enum quality;
 bt_bpp_media_size_enum media_size;

 bt_bpp_media_type_enum media_type;

} bt_bpp_job_configuration;



typedef struct
{

 kal_uint16 file_name[256];
 kal_uint32 object_size;

 bt_bpp_mime_type mime_type;

 bt_bpp_print_model print_model;


    char job_name[64];
    char originating_user_name[64];


 bt_bpp_job_configuration job_config;

} bt_bpp_object;



typedef struct
{
 kal_uint8 printer_name[80];
 kal_uint8 printer_location[80];

 char color_supported;
    kal_uint32 max_copies_supported;
    kal_uint32 max_numberup_supported;

 kal_uint8 sides_supported;
 kal_uint8 orientations_supported;
 kal_uint8 print_quality_supported;


 kal_uint8 docfmt_num;
    bt_bpp_mime_type doc_format_supported[20];


 kal_uint8 imgfmt_num;
    bt_bpp_mime_type image_format_supported[8];


 kal_uint8 mediasize_num;
    bt_bpp_media_size_enum media_size_supported[20];



 kal_uint8 mediatype_num;
    bt_bpp_media_type_enum media_type_supported[20];


 kal_uint8 loaded_mediatype_num;
    bt_bpp_media_type_enum loaded_media_type[4];


 kal_uint16 queued_job_count;

    kal_uint32 basic_text_page_width;
    kal_uint32 basic_text_page_height;

 kal_uint8 printer_general_current_operator[64];

} bt_bpp_printer_capability;


typedef struct
{
    bt_bpp_printer_state_enum printer_state;
    bt_bpp_printer_state_reason state_reason;

    bt_bpp_printer_capability capability;

 kal_uint32 operation_status;

} bt_bpp_printer_attributes;


typedef struct
{
    bt_bpp_printer_state_enum printer_state;
    bt_bpp_job_state_enum job_state;
    bt_bpp_printer_state_reason state_reason;

} bt_bpp_job_status;


typedef struct
{
 kal_uint32 sent_data_len;
 kal_uint32 total_data_len;

}bt_bpp_progress_status;



typedef struct
{
 bt_bpp_mime_type type_id;
 char* type_str;

}bpp_mime_id_str_struct;

extern bpp_mime_id_str_struct bpp_mime_type_table[BPP_MIME_TYPE_MAX_ENUM + 1];
# 106 "../include/profiles/bluetooth_bpp_struct.h" 2






typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;
    unsigned long cnf_code;
} bt_bpp_common_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;
} bt_bpp_common_rsp_struct;

typedef struct _BPP_BD_ADDR
{
    kal_uint8 addr[6];
} BPP_BD_ADDR;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;


    BPP_BD_ADDR addr;


    PRINTER_HANDLE hprinter;

} bt_bpp_connect_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;


    PRINTER_HANDLE hprinter;


    kal_uint32 cm_conn_id;


    unsigned long cnf_code;

} bt_bpp_connect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;
} bt_bpp_disconnect_req_struct;


typedef bt_bpp_common_cnf_struct bt_bpp_disconnect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;
} bt_bpp_disconnect_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;




 kal_uint32 attr_bitmask;

} bt_bpp_get_printer_attr_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;


    unsigned long cnf_code;


 bt_bpp_printer_attributes printer_attributes;

} bt_bpp_get_printer_attr_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;


 bt_bpp_object print_object;

} bt_bpp_print_doc_req_struct;


typedef bt_bpp_common_cnf_struct bt_bpp_print_doc_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;

 bt_bpp_obex_auth_chal_info chal_info;

} bt_bpp_auth_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;


 bt_bpp_obex_auth_resp auth_resp;

} bt_bpp_auth_rsp_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;


    bt_bpp_progress_status progress_status;

} bt_bpp_progress_ind_struct;


typedef bt_bpp_common_rsp_struct bt_bpp_progress_rsp_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;


 bt_bpp_job_status job_status;

} bt_bpp_job_status_ind_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    PRINTER_HANDLE hprinter;

} bt_bpp_cancel_req_struct;


typedef bt_bpp_common_cnf_struct bt_bpp_cancel_cnf_struct;
# 112 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_bipi_struct.h" 1
# 104 "../include/profiles/bluetooth_bipi_struct.h"
typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 req_id;
    bt_bip_bd_addr_struct bd_addr;
    kal_uint32 bip_service;


    bt_bip_dig_challenge_struct challenge;
} bt_bip_connect_req_struct;
# 127 "../include/profiles/bluetooth_bipi_struct.h"
typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 req_id;
    kal_uint8 cnf_code;
    kal_uint32 cm_conn_id;
} bt_bip_connect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
} bt_bip_get_capabilities_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;
    bt_bip_img_format_enum supported_img_formats[10];
    bt_bip_pixel_struct supported_img_size[10];
    kal_uint32 supported_maxsize[10];

    bt_bip_img_format_enum preferred_format;
    bt_bip_pixel_struct preferred_pixel;
    kal_uint32 preferred_maxsize;
    kal_uint32 preferred_trans;

    kal_bool created_time_filter;
    kal_bool modified_time_filter;
    kal_bool encoding_filter;
    kal_bool pixel_filter;
} bt_bip_get_capabilities_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_path[260];
    kal_uint8 img_name[(256 * 2)];
    kal_uint32 img_size;

    bt_bip_img_desc_struct img_descriptor;
} bt_bip_put_img_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 img_handle[8];
    kal_uint8 cnf_code;
} bt_bip_put_img_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_path[260];
    kal_uint8 img_handle[8];
} bt_bip_put_linked_thumbnail_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;
} bt_bip_put_linked_thumbnail_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    bt_bip_img_info_struct img_list_descriptor;
    kal_uint16 max_img_handle_number;
    kal_uint16 start_index;
    kal_uint8 latest_captured;
} bt_bip_get_img_list_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_list_path[260];
    kal_uint16 img_count;
    kal_uint8 cnf_code;
} bt_bip_get_img_list_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 img_handle[8];
} bt_bip_get_img_prop_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    bt_bip_img_info_struct native_img;
    bt_bip_img_info_struct *variant_img_p;
    bt_bip_img_info_struct *attachment_p;
    kal_uint8 cnf_code;
} bt_bip_get_img_prop_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_path[260];
    kal_uint8 img_handle[8];
    bt_bip_img_info_struct img_descriptor;
} bt_bip_get_img_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;
    kal_uint32 data_len;
} bt_bip_get_img_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_path[260];
    kal_uint8 img_handle[8];
} bt_bip_get_linked_thumbnail_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;
} bt_bip_get_linked_thumbnail_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_path[260];
    kal_uint8 store_flag;
} bt_bip_get_monitoring_img_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;
} bt_bip_get_monitoring_img_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
} bt_bip_abort_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;
} bt_bip_abort_cnf_struct;
# 113 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_bipr_struct.h" 1
# 103 "../include/profiles/bluetooth_bipr_struct.h"
typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 req_id;
    kal_uint8 bip_service_set;
} bt_bip_activate_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 req_id;
    kal_uint8 cnf_code;
} bt_bip_activate_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 req_id;
    kal_uint8 bip_service_set;
} bt_bip_deactivate_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 req_id;
    kal_uint8 cnf_code;
} bt_bip_deactivate_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    bt_bip_bd_addr_struct bd_addr;
    kal_uint8 dev_name[80];
} bt_bip_authorize_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 cnf_code;
} bt_bip_authorize_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    bt_bip_bd_addr_struct bd_addr;
    kal_uint8 dev_name[80];
} bt_bip_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;
} bt_bip_connect_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
} bt_bip_get_capabilities_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;

    bt_bip_img_format_enum supported_img_formats[10];
    bt_bip_pixel_struct supported_img_size[10];
    kal_uint32 supported_maxsize[10];

    bt_bip_img_format_enum preferred_format;
    bt_bip_pixel_struct preferred_pixel;
    kal_uint32 preferred_maxsize;
    kal_uint32 preferred_trans;

    kal_uint8 created_time_filter;
    kal_uint8 modified_time_filter;
    kal_uint8 encoding_filter;
    kal_uint8 pixel_filter;
} bt_bip_get_capabilities_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 img_name[(256 * 2)];
    kal_uint32 img_size;
    bt_bip_img_desc_struct img_descriptor;
    kal_uint8 r_last_pkt;
} bt_bip_put_img_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_path[260];
    kal_uint8 img_handle[8];
    kal_uint8 cnf_code;
} bt_bip_put_img_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 img_handle[8];
    kal_uint8 r_last_pkt;
} bt_bip_put_linked_thumbnail_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_path[260];
    kal_uint8 cnf_code;
} bt_bip_put_linked_thumbnail_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    bt_bip_img_info_struct img_list_descriptor;
    kal_uint16 max_img_handle_number;
    kal_uint16 start_index;
    kal_bool latest_captured;
} bt_bip_get_img_list_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_list_path[260];
    kal_uint16 img_count;
    kal_uint8 cnf_code;
} bt_bip_get_img_list_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 img_handle[8];
} bt_bip_get_img_prop_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 img_handle[8];
    bt_bip_img_info_struct native_img;
    bt_bip_img_info_struct *variant_img_p;
    bt_bip_img_info_struct *attachment_p;
    kal_uint8 cnf_code;
} bt_bip_get_img_prop_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 img_handle[8];
    bt_bip_img_info_struct img_descriptor;
} bt_bip_get_img_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint16 img_path[260];
    kal_uint8 img_handle[8];
    kal_uint8 cnf_code;
} bt_bip_get_img_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 img_handle[8];
} bt_bip_get_linked_thumbnail_ind_struct;
# 316 "../include/profiles/bluetooth_bipr_struct.h"
typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 store_flag;
} bt_bip_get_monitoring_img_ind_struct;
# 336 "../include/profiles/bluetooth_bipr_struct.h"
typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 ind_code;
} bt_bip_abort_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
} bt_bip_complete_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint32 obj_len;
    kal_uint32 data_len;
    kal_uint8 r_last_pkt;
} bt_bip_continue_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    kal_uint8 cnf_code;
} bt_bip_continue_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 req_id;
    kal_uint32 cm_conn_id;
    kal_uint8 disconnect_tp_directly;
    bt_bip_session_role_enum session_role;
} bt_bip_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 cm_conn_id;
    bt_bip_session_role_enum session_role;
} bt_bip_disconnect_ind_struct;

typedef struct
{
    kal_uint8 img_handle[8];
    kal_uint8 created[18];
    kal_uint8 modified[18];
} bt_bip_img_min_info_struct;

typedef bt_bip_get_img_rsp_struct bt_bip_get_linked_thumbnail_rsp_struct;
typedef bt_bip_get_img_rsp_struct bt_bip_get_monitoring_img_rsp_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 opcode;
    void* handle;
} bt_bip_cmd_agent_struct;
# 114 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_hid_struct.h" 1
# 140 "../include/profiles/bluetooth_hid_struct.h"
# 1 "../btcore/inc/bttypes.h" 1
# 66 "../btcore/inc/bttypes.h"
# 1 "../btcore/inc/xatypes.h" 1
# 68 "../btcore/inc/xatypes.h"
# 1 "../btadp_int/include/bt_common.h" 1
# 104 "../btadp_int/include/bt_common.h"
# 1 "../btcore/inc/xatypes.h" 1
# 105 "../btadp_int/include/bt_common.h" 2

# 1 "../btadp_int/include/bt_basic_setting.h" 1
# 107 "../btadp_int/include/bt_common.h" 2

# 1 "../btadp_int/include/bt_adp_msg.h" 1
# 109 "../btadp_int/include/bt_common.h" 2
# 1 "../btadp_int/include/bt_adp_log.h" 1
# 110 "../btadp_int/include/bt_common.h" 2
# 128 "../btadp_int/include/bt_common.h"
# 1 "../btcore/inc/bt_debug.h" 1
# 114 "../btcore/inc/bt_debug.h"
typedef int (*vsniff_write)(const unsigned char *, unsigned int);
typedef int (*vsniff_read)(unsigned char, unsigned char *, unsigned int);

extern vsniff_write p_sniffwrite;
extern vsniff_read p_sniffread;
void initVirtualSniff(void);
# 173 "../btcore/inc/bt_debug.h"
typedef kal_uint8 BtPanic;
# 129 "../btadp_int/include/bt_common.h" 2






# 1 "../btadp_int/include/bluetooth_trc.h" 1
# 1042 "../btadp_int/include/bluetooth_trc.h"
enum MOD_BT_MSG_ENUM{ MOD_BT_empty_string=MOD_BT<<20,





    BT_SEC_ACCESS_REQ_FIND_ONE__enum,
    BT_LOG_SEC_ACCESS_REQ_TOKEN_LEVEL__enum,
    BT_LOG_BTBM_AUTH_CFM_DEL_DEV_RECORD_STATUS__enum,

    BT_AVTP_TX_TIMEOUT__enum,

    BT_DDB4W_DB_NOT_EXIST__enum,
    BT_DDB4W_DB_OPENED__enum,
    BT_DDB4W_DB_NUMBER__enum,
    BT_DDB4W_DB_FLUSHED__enum,
    BT_DDB4W_DB_NUMBER_WRITE__enum,
    BT_DDB4W_DB_SAVEING_ERROR__enum,
    BT_DDB4W_DB_FIND_RECORD__enum,
    BT_DDB4W_DB_STORED_RECORD__enum,
    BT_DDB4W_DB_LINK_KEY__enum,
    BT_DDB4W_COD_NOT_EXIST__enum,
    BT_DDB4W_COD_OPENED__enum,
    BT_DDB4W_COD_NUMBER__enum,
    BT_DDB4W_COD_FLUSHED__enum,
    BT_DDB4W_COD_FLUSHED_ERROR__enum,
    BT_DDB4W_COD_NUMBER_WRITE__enum,
    BT_DDB4W_COD_SAVEING_ERROR__enum,
    BT_DDB4W_COD_FIND_RECORD__enum,
    BT_DDB4W_COD_STORED_RECORD__enum,

    BT_BTBM_ENTER_REJECT_HANDLER__enum,
    BT_BTBM_ERROR_MESSAGE__enum,
    BT_BTBM_DISCOVERY_COMPLETE__enum,
    BT_BTBM_DISCOVERY_CANCEL__enum,
    BT_BTBM_DISCOVERY_COD__enum,
    BT_BTBM_DISCOVERY_NAME_LEN__enum,
    BT_BTBM_DISCOVERY_BDADDR__enum,
    BT_BTBM_POWEROFF__enum,
    BT_BTBM_TIMEOUT__enum,
    BT_BTBM_TIMESTART__enum,
    BT_BTBM_TIMECANCEL__enum,
    BT_BTBM_PREVIOUS_ONGOING__enum,
    BT_BTBM_DEVICE_MOTO820__enum,
    BT_BTBM_DEVICE_WI_REVO__enum,
    BT_BTBM_DEVICE_HP__enum,
    BT_BTBM_DEVICE_GENERAL__enum,
    BT_BTBM_INQUIRY_CMD__enum,
    BT_BTBM_NAMEREQ_BDADDR__enum,
    BT_BTBM_RESTORE_ERROR__enum,
    BT_BTBM_DISCONNECT_ALL_LINK__enum,
    BT_BTBM_SHOW_BDADDR__enum,
    BT_BTBM_CON_ALLOCATED_RELEASE__enum,
    BT_BTBM_CON_NOT_ALLOCATED_RELEASE__enum,
    BT_BTBM_CON_RELEASE_VALUE_LARGE__enum,
    BT_BTBM_DUMMY_LINK_CONN_REQ__enum,
    BT_BTBM_LINK_CONN_REQ__enum,
    BT_BTBM_RUN_MULTIPLE_NAME_QUERY__enum,
    BT_BTBM_NAME_REQ__enum,
    BTLOG_DEVICE_IN_CONNECTING_MOD__enum,
    BT_BTBM_UNABLE_TO_GET_NAME__enum,
    BT_BTBM_NAME_SEARCH_COMPLETED__enum,
    BT_BTBM_NAME_SEARCH_CANCELED__enum,
    BT_BTBM_PSI_INFO_NOT_IN_DDB__enum,
    BT_BTBM_NOT_AUTH_NAME_FAILED__enum,
    BT_BTBM_REMOTE_NAME__enum,
    BT_BTBM_LINK_EXISTS_CONFIRM__enum,
    BT_BTBM_MATCH_COD__enum,
    BT_BTBM_INQ_RESULT_TOO_MUCH__enum,
    BT_BTBM_ADD_INQUIRED_DEVICE__enum,
    BT_BTBM_ADD_INQUIRED_DEVICE_DUPLICATE__enum,
    BT_BTBM_INQ_RESULT_DDB_FULL__enum,
    BT_BTBM_INQ_COMPLETED__enum,
    BT_BTBM_INQ_NO_TIME_NAME_QUERY__enum,
    BT_BTBM_LINK_DEVICE_TABLE_FULL__enum,
    BT_BTBM_LINK_FREE_TABLE_ENTRY__enum,
    BT_BTBM_EVENT_CONNECT_IND__enum,
    BT_BTBM_EVENT_CONNECT_IND_LEVEL3__enum,
    BT_BTBM_FORCE_DISCONNECT__enum,
    BT_BTBM_CONNECT_FAILED__enum,
    BT_BTBM_EVENT_CONNECT_CNF__enum,
    BT_BTBM_CHANGE_NAME_SUCCESS__enum,
    BT_BTBM_PIN_CODE_REQ__enum,
    BT_BTBM_BONDING_PIN_REQ__enum,
    BT_BTBM_BDC_IS_ZERO__enum,
    BT_BTBM_PIN_REJECT__enum,
    BT_BTBM_OP_NONE_REJECT_BMOPACTIVITY__enum,
    BT_BTBM_REMOTE_PIN_REQ__enum,
    BT_BTBM_EVENT_PAIRING_COMPLETED__enum,
    BT_BTBM_PAIRING_WRONG_TIME__enum,
    BT_BTBM_EVENT_AUTHENTICATION_CNF__enum,
    BT_BTBM_BONDING_CANCELED__enum,
    BT_BTBM_EVENT_INQ_CANCELED__enum,
    BT_BTBM_LINK_AS_MASTER__enum,
    BT_BTBM_START_NAMETOKEN__enum,
    BT_BTBM_FREE_NAME_ENTRY_FAILED__enum,
    BT_BTBM_DISCONNECT_LINK__enum,

    BT_GAPTS_INIT__enum,
    BT_GAPTS_NONDISCOVERY__enum,
    BT_GAPTS_LIMITEDDISCOVERY__enum,
    BT_GAPTS_GENERALDISCOVERY__enum,
    BT_GAPTS_NONCONNECTABLE__enum,
    BT_GAPTS_NONPAIRED__enum,
    BT_GAPTS_PAIRED__enum,
    BT_GAPTS_SECLEVEL1__enum,
    BT_GAPTS_SECLEVEL2__enum,
    BT_GAPTS_SECLEVEL3__enum,
    BT_GAPTS_LIMITEDINQUIRY__enum,
    BT_GAPTS_GENERALINQUIRY__enum,
    BT_GAPTS_DEVICEDISCOVERY__enum,
    BT_GAPTS_BONDING__enum,
    BT_GAPTS_DELETEKEY__enum,
    BT_GAPTS_CREATELINK__enum,
    BT_GAPTS_CREATECHNL__enum,
    BT_GAPTS_NAME_LEN__enum,
    BT_GAPTS_DISCOVERY_BDADDR__enum,
    BT_GAPTS_DISCOVERY_COMPLETE__enum,
    BT_GAPTS_DISCOVERY_CANCEL__enum,
    BT_GAPTS_WRITE_LOCAL_NAME__enum,
    BT_GAPTS_BDADDR__enum,
    BT_GAPTS_DISCOVERY_RESULT_NAME_LEN__enum,
    BT_GAPTS_DISCOVERY_NAME_CHAR__enum,
    BT_GAPTS_BONDING_CNF_RESULT__enum,
    BT_GAPTS_BONDING_RESULT_IND__enum,
    BT_GAPTS_READ_WRITESCAN_RESULT__enum,
    BT_GAPTS_SET_WRITESCAN_RESULT__enum,
    BT_GAPTS_SAVE_SETTING_RESULT__enum,
    BT_GAPTS_RESTORE_SETTING_RESULT__enum,
    BT_GAPTS_DELETE_TRUST_RESULT__enum,
    BT_GAPTS_BONDING_CANCEL_RESULT__enum,
    BT_GAPTS_PAIRING_CANCEL_RESULT__enum,
    BT_GAPTS_SUPPORTED_UUID__enum,
    BT_GAPTS_SEARCHED_COMPLETE_RESULT__enum,
    BT_GAPTS_READ_LOCAL_COD_RESULT__enum,
    BT_GAPTS_SET_AUTHENTICATION_RESULT__enum,
    BT_GAPTS_READ_LOCAL_ADDR_RESULT__enum,
    GAP_TESTER_SET_TO_GENERAL_INQUIRY__enum,

    BT_ME_CREATELINK_CASE__enum,
    BT_ME_EVENT__enum,
    BT_ME_NO_EVENT_HDL__enum,
    BT_ME_INQUIRY_COMPLETE__enum,
    BT_ME_INQUIRY_CANCELED__enum,
    BT_ME_READ_ADDR__enum,
    BT_ME_OPEN_DDB_FAILED__enum,
    BT_ME_WRITE_PAGE_TIMEOUT__enum,
    BT_ME_STORE_PAGE_TIMEOUT__enum,
    BT_ME_READ_VERSION_INFO__enum,
    BT_ME_RECEIVED_FEATURE_INFO__enum,
    BT_ME_STORING_ADDR__enum,
    BT_ME_ERROR_CODE__enum,
    BT_ME_WAIT_PENDING_CMD__enum,

    IN_TEST_MODE_RFEVENT_OPEN_CALL_MECHANGEPACKETTYPE__enum,
    SEND_GROUP_DATA__enum,
    RADIOMGR_TRANSPORT_INITIALIZED__enum,
    MESEC_RECEIVED_PIN_CODE_REQUEST_EVENT__enum,
    MESCO_SCO_CONNECTION_COMPLETE_HCIHANDLE__xX__enum,
    MEACC_INQSCANACTIVITY_COMPLETE__enum,
    RADIOMGR_RADIO_INITIALIZED__enum,
    MESEC_KEY_EXISTS__SENDING_LINK_KEY_REQUEST_REPLY_COMMAND__enum,
    RADIOMGR_TRANSPORT_IS_DOWN__enum,
    MESEC_SENDING_ENCYRPTION_MODE_COMMAND__enum,
    ME_START_OPERATION_BUSY__enum,
    ME_START_OPERATION__enum,
    ME_START_OPERATION_FAIL_STATE__enum,
    ME_INQUIRY_OPERATION_COMPLETED_WITH_ERROR__xX__enum,
    MECON_SETTING_ERROR_FOR_LINK_REJECT_OLD_ERROR__0XxX__enum,
    MESEC_REMOTE_DEVICE_PERFORMING_AUTHENTICATION__enum,
    SCO_CONNECTION_RSULT_BT_DEBUGx02X__enum,
    MESEC_ENABLING_AUTHENTICATION_FOR_ALL_CONNECTIONS__enum,
    SNIFF_END__enum,
    MESEC_HANDLESECURITYCOMMANDCOMPLETE_OPCODE_MISMATCHOPCODE__xX_CURTASK__xX__enum,
    EVENT_0XFCC1__enum,
    ME_SET_HCI_EVENT_MASK_COMPLETED_STATUS__xX__enum,
    MESEC_CREATING_OPERATION_FOR_LINK_KEY_RESPONSE__enum,
    MECON_ACL_CONNECT_COMPLETE_INTERNAL_REJECT__enum,
    RADIOMGR_RMGRHCICALLBACK_VALID_EVENT__enum,
    MESEC_SENDING_AUTHENTICATION_ENABLE_COMMAND__enum,
    ME_MEHANDLECOMPLETETASK_OPCODE_MISMATCH_OPCODE__xX_CURTASK__xX__enum,
    SNIFF_REQ__enum,
    MESCO_VOICESETTINGS_DONE_STATUS_xX__enum,
    RADIOMGR_BEGINNING_INITIALIZATION__enum,
    FLUSH_OCCURED__enum,
    RADIOMGR_RESET_FAILED__enum,
    MESEC_NUM_LINK_KEYS__xD_BDADDR_xX_xX_xX_xX_xX_xX__enum,
    MESEC_ACCESS_REQUEST_NEEDS_ENCRYPTION__enum,
    STARTING_RTXBT_DEBUGx04X__enum,
    BOP_SWITCH_ROLE_IS_REPORTED_AS_ROLExD__enum,
    MESEC_SECURITY_TOKEN_LIST_IS_EMPTY__enum,
    FORCEDISCONNECT__enum,
    MESEC_STARTING_AUTHENTICATION_REQUESTED_COMMAND__enum,
    MECON_EXIT_PARK_MODE_TO_HCIHANDLE_xX__enum,
    MESEC_DISABLING_AUTHENTICATION_FOR_ALL_CONNECTIONS__enum,
    POWER_OFF_REJECT_IT__enum,
    MESEC_RECEIVED_AUTHENTICATE_COMPLETE_EVENT_ERR__xD__enum,
    MECON_RECEIVED_SCO_CONNECT_REQUEST__enum,
    MESEC_RECEIVED_ENCRYPTION_CHANGE_ERR__xD__enum,
    ME_EXIT_SNIFF_MODE_OPERATION_ERROR_STATUS__xX__enum,
    MECONLINKREJECTERROR__xX__enum,
    MECON_STARTING_LOCAL_NAME_CHANGE_COMMAND_LEN__xD__enum,
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__NO_OP_ON_QUEUE__enum,
    MECON_STARTING_DISCONNECT_TO_HCIHANDLE_xX__enum,
    ME_HCI_INIT_COMPLETE_STATUS_xD__enum,
    RXBUFF_INVALID_BUFFER_TYPE_ON_FREE__enum,
    RADIOMGR_INITIALIZING_TRANSPORT__enum,
    WRITESCANxD__enum,
    MECON_DISCONNECT_COMPLETE_EVENT_FOR_HCIHANDLE__xD__enum,
    MELINKREADYTOSEND_START_TIMER__enum,
    RADIOMGR_TRANSPORT_INIT_FAILED_GIVING_UP__enum,
    MECON_INTERNAL_LINK_REJECT__xX__enum,
    MECONLINKACCEPTERROR__xX__enum,
    MESCO_LINKREJECTERROR__xX__enum,
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__UP_OP_ON_QUEUE__enum,
    SCO_SENDDATABT_DEBUGx04X_SENT_xD_BYTE_DATA_PACKET__enum,
    MESEC_NO_AUTHORIZATION_HANDLE_OR_PREVIOUS_ATTEMPT_FAILED__enum,
    ME_LOCAL_NAME_CHANGE_OPERATION_COMPLETED_STATUS__0XxX__enum,
    MESEC_DISABLING_ENCRYPTION_FOR_ALL_CONNECTIONS__enum,
    MESEC_NO_PAIRING_HANDLER__enum,
    MECON_MEHANDLELINKDISCONNECTOP_TASK_END_ERRCODE__xX__enum,
    MESCO_SETTING_ERROR_FOR_LINK_REJECT_OLD_ERROR__0XxX__enum,
    MESEC_SENDING_PIN_CODE_REQUEST_REPLY_COMMAND__enum,
    IN_TEST_MODE_CHANGE_DATA_PKT_TYPE_TO_BAPT_DH3__enum,
    MECON_RECEIVED_ACL_CONNECT_REQUEST__enum,
    MECON_STARTING_REMOTE_NAME_REQUEST_COMMAND_CLOCK_OFFSET_SR_MODE__enum,
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__DOWN_OP_ON_QUEUE__enum,
    MESEC_LINK_KEY_IS_SAVED_DEVICE_TRUSTED__enum,
    STOP5__enum,
    ME_MEHANDLEDISCOVERROLETASK_OPCODE_MISMATCH_OPCODE__xX_CURTASK__xX__enum,
    MESCO_ESCO_CONNECTION_CHANGED_HCIHANDLE__xX__enum,
    ME_GET_REMOTE_DEVICE_NAME_CANCEL_OPERATION_COMPLETE_STATUS__xX__enum,
    ME_WRITE_DEFAULT_LINK_POLICY_OPERATION_COMPLETED_ERROR__0XxX__enum,
    MEACC_STARTING_WRITE_SCAN_ACTIVITY_COMMAND__enum,
    ME_FORCEDISCONNECTLINKWITHREASONxD__enum,
    ME_CREATE_LINK_CANCEL_OPERATION_COMPLETE_STATUS__xX__enum,
    MESEC_ADDING_CANCEL_AUTHENTICATION_OPERATION_TO_QUEUE__enum,
    ME_SWITCH_ROLE_OPERATION_ERROR_STATUS__xX__enum,
    MECON_CHANGE_PACKET_TYPE_TO_HCIHANDLE_xX__enum,
    ME_HOLD_MODE_OPERATION_ERROR_STATUS__xX__enum,
    EVENT_0XFCC0__enum,
    MECACCMODENC_BT_DEBUGx04X__enum,
    MECON_PARK_MODE_TO_HCIHANDLE_xX__enum,
    RADIOMGR_TRANSPORT_SHUTTING_DOWN__enum,
    MESEC_ADDING_AUTHORIZE_OPERATION_TO_QUEUE__enum,
    MESEC_ADDING_AUTHENTICATE_OPERATION_TO_QUEUE__enum,
    SERIOUS_ERROR__enum,
    COD_NOT_MATCH__enum,
    SET_ME_SETACCESSIBLEMODENCBT_DEBUGx02X__enum,
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNECT__EXISTING_OP_ON_QUEUE__enum,
    RADIOMGR_RMGRTRANCALLBACK_xX__enum,
    MESEC_SENDING_LINK_KEY_REQUEST_NEGATIVE_REPLY_COMMAND__enum,
    MESEC_SECPROCESSALLSECURITYTOKENS_REMOVING_TOKEN__enum,
    MESCO_ESCO_CONNECTION_CHANGED_EVENT__enum,
    MECON_STARTING_CREATE_LINK_CANCEL_COMMAND__enum,
    MEINQUIRY_RESULT_CLOCKOFFSET__xX__enum,
    REMDEV_0__enum,
    BDCLINKSTATEBT_DEBUGx02X__enum,
    MESEC_REMOTE_DEVICE_PERFORMING_PAIRING__enum,
    MESCO_STARTING_SCO_LINK_TO_ACL_LINK_xX__enum,
    MESEC_NO_AUTHORIZATION_HANDLER__enum,
    RADIOMGR_INTIALIZING_RADIO__enum,
    MESCO_STARTING_DISCONNECT_TO_SCO_HCIHANDLE_xX__enum,
    RADIOMGR_INITIALIZING_HCI__enum,
    MESEC_SECURITY_COMMAND_STATUS_EVENT_RECEIVED_ERR__xX__enum,
    MESEC_SENDING_PIN_CODE_REQUEST_NEGATIVE_REPLY_COMMAND__enum,
    MESEC_ACCESS_REQUEST_NEEDS_AUTHENTICATION__enum,
    ISNODEONLISTREMDEVHANDLERS_HANDLERNODE__enum,
    CALLANDREMOVEHANDLERS_1__enum,
    MEACC_PAGESCANACTIVITY_COMPLETE__enum,
    MEACC_PAGESCANACTIVITY_EVENT__enum,
    MEACC_PAGESCANACTIVITY_ACTIVITY__enum,
    RADIOMGR_RMGR_RADIOINIT__enum,
    MESEC_ENABLING_ENCRYPTION_FOR_ALL_CONNECTIONS__enum,
    MESEC_ERROR_SAVING_LINK_KEY__enum,
    BT_MEIF_SEC_PASSKEYENTRY__enum,
    MODE_CHANGE__enum,
    CALLANDREMOVEHANDLERS__enum,
    MESEC_CALLING_PAIRING_HANDLER_INDICATING_PAIRING_COMPLETE__enum,
    DS_ADDDEVICE_NO_RESOURCE__enum,
    ME_INQUIRY_CANCEL_OPERATION_COMPLETED_ERROR__xX__enum,
    RELEASE_PREVIOUS_ONE__enum,
    MEACC_STARTING_WRITE_CURRENT_IAC_LAP__enum,
    MEACC_WRITE_SCAN_OP__xD_INT__xD_WIN__xD__enum,
    MECON_CONNECTION_COMPLETE_EVENT_STATUS__0XxX__enum,
    MESCO_SCO_DISCONNECT_COMPLETE_EVENT_FOR_HCIHANDLE__xD__enum,
    MESCO_SCOHANDLELINKDISCONNECTOP_TASK_END_ERRCODE__xX__enum,
    MECREATELINK_INSERT_HANDLER_2__enum,
    RADIOMGR_RMGR_RADIOSHUTDOWN__enum,
    RMGR_RADIO_INIT_STATUS__enum,
    MEACC_STARTING_WRITE_SCAN_ENABLE__enum,
    RADIOMGR_INITIALIZATION_FAILED__enum,
    WRITESCAN1xD__enum,
    RADIOMGR_TRANSPORT_INITIALIZING__enum,
    MESEC_IGNORING_SECOND_PIN_REQUEST__enum,
    MTK_NUM_KNOWN_DEVICES_FULL__enum,
    RADIOMGR_RESET_INITIATED__enum,
    MESEC_ADDING_ENCRYPTION_OPERATION_TO_QUEUE__enum,
    RADIOMGR_COULD_NOT_INIT_TRANSPORT_DURING_RESET__enum,
    MESEC_REMOTE_DEVICE_DOES_NOT_EXIST_FOR_PAIRING__enum,
    MECON_ACL_CONNECT_COMPLETE_HCIHANDLE__xX__enum,
    MESEC_CALLING_PAIRING_HANDLER_FOR_A_PIN_CODE__enum,
    PACKETDATAOFFSETBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    ME_PARK_MODE_OPERATION_ERROR_STATUS__xX__enum,
    MECON_STARTING_LINK_REJECT_COMMAND__enum,
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__EXISTING_OP_ON_QUEUE__enum,
    ME_DISCOVER_ROLE_OPERATION_COMPLETED_ERROR__0XxX__enum,
    STOP_4__enum,
    RADIOMGR_RESET_DURING_SHUTDOWN__enum,
    MESCO_SCO_CONNECTION_COMPLETE_INTERNAL_REJECT__enum,
    MESEC_SECPROCESSALLSECURITYTOKENS_PROCESSING_A_TOKEN__enum,
    RADIOMGR_RMGR_HCIRESET__enum,
    MESCO_DETECTED_RACE_CONDITION__enum,
    MESEC_CANCELING_PIN_CODE_REQUEST__enum,
    ME_MEHANDLECONNECTIONSTATUSONLY_OPCODE_MISMATCHOPCODE__xX_CURTASK__xX__enum,
    MELINKREADYTOSENDBT_DEBUGx02X__enum,
    MECON_SCO_CONNECT_COMPLETE_EVENT__enum,
    RADIOMGR_SHUTDOWN_FAILED_ALREADY_DOWN_OR_INTIALIZING__enum,
    MESCO_STARTING_SCO_VOICE_SETTINGS_COMMAND__enum,
    MESEC_TIMEOUT_ON_SECURITY_ACCESS_REQUEST__enum,
    MEHANDLEDISCONNECTCOMPLETE_REPORT_TO_UPERxX__enum,
    MESCO_RECONFIGURING_ESCO_LINK_xX__enum,
    MESCO_STARTING_SCO_LINK_ACCEPT_COMMAND__enum,
    MECON_STARTING_GENERAL_COMMAND__enum,
    MEDEV_CALLING_SELECT_DEVICE_HANDLER__enum,
    RADIOMGR_TRANSPORT_INIT_FAILED_RETRYING__enum,
    RADIOMGR_INIT_CALLED_DURING_INIT__enum,
    MECON_SWITCH_ROLE_TO_HCIHANDLE_xX__enum,
    ME_HCI_TRANSPORT_ERROR__enum,
    START_INQUIRY_LOOP__enum,
    RADIOMGR_RADIODEINIT__enum,
    ME_EXIT_PARK_MODE_OPERATION_ERROR_STATUS__xX__enum,
    MESCO_RECEIVED_SCO_LINK_CONNECT_REQUEST__enum,
    RADIOMGR_RMGRHCICALLBACK_xX__enum,
    MECON_COD__0XxX__enum,
    MESCO_ESCO_CONNECTION_CHANGED_UNKNOWN_HCIHANDLE__xX__enum,
    RADIOMGR_TRANSPORT_DEINITIALIZATION_FAILED__enum,
    RADIOMGR_RADIO_INIT_FAILED_RETRYING__enum,
    RADIOMGR_TRANSPORT_FAILED_SHUTDOWN__enum,
    RADIOMGR_RADIO_IS_DOWN__enum,
    ME_WRITE_LINK_POLICY_STATUS__xX__enum,
    ME_HCI_DEINIT_COMPLETE_STATUS_xD__enum,
    MECON_STARTING_LINK_CONNECT_COMMAND_CLOCK_OFFSET__0XxX_ALLOWROLECHANGE__xD__enum,
    MESCO_RECEIVED_SCO_LINK_CONNECT_REQUEST_REJECT__enum,
    ME_HCI_COMMAND_SENT__enum,
    INQUIRY_RESULT__enum,
    ME_RECEIVED_INQUIRY_COMPLETE_EVENT__enum,
    MECON_STARTING_LINK_ACCEPT_COMMAND_ACCEPT_ROLE__xD__enum,
    MESEC_LINK_KEY_IS_SAVED_DEVICE_NOT_TRUSTED__enum,
    ME_HANDLEGENERALTASK_OPCODE_MISMATCH__enum,
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__EXISTING_OP_EXECUTING__enum,
    ME_GENERAL_COMMAND_COMPLETED_STATUS__0XxX__enum,
    ME_WRITE_CLASS_OF_DEVICE_OPERATION_COMPLETED_ERROR__xX__enum,
    RADIOMGR_RMGRRADIOCALLBACK_xX__enum,
    RADIOMGR_RADIO_MODULE_IS_DOWN__enum,
    MECACCINFONC_BT_DEBUGx04X__enum,
    MESEC_NO_PAIRING_HANDLER_TO_REPORT_PAIRING_COMPLETE__enum,
    MECREATELINK_INSERT_HANDLER_1__enum,
    MESEC_STARTING_SET_CONNECTION_ENCRYPTION_COMMAND__enum,
    RADIOMGR_INITIALIZING_TRANSPORT_DURING_RESET__enum,
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNET__EXISTING_OP_EXECUTING__enum,
    MECON_ACL_CONNECT_COMPLETE_EVENT__enum,
    MESCO_STARTING_ESCO_LINK_TO_ACL_LINK_xX__enum,
    HANDLER__0__enum,
    RFCOMM_NEGOTIATION_SENT_SUCCESSFULLY_TO_DLCI_xD_ON_MUX_xD__enum,
    ME_SNIFF_MODE_OPERATION_ERROR_STATUS__xX__enum,
    MECON_DISCONNECT_COMPLETE_EVENT_STATUS__0XxX__enum,
    MECON_HOLD_MODE_TO_HCIHANDLE_xX__enum,
    RADIOMGR_TRANSPORT_INITIATED__enum,
    ACCOPNC_IS_BT_DEBUGx04X__enum,
    MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNECT__NO_OP_ON_QUEUE__enum,
    MECON_REMOTE_NAME_REQUEST_COMPLETE_STATUS__0XxX__enum,
    ME_WRITE_AFH_COMPLETED_ERROR__xX__enum,
    MESCO_SCO_CONNECTION_COMPLETE_EVENT__enum,
    MESEC_LINK_KEY_NOTIFY_EVENT__enum,
    RADIOMGR_HCI_DEINIT_STARTED__enum,
    ME_CHANGE_PACKET_TYPE__xX__enum,
    MUXCHANNELMUXIDNUMTXPACKETSxD__enum,
    BOP_DISCOVER_ROLE_IS_REPORTED_AS_ROLExD__enum,
    MESEC_ADDING_CANCEL_AUTHORIZE_OPERATION_TO_QUEUE__enum,
    ME_REMOTE_NAME_REQUEST_OPERATION_ERROR_STATUS__xX__enum,
    MESEC_RECEIVED_ENCRYPTION_CHANGE_EVENT__NO_REMOTE_DEVICE__enum,
    RECEIVE_EVENT_FOR_GENERAL_COMMAND_EVENT__0XxX__enum,
    MECON_WRITE_LINK_POLICY_TO_HCIHANDLE_xX__enum,
    MECON_QOS_SETUP__enum,
    MECON_QOS_SETUP_ERROR_STATUS__xX__enum,
    RADIOMGR_HCI_INIT_FAILED_RETRYING__enum,
    MEACC_WRITE_IAC_LAP_COMPLETE__enum,
    MESEC_RECEIVED_AUTHENTICATE_COMPLETE_EVENT__NO_REMOTE_DEVICE__enum,
    ME_SET_CHANNEL_CLASSIFICATION_OPERATION_COMPLETED_ERROR__0XxX__enum,
    RADIOMGR_RADIO_SHUTTING_DOWN__enum,
    MEACC_WRITE_SCAN_ENABLE_COMPLETE__enum,
    MEGETFREEREMOTEDEVICE__enum,
    MEGETFREEREMOTEDEVICENULL__enum,
    RADIO_WAITING_FOR_EVENT_xX__enum,
    MESEC_CALLING_AUTHORIZATION_HANDLER__enum,
    MESEC_ACCESS_REQUEST_NEEDS_AUTHORIZATION__enum,
    MESEC_SECURITY_COMMAND_COMPLETE_EVENT_RECEIVED_ERR__xX__enum,
    MESEC_LINK_KEY_REQ_FOR_INVALID_BD_ADDR__LINK_KEY_NEG_RSP__enum,
    RADIOMGR_HCI_INIT_ERROR__enum,
    MEACC_THE_SETACCESSIBLEMODE_OPERATION_FAILED__enum,
    MEHCI_COMMAND_COMPLETE_ERROR__enum,
    ME_SWITCH_ROLE_OPERATION_ENDED_STATUSxX__enum,
    MESEC_NO_LINK_KEY__NEED_A_PIN_CODE__enum,
    MESCO_STARTING_SCO_LINK_REJECT_COMMAND__enum,
    MECSEC_ERROR_SETTING_ENCRYPTION_MODE_ERR__xD__enum,
    MESEC_SECURITY_TOKEN_LIST_IS_NOT_EMPTY__enum,
    RADIOMGR_SHUTDOWN_INITIATED__enum,
    ME_INIT_FAILED__enum,
    MESCOLINKACCEPTERROR__xX__enum,
    RADIOMGR_HCI_IS_DOWN__enum,
    AVCTP_MISSING_PARAMETERS_DISCONNECTING__enum,
    AVCTP_UNABLE_TO_REGISTER_WITH_L2CAP__enum,
    AVCTP_INVALID_PID_DISCONNECTING__enum,
    AVCTP_ERROR_SENDING_MESSAGE__enum,
    AVCTP_INVALID_PROFILE_ID__enum,
    RELEASE_THE_SPACE_ALLOCATED_IN_AVDT_WRITE_DATA__enum,
    AVDTP_AVDT_CONNECTREQ__enum,
    AVDTP_AVDT_DISCOVER_REQ__enum,
    AVDTP_AVDT_SET_CONFIGURATION_REQ__enum,
    AVDT_CONNECTREQ__enum,
    AVDTP_AVDT_GET_CAPABILITIES_REQ__enum,
    AVDTP_INIT__enum,
    IN_CMGR_SETDEVICEASMASTER_CALL_ME_SWITCHROLE__enum,
    CMGR_ATTEMPTING_MS_SWITCH__enum,
    CMGR_ROLE_IS_MASTER__enum,
    CMGR_ROLE_IS_SLAVE__enum,
    CMGR_SETQOS__enum,
    BTBT_DEBUGx02X__enum,
    IN_CMGR_SETDEVICEASMASTER_ALREADY_MASTER__enum,
    x1C__enum,
    ACL_LINK_CONNECTION_EXISTS_DO_SERVICE_SEARCH_DIRECTLY__enum,
    ACL_LINK_CONNECTION_EXISTS_DO_SERVICE_SEARCH_ATTRIBUTE_DIRECTLY__enum,
    SPP_RFEVENT_CLOSED__enum,
    SPP_DEVICE_STATE_CLOSED__enum,
    ADD_SERVICE_RECORD_FAILED__enum,
    SPP_RFEVENT_CLOSE_IND__enum,
    SPP_PASSTHRU_EVENT__xD__enum,
    SPP_RF_ACCEPTCHANNEL_FAILED_xD__enum,
    RF_xD__enum,
    SENDING_PORT_SETTINGS__enum,
    TX_RATExD__enum,
    SPP_CHANNEL_OPEN__enum,
    SPP_RF_SENDDATA_FAILED_xD__enum,
    SPP_SDP_QUERY_FAILED__enum,
    SPP_UNKNOWN_EVENT__xD__enum,
    xD__enum,
    SPP_SDP_CONNECT_RETURNED_xD__enum,
    RX_xD_SAVED_xD__enum,
    TX_FINISHED_STARTxD_ENDxD__enum,
    TXSLEEPCOUNT__enum,
    SPP_OPEN_SERVICE_AVAILABLE_ON_RFCOMM_CHANNEL_xD__enum,

    BTLOG_RFCHC_RFCOUNT__enum,
    BTLOG_RFCH_GET_SDP_ATTRIBS__enum,
    BTLOG_RFCH_ASSIGN_SRV_AND_SDP__enum,


    BTBM_ADD_LINK_CALLBACK__enum,
    BTBM_REMOVE_LINK_CALLBACK__enum,
    BTBM_REMOVE_LINK_CALLBACK_LINK_NOT_EXISTED__enum,
    BTBM_CREATE_CONNECTION__enum,
    BTBM_REMOVE_CONNECTION__enum,
    CONNMGR_BTEVENT_READ_RSSI_COMPLETED__enum,
    ME_START_RSSIOP__enum,
    ME_END_RSSIOP__enum,
    BTBM_BONDING_NOT_SEND_AUTH_CMD_AUTHSTATE_ENCRYPTSTATE__enum,
    BT_FATAL__enum,

    BTEVENT_SCO_CONNECT_CNF_ESCO_FAILED__enum,
    BT_TRY_TO_OPEN_SCO__enum,
    SCOCONNECTSCOLINKTYPEx02X__enum,
    CONNMGRACCEPTAUDIOLINK_SCOCONNECTSCOTXPARMSESCOPKTTYPEx02X__enum,
    STARTSCOLINKSETUPTASK__enum,
    STARTSCOLINKACCEPTTASK__enum,
    BT_TRY_TO_OPEN_ESCO__enum,
    BTTRANSMITBANDWIDTHx08X__enum,
    BTRETRANSMISSIONEFFORTx02X__enum,
    BTVOICESETTINGx04X__enum,
    BTESCOPKTTYPEx04X__enum,
    BTCURRENT_SCOPARMSx02X__enum,
    BTRECEIVEBANDWIDTHx08X__enum,
    BTEVENT_SCO_CONNECT_CNF_SCO_FAILED__enum,
    BTMAXLATENCYx04X__enum,
    BT_PROFILES_TYPE_FROM_MMIx02X__enum,
    SUPPORT_ESCO_STATUSx02X__enum,
    BT_PROFILES_ESCO_TYPEx02X__enum,
    WRITE_FLUSHED_TIMEOUT__enum,
    LINK_FLUSHED_TIMEOUT_DEBUGx02X__enum,
    LINK_FLUSHED_TIMEOUT_ERROR_CODE__enum,
    BTLOG_ENHANCED_FLUSHED_COMMAND_COMPLETED_HDL__enum,
    BTLOG_SUPERVISION_TIMEOUT_CHANGE_EVENT__enum,
    BTLOG_POWERON_SET_EVENT_MASK__enum,
    BTLOG_SET_EVENT_MASK_COMMAND_COMPLETED__enum,
    BTLOG_SET_SNIFF_SUBRATING_OP_IN_QUEUE__enum,
    LINK_SNIFF_SUBRATING_ERROR_CODE__enum,
    BTLOG_WRITE_EIR_RESPONSE__enum,
    BTLOG_WRITE_INQUIRY_MODE_COMPLETED__enum,
    BTLOG_WRITE_INQUIRY_MODE_PARM__enum,
    BTLOG_CREATE_AUDIOLINK_SCO_HANDLER__enum,
    BTLOG_CREATE_AUDIOLINK_SCO_HANDLER1__enum,
    BTLOG_CREATE_AUDIOLINK_SCO_STATUS__enum,
    BT_LOG_NOTIFY_MMI_SIMAP_ISSUE_16_DIGITS__enum,
    BT_LOG_CHECK_SIMAP_SRV_STATE_PIN_CODE_IND__enum,
    BT_LOG_CHECK_SIMAP_PIN_CODE_LEN_IN_RECV_SABM_CASE__enum,
    BT_LOG_LINK_KEY_RSP_TASK_PAIRED_LEN__enum,
    BT_LOG_SEC_PIN_CODE_REQ_ISSUED_BY_SIMAP__enum,
    BT_LOG_SEC_AUTH_COMPLETE_RESET_SIMAP_ISSUE_AUTH_PROCEDURE__enum,
    BT_LOG_SEC_LINK_KEY_NOTIFY_RESET_FALGS_CASE__enum,
    BT_LOG_SEC_LINK_KEY_NOTIFY_PIN_CODE_LEN_CASE__enum,
    BT_LOG_START_PIN_CODE_RSP_TASK_PIN_LEN__enum,
    BT_LOG_START_PIN_CODE_RSP_BY_ADDR_TASK_LEN__enum,
    BT_LOG_REMDEV_REFCOUNT_DLCCOUNT__enum,
    BT_LOG_NEEDS_HIGHER_SECURITY_BUT_EXISTED_ACTIVE_CON_REJECT_THIS_CHNL__enum,
    BT_LOG_HANDLE_LINK_KEY_NOTIFY_CHECK_PAIRED_SIMAP_FLAG__enum,
    BT_LOG_BTBM_REPORT_LINK_STATE_DEBUG_INFO__enum,
    BT_LOG_BTBM_CAN_NOT_RESET_OP_ONGOING_FLAG__enum,
    BT_LOG_BM_REJECT_WRITE_SCAN_MODE_SAVE_MODE_AND_STATUS__enum,
    BT_LOG_SDAP_REJECT_SECOND_A2DP_SDP_DUE_TO_ONE_PENDING__enum,
    BT_LOG_NAMETOK_CBFUNC__enum,
    BT_LOG_NAMETOK2_CBFUNC__enum,
    BT_LOG_NAMETOK3_CBFUNC__enum,
    BT_LOG_MULTIPLE_NAME_CBFUNC__enum,
    BT_LOG_EXISTING_NAMETOK2_NOT_RESET__enum,
    BTLOG_WRITE_SIMPLE_PAIRING_MODE_PARM__enum,
    BTLOG_WRITE_SIMPLE_PAIRING_MODE_COMPLETED__enum,
    MESEC_SENDING_IO_CAPABILITY_NEGATIVE_REPLY_COMMAND__enum,
    BTLOG_BTBM_BONDING_RX_USER_CONFIRM_REQUEST__enum,
    BTLOG_BTBM_PAIRING_RX_USER_CONFIRM_REQUEST__enum,
    BTLOG_BTBM_BONDING_RX_PASSKEY_ENTRY_REQUEST__enum,
    BTLOG_BTBM_PAIRING_RX_PASSKEY_ENTRY_REQUEST__enum,
    BTLOG_BTBM_READRSSI_STATUS__enum,
    BTLOG_BTBM_READRSSI_NOT_FIND_REMDEV_WITH_ADDR__enum,
    BTLOG_BTBM_REPORT_READRSSI_RESULT__enum,
    BTLOG_CONNMANAGER_RSSI_VAL__enum,
    MESEC_SENDING_USER_CONFIRM_COMMAND__enum,
    MESEC_SENDING_USER_CONFIRM_NEG_COMMAND__enum,
    BTLOG_CMGR_CREATE_LINK_WITH_DIFF_ADDR__enum,
    BT_LOG_MPR_CANCEL_TIMER_IN_AUTHSTATE_CASE__enum,
    BT_LOG_START_MPR_TIMER_CASE__enum,
    BT_LOG_MPR_TIMEOUT_LINKSTATE_AUTHSTATE__enum,
    BT_LOG_MPR_TIMEOUT_LINK_NOT_CONNECTED__enum,
    BT_LOG_AUTHEVENT_ERRCODE_LINKSTATE_ORG_AUTHSTATE__enum,
    BT_LOG_AUTHEVENT_ERR_DISC_LINK__enum,
    BT_LOG_AVDTP_RECV_SIGRSP_CURRENT_STATE__enum,
    BT_LOG_AVDTP_RECV_RSP_BUT_STREAM_ALREADY_DISC__enum,
    BT_LOG_AVDTP_CHANGE_TO_STREAMING_STATE__enum,


    BTLOG_BLOCK_LIST_NOxD__enum,
    BTLOG_BLOCK_LIST_Ix02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_INPUT_ADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_SSP_MTKBMCBONDING_STATEx02X__enum,
    BTLOG_BTBMHANDLEPASSKEYENTRYNOTIFICATIONxD__enum,
    BTLOG_MTKBMCPIN_BDCx08X__enum,
    BTLOG_SERVICE_LISTx02Xx02Xx02X__enum,
    BTLOG_BTBMHANDLEIOCAPABILITYRESPONSEx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE__enum,
    BTLOG_BTBMHANDLEIOCAPABILITYRESPONSEx02Xx02Xx02X__enum,
    BTLOG_UUID16x04X__enum,
    BTLOG_RSSIx02X__enum,
    BTLOG_EVENTERRCODEx02X__enum,
    BTLOG_EVENTPBTBMHANDLEPASSKEYENTRYNOTIFICATIONREMDEVBDADDRADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_FIND_DEVICE_NEWx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_PASSKEY_ENTRY_NOTIFICATION_WRONG_STATE_IGNORE_IT__enum,
    BTLOG_EIR_VALUEx02X__enum,
    BTLOG_MTKBMCBM_OPACTIVITYx02X__enum,
    BTLOG_REMDEVSTATEx02X__enum,
    BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_AUTHREQUIREMENTSxD__enum,
    BTLOG_EVENTPUSERCONFIRMREQUESTREMDEVBDADDRADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_IOCAPABILITYxD__enum,
    BTLOG_x02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_CURRENT_BM_OPACTIVITY__enum,
    BTLOG_EIR_LENGTHxD__enum,
    BTLOG_SIMPLE_PAIRING_PROCEDURE_IS_COMPLETED__enum,
    BTLOG_EIR_RESPONSE__enum,
    BTLOG_BTEVENT_IO_CAPABILITY_REQUEST__enum,
    BTLOG_BDCSUPPORT_SERVICE_LISTxD__enum,
    BTLOG_KEYPRESSEVENTREPORTINGxD__enum,
    BTLOG_BTBMHANDLE_CURRENT_KEY_PRESSxD__enum,
    BTLOG_UUID_OFFSETxD__enum,
    BTLOG_FIND_DEVICE_AGAINx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_IN_BLOCK_LIST_DISCONNECT__enum,
    BTLOG_BDCx08X__enum,
    BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_OOBDATAPRESENTxD__enum,
    BTLOG_BDC_NOT_FIND_RESPONSE_FAILED__enum,
    BTLOG_MTKBMCSSPDEVICEINFONUMERICVALUExD__enum,
    BTLOG_BTEVENT_USER_CONFIRM_REQUEST__enum,
    BTLOG_EIR_THE_LAST_ONE__enum,
    BTLOG_IN_BLOCK_LIST_REJECT__enum,
    BTLOG_ADDRESS_NOT_MATCHED_RETURN__enum,
    BTLOG_SSP_KEY_TYPExD__enum,
    BTLOG_MTKBMCPIN_REQ_TIMERFUNCx08X__enum,
    BTLOG_MTKBMCSSPDEVICEINFOADDR_ADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_BTBMHANDLEUSERCONFIRMREQUESTxD__enum,
    BTLOG_BTBMHANDLEOOBDATAREQUEST__enum,
    BTLOG_NOT_SUPPORT_SNIFF_SUBRATING_MODE__enum,
    BTLOG_MECTASKSTATEx02X__enum,
    BTLOG_MEHANDLEWRITEEIROP__enum,
    BTLOG_WRITE_EIR_DATA__enum,
    BTLOG_EIRRECORDNUMxD__enum,
    BTLOG_EIRx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_OFFSETxD__enum,
    BTLOG_MECLOCALNAMELENxD__enum,
    BTLOG_MEHANDLEREADRSSIOPHICHANDLEx04X__enum,
    BTLOG_MEDISCONNECTLINKx02Xx02Xx02X__enum,
    BTLOG_MEHANDLEWRITEAUTOMATICALLYFLUSHOP__enum,
    BTLOG_CURRENT_KEYxD__enum,
    BTLOG_ACL_DISCONNECTING_CREATING_LINK_PENDING__enum,
    BTLOG_MEHANDLEDISCONNECTACLCHECKCREATEACL__enum,
    BTLOG_ERR_OR_END_MEHANDLEREADRSSIOP__enum,
    BTLOG_MEHANDLEWRITESNIFFSUBRATINGOP__enum,
    BTLOG_RECORD_INDEXx0D_SERVICE_CLASSx04X__enum,
    BTLOG_EIR_CHECK_THE_REGISTRATION_IN_RECORD_OR_NOT__enum,
    BTLOG_RECORD_EXISTxD__enum,
    BTLOG_xD_USEDxD_SERVICE_CLASSx04X__enum,
    BTLOG_EIR_REGISTRATION_SDP_FOR_UPPER_LAYER_SERVICE_CLASSx04X__enum,
    BTLOG_CURRENT_IOCAPABILITIYSTATE0Xx02X__enum,
    BTLOG_REMDEVSNIFFSUBRATESTATEx02X__enum,
    BTLOG_EIROP_IN_OPLIST__enum,
    BTLOG_NO_EIR_UPDATE_OPERATION__enum,
    BTLOG_EIROP_NOT_AVAILABLE__enum,
    BTLOG_WRONG_STATE__enum,
    BTLOG_REMDEVDISCONNECTACLCHECKCREATACLTIMERFUNC_0__enum,
    BTLOG_REMDEV_0__enum,
    BTLOG_TOKENREMDEVENCRYPTSTATExD__enum,
    BTLOG_LINK_KEY_BDCx08X__enum,
    BTLOG_STARTIOCAPABILITYRSPBYADDRTASKx02X__enum,
    BTLOG_REMOTE_DEVICE_PERFORM_SHOW_KEY_REQUEST__enum,
    BTLOG_NOT_SIMPLE_PAIRING_KEY_USE_INTERNAL_VALUE__enum,
    BTLOG_CURRENT_KEY_TYPExD__enum,
    BTLOG_STARTUSERCONFIRMRSPBYADDRTASKx02X__enum,
    BTLOG_REMOTE_DEVICE_IS_NOT_WAITING_FOR_LINK_KEY__enum,
    BTLOG_SECHANDLEIOCAPABILITYREQUEST__enum,
    BTLOG_SECHANDLEUSERKEYPRESS__enum,
    BTLOG_RECORDGAPKEYTYPExD__enum,
    BTLOG_PASSKEY_PRESS_EVENT_x02X__enum,
    BTLOG_REMOTE_DEVICE_PERFORM_USER_CONFIRM_REQUEST__enum,
    BTLOG_PAIRING_IS_IN_PROGRESS__enum,
    BTLOG_REMOVE_DEVICE_IS_EMPTY__enum,
    BTLOG_USERCONFIRMREQUEST_NUMERICVALUE_x08X__enum,
    BTLOG_SECHANDLEDELETESTOREDLINKKEYOP__enum,
    BTLOG_SECHANDLESIMPLEPAIRINGCOMPLETE__enum,
    BTLOG_SECHANDLEUSERPASSKEYNOTIFICATION__enum,
    BTLOG_BTEVENT_SIMPLE_PAIRING_COMPLTETE__enum,
    BTLOG_SECHANDLEIOCAPABILITYREQUEST_NO_REMDEV__enum,
    BTLOG_TOKENRECORDLEVEL_TYPExD__enum,
    BTLOG_NOT_KNOWN_DEVICES__enum,
    BTLOG_CURRENT_ENCRYPTION_STATExD__enum,
    BTLOG_TOKENREMDEVAUTHSTATExD__enum,
    BTLOG_SECHANDLEIOCAPABILITYRESPONSE_NO_REMDEV__enum,
    BTLOG_PASSKEY_ENTRY_NUMERICVALUE_x08X__enum,
    BTLOG_SECHANDLEUSERCONFIRMREQUEST__enum,
    BTLOG_SECHANDLEREMOTEOOBDATAREQUEST__enum,
    BTLOG_SDPUPDATEEIRDATABASEx02X__enum,
    BTLOG_RECORDATTRIBSIDxD__enum,
    BTLOG_PARSE_PTRPARSE_COUNTxX__enum,
    BTLOG_INPUT_SERVICE_CLASSx04X__enum,
    BTLOG_SERVICE_CLASS_SIZExD__enum,
    BTLOG_RECORDNUMxD__enum,
    BTLOG_THIS_RECORD_IS_ALREADY_IN_SDPS_LIST__enum,
    BTLOG_EIR_IGNORE_DATA_ELEMENT_SEQUENCE_NOT_2_BYTES__enum,
    BTLOG_PARSE_COUNTxD_SERVICE_CLASS_SIZExD__enum,
    BTLOG_NUMERIC_VALUE_IxD_TEMP_CHARxD__enum,
    BTLOG_TEMP_VALUExD__enum,
    BTLOG_NUMERICVALUExD__enum,
    BTLOG_ATTRIBUTELIST_BYTE_COUNTxD__enum,
    BTLOG_NONDIRECT_RETURN_MESSAGE__enum,
    BTLOG_TEMP_CHARxC_COVERT_TO_STRINGxC__enum,
    BTLOG_DIVID_VALUExD__enum,
    BTLOG_ME_CREATELINK_REMOVE_INSERTED_HDLRE_DUE_TO_RETURN_FAILED__enum,
    BTLOG_CURRENT_SCO_NOxD_ESCO_NOxD__enum,
    BTLOG_TRY_TO_MAKE_LINK_POLICY__enum,
    BTLOG_PREVIOUS_ROLE_SWITCH_IS_NOT_COMPLETED__enum,
    BTLOG_DO_SCO_ROLE_SWITCH__enum,
    BTLOG_MASTER_SCOxD__enum,
    BTLOG_CON_HDLx04X_MASTER__enum,
    BTLOG_LINKROLExD_DISBALEDxD__enum,
    BTLOG_ALREADY_MASTER_RETURN__enum,
    BTLOG_CON_HDLx04X_SLAVE__enum,
    BTLOG_CURRENT_PICONETxD_SCATTERNETxD__enum,
    BTLOG_BTBM_SPP_KEY_PRESS_ABORT__enum,
    BTLOG_BTBM_SPP_AUTHENTICATION_REQUIREMENTS__enum,
    BTLOG_BTBM_SPP_DEVICE_INFO_IO_CAPABILITY__enum,
    BTLOG_ME_LINKKEY_NOTIFY_BDC_GAPKEYTYPE__enum,
    BTLOG_ME_CHANGELINKPOLICYROLESWITCHxD__enum,
    BTLOG_ME_CANCELGETREMOTEDEVICENAME_START_A_TIMER_FOR_CANCEL_NAME_TOKENxD__enum,
    BTLOG_CAN_NOT_PERFORM_LINK_POLICY__enum,
    BTLOG_ALLOW_ROLE_CHANGE_PARMxD__enum,
    BTLOG_ME_CANCELGETREMOTEDEVICENAME_CANCEL_ORG_TIMER_OF_TOKENxD__enum,
    BTLOG_CHANGE_ENCRYPTION_MODE_TO_HDLx04X_MODEx02X__enum,
    BTLOG_LINK_NOTIFICATIONx02X__enum,
    BTLOG_ENCRYPTION_HDLx04X_MODEx02X__enum,
    BTLOG_THE_LINK_KEY_x02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_THE_LINK_KEY_OF_ADDRESS_x02Xx02Xx02Xx02Xx02Xx02X__enum,
    BTLOG_REQUEST_DEVICE_NAME_TIMEOUT_OF_TOKENxD__enum,
    BTLOG_LINK_POLICY_IS_DIFFERENTx04Xx04X__enum,
    BTLOG_THE_LINK_POLICYx04X__enum,
    BTLOG_MEHANDLEREMNAMEREQTIMEOUTNORSPCANCELNAMEREQ_TRY_CANCEL_NAME_REQUEST_OF_TOKENxD__enum,
    BTLOG_ME_WRITE_LINK_POLICY_STATUS__xX__enum,
    BTLOG_CMGR_CREATE_LINK_NO_OK__enum,
    BTLOG_START_MONITOR_NUM_COMPLETED_PKTS_TIMER__enum,
    BTLOG_STOP_MONITOR_NUM_COMPLETED_PKTS_TIMER__enum,
    BTLOG_0X13_EVENT_TIMEOUT__enum,


    BTLOG_BTBM_MASTERNUM_SLAVENUM__enum,
    BTLOG_BTBM_PICONETNUM_SCATTERNETNUM__enum,
    BTLOG_BTBM_LINK_NUMBER_NOT_IN_DISCONNECTED_STATEBT__enum,
    BTLOG_BTBM_SCONUM_ESCONUM__enum,
    BTLOG_ME_CONNECTION_COMPLETE_EVENT_STATUS__enum,
    BTLOG_ME_ACL_CONNECT_COMPLETE_EVENT__enum,
    BTLOG_ME_SCO_CONNECT_COMPLETE_EVENT__enum,
    BTLOG_ME_ACL_CONNECTION_COMPLETE_EVENT_HCIHANDLE__enum,
    BTLOG_ME_SCO_CONNECTION_COMPLETE_RESULT_HCIHANDLE__enum,
    BTLOG_ME_DISCONNECT_COMPLETE_EVENT_STATUS_REASON__enum,
    BTLOG_ME_ACL_DISCONNECT_COMPLETE_EVENT_HCIHANDLE__enum,
    BTLOG_ME_SCO_DISCONNECT_COMPLETE_EVENT_HCIHANDLE__enum,
    BTLOG_BTBM_NEW_ROLE_IS_REPORTED_WITH_OPTYPE__enum,
    BTLOG_BTBM_HANDLEROLESWITCHCFM_SWITCHSTATE__enum,
    BTLOG_ME_SWITCH_ROLE_OPERATION_ENDED_STATUS__enum,
    BTLOG_HCI_INSERT_HCI_COMMAND_TO_LIST__enum,
    BTLOG_UART_SEND_HCI_COMMAND__enum,
    BTLOG_ME_HCIGENCMD_HANDLED__enum,
    BTLOG_ME_RX_EVENT__enum,
    BTLOG_ME_HANDLE_MOD_CHANGE__enum,
    BTLOG_SEND_UART_ACL_DATA__enum,
    BTLOG_RECV_UART_ACL_DATA__enum,
    BTLOG_UART_TRANSMIT_DATA__enum,
    BTLOG_UART_READ__enum,
    BTLOG_UART_WRITE__enum,
    BTLOG_ME_EVENT_STATUS__enum,
    BTLOG_OPEN_DRIVE_FAILED__enum,
    BTLOG_BT_ALREADY_POWERED_ON__enum,
    BTLOG_CREATE_CONNECTION_CLOCK_OFFSET_SR_MODE__enum,

    BT_PANIC_MESSAGE1__enum,
    BT_PANIC_MESSAGE2__enum,
    BT_PANIC_MESSAGE3__enum,
    BT_PANIC_MESSAGE4__enum,
    BT_PANIC_MESSAGE5__enum,
    BT_PANIC_MESSAGE6__enum,
    BT_PANIC_MESSAGE7__enum,
    BT_IN_SCO_CONNECT_REQ_NO_ROLE_SWITCH__enum,
    BT_IN_ROLE_SWITCH_NO_SCO__enum,

    BTLOG_BTCALL_GAPTESTERCREATECHANNEL__enum,
    BTLOG_BTCALL_AVDT_RE_CONFIGURATION_RSP__enum,
    BTLOG_BTROLE_SWITCH_NOT_SUPPORTED__enum,
    BTLOG_BTROLE_SWITCH_WAIT_AUTHENTICATED__enum,
    BTLOG_BTCALL_AVDT_CLOSE_RSP__enum,
    BTLOG_BTBTBMHANDLEENCRYPTIONCFM_SWITCHSTATE_BT_DEBUGx02X__enum,
    BTLOG_BTBTBMHANDLEENCRYPTIONCFM_SWITCHSTATE_x02X__enum,
    BTLOG_AVRCP_COULDNT_SEND_COMMAND__enum,
    BTLOG_BTCALL_GAPTESTERGENERALDISCOVERABLEMODE__enum,
    BTLOG_BTCALL_RFCOMMTESTERINIT__enum,
    BTLOG_BTCALL_L2CAPTESTERINIT__enum,
    BTLOG_BTCALL_AVDT_OPEN_REQ__enum,
    BTLOG_BTCALL_GAPTESTERINIT__enum,
    BTLOG_BTCALL_SDPTESTERINIT__enum,
    BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE__enum,
    BTLOG_BTCALL_GAPTESTERLIMITEDDISCOVERABLEMODE__enum,
    BTLOG_BTBTBM_MODE_AS_MASTER__enum,
    BTLOG_BTLOG_BTWIFICPTA_CMD_WAIT_0__enum,
    BTLOG_BTCALL_RFCOMMTESTEROPENCLIENTCHANNEL__enum,
    BTLOG_BTCALL_RFCOMMTESTERSENDPN__enum,
    BTLOG_BTROLE_SWITCH_ON_THE_OPLIST_REUTRN__enum,
    BTLOG_BTSTART_SNIFF_REQ_OP_ON_THE_LIST_RETURN__enum,
    BTLOG_BTSTART_QOS_OP_ON_THE_LIST_RETURN__enum,
    BTLOG_ME_SETUP_QOS__enum,
    BTLOG_ME_SETUP_QOS_AFTER_ROLE_SWITCH__enum,
    BTLOG_BTCALL_GAPTESTERNONPAIRABLE__enum,
    BTLOG_BTCALL_L2CA_DISCONNECTREQ__enum,
    BTLOG_BTMTKBMCBM_OPACTIVITYxD_CAN_NOT_CHANGE_TO_NORMAL__enum,
    BTLOG_BTCALL_GAPTESTERSECURITYLEVEL3__enum,
    BTLOG_BTACL_AND_SCO_REMDEV__0__enum,
    BTLOG_BTCALL_RFCOMMTESTERSENDMSC__enum,
    BTLOG_BTSDP_QUERY_QUERY_BT_STATUS_PENDING__enum,
    BTLOG_BTCALL_AVDT_READ_DATA__enum,
    BTLOG_BTCALL_GAPTESTERNONDISCOVERABLEMODE__enum,
    BTLOG_BTBTBM_DO_SEC_SETLINKENCRYPTION_STATUSBT_DEBUGx02X__enum,
    BTLOG_BTCALL_AVDT_CONNECTREQ__enum,
    BTLOG_BTDEVICE_IS_SLAVE_AND_CONNECTED__enum,
    BTLOG_BTCALL_AVDT_RECONFIGURE_REQ__enum,
    BTLOG_BTCALL_RFCOMMTESTERDATAREQ__enum,
    BTLOG_BTCALL_GAPTESTERNONCONNECTABLEMODE__enum,
    BTLOG_BTMT6601_SPECIAL_CONNECTION_PROCEDURE__enum,
    BTLOG_BTCALL_GAPTESTERCONNECTABLEMODE__enum,
    BTLOG_BTVALUE0BT_DEBUGx02XVALUE1BT_DEBUGx02X__enum,
    BTLOG_RESTART_CONNECTTIMER__enum,
    BTLOG_BTLOG_MAKE_THE_PTA_ON__enum,
    BTLOG_BTGAPTESTERDELETELINKKEY__enum,
    BTLOG_BTCALL_AVDT_SET_CONFIGURATION_REQ__enum,
    BTLOG_BTTIMEOUT_TIMERFIRED__enum,
    BTLOG_BTWRITESCAN_MODE_OPERATION_FAILEDBT_DEBUGx02X__enum,
    BTLOG_BTCALL_AVDT_ABORT_REQ__enum,
    BTLOG_BTSDP_QUERY_QUERY_BT_STATUS_FAILED_xD__enum,
    BTLOG_BTCALL_RFCOMMTESTERCLOSECHANNEL__enum,
    BTLOG_BTROLE_SWITCH_SUPPORTED__enum,
    BTLOG_BTINQUIRY_CANCEL_BM_OPACTIVITYBT_DEBUGx02X__enum,
    BTLOG_CONNECTION_REJECT_WHEN_WE_CONNECT_TIMER_START_AND_REMOTE_DEVICE_WANTS_TO_CONNECT_US__enum,
    BTLOG_BTCOMMAND_COMPLETE_OF_PCM_LOOPBACK__enum,
    BTLOG_BTLOG_BTWIFICREF_COUNTxD__enum,
    BTLOG_CANCELx08X__enum,
    BTLOG_BTINQUIRY_CANCEL_WHEN_NAME_TIMER_RUNNING__enum,
    BTLOG_BTCALL_GAPTESTERPAIRABLE__enum,
    BTLOG_AVRCP_COULDNT_SEND_RESPONSE__enum,
    BTLOG_BTWE_SHALL_START_PIN_IND_TIMER__enum,
    BTLOG_BTCALL_L2CAPSENDDATA__enum,
    BTLOG_BTCALL_GAPTESTERSECURITYLEVEL1__enum,
    BTLOG_BTCALL_GAPTESTERDEVICEDISCOVERY__enum,
    BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE_ERRORBT_DEBUGx02X__enum,
    BTLOG_BTDONT_WAIT_MMI_CONNECT_RSP_REJECT_NEW_CONENCTION__enum,
    BTLOG_SUPPORTED_FEATUREBT_DEBUGx02X_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    BTLOG_BTBTBMHANDLEROLESWITCHCFM_SWITCHSTATE_BT_DEBUGx02X__enum,
    BTLOG_BTCALL_BTTESTER_SENDMSG__enum,
    BTLOG_BTCALL_AVDT_GET_CAPABILITIES_RSP__enum,
    BTLOG_BTCALL_AVDT_SUSPEND_RSP__enum,
    BTLOG_BTLOG_BTWIFICAFH_CMD_WAIT_0__enum,
    BTLOG_BTLOG_PTA_CHANNEL_IS_CALLED__enum,
    BTLOG_BTCONN_STATUSBT_DEBUGx02X__enum,
    BTLOG_BTDO_SNIFFER_REQUEST__enum,
    BTLOG_BTCALL_AVDT_CLOSE_REQ__enum,
    BTLOG_BTCALL_L2CA_INFOREQ__enum,
    BTLOG_BTBTBMNAMEPROCEDURETIMEOUT__enum,
    BTLOG_BTCALL_L2CA_CONNECTREQ__enum,
    BTLOG_BTCALL_GAPTESTERBONDING__enum,
    BTLOG_BTCALL_AVDT_WRITE_DATA__enum,
    BTLOG_BTBTBM_ENCRYPTION_CHANGE_TO_ON__enum,
    BTLOG_BTCALL_AVDT_SUSPEND_REQ__enum,
    BTLOG_BTSTILL_WAIT_FOR_CONNECTION_COMPLETE_EVENT__enum,
    BTLOG_BTCALL_L2CA_ECHOREQ__enum,
    BTLOG_AVRCP_INVALID_RESPONSE_CODE_xD_CHANGING_TO_REJECTED__enum,
    BTLOG_BTINQUIRY_CANCEL_WHEN_INQUIRY_PREPROCESS_TIMER_RUNNING__enum,
    BTLOG_BTCOMMAND_COMPLETE_OF_PTA__enum,
    BTLOG_BTCALL_RFCOMMTESTEROPENSERVER__enum,
    BTLOG_BTCALL_AVDT_SET_CONFIGURATION_RSP__enum,
    BTLOG_BTCALL_AVDT_GET_CAPABILITIES_REQ__enum,
    BTLOG_BTBTBM_DO_ROLE_SWITCH__enum,
    BTLOG_BTBTBM_ENCRYPTION_CHANGE_TO_OFF__enum,
    BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE_EVENT_COMPLETED__enum,
    BTLOG_BTBTBMSTARTSPECIALSLAVEPROCEDURE__enum,
    BTLOG_BTCALL_RFCOMMTESTERRLS__enum,
    BTLOG_BTCALL_AVDT_START_RSP__enum,
    BTLOG_BTRETURN_CON_IDxD__enum,
    BTLOG_NOT_READY__enum,
    BTLOG_MODE_CHANGE_STATUSBT_DEBUGx02X__enum,
    BTLOG_BTMTKBMCBM_OPACTIVITYxD__enum,
    BTLOG_BTGIVE_CON_IDxD__enum,
    BTLOG_BTCALL_AVDT_DISCONNECTSIGNAL_REQ__enum,
    BTLOG_BTDO_ROLE_SWITCH_WITH_FEATUREBT_DEBUGx02X__enum,
    BTLOG_BTMASTER_NUMBERxDSLAVE_NUMBERxD__enum,
    BTLOG_REMDEVCONNECTCOUNTERxD__enum,
    BTLOG_BTSTATUSBT_DEBUGx02X_ENCRPSTATEBT_DEBUGx02XAUTHSTATE_BT_DEBUGx02X__enum,
    BTLOG_BTCOMMAND_COMPLETE_OF_AFH__enum,
    BTLOG_BTCOMMAND_COMPLETE_OF_PTA_CHANNEL_INFO__enum,
    BTLOG_BTLINKOLDENCRYPTIONMODE_2BT_DEBUGx02X__enum,
    BTLOG_STARTx08X__enum,
    BTLOG_READ_REMOTE_SUPPORTED_FEATURE_FAILEDBT_DEBUGx02X__enum,
    BTLOG_BTSDAPPROGRESSxD__enum,
    BTLOG_MAKE_CREATION_CONNECTION__enum,
    BTLOG_BTCALL_AVDT_GET_CAPABILITIES_LONG_RSP__enum,
    BTLOG_BTCALL_GAPTESTERLIMITEDINQUIRY__enum,
    BTLOG_BTBTBMINQUIRYPROCEDURETIMEOUT__enum,
    BTLOG_BTCONNECTION_IS_NOT_EXISTING_OR_BD_ADDR_IS_NOT_THE_SAME__enum,
    BTLOG_BTDO_ROLE_SWITCH__enum,
    BTLOG_BTCALL_AVDTPTESTERINIT__enum,
    BTLOG_BTSDAP_STATUSBT_DEBUGx02X__enum,
    BTLOG_BTCALL_GAPTESTERSECURITYLEVEL2__enum,
    BTLOG_BTCALL_GAPTESTERGENERALINQUIRY__enum,
    BTLOG_DEVICE_IN_NOT_DISCONNECT_MODE_IGNORE_IT__enum,
    BTLOG_BTCALL_AVDT_DISCOVER_RSP__enum,
    BTLOG_BTCALL_AVDT_DISCOVER_REQ__enum,
    BTLOG_BTBTBM_DO_ROLE_SWITCH_STATUSBT_DEBUGx02X__enum,
    BTLOG_BTLINKENCRYPTSTATE_OLD_1BT_DEBUGx02X__enum,
    BTLOG_BTBTBMSPECIALSLAVEPROCEDURE__enum,
    BTLOG_BTCMD_STATUSBT_DEBUGx02X__enum,
    BTLOG_BTBTBM_MODE_AS_SLAVE__enum,
    BTLOG_BTCALL_AVDT_ABORT_RSP__enum,
    BTLOG_BTCALL_AVDT_OPEN_RSP__enum,
    BTLOG_BTCALL_AVDT_START_REQ__enum,
    BTLOG_CONNECTCOUNTER_EXCEEDS_THRESHOULD__enum,
    BTLOG_BTLINKSWITCHSTATEBT_DEBUGx02X__enum,
    BTLOG_BTWRITESCAN_MODE_OPERATION_IS_NOT_MATCH_REDO_AGAIN__enum,
    BTLOG_MECHECKDEVICESTATENOTIDLE_CHECK_CURRENT_MODE__enum,
    BTLOG_BTBTBMHANDLEPINREQTIMEOUT__enum,
    BTLOG_READ_REMOTE_SUPPORTED_FEATURE_SUCCESSBT_DEBUGx04X__enum,
    BTLOG_BTCALL_GAPTESTERCREATEACLLINK__enum,
    BTTLOG_DISCONNECT_EVENT__enum,
    BTTLOG_CON_HDL_PACKET_SENT__enum,
    BTTLOG_CON_HDL_TX_LEFT__enum,
    BTTLOG_CON_HDL_TX_STATUS__enum,
    BTTLOG_CON_HDL_COMP_STATUS__enum,
    BTTLOG_CON_HDL_COMP_STATUS1__enum,
    L2CAP_Free_Open_Timer_Case2_org_discLevel_then_Disc_Link__enum,
    L2CAP_Free_Open_Timer_Case2_keep_50S_then_Disc_Link__enum,
    L2CAP_DiscAclLink_with_discFlag__enum,

    WRITE_SUPERVISION_TIMEOUT__enum,
    CHNLTXSTATEBT_DEBUGx02X__enum,
    WAIT_CONECTION_ACP_RSPBT_DEBUGx02X__enum,
    DISCONNECT_SCO_WITH_ERROR_NO_CONNECTION__enum,
    NO_BTACCCTRLCHECKPSMPOLICY__enum,
    THE_LINK_STATEBT_DEBUGx02X__enum,
    WHITTEN_COMPLETED_PARM3BT_DEBUGx02X__enum,
    UATRAN_EVENT_PARAMETER_LENGTH__xD__enum,
    START_SERVICE_DISCOVERY_SSA_COMMAND_BT_DEBUGx02X__enum,
    CHANNEL_DISCONNECT_COMPLETED__enum,
    CONNMGR_BTEVENT_MODE_CHANGE__enum,
    MSG_ID_BT_BM_DISCOVERY_CNF_TRC__enum,
    UATRAN_NO_SCO_RECEIVER_BUFFER_AVAILABLE__enum,
    FAKESIM_RECEIVES_BT_SIM_RESET_REQ_DUE_TO_POWERON__enum,
    CLEAR_MUX_FLAG_XMIT_FLAG3__enum,
    CHECK_FTP_POLICY__enum,
    USBTRAN_EVENT_BUFFER_NOW_AVAILABLE__enum,
    RETURN_STATUSBT_DEBUGx04X__enum,
    OPCODEBT_DEBUGx04X__enum,
    SEND_CONTINUE_CHNL_STATE_IS_AVTP_TRANS_STATE_FIRST__enum,
    TRANS_NO_EVENT_BUFFERS__enum,
    RETURN_STATUSx08X__enum,
    JSR82_SESSION_TX_1_DATA__enum,
    NO_PREVIOUS_NAME_REQUEST_ON_GOING_JUST_DO_IT__enum,
    ITEMBT_DEBUGx02X__enum,
    NO_SIGNAL_PKT1__enum,
    LOOPBACK_MODE_COMPLETED__enum,
    WRITE_SUPERVISIONTIMEOUT__enum,
    VERSION_COMPLETEDBT_DEBUGx02X__enum,
    FIND_JSR82_CHANNEL_BT_DEBUGx02X__enum,
    START_SERVICE_DISCOVERY_SS_COMMAND_BT_DEBUGx02X__enum,
    BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    ACL_IN_BONDING__enum,
    INQUIRY_INTERVAL_TIMEOUT__enum,
    INQUIRY_DUAL_INTERVAL_TIMEOUT__enum,
    STOPPED_TO_TEST_THE_BTBB_TEST__enum,
    MTKBMCHID_BROADCOM_IOT_ROLE_SWITCHBT_DEBUGx02X__enum,
    START_INQUIRY_CANCEL_COMMAND_BT_DEBUGx02X__enum,
    ABCSP_PANIC_xD__enum,
    ONE_SCO_IN_CON__enum,
    REQUEST_ACTIVE_LINK_NAME_TIMER_TIMEOUT__enum,
    HID_SET_MODEBT_DEBUGx02X__enum,
    BT_CHIP_VERSIONBT_DEBUGx02X__enum,
    FAKESIM_RECEIVES_BT_SIM_RESET_REQ__enum,
    NO_MATCH_BLUETOOTH_ADDRESS__enum,
    SENDRAWPACKETA__enum,
    CHECK_OPP_POLICY__enum,
    MSG_ID_BT_BM_SEARCH_RAW_RESULT_TRC__enum,
    BTACCCTRLCHECKSERVICEPOLICY_DENY__enum,
    RFMDCMD_HCC_CHANGEBAUDRATE_TO_xD__enum,
    FAKESIM_RECEIVES_BT_SIM_APDU_REQ__enum,
    BLACKLIST_SEARCHED__enum,
    MTKBMCINQUIRY_TIMERFUNC__0__enum,
    SNIFFER_TIMER_SHALL_REOPEN__enum,
    REMOTE_VERSION__enum,
    INQUIRY_START__enum,
    TRY_TO_OPEN_RFCOMM_CHANNEL__enum,
    MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF_TRC__enum,
    UATRAN_UARTSLEEP_CNT_xD__enum,
    INQUIRY_IN_GUIDE_TIME__enum,
    DEVICE_WIREVO__enum,
    RETURN_FROM_RFSENDDATAINTERNALSTATUSxD_ON_DLCIxD__enum,
    TRANS_NO_ACL_BUFFERS__enum,
    NEW_LINK_AND_STORED_LINK_IS_NOT_THE_SAME__enum,
    MECBTCHIPVERxD__enum,
    REGISTRATION_STATUSBT_DEBUGx02X__enum,
    BT_JSR82_SESSIONAPCONNECTRSP__enum,
    TRANS_SHUTDOWN__enum,
    COMMAND_STATUS_EVENT_WITH_OPCODE_FCF1__enum,
    AVTP_SENDCONTINUEBT_DEBUGx02X__enum,
    MTKACCCTLCACCLINK__0__enum,
    AVDTP_HDL_CMDBT_DEBUGx02X__enum,
    BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    NO_BTACCCTRLCHECKCONNECTPOLICY__enum,
    BTACCCTRLDISALLOWDEVICEALLSERVICE__enum,
    REQUEST_ACTIVE_LINK_NAME_TIMER_STOP__enum,
    L2CAP_RX_DATA_IND__enum,
    START_SERVICE_DISCOVERY_SA_COMMAND_BT_DEBUGx02X__enum,
    NO_SIGNAL_PKT4__enum,
    BT_JSR82_SESSIONAPCONNECTINDEVENT__enum,
    IN_THIS_MODE_TEST_SAP_WITHOUT_SNIFF_MODE_SUPPORT__enum,
    CURRENT_TX_STREAM_IS_NOT_IDLE__enum,
    JSR82_NO_EMPTY_CHANNEL__enum,
    BT_JSR82_CONNECT_IND_SIZEBT_DEBUGx02X__enum,
    DISCONNECT_SCO_WITH_ERROR_BEC_INVALID_HCI_PARM__enum,
    TRANS_USB_COULD_NOT_WRITE_DATA__enum,
    FAKESIM_RECEIVES_BT_SIM_DISCONNECT_REQ__enum,
    IN_RF_SENDDATA_DATA_SENT_ON_DLCIxD_PKTINTRANSITxD__enum,
    RFCOMM_CLIENT__enum,
    MTKBMCNAME_CANCEL_TIMERFUNC__0__enum,
    BT_JSR82_ENABLE_SERVICE_REQ_SIZEBT_DEBUGx02X__enum,
    MEHANDLEACLCONCOMPLETE__enum,
    INQUIRY_RETRIEVEDEV__enum,
    ACL_IN_NORMAL__enum,
    OPEN_CHANNEL_FAILED__enum,
    ALLOWED_SERVICEx08X__enum,
    MSG_ID_BT_JSR82_CONNECT_REQ_TRC__enum,
    MECBTLMPVERxD__enum,
    REMOTE_NAME_CANCEL_SUCCESS__enum,
    REMOTE_NAME_CANCEL_PENDING__enum,
    SESSION_CREATE_FAILED__enum,
    BDADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    CURRENT_LINK_STATEBT_DEBUGx02X__enum,
    RFMDCMD_HCC_RESET__enum,
    HANDLE_SCOHANDLELINKCONNECTREQ_ERROR__enum,
    BD_ADDR_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    SEC_LEVEL_TYPExD_SEC_LEVELxD__enum,
    THE_INPUT_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    MSG_ID_BT_BM_SEARCH_RAW_CNF_TRC__enum,
    STATUS_APDU_AND_P3_LENBT_DEBUGx02X__enum,
    ENTER_SNIFF_MODE__enum,
    IN_RFAPPCALLBACK_PACKETSINTRANSITxD__enum,
    BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X_IN_STATE__enum,
    BTACCCTRLALLOWDEVICEALLSERVICE__enum,
    TRAN_INIT_STARTED__enum,
    RFEVENT_CLOSE_IND_TRC__enum,
    CHANNEL_OPENED__enum,
    BTBMHANDLERINQUIRYINTERVALPROCEDURE__enum,
    BTJ82SEAPSESSIONINDEXPS_TYPEBT_DEBUGx02X__enum,
    BTBBTESTSPPCALLBACKFUNC_BT_DEBUGx02X__enum,
    AVTP_EVENT_TX_ERROR_TRC__enum,
    BTACCCTRLSET_ALLOWEDPSMxDALLOWEDSERVICExD__enum,
    RESULT_VALUEBT_DEBUGx02X__enum,
    BT_CODx08X__enum,
    IN_RFMUXCHECKTXQUEUESPACKETSINTRANSITxD__enum,
    AUDIO_LINK_TYPEBT_DEBUGx02X__enum,
    CANCELLING_STATE_IGNORE_THE_RESULT__enum,
    MSG_ID_BT_JSR82_CONNECT_RSP_TRC__enum,
    BTBBTESTITEM_RESULTBT_DEBUGx02X__enum,
    START_INQUIRY_COMPLETED_COMMAND_BT_DEBUGx02X__enum,
    GAPTESTER_SET_FILTER_COD_TO_0XFFFFFFFF__enum,
    MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ_TRC__enum,
    USBTRAN_SCO_BUFFER_NOW_AVAILABLE__enum,
    RFMDCMD_HCC_WRITENVRAMDATA__enum,
    RX_DATA_EXCEED_ACCEPTABLE_VALUEBT_DEBUGx04X__enum,
    REGISTRATION_SECURITY_RECORD_STATUSBT_DEBUGx02X__enum,
    NO_A2DP_DATA_STREAMMING__enum,
    REJECT_OP_ENTRY_IS_NOT_AVAILABLEBT_DEBUGx02X__enum,
    SET_PIN_CODE_RSP_TIMEOUT_VALUE__enum,
    RFAPPCALLBACKPKT_ON_DLCIxD_RETURNED_WITH_STATUSxDCALL_RFMUXCHECKTXQUEUES__enum,
    BROADCOM_CHIP_HID_EXIST_NO_ROLE_SWITCH__enum,
    INQUIY_TIME_INTERVALxD__enum,
    ONE_SCO_OUT_CON2__enum,

    CHECK_SPPDUNLAN_POLICY__enum,
    BT_JSR82_SESSIONAPCONNECTCFNEVENT__enum,
    IN_MEHANDLELINKREJECTOPMECPENDCONSxD__enum,
    DISCOVERY_DATA_SIZExD_WITH_RESULTBT_DEBUGx02X__enum,
    AVDTP_RX_ABORT_CMD_WITH_NO_VALID_STREAM_IDxD__enum,
    L2CAP_ID_BT_DEBUGx04X__enum,
    RESULT_BT_DEBUGx02X__enum,
    LENGTH_BT_DEBUGx02X__enum,
    ALREADY_MASTER__enum,
    L2CAP_SERVER__enum,
    APDU_TYPEBT_DEBUGx02X__enum,
    FIND_MAIN_IDENTIFIER__enum,
    CHANNEL_BT_DEBUGx04X__enum,
    UNKNOWN_RESPONSE__enum,
    DO_SERVICE_SEARCH__enum,
    MSG_ID_BT_JSR82_CONNECT_IND_TRC__enum,
    L2CAP_CREATE_COMPLETED__enum,
    CLEAR_MUX_FLAG_XMIT_FLAG1__enum,
    UATRAN_PASSING_UP_xD_BYTES__enum,
    THE_CMP_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    GAPTESTER_SET_DISCOVERY_WITHOUT_NAME_MODE__enum,
    CURRENT_DATA_SIZExD__enum,
    UATRAN_CONTROLLER_MAY_ENTER_SLEEP_MODE__enum,
    JSR82_SESSION_ENABLED_SERVICE__enum,
    RADIO_WAKEUP_COMPLETED__enum,
    JSR82_NO_MAIN_CHANNEL__enum,
    INQUIRY_CANCEL_COMPLETED__enum,
    ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    NEXT_START_TIMEx08X__enum,
    BTACCCTRLCHECKPSMPOLICY_SHALL_CHECK_POLICY__enum,
    UATRAN_SCO_DATA_LENGTH__xD__enum,
    SDAP_FAILED_REMOVE_LINK__enum,
    RECV_TXCREDIT_NEW_TXCREDITxD_CALL_RFMUXCHECKTXQUEUES__enum,
    TRY_TO_OPEN_L2CAP_CHANNEL__enum,
    REMOTE_NAME_REQUEST_STATUSBT_DEBUGx02X__enum,
    REQUEST_ACTIVE_LINK_NAME_TIMER_STARTx08X__enum,
    CONNMGRCHECKSTARTSNIFFTIMER__enum,
    MSG_ID_BT_BM_DISCOVERY_RESULT_IND_TRC__enum,
    INQUIRY_IDLE_TIMER_CALLBACK_FUNCTION_IS_NOT_0__enum,
    IN_MEHANDLELINKCONNECTOP2ND_MECPENDCONSxD__enum,
    INQUIRY_AFTER_120_SECONDS_NOT_COMPLETED__enum,
    PTR_LOCAL_CIDBT_DEBUGx04X__enum,
    LINK_SUPERVISION_TIMEOUTBT_DEBUGx04X__enum,
    ROLE_SWITCH_PERFORM_RETURN_DIRECTLY__enum,
    STRINGBT_DEBUGx02XBT_DEBUGx02X__enum,
    MSG_ID_BT_JSR82_DISCONNECT_IND_TRC__enum,
    NO_SIGNAL_PKT2__enum,
    AVDTP_HDL_REJBT_DEBUGx02X__enum,
    L2CAP_CLIENT__enum,
    SET_AS_SLOW_CONNECT_MODE__enum,
    IN_MEHANDLELINKACCEPTOPMECPENDCONSxD__enum,
    SNIFFER_TIMER_RESTART_AGAIN__enum,
    MTU_BT_DEBUGx04X__enum,
    TRY_TO_OPEN_SCO_LINK__enum,
    SET_AS_FAST_CONNECT_MODE__enum,
    MAKE_REMOTE_NAME_REQUEST_CANCEL_COMMAND__enum,
    RX_BUFFER_IS_FULL__enum,
    RFMDNTF_HCC_RESET3500__enum,
    INQUIRY_CANCEL_BUT_THE_NAME_TOKEN_SHALL_REQUEST_AGAIN__enum,
    BT_JSR82_CONNECT_CFN_SIZEBT_DEBUGx02X__enum,
    DEVICE_WITH_NAME__enum,
    NO_BTACCCTRLCHECKSERVICEPOLICY__enum,
    RX_DATA_NOT_EQUAL__enum,
    TIME_INTERVALx08X__enum,
    TEMP_INQUIRY_LENGTHxD__enum,
    REJECT_OP_WITH_THE_SAME_ADDR__enum,
    BT_JSR82_CMGRCLIENTCALLBACK_NOT_THE_CONNECT_BD_ADDR__enum,
    CHANGE_TO_UT_MODE__enum,
    BT_JSR82_SESSIONAPDISABLERESULTEVENT__enum,
    SIMULATE_SIM_CLIENT_SENDS_CONNECT_REQ_AND_TEST_MODExD__enum,
    RADIO_WAKEUP_TIMER__3__enum,
    RFMDEVT_HCC_WRITENVRAMDATA__enum,
    ONE_SCO_IN_CONNECTED__enum,
    CHECK_HS_AG_POLICY__enum,
    JSR82_SESSION_DISCONNECT_SERVICE__enum,
    JSR82_EMPTY_CHANNEL_FIND__enum,
    NO_NAME_REQUEST_COMPLETE_EVENT_MAKE_NAME_CANCEL_COMMAND__enum,
    ACL_LINK_EXISTS_MAY_DUE_TO_AFTER_BONDING_PROCEDURE_THEN_CONNECT_SPP_IMMEDIATELY_SET_DISCFLAG_AS_FALSE__enum,
    DEVICE_IN_DATABASE_BT_DEBUGx02X__enum,
    LINK_NO_BT_DEBUGx02X__enum,
    NAME_CALLBACK_REMOVE_MTKBMCNAME_CANCEL_TIMERFUNC__enum,
    NODE_STILL_IN_THE_OPLIST__enum,
    RECORD_INDEXBT_DEBUGx02XBT_DEBUGx02X__enum,
    UATRAN_HCI_COMMAND_WAS_NOT_ACKNOWLEDGED_WITH_AN_EVENT__enum,
    LINK_NUMBER_NOT_IN_DISCONNECTED_STATEBT_DEBUGx02X__enum,
    THE_INDEXBT_DEBUGx02X__enum,
    POWER_CONTROL_COMPLETED__enum,
    UATRAN_ACL_DATA_LENGTH__xD__enum,
    SET_MTKACCCTLCACCLINK__enum,
    CHECK_SIMAP_POLICY__enum,
    START_INQUIRY_COMMAND_BT_DEBUGx02X__enum,
    UATRAN_NO_EVENT_RECEIVER_BUFFER_AVAILABLE__enum,
    RFCOMM_LAYER_FOR_INCOMING_CONNECTION_EXEC_SERVICE_LEVEL_SECURITY__enum,
    HOST_WAKEUP_COMPLETED__enum,
    WAKUP_OPCODE_BT_DEBUGx04X__enum,
    BDADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    CANCELLING_STATE_SHOW_FAILED__enum,
    SESSION_CREATE_COMPLETED__enum,
    BTACCCTRLCHECKCONNECTPOLICY_DENY__enum,
    JSR82_SESSION_TX_2_DATA__enum,
    THE_AUTHENTICATION_STATUSBT_DEBUGx02X__enum,
    THE_INPUT_SERV_CHNLBT_DEBUGx02X__enum,
    BTEVENT_AUTHENTICATE_CNF_TRC__enum,
    USBTRAN_ACL_BUFFER_NOW_AVAILABLE__enum,
    TRANS_NO_SCO_BUFFERS__enum,
    BT_JSR82_HANDLESESSIONAPENABLESERVICE__enum,
    SCOCON_IS_ZERO__enum,
    BT_JSR82_DISABLE_SERVICE_REQ_SIZEBT_DEBUGx02X__enum,
    REJECT_OP_IS_NOT_EMPTY__enum,
    IN_MEHANDLELINKACCEPTOP2ND_MECPENDCONSxD__enum,
    BTBBTESTITEMBT_DEBUGx02X__enum,
    REQ_NAMEBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    MECPENDCONS_0__enum,
    WRITE_MODE_BT_DEBUGx02X__enum,
    MTKACCCTLCACCCTRLSETBT_DEBUGx02X__enum,
    CLEAR_MUX_FLAG_XMIT_FLAG2__enum,
    RFMDCMD_HCC_RESET3500__enum,
    NO_AVAILABLE_REMDEV__enum,
    EMPTY_REMDEV__enum,
    FAKESIM_RECEIVES_BT_SIM_CONNECT_REQ__enum,
    BDADDRx08Xx08Xx08X__enum,
    CURRENT_TX_STREAM_STATEBT_DEBUGx02X__enum,
    CURRENT_MODE_BT_DEBUGx02XERROR_CODEBT_DEBUGx02X__enum,
    IF_RADIO_WAKEUP_NO_RESPONSE_WE_WILL_GEN_A_FAKE_EVENT_AND_TRY_TO_WAKEUP_AGAIN__enum,
    RSP_RESULT_BT_DEBUGx02X__enum,
    OPEN_RFCOMM_CHANNEL_FAILED__enum,
    RFMDEVT_HCC_CHANGEBAUDRATEBT_DEBUGx02X__enum,
    CONNMGRSNIFFTIMEOUTHANDLER__enum,
    IN_MEHANDLELINKCONNECTOPMECPENDCONSxD__enum,
    INQUIRY_IDLE_TIMER_TIMEOUT__enum,
    BT_JSR82_CMGRSERVERCALLBACK__enum,
    CON_HDLBT_DEBUGx02X_RX_DATA_LEN_xD__enum,
    AVDTP_HDL_RSPBT_DEBUGx02X__enum,
    IN_RFMUXCHECKNEXTTXQUEUES_PACKETSINTRANSITxD_ON_DLCIxD__enum,
    RFCOMM_CREATE_COMPLETED__enum,
    IN_MEHANDLELINKREJECTOP2ND_MECPENDCONSxD__enum,
    HFP_AUTO_DISCONNECT_BLACK_LISTxD__enum,
    L2CAP_OPEN_CHANNEL_FAILED__enum,
    CON_IDBT_DEBUGx02X__enum,
    RFCOMM_OPEN_CHANNEL_FAILED__enum,
    NOT_GOOBALHANDLER__enum,
    NAME_LENx08X__enum,
    IN_RF_SENDDATA_CALL_RFMUXCHECKTXQUEUES__enum,
    NO_SIGNAL_PKT3__enum,
    HID_ROLE_STATEBT_DEBUGx02X__enum,
    GAPTESTER_SET_DISCOVERY_WITH_NAME_MODE__enum,
    REJECT_OP_IN_LIST_REMOTE_THE_REJECT_OP_FROM_LIST__enum,
    LINK_REJECTBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    CHECK_LINKBT_DEBUGx02X__enum,
    STRINGBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    RECV_SET_PIN_CODE_RSP_TIMEOUT_VALUE_WITH_ERR0__enum,
    BLACKLIST_x0D__enum,
    LINK_SUPERVISION_HDLBT_DEBUGx02X__enum,
    UATRAN_HOST_IS_READY_TO_ENTER_SLEEP_MODE__enum,
    CHECK_RFCOMM_TESTER_POLICY__enum,
    TX_DATA_COMPLETED__enum,
    RFCOMM_SERVER__enum,
    BTACCCTRLUNSET__enum,
    PREVIOUS_NAME_REQUEST_ON_GOING_CANCEL_IT__enum,
    FAKESIM_RECEIVES_BT_SIM_RESET_REQ_DUE_TO_SET_TRANSPORT_PRO_TYPE__enum,
    SET_SPP_TX_SIZE_xD__enum,
    DURING_PAIRING_NOT_ALLOW_ROLE_SWITCH__enum,
    SELECT_APDU_AND_FILE_IDBT_DEBUGx02X_BT_DEBUGx02X__enum,
    RX_DATA_IND__enum,
    PTR1_STATUS_IDLE_RETURN_DIRECTLY__enum,
    BT_JSR82_SESSIONAPDISCONNECTINDEVENT__enum,
    GET_RESPONSE_APDU_AND_P3_LENBT_DEBUGx02X__enum,
    CHECK_FAX_POLICY__enum,
    THE_TIMER_LOOKS_LIKE_SOME_ERRORS__enum,
    UATRAN_NO_ACL_RECEIVER_BUFFER_AVAILABLE__enum,
    BTBMCHECKBONDINGSTATEWHENDISCONNECTEDBT_DEBUGx02X__enum,
    WRITE_BT_CODx08X__enum,
    GAPTESTER_SET_FILTER_CODBT_DEBUGx04X__enum,
    SET_SPP_TIMER_xD__enum,
    CHARxDBT_DEBUGx02X__enum,
    CANCEL_REMOTE_NAME_OPERATION__enum,
    R_VERSION_BT_DEBUGx02X__enum,
    L2CAP_ID_BT_DEBUGx02X__enum,
    INQUIRY_CANCEL__enum,
    IDENTIFY_BT_DEBUGx02X__enum,
    IN_MEHANDLELINKREJECTOPIN_REJECTMECPENDCONSxD__enum,
    INQUIRY_COMPLETED__enum,
    THE_INPUT_PSMBT_DEBUGx04X__enum,
    IN_BTBMGAPSETAUTHENTICATION_FORCE_TO_LEVEL_3_WITH_ENCRYPTION_OFF__enum,
    BUFFER_SIZExD__enum,
    JSR82_SESSION_DISABLE_SERVICE__enum,
    SENDRAWPACKETB__enum,
    CHECK_HS_GW_POLICY__enum,
    AVDTP_STREAMSENDRAWPACKETBT_DEBUGx02X__enum,
    FAKESIM_RECEIVES_BT_SIM_POWEROFF_REQ__enum,
    PS_TYPE_BT_DEBUGx02X__enum,
    RF_TEST_COMMAND_COMPLETED__enum,
    NO_UPF_FILE__enum,
    WAIT_FOR_LINK_CONNECT_CNF_OF_THIS_SPP_CLIENT_CREATE_ACL__enum,
    HFG_EVENT_REPORT_MIC_VOLUME_TRC__enum,
    PIPE_xD_RESET__enum,
    UART_SETTING_SPEED_TO_xD__enum,
    IN_SPPQUERYCALLBACK_CALL_SPPCONNECT_FAILED_STATUSxD__enum,
    RECV_DEACTIVE_REQ_CONNECTING_IS_INCOMING_BUT_NOT_READY_TO_BE_CONNECTED_TO_NOFITY_SIMSERVER__enum,
    SENDING_HANDSHAKE_PACKET__enum,
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERAPDURSP_FAILED_IS_OK__enum,
    HS_OPEN_SCOL__enum,
    GETPRINTERATTR_SOAP_REQUEST__BPP_SOAP_BUFF_SIZE__enum,
    WE_SHALL_CHECK_THE_PTA_COMMAND__enum,
    UART_WROTE_xD_BYTES__enum,
    BT_RFTEST_OP_TXRX_TEST_TRC__enum,
    HS_CLOSE_SCOL__enum,
    SIMSERVERS_TEST_MODExD__enum,
    HFG_EVENT_AUDIO_DISCONNECTED_TRC__enum,
    SPPCLIENT_RECV_DISCONNECT_REQ_AND_WAIT_FOR_RF_CLOSED_EVENT__enum,
    HFG_EVENT_GET_LAST_VOICE_TAG_TRC__enum,
    SIMULATE_APP_WRITE_FIRST_DATA_TO_SPP_SERVER_WRITTEN_LENxD_AND_STRxS_ON_SPPCLIENT_PORTxD__enum,
    HFG_EVENT_GENERATE_DTMF_TRC__enum,
    BT_EM_STATEBT_DEBUGx02X__enum,
    DDB_UPFOPEN__enum,
    IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_EVENTxD_IS_FOR_SPPOSDEV_INXxD__enum,
    PARMLEN_xD__enum,
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSIMONRSP_FAILED_IS_OK__enum,
    IN_PRIVATE_TEST_MODE_CHECK_THE_SIM_CARD_IS_INSERTED__enum,
    HSCONN__enum,
    USB_WAIT_TIMEOUT__enum,
    INJECT_SPP_CONNECT_REQ_WITH_SRV_CHNL_NUM__xD_FOR_SPP_CLIENT_TEST__enum,
    HFG_EVENT_ENABLE_VOICE_RECOGNITION_TRC__enum,
    DOING_LAST_NUMBER_DIAL__enum,
    USING_SIMSERVERSENDDISCIND_FIRST_TO_DO_DEACTIVE_REQUEST__enum,
    HFG_EVENT_SERVICE_CONNECT_REQ_TRC__enum,
    IN_BT_SIM_OPENSTATE_RESET_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD__enum,
    UART_WRITE_xD_BYTES__enum,
    SDP_QUERY_FOR_SPP_CLIENT_IS_ERROR_WITH_BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    HFG_EVENT_REPORT_SPK_VOLUME_TRC__enum,
    IN_SPPA_GETBYTESCASE2_SET_READYTOREAD_TO_FALSE__enum,
    ONLY_ONE_SIM_CARD_IS_SUPPORTED_IN_OUR_CURRENT_DESIGN_SELECT_ID_0__enum,
    SETUP_HID_HANDSHACK_PAYLOAD_PACKET__enum,
    MSG_ID_BT_HSG_DEACTIVATE_REQ_TRC__enum,
    MSG_ID_BT_HSG_SVOLUMEDOWN_REQ_TRC__enum,
    CMEVENT_AUDIO_LINK_DIS_SCO_INIT_COMMANDBT_DEBUGx02XSTATUSBT_DEBUGx02X__enum,
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_02__enum,
    USB_BULKREAD_REQ_xD_RET_xD_BYTES__enum,
    SENDPUSH_DOCUMENT_STATUS__xD__enum,
    SUBUNIT_ID_xD__enum,
    BT_RFTEST_OP_ENABLED_WHITEN_COMPLETED__enum,
    AG_CONNECTED_TRC__enum,
    DOCUMENT_FILE_PATH__NULL__enum,
    FILE_HANDLEx08X__enum,
    SIMSERVERSENDCONNRSPERR_FAILED_STATUSxD__enum,
    DOCUMENT_TYPE_ERROR__enum,
    HFG_EVENT_QUERY_NETWORK_OPERATOR_TRC__enum,
    IN_SPPA_GETBYTES_DATAREADxDLENGTHxD__enum,
    SPP_AUTH_RSP_FROM_MMI_OF_PORTxD_AND_ITS_RESULTxD__enum,
    DISC_CNF_CASE2__enum,
    IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_RECV_LINK_CON_CNF_STATUSxD__enum,
    CSRUSB_SENDING_COMMAND_COMPLETE_EVENT_FOR_RESET__enum,
    UART_DEINITIALIZED__enum,
    USE_MMI_SPP_SCO_SDP_PROCESS_HDLER_SETS_1_FOR_TESTING_MODE__enum,
    TRY_TO_OPEN_SCO_HANDLERBT_DEBUGx02X__enum,
    SIM_ACCESS_PROFILE_IS_ACTIVATED_COMPLETELY__enum,
    RECEIVE_SENDDOCUMENT_COMPLETE_IN_BT_BPP_STATE_STATUS_DISCONNECTING_STATUS__enum,
    DATA_FROM_PEER_DEVICE_IS_ALREADY_RECEIVED_NOW_RECV_UART_OWNER_CNF_FOR_SERVER_PORT__enum,
    USING_RF_CLOSECHANNEL_FIRST_TO_DO_DEACTIVE_REQUEST__enum,
    HSINIT__enum,
    SPPOSDEV_INXxD_AND_STATExD__enum,
    POWER_OFF_CNF_HDLR_AND_SET_OFF_CARDSTATUSBT_DEBUGx02X__enum,
    THE_SAME_PTA_ACTION__enum,
    USB_CTRLWRITE_REQ_xD_RET_xD_BYTES__enum,
    BDC_IS_NULL_SPP_CLIENT_DOES_NOT_CALL_CMGR_CREATEDATALINK__enum,
    NEW_STATE_AG_CONNECTED__enum,
    MSG_ID_BT_HSG_CONNECT_REQ_TRC__enum,
    HFG_EVENT_REDIAL_TRC__enum,
    IN_SPPOS_DEVRX_SET_READYTOREAD_FALSE__enum,
    USB_BULKWRITE_REQ_xD_RET_xD_BYTES__enum,
    DISCONNECT_CNF_HDLR_CARDSTATUSBT_DEBUGx02X__enum,
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSETTRANSPROTRSP_FAILED_IS_OK__enum,
    BPP_ADP_CNTX_DEINIT_FS_DELETE_FAILED__enum,
    NEW_STATE_AG_DISCONNECTING__enum,
    MSG_ID_BT_HSG_BUTTONPRESS_REQ_TRC__enum,
    DATA_FROM_PEER_DEVICE_IS_ALREADY_RECEIVED_NOW_RECV_UART_OWNER_CNF_FOR_CLIENT_PORT__enum,
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERRESETSIMRSP_FAILED_IS_OK__enum,
    IN_BT_SIM_RESET_CNF_HDLR_SIM_SERVER_STATE_OPENCOUND_NOT_SEND_SIM_SET_TRANSPORT_PROTOCOL_TYPE_RESPONSE_STATUSxD__enum,
    HFGA_TX_RESPONSE_ADDRxX__enum,
    HFGA_TX_RESPONSEPDATA_ADDRxX__enum,
    HFGA_ESTABLISH_SERVICE_LEVEL_CONNECTION_TIMEOUT_HDLER__enum,
    DISC_CNF_CASE5_NOT_YET_RECEIVE_SIM_CONNECT_CNF_AND_DISC_HAPPENS__enum,
    RECEIVE_SENDDOCUMENT_COMPLETE_IN_WRONG_STATE__enum,
    UART_READ_xD_BYTES__enum,
    RECV_SPP_CON_REQ_AND_ACL_LINK_IS_ALREADY_ESTABLISHED_CALL_SPPCONNECT_FAILED_STATUSxD__enum,
    HSBUTTON__enum,
    USB_INTREAD_REQ_xD_RET_xD_BYTES__enum,
    BT_SIMAP_AUTH_RSPRESULT_xD__enum,
    BT_PARMxD__xD__enum,
    HFG_EVENT_LIST_CURRENT_CALLS_TRC__enum,
    RECEIVED_AVRCP_EVENT_TYPE_xD__enum,
    HFG_EVENT_DIAL_NUMBER_TRC__enum,
    THE_SAME_FREQ__enum,
    BT_DEBUGx04X__enum,
    HFG_EVENT_RESPONSE_COMPLETE_TRC__enum,
    HFG_EVENT_AT_COMMAND_DATA_TRC__enum,
    CREATEJOB_REQUEST_SIDES_FLAG_ERROR__enum,
    RECV_DEACTIVE_REQ_THE_RFCOMM_AND_SIMSERVER_ARE_ALREADY_IN_CLOSED_STATE__enum,
    HFG_EVENT_SERVICE_DISCONNECTED_TRC__enum,
    ACL_LINK_IS_ALREADY_EXISTED_SET_DISCFLAGTRUE_IN_CMGR_CREATEDATALINK__enum,
    ORG_CARDSTATUS_IS_ON_SO_POWER_OFF_IS_STILL_SENT_TO_SIM_BUT_ACTUALLY_CARD_IS_OFF_BY_OTHER_MODULE__enum,
    UPF_SETADDR_0__enum,
    IN_BT_SIM_OPENSTATE_POWER_ON_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD__enum,
    RECV_DISC_REQ_FROM_MMI_ALTHOUGH_SIMSERVER_IS_CLOSED_BUT_IT_WAITS_FOR_SIM_TASKS_DISC_CNF__enum,
    HS_DISCONNECT_CALL__enum,
    IN_BT_SIM_RESET_CNF_HDLR_SIM_SERVER_STATE_OPENCOUND_NOT_SEND_SIM_POWER_ON_RESPONSE_STATUSxD__enum,
    SPP_CLIENT_CMGR_CREATEDATALINK_FAILED_STATUSxD__enum,
    IN_BT_SIMAP_DEACTIVEATE_REQ_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD__enum,
    IN_BT_SIM_APDU_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD__enum,
    HFGA_TX_AT_BUFF_BUF_ADDRxX__enum,
    IN_BT_SIM_OPENSTATE_SETT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD__enum,
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIMAP_DISCONNECT_REQ_HDLR_01__enum,
    LINK_CNF_IS_FOR_ANOTHER_PROFILES_REQUEST_NOT_SPP_CLIENT__enum,
    IN_BT_SPPCLIENT_CMGR_LINK_CLOSE_TRY_TO_REMOVE_BUT_CMGRHANDLER_IS_NOT_FOUND__enum,
    BT_EM_STATE1BT_DEBUGx02X__enum,
    IN_BT_SIMAP_DISCONNECT_REQ_HDLRERROR_MMI_HAS_NO_ENTRY_TO_DISCONNECT_THIS_SAP__enum,
    HFG_EVENT_DISABLE_NREC_TRC__enum,
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_01__enum,
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_00__enum,
    IN_BT_SPPCLIENT_CMGR_LINK_CLOSE_BDC_IS_ALREADY_NULL__enum,
    HCI_PROCESS_CALL_RADIO_HOST_WAKEUP_FUNCTION__enum,
    IN_BT_SIMAP_DISCONNECT_REQ_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD__enum,
    DISC_CNF_CASE6__enum,
    SUBUNIT_TYPE_xD__enum,
    NEW_STATE_AG_IDLE__enum,
    MMI_SPP_SDP_WITH_ATTRIBUTEID0X0310__SUPPORT_CAPABILITIES__enum,
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_05__enum,
    DOCUMENT_FILE_OPEN_FAILED__enum,
    RECV_DEACTIVE_REQ_ALTHOUGH_SIMSERVER_IS_CLOSED_BUT_IT_WAITS_FOR_SIM_TASKS_DISC_CNF__enum,
    OPCODE_xD__enum,
    UART_DEINIT_START__enum,
    SPPCLIENT_RECV_DEACTIVATE_REQ_AND_WAIT_FOR_RF_CLOSED_EVENT__enum,
    COULD_NOT_ALLOCATE_MEMORY_FOR_SOAP_RESPONSE_SIZE__BPP_SOAP_BUFF_SIZE__enum,
    SPPCLIENT_RECV_DEACTIVATE_REQ_CALL_SPP_CLOSE_FAILED__enum,
    INDEXBT_DEBUGx02XBT_DEBUGx02X__enum,
    DISCONNECTING_PLEASE_WAIT__enum,
    NO_OS_NOTIFYEVM_CALL_IN_10_SEC_WAITING__enum,
    BT_DEBUGx02X__enum,
    MSG_ID_BT_HSG_MVOLUMEUP_REQ_TRC__enum,
    RESUMPTION_ERROR_xD__enum,
    BT_SPP_UART_PLUGOUT_CNF_FROM_MMI_OF_PORTxD__enum,
    HFG_EVENT_AUDIO_CONNECTED_TRC__enum,
    HSMVU__enum,
    STATUS_OF_SIMSERVERSENDCONNRSPERR_xD__enum,
    USE_MMI_SPP_SCO_SDP_PROCESS_HDLER_SETS_0_FOR_SPP_CLIENT_APPLICATION__enum,
    MMI_ACCEPTS_THIS_SAP_CONNECTION_IN_BT_SIMAP_AUTH_RSP_HDLR__enum,
    HFG_EVENT_MEMORY_DIAL_TRC__enum,
    STRING_INDEXxD_BT_DEBUGx02X__enum,
    ATR_TIMEOUTSIMSERVERSTATExDFLAGSBT_DEBUGx02X__enum,
    HFGA_TX_RESPONSE_BUF_ADDRxX__enum,
    GETEVENT_SOAP_REQUEST__2K__enum,
    MSG_ID_BT_HSG_MVOLUMEDOWN_REQ_TRC__enum,
    DOCUMENT_FILE_LENGTH__0__enum,
    HFG_EVENT_ENABLE_CALLER_ID_TRC__enum,
    DISC_CNF_CASE0__enum,
    SPP_CLIENT_WITH_PORTxD_TRY_TO_DISCONNECT__enum,
    READ_SIZExD__enum,
    UART_WRITE_EVENT__enum,
    UPF_SETADDRBT_DEBUGx02X__enum,
    ERROR_SUBSTATExD_OF_CONNECT_PENDING_IN_BT_SIM_RESET_CNF_HDLR__enum,
    HFG_EVENT_CALL_HOLD_TRC__enum,
    PTA_ACTIONxD__enum,
    DISC_CNF_CASE3_RECEIVE_SIM_CONNECT_CNF_PREVIOUSLY_AND_DISC_HAPPENS__enum,
    CMEVENT_AUDIO_LINK_CON_SCO_INIT_COMMANDBT_DEBUGx02X__enum,
    RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSIMOFFRSP_FAILED_IS_OK__enum,
    MSG_ID_BT_HSG_SVOLUMEUP_REQ_TRC__enum,
    IN_SPPA_HANDLERWAIT_FOR_SDP_QUESRY_RSP_TO_QUERYCALLBACK__enum,
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIMAP_DEACTIVATE_REQ_HDLR__enum,
    BT_SIM_DISCONNECT_CNF_HDLRSIMSERVER_IS_AVALIABLE_AGAIN__enum,
    IN_GRACEFUL_DISC_TIMEOUTNOT_IN_POWER_ON_STATE__enum,
    PTRAFHxDPTRPTAxD__enum,
    FS_OPEN_BT_UPF_ADDR__enum,
    NO_AVAIALBE_SPP_CLIENT_OSDEV_FOR_SPP_CONNECT_REQ__enum,
    MMI_SPP_SDP_WITH_ATTRIBUTEID0X0004__PROTOCOLDESCRIPTORLIST__enum,
    HFG_EVENT_HANDSFREE_FEATURES_TRC__enum,
    STARTING_OUTGOING_CALL__enum,
    IN_BT_SIMAP_WAIT_REQ_IN_GRACEFUL_DISCONNECT_PROCEDURE_TIMEOUT_HANDLERCLOSING_THE_CONNECTION_WITH_IMMD_TYPE__enum,
    IN_SPPA_HANDLER_BT_MUST_SEND_UART_READY_TO_READ_TO_MMI__enum,
    A_BT_JSR82_SESSIONHANDLER__enum,
    SPPOS_FLUSHRX__enum,
    UNABLE_TO_BUILD_SOAP_COMMAND__enum,
    TRY_TO_DISCONNECT_SCO_HANDLERBT_DEBUGx02X__enum,
    REJECT_THE_WAITING_CALL__enum,
    IN_BT_SIMAP_DISCONNECT_REQ_HDLRALREADY_DISC_PENDING_IGNORE_THIS_REQUEST__enum,
    HFG_EVENT_ENABLE_CALL_WAITING_TRC__enum,
    BT_RFTEST_OP_POWER_TEST_TRC__enum,
    SENDING_HANDSHAKE_PACKET_WIT_ERROR_STATUSxD__enum,
    ONLY_ONE_SIM_CARD_IS_SUPPORTED_IN_OUR_CURRENT_DESIGN_BUT_DEFINE_MORE_THAN_ONE__enum,
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_04__enum,
    TIMER_IS_STARTED_BY_SOMEONE_DURING_POWER_OFF_PROCEDURE__enum,
    SET_SPP_SCO_CON_REQ_BD_ADDR_WITH_LAP_BT_DEBUGx04X_UAPBT_DEBUGx04XNAPBT_DEBUGx04X__enum,
    DISC_SPP_AUDIO_LINK_FIRST_IF_AUDIO_LINK_IS_CONNECTED__enum,
    IN_BT_SIM_RESET_CNF_HDLR_SIMSERVERSENDCONNRSPERR_FAILED_STATUSxD__enum,
    SPP_UART_OWNER_CNF_FROM_MMI_OF_PORTxD__enum,
    IN_BT_SIM_POWER_OFF_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD__enum,
    RECEIVED_AVRCP_OPERANDS_TYPE_xD__enum,
    CMGR_CREATEDATALINK_STATUSBT_DEBUGx02X__enum,
    DEVICE_IDLE_PRESS_BUTTON_TO_INITIATE_OUTGOING_CALL__enum,
    BT_DISC_CNF_CASE1__enum,
    REGISTER_SPP_SCO_CLIENT_NUM_OF_ENTRIES_xD__enum,
    RECV_SIMAP_DISC_REQ_USING_IMMDEDIAYE_DISC_TYPE__enum,
    ADDRESSBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    FIND_THE_SQT_OWNER_OF_THIS_QUERYCALLBACK_ITS_INDEXxD__enum,
    GET_THE_RETURNED_HID_TRANSACTION_HANDSHAKE_PACKET__enum,
    HFG_EVENT_HANGUP_TRC__enum,
    BT_DISC_CNF_CASE4__enum,
    APDU_RESP_FROM_SIM_TASK_IS_NOT_ACCESSIBLE_PHYSICAL_ERROR__enum,
    HFG_EVENT_ANSWER_CALL_TRC__enum,
    IN_BT_SIM_RESET_CNF_HDLR_CTxD__enum,
    GRACEFUL_DISC_TIMEOUTSIMSERVERSTATExDSUBSTATEBT_DEBUGx02X__enum,
    IN_ATR_TIMEOUTNOT_IN_POWER_ON_STATE__enum,
    NUM_SPP_DEVSxD__enum,
    SPPOS_FLUSHTX__enum,
    RECV_DEACTIVATE_REQ_CHECK_DISC_WITH_GRACEFUL_TIMER_IS_RUNNING_OR_NOT__enum,
    IN_SPPA_GETBYTESCASE1_SET_READYTOREAD_TO_TRUE_AND_READMORExD__enum,
    BT_FS_CREATEDIR__enum,
    IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_RECV_EVENT_TYPExD__enum,
    UART_READ_EVENT__enum,
    HFG_EVENT_SERVICE_CONNECTED_TRC__enum,
    DISC_SPP_CHNL_FIRST_EVEN_THE_AUDIO_LINK_IS_CONNECTED__enum,
    RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_03__enum,
    EM_OPERATIONBT_DEBUGx02XBT_DEBUGx02X__enum,
    TRY_TO_DISCONNECT_SCO_HANDLER__enum,
    IN_BT_SIM_CONNECT_CNF_HDLRNOT_EXPECT_TO_RECEIVE_BT_SIM_CONNECT_CNF__enum,
    WAIT_FOR_SDP_QUESRY_RSP_TO_QUERYCALLBACK__enum,
    POWER_OFF_CNF_HDLR_CARDSTATUSBT_DEBUGx02X__enum,
    IN_BT_SIMAP_WAIT_REQ_IN_GRACEFUL_DISC_PROCEDURE_TIMEOUT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD__enum,
    HFG_EVENT_ENABLE_EXTENDED_ERRORS_TRC__enum,
    NEW_STATE_AG_OUTGOING__enum,
    IN_BT_SIMAP_WAIT_ATR_CONNECT_PROCEDURE_TIMEOUT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD__enum,
    MMI_REJECTS_THIS_SAP_CONNECTION_IN_BT_SIMAP_AUTH_RSP_HDLR__enum,
    UART_SEND_HCI_COMMAND_x02X__enum,

    BT_FRM_PANIC__enum,
    BT_SEND_MSG_TO_UPPER_LAYER__enum,



    BT_AVDTP_DISCOVERY_REQ__enum,
    BT_AVDTP_DISCOVERY_IND__enum,
    BT_AVDTP_DISCOVERY_RSP__enum,
    BT_AVDTP_DISCOVERY_CFM__enum,
    BT_AVDTP_GET_CAP_REQ__enum,
    BT_AVDTP_GET_CAP_IND__enum,
    BT_AVDTP_GET_CAP_RSP__enum,
    BT_AVDTP_GET_CAP_CFM__enum,
    BT_AVDTP_SET_CONFIG_REQ__enum,
    BT_AVDTP_SET_CONFIG_IND__enum,
    BT_AVDTP_SET_CONFIG_RSP__enum,
    BT_AVDTP_SET_CONFIG_CFM__enum,
    BT_AVDTP_GET_CONFIG_REQ__enum,
    BT_AVDTP_GET_CONFIG_IND__enum,
    BT_AVDTP_GET_CONFIG_RSP__enum,
    BT_AVDTP_GET_CONFIG_CFM__enum,
    BT_AVDTP_RECONFIG_REQ__enum,
    BT_AVDTP_RECONFIG_IND__enum,
    BT_AVDTP_RECONFIG_RSP__enum,
    BT_AVDTP_RECONFIG_CFM__enum,
    BT_AVDTP_OPEN_REQ__enum,
    BT_AVDTP_OPEN_IND__enum,
    BT_AVDTP_OPEN_RSP__enum,
    BT_AVDTP_OPEN_CFM__enum,
    BT_AVDTP_START_REQ__enum,
    BT_AVDTP_START_IND__enum,
    BT_AVDTP_START_RSP__enum,
    BT_AVDTP_START_CFM__enum,
    BT_AVDTP_CLOSE_REQ__enum,
    BT_AVDTP_CLOSE_IND__enum,
    BT_AVDTP_CLOSE_RSP__enum,
    BT_AVDTP_CLOSE_CFM__enum,
    BT_AVDTP_ABORT_REQ__enum,
    BT_AVDTP_ABORT_IND__enum,
    BT_AVDTP_ABORT_RSP__enum,
    BT_AVDTP_ABORT_CFM__enum,
    BT_AVDTP_SUSPEND_REQ__enum,
    BT_AVDTP_SUSPEND_IND__enum,
    BT_AVDTP_SUSPEND_RSP__enum,
    BT_AVDTP_SUSPEND_CFM__enum,
    BT_AVDTP_NO_RESOURCE__enum,
    BT_AVDTP_CHANNEL_IS_ZERO__enum,
    BT_AVDTP_REG_L2CAP_FAILED__enum,
    BT_AVDTP_NO_RESOURCE_AVAILABLE__enum,
    BT_AVDTP_REMOVE_INUSE_LIST__enum,
    BT_AVDTP_SIGNAL_OPEN__enum,
    BT_AVDTP_SIGNAL_TX_DONE__enum,
    BT_AVDTP_SIGNAL_TX_ERROR__enum,
    BT_AVDTP_SIGNAL_CMD_RECV__enum,
    BT_AVDTP_SIGNAL_RSP_RECV__enum,
    BT_AVDTP_SIGNAL_REJ_RECV__enum,
    BT_AVDTP_SIGNAL_CMD_LENGTH_ERROR__enum,
    BT_AVDTP_SIGNAL_RSP_LENGTH_ERROR__enum,
    BT_AVDTP_SIGNAL_CONNECTED__enum,
    BT_AVDTP_SIGNAL_DISCONNECTED__enum,
    BT_AVDTP_STREAM_CONNECTED__enum,
    BT_AVDTP_STREAM_DISCONNECTED__enum,
    BT_AVDTP_DATA_RECEIVED__enum,

    BT_AVDTPTS_EVENT__enum,
    BT_AVDTPTS_CONNECT_REQ__enum,
    BT_AVDTPTS_CREATE_CONN__enum,
    BT_AVDTPTS_FAILED_CONN__enum,
    BT_AVDTPTS_RECONFIG_ERR_HDL__enum,
    BT_AVDTPTS_CLOSE_ERR_HDL__enum,
    BT_AVDTPTS_START_ERR_HDL__enum,
    BT_AVDTPTS_SUSPEND_ERR_HDL__enum,
    BT_AVDTPTS_ABORT_ERR_HDL__enum,
    BT_AVDTPTS_EVENT_CONNECT__enum,
    BT_AVDTPTS_EVENT_CONNECTED__enum,
    BT_AVDTPTS_SEID_INFO__enum,
    BT_AVDTPTS_MEDIA_INFO__enum,
    BT_AVDTPTS_EVENT_DISCOVERY_CNF__enum,
    BT_AVDTPTS_CODEC_TYPE__enum,
    BT_AVDTPTS_EVENT_CAP_CNF__enum,
    BT_AVDTPTS_EVENT_SET_CFG_CNF__enum,
    BT_AVDTPTS_EVENT_GET_CFG_CNF__enum,
    BT_AVDTPTS_EVENT_STREAM_RECONFIG_CNF__enum,
    BT_AVDTPTS_EVENT_STREAM_OPEN__enum,
    BT_AVDTPTS_EVENT_SECURITY_CNF__enum,
    BT_AVDTPTS_NO_FREE_STREAM__enum,
    BT_AVDTPTS_EVENT_STREAM_STARTED__enum,
    BT_AVDTPTS_EVENT_STREAM_SUSPENDED__enum,



BT_HCI_TRACE_START__enum,

    FUNC_UARTTRAN_SENDDATA__enum,
    FUNC_MTKUART_TRANSMIT_DATA__enum,
    FUNC_UART_WRITE__enum,
    FUNC_HCI_PACKET_SENT__enum,
    FUNC_HCI_PROCESS__enum,
    FUNC_HCI_PROCESS_SENT_PACKETS__enum,
    FUNC_HCI_REGISTER_RADIO_HANDLER__enum,
    FUNC_HCI_CHECK_FOR_TX_DATA_SEND__enum,
    FUNC_SEND_HCI_PACKETS__enum,
    FUNC_L2CAP_HCI_TX_DONE__enum,
    BTLOG_HCI_COMMAND_COMPLETE_EVENT_OPCODE__enum,
    BTLOG_HCI_HARDWARE_ERROR_EVENT_ERRCODE__enum,
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT__enum,
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_RESET__enum,
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_READ_BUFFER_SIZE__enum,
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL__enum,
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_HOST_BUFFER_SIZE__enum,
    BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_WRITE_SCO_FC_ENABLE__enum,
    BTLOG_HCI_CMD_STATUS_EVENT_PARMS_STATUS_NUM_HCICMD_PKTS_OPCODE__enum,
    BTLOG_HCI_HOST_NUM_COMPLETED_PACKETS_HANDLE_PACKETS__enum,
    HCI_INVALID_HCI_HANDLE_IN_SENT_PACKET_LIST__enum,
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_HOST_BUFFER_SIZE__enum,
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL__enum,
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_RESET__enum,
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_READ_BUFFER_SIZE__enum,
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE__enum,
    HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_WRITE_SCO_FC_ENABLE__enum,
    HCI_SEND_HCI_COMMAND_BT_DEBUGx02X__enum,
    HCIPROCESSEVENT_HCE_COMMAND_COMPLETE__enum,
    UART_SEND_HCI_COMMAND_BT_DEBUGx02X__enum,
    HCI_RECEIVED_DATA_FOR_AN_INVALID_HCI_HANDLE_IGNORED__enum,
    HCI_SET_BUFFER_SIZE_COMPLETE__enum,
    HCI_WRITE_SCO_FLOW_CONTROL_ENABLE_COMPLETE__enum,
    HCI_READ_BUFFER_COMPLETE_ACLTXPKTLENxD__enum,
    HCI_SET_FLOW_CONTROL_COMPLETE__enum,
    HCI_SENDING_HCC_RESET__enum,
    HCI_PROCESS_FALURE__enum,
    HCI_PROCESS_CALL_RADIO_WAKE_UP_FUNCTION__enum,
    HCI_PROCESS_HCICHECKFORTXCMD__enum,
    HCI_HCI_USB_TX_BUFFER_SIZExD_MAY_NOT_BE__enum,
    HCI_PACKET_HANDLED_TRC__enum,
    WRONG_LINK_TYPE__enum,
    WIFI_SETTING_IS_MADE__enum,
    IF_HOST_WAKEUP_NO_RESPONSE_WE_WILL_GEN_A_FAKE_EVENT_AND_TRY_TO_WAKEUP_AGAIN__enum,

BT_HCI_TRACE_END__enum,



BT_L2CAP_TRACE_START__enum,

    FUNC_L2CAP_PROCESS_REQ_OP__enum,
    FUNC_L2CAP_STATE_MACHINE_CID_EVENT__enum,
    FUNC_L2CAP_STATE_CONFIG_CID_EVENT__enum,
    FUNC_L2CAP_STATE_OPEN_CID_EVENT__enum,
    FUNC_L2CAP_HANDLE_CONFIG_REQ_CID__enum,
    FUNC_L2CAP_SEND_AUTO_CONFIG_RSP_CID__enum,
    FUNC_L2CAP_INIT__enum,
    FUNC_L2CAP_DEINIT__enum,
    FUNC_L2CAP_NOTIFY_USER_AND_CLOSE_CHANNEL__enum,
    FUNC_L2CAP_GETSYSPKT__enum,
    FUNC_L2CAP_BUILDSFRAME__enum,
    FUNC_L2CAP_SENDSFRAME__enum,
    FUNC_L2CAP_SECACCESSRSP__enum,
    L2CAP_FREECHANNEL_LINK_REFCOUNT_DISCFLAG__enum,
    L2CAP_BUILDSFRAME_INUSE__enum,
    L2CAP_BUILDSFRAME_FCS__enum,
    L2CAP_SENDSFRAME_STATUS__enum,
    L2CAP_SENDSFRAME_NO_PACKET__enum,

    BTLOG_L2CAP_DISC_PENDING_PKT_HANDLED__enum,
    BTLOG_L2CAP_CON_PENDING_PKT_HANDLED__enum,
    BTLOG_L2CAP_CONFIG_PKT_HANDLED__enum,
    L2CAP_L2CAP_FREECHANNELx04X_PSM_x04X_FLAGS_x04X__enum,
    L2CAP_FREE_OPEN_TIMER__enum,
    L2CAP_TESTER_DISCONN_REQ__enum,
    L2CAP_GROUP_DATA_REQUEST__enum,
    L2CAP_VALIDATEOPTIONS_OPTION_xD_LEN_xD__enum,
    L2CAP_SENDDISCONNECTREQBT_DEBUGx04X_SENT_PACKET__enum,
    L2CAP_NOTIFYPSM_CONSUMED_NOTIFICATION_EVENT_xX__enum,
    L2CAP_INITIALIZING_FOR_xD_PROTOCOLS_FOR_xD_GROUPS_FOR_xD_DEVICES_WITH_xD_CHANNELS__enum,
    L2CAP_PSM_REGISTERED_BT_DEBUGx04X__enum,
    L2CAP_TIMER_HALTED_BY_DISCONNECTREQ_STATE_xD__enum,
    L2CAP_UPDATERXWINDOW_EXISTING_xD_AVAIL_xD__enum,
    L2CAP_RECEIVED_xD_BYTES__enum,
    L2CAP_PROCESSRSP_RECEIVED_RESPONSE_TO_UNKNOWN_REQUEST_IDENT_BT_DEBUGx02X__enum,
    L2CAP_UPDATERXWINDOW_MPU_xD_SEGLENGTH_xD_BUFFERED_xD__enum,
    L2CAP_PROCESSRSPBT_DEBUGx04X_RESPONSE_CID_DID_NOT_MATCH_EXPECTED_CID_OPCODE_xD__enum,
    L2CAP_DISCARDING_DATA_FROM_UNKNOWN_HCIHANDLE__enum,
    L2CAP_SENDCONFIGREQBT_DEBUGx04X_SENT_PACKET__enum,
    L2CAP_SENDCONNECTREQBT_DEBUGx04X_SENT_PACKET__enum,
    L2CAP_SENDDISCONNECTRSPBT_DEBUGx04X_SENT_PACKET__enum,
    L2CAP_STATE_MACHINEBT_DEBUGx04X_EVENT_LLC_DISC_REQ__enum,
    L2CAP_PROCESSNRBT_DEBUGx02X_ACKNUM__xD_UNACKED__xD__enum,
    L2CAP_PROCESSGROUPDATABT_DEBUGx04X_DATALEN_xD__enum,
    L2CAP_CHANNELRXBT_DEBUGx04X__DROPPED_DATA__NO_CHANNEL__enum,
    L2CAP_RECEIVED_CONFIGRSPNEG_DISCONNECTING__enum,
    L2CAP_GETNEXTSEGMENTBT_DEBUGx02X_SDU_xX_SEGMENT_xD_OF_xD_NS__xD__enum,
    L2CAP_SENDFEATURESREQBT_DEBUGx04X_SENT_PACKET__enum,
    L2CAP_INDICATING_xD_BYTE_PACKET_TO_UPPER_LAYER__enum,
    L2CAP_GETINFOBT_DEBUGx04X_SENT_PACKET_IDENT_xD__enum,
    L2CAP_CONFIGBT_DEBUGx04X_STATE_ADVANCED_TO_OPEN__enum,
    L2CAP_HANDLERXERRORxX_HCIHANDLE_BT_DEBUGx04X__enum,
    L2CAP_RECEIVED_UNSOLICITED_CONFIGURATION_RESPONSE__enum,
    L2CAP_DUPLICATE_REQUEST_IGNORED_CID_BT_DEBUGx04X_OPCODE_BT_DEBUGx02X_IDENT_BT_DEBUGx02XxS__enum,
    L2CAP_ACCEPTSDUDATA_ACCEPTED_xD_OF_xD_BYTES__enum,
    L2CAP_RECEIVED_CONFIGRSPNEG_FOR_FLOW_CONTROL_OPTION__enum,
    L2CAP_PROCESSCHANNELDATABT_DEBUGx04X_DATALEN_xD__enum,
    L2CAP_DISCACLLINK__enum,
    L2CAP_ISSUEHCIREQUESTTOSEND_HCI_REQUEST_TO_SEND_CALLED__enum,
    L2CAP_PINGBT_DEBUGx04X_SENT_PACKET_IDENT_xD__enum,
    L2CAP_SENDING_LONE_CONFIGREQ_TO_SOLICIT_MORE_RESPONSES__enum,
    L2CAP_SEND_CONFIG_REQUEST__enum,
    L2CAP_START_A_DISC_TIMER_BT_L2CAP_DISCONNECT_TIMEOUT_500MS__enum,
    L2CAP_START_A_DISC_TIMER_BT_L2CAP_DISCONNECT_TIMEOUT_50S__enum,
    STATUSBT_DEBUGx02X__enum,
    RTX_SECONDS__enum,
    ERTX_20_SECONDS__enum,
    ERTX_60_SECONDS__enum,
    PSM_ALLOW__enum,
    RTX_TIMEOUT_IN_SNIFF_MODE__enum,
    PSM_NO_ALLOW__enum,

    BT_L2CAPTS_INIT__enum,
    BT_L2CAPTS_UNABLEREG__enum,
    BT_L2CAPTS_DISCONNECTREQ__enum,
    BT_L2CAPTS_INFOREQ__enum,
    BT_L2CAPTS_ECHOREQ__enum,
    BT_L2CAPTS_SENDDATAREQ__enum,
    BT_L2CAPTS_CONNECTREQ__enum,
    BT_L2CAPTS_EVENT__enum,
    GROUP_REMOVE_REQUEST__enum,
    ACL_LINK_CREATE_SUCCESSFULLY__enum,
    STR_DATA_LENxD__enum,
    CALL_BTTESTER_SENDMSG__enum,
    GROUP_ADD_REQUEST__enum,

BT_L2CAP_TRACE_END__enum,



BT_RFCOMM_TRACE_START__enum,

    BT_RFCOMMM_RECV_SABM__enum,
    BT_RFCOMMM_RECV_DISC__enum,
    BT_RFCOMMM_RECV_INVALID_LENGTH__enum,
    BT_RFCOMMM_DM_REPORT__enum,
    BT_RFCOMMM_INVALID_EVENT__enum,
    BT_RFCOMMM_DLC_UP__enum,
    BT_RFCOMMM_DLC_REJECT__enum,
    BT_RFCOMMM_INVALID_EVENT_FOR_DLC__enum,
    BT_RFCOMMM_UA_SEND__enum,
    BT_RFCOMMM_SEND_MSC__enum,
    BT_RFCOMMM_MSC_CAN_NOT_SEND__enum,
    BT_RFCOMMM_RECV_DISC_FOR_DLC__enum,
    BT_RFCOMMM_DLCI_DISCONNECT__enum,
    BT_RFCOMMM_SABM_SEND__enum,
    BT_RFCOMMM_NEGO_FAILED__enum,
    BT_RFCOMMM_OUT_OF_RESOURCE__enum,
    BT_RFCOMMM_ALLOCATED_DLCI__enum,
    BT_RFCOMMM_MUX_NOT_REGJSTERED__enum,
    BT_RFCOMMM_CMD_UNALLOCATED_MUX__enum,
    BT_RFCOMMM_SABM_SENT__enum,
    BT_RFCOMMM_MUX_UP__enum,
    BT_RFCOMMM_CANNT_SEND_NEGO__enum,
    BT_RFCOMMM_NOGO_SEND_SUCCESS__enum,
    BT_RFCOMMM_CONN_DLCI_REJECT__enum,
    BT_RFCOMMM_SEND_UA__enum,
    BT_RFCOMMM_INVALUD_UNINIT_MUX__enum,
    BT_RFCOMMM_L2CAP_DISCONNECT__enum,
    BT_RFCOMMM_DISC_MUX__enum,
    BT_RFCOMMM_RECV_SABMDM__enum,
    BT_RFCOMMM_INVALID_EVENT_OF_MUX__enum,
    BT_RFCOMMM_SEND_CONNECT_REJECT__enum,
    BT_RFCOMMM_INCOMING_CONN__enum,
    BT_RFCOMMM_L2CAP_DISCONNECT_EVENT__enum,
    BT_RFCOMMM_INVALID_FCS__enum,
    BT_RFCOMMM_INVALUD_RX_LENGTH__enum,
    BT_RFCOMMM_SEND_DM_F__enum,
    BT_RFCOMMM_RE_FLOWCTL_DISC__enum,
    BT_RFCOMMM_RX_MSC__enum,
    BT_RFCOMMM_INVALID_FLOWCTRL__enum,
    BT_RFCOMMM_INVALID_LENGTH__enum,
    BT_RFCOMMM_INVALUD_PARM_LENGTH__enum,
    BT_RFCOMMM_UNABLE_REG_L2CAP__enum,
    BT_RFCOMMM_INITIZED__enum,
    BT_RFCOMMM_DEINITED__enum,
    BT_RFCOMMM_CHNL_REGED_NOT_USED__enum,
    BT_RFCOMMM_REG_CHNL_SERV__enum,
    BT_RFCOMMM_FAILED_REG_CHNL__enum,
    BT_RFCOMMM_DE_REG_CHNL__enum,
    BT_RFCOMMM_DE_REG_ALL_CHNL__enum,
    BT_RFCOMMM_CHNL_REQ_PREVIOUS__enum,
    BT_RFCOMMM_CHNL_REQ_FIRST__enum,
    BT_RFCOMMM_MUX_FREEED__enum,
    BT_RFCOMMM_ALLOCATED_DLCI_ON_MUX__enum,
    BT_RFCOMMM_COULD_NOT_L2CAP_SHUTDOWN__enum,
    BT_RFCOMMM_NO_RSP__enum,
    BT_RFCOMMM_LINK_LOSS__enum,
    BT_RFCOMMM_TX_CREDIT_OVERFLOW__enum,
    BT_RFCOMMM_DATA_RECV_NO_CREDIT__enum,
    BT_RFCOMMM_STOP3__enum,
    BT_RFCOMMM_NO_MSC__enum,
    BT_RFCOMMM_TX_NUMBER_MINUS__enum,
    BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT1__enum,
    BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT2__enum,
    BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT3__enum,
    BT_RFCOMMM_SPP_SENDTORFCOMM_DATA__enum,
    BT_RFCOMMM_SPPOS_TX_EMPTY__enum,
    BT_RFCOMM_MUX_NON_USER_NON_CREDIT_PKT_HANDLED__enum,
    BT_RFCOMM_DISC_PENDING_PKT_HANDLED__enum,
    BT_RFCOMM_RECV_MSC_REQ_RSP_REPORT_RFEVENT_OPEN__enum,
    BT_RFCOMM_RECV_MSC_CNF_DLC_FLAG__enum,
    BT_RFCOMM_RECV_MSC_REQ_DLC_FLAG__enum,
    BT_RFCOMM_DISC_PENDING_RECV_EVENT__enum,
    BT_RFCOMM_DISC_PENDING_NOT_CHANGE_STATE__enum,
    BT_RFCOMM_CHECK_UNRETURNED_DISC_PKT__enum,
    BT_RFCOMM_DISC_PENDING_NOT_CHANGE_RESULT__enum,
    BT_RFCOMM_START_TIMER_SEND_CMD_ON_DLCI_OF_MUX_TIME__enum,
    BT_RFCOMM_RESTART_TIMER__enum,
    BT_RFCOMM_DISCARD_DISC_ON_DLCI_OF_MUX__enum,
    BT_RFCOMM_DISC_IS_QUEUED_ON_DLCI_OF_MUX__enum,
    BT_RFCOMM_CHNL_FLAG_DISC_QUEUED_IS_CLEARED__enum,

    BT_RFCOMMM_NEW_TXCREDIT__enum,
    BT_RFCOMMM_PKT_RETURNED__enum,
    BT_RFCOMMM_SPP_PKT_RETURNED__enum,
    BT_RFCOMMM_CHECKTXQUEUE__enum,
    BT_RFCOMMM_CHECK_NEXT_TXQUEUE_EMPTY_DLCI__enum,
    BT_RFCOMMM_CHECK_NEXT_TXQUEUE_FLOWOFF_DLCI__enum,
    BT_RFCOMMM_PKT_INTRANSMIT_DLCI__enum,
    BT_RFCOMMM_RF_SENDDATA_CHECK_TXQUEUE__enum,
    BT_RFCOMMM_SENDDATA_INTERNAL_DLCI_TXCREDIT__enum,
    BT_RFCOMMM_SPPA_GETBYTES_DATAREAD_LEN__enum,
    BT_RFCOMMM_SPPA_GETBYTES_CASE1__enum,
    BT_RFCOMMM_SPPA_GETBYTES_CASE2__enum,
    BT_RFCOMMM_SET_READYTOREAD_FALSE__enum,
    BT_RFCOMMM_SPPOS_FLUSHRX__enum,
    BT_RFCOMMM_SPPOS_FLUSHTX__enum,
    BT_RFCOMM_OPENCLI_FUNC_ENTRY__enum,
    BT_RFCOMM_DISC_L2CAP_REJECT_SABM_DLC_COUNT_ZERO__enum,
    BT_RFCOMM_CREDIT_PKT_SENT_DONE__enum,

    RFCOMM_IN_COMING_CONNECTION_AUTHENTICATED_HAS_ALREADY_COMPLETED__enum,
    RFCOMM_SEND_ACK_RESPONSE__enum,
    SERVER_CHANNEL_IS_NOT_ALLOWED__enum,
    RFISDLCFLOWONTXCREIDT0_ON_DLCIxD__enum,
    RF01084421__enum,
    CLIENT_REGISTRATION_SECURITY_RECORDBT_DEBUGx02X__enum,
    CLIENT_DEREGISTRATION_SECURITY_RECORDBT_DEBUGx02X__enum,
    DEREGISTRATION_SECURITY_RECORD_STATUSBT_DEBUGx02X__enum,
    RFL2CALLBACKL2EVENT_CLOSED_FOR_SECURITY_SERVICE_LEVEL2_TO_CHECK_PARING_STATE__enum,

    BT_RFCOMMTS_INIT__enum,
    BT_RFCOMMTS_OPENCLIENT__enum,
    BT_RFCOMMTS_REGSERVER__enum,
    BT_RFCOMMTS_ERROR_STRING__enum,
    BT_RFCOMMTS_EVENT__enum,
    BT_RFCOMMTS_PKT_SENT__enum,
    BT_RFCOMMTS_CLOSE__enum,
    BT_RFCOMMTS_RLS__enum,
    BT_RFCOMMTS_SENDDATA__enum,
    BT_RFCOMMTS_NO_BUFFER__enum,
    BT_RFCOMMTS_MSC__enum,
    BT_RFCOMMTS_SENDPN__enum,
    IN_RFCOMM_INJECT_STR_CHANGEPKTTYPE__enum,

BT_RFCOMM_TRACE_END__enum,



BT_SDP_TRACE_START__enum,

    BT_SDAP_REMOVE_LINK_HDLER__enum,
    BT_SDP_QUERY_FAILED_CASE__enum,
    BT_SDP_REMOVE_RECORD_NOT_IN_LIST__enum,
    BT_LOG_SDAP_SSA_RAW_RETRY_COUNT__enum,
    BT_LOG_QUERY_SA_RAW_CB_RECORD_COUNT__enum,
    BT_LOG_QUERY_SA_RAW_CB_CONT_STATE_LEN__enum,
    BT_LOG_QUERY_SA_RAW_CB_ATTRLIST_COUNT_CONTSTATE_LEN_CASE__enum,
    BT_LOG_QUERY_SA_RAW_CB_CONSTATE_LEN_FROM_SA_RSP_CASE__enum,
    BT_LOG_QUERY_SA_RAW_CB_CONTINUE_SDP_FAILED_STATUS__enum,
    BT_LOG_QUERY_SA_RAW_CB_LINK_CON_CNF_FAILED__enum,
    BT_LOG_SDP_CLIENT_QUERY_DATALEN_PTR__enum,
    SDP_CLIENT_PACKET_RETURNED__enum,
    SDP_CLIENT_DEINITIALIZED__enum,
    SDP_CLIENT_SUCCESSFULLY_STARTED_L2CAP__enum,
    SDP_CLIENT_QUERY_FAILED_TO_START_NO_CONNECTION__enum,
    SDP_CLIENT_CONNECTION_DISCONNECTED__enum,
    SDP_CLIENT_NO_MORE_TOKENS_SO_DISCONNECTING_L2CAP__enum,
    SDP_CLIENT_RECEIVED_RESPONSE__enum,
    SDP_CLIENT_L2CAP_CONNECTION_HAS_COME_UP__enum,
    SDP_CLIENT_FAILED_TO_START_L2CAP_STATUS__xD__enum,
    SDP_CLIENT_SENDING_QUERY_PACKET__enum,
    SDP_SERVER_ATTRIB_SEARCH_RCV_BAD_CONTINUATION_STATE__enum,
    SDP_SERVER_ATTRIB_SEARCH_STORING_HEADER_INTO_SCRATCH__enum,
    SDP_SERVER_SENDING_AN_ERROR_ERROR__xX__enum,
    SDP_SERVER_HANDLESERVSEARCHATTRIB__RCV_BAD_CONTINUATION_STATE__enum,
    SDP_SERVER_SERSEARATTRREQ__QUERY_PARAMETERS_ARE_NOT_VALID__enum,
    SDP_SERVER_SENDING_CONT_STATE_0__enum,
    SDP_SERVER_SERVICE_SEARCH_RCV_CONT_STATE_SIZE__xD_VAL__xD__enum,
    SDP_SERVER_SERVICE_SEARCH_RCV_CONINUATION_STATE__0__enum,
    SDP_SERVER_B_SCRATCH__xD__enum,
    SDP_SERVER_HANDLESERVATTRIB__BAD_PARAMETER_LEN__enum,
    SDP_SERVER_SENDING_CONT_STATE__xD__enum,
    SDP_SERVER_DEINITIALIZED__enum,
    SDP_SERVER_HANDLESERVSEARCHATTRIB__BAD_PARAMETER_LEN__enum,
    SDP_SERVER_QUERY_LEN_IS_SHORT__enum,
    SDP_SERVER_STOREATTRIB__STORING_ID_0_INTO_SCRATCH__enum,
    SDP_SERVER_INCOMING_L2CAP_CONNECTION_REJECTED__enum,
    SDP_SERVER_L2CAP_SENDDATA_CALL_FAILED_ERROR__xX__enum,
    SDP_SERVER_CONNECTION_COMPLETE__enum,
    SDP_SERVER_CONNECTION_DISCONNECTED__enum,
    SDP_SERVER_ATTRIB_SEARCH_RCV_CONTINUATION_STATE__0__enum,
    SDP_SERVER_INVALID_RECORD_HANDLE__enum,
    SDP_SERVER_COPYING_THE_SCRATCH_INTO_A_PACKET_LENxD__enum,
    SDP_SERVER_INCOMING_L2CAP_CONNECTION_ACCEPTED__enum,
    SDP_SERVER_REMDEVSDPSERVINFOTOTALATTRIBSIZE__xD__enum,
    SDP_SERVER_MATCH_FOUND__enum,
    SDP_SERVER_QUERY_PARAMETERS_ARE_NOT_VALID__enum,
    SDP_SERVER_HANDLESERVSEARCHATTRIB__RCV_CONT_STATE_SIZE__xD_VAL__xD__enum,
    SDP_SERVER_HANDLESERVSEARCH__BAD_PARAMETER_LEN__enum,
    SDP_SERVER_ATTRIBUTE_ID__xD_MARKED__enum,
    SDP_SERVER_ATTRIBUTE_ID__2_MARKED__enum,
    SDP_SERVER_A_SCRATCH__xD__enum,
    SDP_SERVER_SERVICE_SEARCH_RCV_BAD_CONTINUATION_STATE__enum,
    SDP_SERVER_MATCH_NOT_FOUND__enum,
    SDP_SERVER_STOREATTRIB__STORING_ID_2_INTO_SCRATCH__enum,
    SDP_SERVER_ATTRIB_SEARCH_RCV_CONT_STATE_SIZE__xD_VAL__xD__enum,
    SDP_SERVER_PACKET_RETURNED__enum,
    SDP_SERVER_RECEIVED_DATA__enum,
    SDP_SERVER_ATTRIBUTE_ID__0_MARKED__enum,
    SDP_SERVER_SERVICE_SEARCH_RCV_CONTINUATION_STATE__0__enum,
    SDP_SERVER_QUERY_PARMETERS_LEN_IS_BAD__enum,
    SDP_SERVER_STOREATTRIB__STORING_ID_1_INTO_SCRATCH__enum,
    A_SDP_SERVER_REMDEVSDPSERVINFOTOTALATTRIBSIZE__xD__enum,
    B_SDP_SERVER_SCRATCH__xD__enum,
    C_SDP_SERVER_SCRATCH__xD__enum,
    RECORD_HANDLERBT_DEBUGx04X__enum,
    OFFSETxD_FINALxDSTATExD__enum,
    SERVICE_REG_RECORD_HANDLERBT_DEBUGx04X__enum,
    SERVICE_ATTRIBUTE_IDBT_DEBUGx04X__enum,
    SERVICE_SEARCH_FAILED__enum,
    SERVICE_SEARCH_COMPLETEBT_DEBUGx02X_TOTAL_VALUE_LENBT_DEBUGx02X__enum,
    SERVICE_SEARCH_FAILED_NO_SERVICES__enum,
    PARSE_NEXT__enum,
    FOUND_SERVICE_RECORD_OF_BT_DEBUGx04X__enum,
    PSI_INFORMATION_STORED_IN_DB_NOW__enum,
    RESULTBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X__enum,
    PARSE_COMPLETE_WITH_ERROR__enum,
    DO_SDAP_SERVICE__enum,
    SERVICE_SEARCH_COMPLETE_STATUS__BT_DEBUGx02X_TOKEN_VALUE_LENBT_DEBUGx02X__enum,
    PARSE_COMPLETE__enum,
    SDPSERVER_REMOVED_RECORD_IS_MARKED_SETTING_CONT_STATE_TO_0_FOR_REMDEV_xD__enum,
    SDPFINDUUIDINATTRIB_MAX_RECURSION_LEVEL_EXCEEDED__enum,
    SDP_QUERY_NO_SERVICES__enum,
    FTP_SERV_CHANNELx02X__enum,
    REGFTP__enum,
    SDP_REG_RESULTx02X__enum,
    OPP_SERV_CHANNELx02X__enum,
    DEREGISTRATION_RESULTx02X__enum,
    UNKNOWN_MESSAGE__enum,
    DEREGFTP__enum,
    DEREGOPP__enum,
    SDPDBA_RX_CMD_STRING__enum,
    REGISTRATION_RESULTx02X__enum,
    REGOPP__enum,
    SDAP_MULTIPLE_REQUEST_TIMEOUT_C__enum,
    IN_SDAP_SERVICESEARCHSINGLEATTRIBUTE_SET_DISCFLAG_AS_FALSE__enum,
    RESTART_SDAP_MULTIPLE_REQ_TIMER_D__enum,
    FOR_A2DP_AGAIN_UUIDx4X__enum,
    IN_QUERY_SDAP_SERVICE_SEARCH_ALL_CALLBACK_SET_DISCLEVEL_BT_L2CAP_DISCONNECT_TIMEOUT_50S__enum,
    CONTINUE_TO_PARSING_SDP_RSP_RESULT__enum,
    SDAP_NOT_FINSIHED_REJECT_THE_OPEATION__enum,
    SDPCLIENTQUERYTIMEOUT_TIMEOUTBT_DEBUGx02X__enum,
    SDAP_MULTIPLE_REQUEST_TIMEOUT_F__enum,
    FOR_A2DP_AGAIN_RSP_BACKUUIDBT_DEBUGx04X__enum,
    IN_QUERY_SDAP_SEARCH_ATTRIBUTE_CALLBACK_RECV_SPP_QUERY_RSP__enum,
    SDAP_MULTIPLE_REQUEST_TIMEOUT_A__enum,
    RESTART_SDAP_MULTIPLE_REQ_TIMER_B__enum,
    CBT_DEBUGx02XDBT_DEBUGx02X__enum,
    RESTART_SDAP_MULTIPLE_REQ_TIMER_E__enum,
    RESET_SDAP_MULTI_REQ_INDEX_FOR_A2DP_SDP_QUERY_AGAIN__enum,
    CONTINUATION_STATE__enum,
    NOT_IN_MULTIPLE_SDAP_REQUEST__enum,
    ABT_DEBUGx02XBBT_DEBUGx02X__enum,
    RESTART_SDAP_MULTIPLE_REQ_TIMER_F__enum,
    SDAP_REMOVE_LINKCALLBACK_SDAPMEHANDLER__enum,

BT_SDP_TRACE_END__enum,





    BT_BPP_EXT_ENABLE__enum,
    BT_BPP_EXT_DISABLE__enum,
    BT_BPP_EXT_AUTH_RSP__enum,
    BT_BPP_EXT_GET_ATT__enum,
    BT_BPP_EXT_PRINT__enum,
    BT_BPP_EXT_SEND_PRINT_REQ__enum,
    BT_BPP_EXT_DISC__enum,
    BT_BPP_EXT_CONN_CNF__enum,
    BT_BPP_EXT_GET_ATT_CNF__enum,
    BT_BPP_EXT_PRINT_CNF__enum,
    BT_BPP_EXT_DISC_CNF__enum,
    BT_BPP_EXT_DISC_IND__enum,
    BT_BPP_EXT_AUTH_IND__enum,
    BT_BPP_EXT_PROGRESS_IND__enum,
    BT_BPP_EXT_JOB_STATUS_IND__enum,
    BT_BPP_EXT_PRINTER_SUPPORT_MIMETYPE__enum,
    BT_BPP_EXT_PRINTER_NOT_SUPPORT_MIMETYPE__enum,
    BT_BPP_EXT_COMPOSE_IMAGE__enum,
    BT_BPP_EXT_COMPOSE_OBJECT__enum,
    BT_BPP_EXT_COMPOSING_RETURN__enum,
    BT_BPP_EXT_DOCTYPE_CHECK_NOT_SAME_PRINTER__enum,
    BT_BPP_EXT_CAPABILITY_GOTTEN_RETURN__enum,
    BT_BPP_EXT_HDLE_MSG__enum,
    BT_BPP_EXT_CONNECT_CNF__enum,
    BT_BPP_EXT_DISCONNECT_CNF__enum,
    BT_BPP_EXT_DISCONNECT_IND__enum,
    BT_BPP_EXT_ENABLE_CB__enum,
    BT_BPP_EXT_DISABLE_CB__enum,
    BT_BPP_EXT_GETATTR_CB__enum,
    BT_BPP_EXT_PRINT_CB__enum,
    BT_BPP_EXT_DISCONNECT_CB__enum,
    BT_BPP_EXT_CANCEL_CB__enum,
    BT_BPP_EXT_IS_DEV_CONNECTED__enum,
    BT_BPP_EXT_IS_CONNECTED__enum,



   BPP_ADP_ENTRY_MSG_HDLR__enum,
   BPP_ADP_ENTRY_EVENT_CALLBACK__enum,
   BPP_ADP_CONNECT_CONFIRM__enum,
   BPP_ADP_GET_ATTR_CONFIRM__enum,
   BPP_ADP_STATUS_IND__enum,
   BPP_ADP_PRINT_DOC_CONFIRM__enum,
   BPP_ADP_DISC_CONFIRM__enum,
   BPP_ADP_DISC_IND__enum,
    BPP_ADP_ALLOC_CM_CONNID__enum,
    BPP_ADP_RELEASE_CM_CONNID__enum,
    BPP_ADP_ENTRY_INIT__enum,
   BPP_ADP_SEND_MSG2APP__enum,
   BPP_ADP_CANCEL_CONFIRM__enum,


    BPP_CONNECT_ENTRY_PRINTER__enum,
    BPP_MAX_PRINTER_NUM_REACHED__enum,
    BPP_GOEP_REGISTERCLIENT_RETURN__enum,
    BPP_GOEP_TPCONNECT_RETURN__enum,
    BPP_GOEP_CONNECT_RETURN__enum,
    BPP_GET_PRINTER_ATTR__enum,
    BPP_GOEP_PULL_RETURN__enum,
    BPP_ENTRY_PRINT_OBJECT__enum,
    BPP_SIMPLEPUSH_PRINT__enum,
    BPP_GOEP_PUSH_RETURN__enum,
    BPP_ENTRY_CREATE_JOB__enum,
    BPP_PROGRESS_RSP_RECEIVED__enum,
    BPP_CANCEL__enum,
    BPP_DISCONNECT_PRINTER__enum,
    BPP_ACCEPT_AUTHCHAL__enum,
    BPP_REJECT_AUTHCHAL__enum,
    BPP_JOBCHNL_CALLBACK__enum,
    BPP_STATUSCHNL_CALLBACK__enum,
    BPP_ENTRY_OBEX_CONNECT__enum,
    BPP_DISC_STATUS_CHANNEL__enum,
    BPP_DISC_JOG_CHANNEL__enum,
    BPP_DISC_JOBCHNL_RETURN__enum,
    BPP_ENTRY_PULL__enum,
    BPP_DEINIT_PRINTER__enum,
    BPP_GETEVENT_RESP__enum,
    BPP_ENTRY_SEND_DOC__enum,
    BPP_DESTORY_STATUSCHNL__enum,
    BPP_FS_OPEN_HANDLE_INLINE_ITEM__enum,
    BPP_CREATEJOB_SOAPRSP_JOB_ID__enum,
    BPP_CREATE_JOB_INFO_OPERATION_STATUS__enum,
    BPP_READ_XHTML_MEET_INVLID_IMAGE_FILE_HANDLER__enum,
    BPP_RESULT_OF_READ_DATA__enum,
    BPP_CREATE_JOB_END__enum,
    BPP_CREATE_JOB_INFO__enum,
    BPP_OBS_WRITE_SOAPRSP__enum,
    BPP_WRITE_SOAPRSP_FAILED__enum,
    BPP_PARSE_SOAPRSP_RETURN__enum,
    BPP_LOADDATA_FROMFILE_FAILED__enum,
    BPP_IS_SOAP_COMPLETE_INFO1__enum,
    BPP_IS_SOAP_COMPLETE_INFO2__enum,
    BPP_DEINIT_PRINTER_WITH_STSCHNL__enum,
    BPP_TPDISCONNECT_STSCHNL_RETURN__enum,
    BPP_TPDISCONNECT_JOBCHNL_RETURN__enum,
    BPP_DISCONNECT_PRINTER_RETURN__enum,
    BPP_CONNECT_STATUS_CHANNEL__enum,
    BPP_WAIT_FOR_STSCHNL_DISCONNECTED__enum,
    BPP_STSCHNL_GETEVENT_FINISH__enum,
    BPP_CREATEJOBEND_STATE_ERROR__enum,
    BPP_START_GET_EVENT__enum,
    BPP_EMBED_OBJECT_INTO_XHTML__enum,
    BPP_COMPOSE_XHTML_FAILED__enum,
    BPP_EXEC_GET_PRINTER_ATTR__enum,
    BPP_ENTRY_EXEC_PRINT_OBJECT__enum,
    BPP_PRINTER_CAPA_GOTTEN_RETURN__enum,
    BPP_PRINTER_SUPPORT_MIMETYPE__enum,
    BPP_PRINTER_NOT_SUPPORT_MIMETYPE__enum,
    BPP_GET_PRINTER_ATTR_END__enum,
    BPP_PRE_PROCESS_OBJECT_DATA__enum,
    BPP_PRE_PROCESS_OBJECT_DATA_RETURN__enum,
    BPP_COMPOSE_VCARD2XHTML__enum,
    BPP_PARSE_VCARD_FILE2STRUCT_RETURN__enum,
    BPP_IS_UTF8_TEXT_RETURN__enum,
    BPP_GET_FILE_CHARSET_RETURN__enum,
    BPP_CONVERT_FILE_TO_UTF8__enum,
    BPP_CONVERT_TO_UTF8_RETURN__enum,
    BPP_PRE_PRECESS_OBJECTDATA_FAILED__enum,




    BT_HFG_API_INIT__enum,
    BT_HFG_API_REGISTER__enum,
    BT_HFG_API_DEREGISTER__enum,
    BT_HFG_API_CREATE_SERVICE_LINK__enum,
    BT_HFG_API_DISCONNECT_SERVICE_LINK__enum,
    BT_HFG_API_CREATE_AUDIO_LINK__enum,
    BT_HFG_API_DISCONNECT_AUDIO_LINK__enum,
    BT_HFG_API_ACCEPT_CONNECT__enum,
    BT_HFG_API_REJECT_CONNECT__enum,
    BT_HFG_API_SET_INDICATOR__enum,
    BT_HFG_API_SEND_RESULT__enum,
    BT_HFG_API_ENABLE_SNIFF_MODE__enum,
    BT_HFG_CBK_SDP_QUERY__enum,
    BT_HFG_CBK_CMGR_CALLBACK__enum,
    BT_HFG_CBK_RF_CALLBACK__enum,
    BT_HFG_INFO_SDP_QUERY_COMPLETE__enum,
    BT_HFG_REGISTER_HFG_SUCCESS__enum,
    BT_HFG_INFO_REGISTER_SDP__enum,
    BT_HFG_INFO_DEREGISTER_SDP__enum,
    BT_HFG_INFO_REGISTER_SERVER_CHANNEL__enum,
    BT_HFG_INFO_DEREGISTER_SERVER_CHANNEL__enum,
    BT_HFG_INFO_OPEN_ACL_CHANNEL__enum,
    BT_HFG_INFO_OPEN_ACL_CHANNEL_SUCCESS__enum,
    BT_HFG_INFO_CLOSE_ACL_CHANNEL__enum,
    BT_HFG_INFO_START_SERVICE_QUERY__enum,
    BT_HFG_INFO_AUDIO_EXIST__enum,
    BT_HFG_INFO_NO_AUDIO_CONNECTION__enum,
    BT_HFG_INFO_AUDIO_CONENCTING__enum,
    BT_HFG_INFO_AUDIO_DISCONENCTING__enum,
    BT_HFG_INFO_CALLBACK_TO_ADP__enum,
    BT_HFG_INFO_CHANGE_STATE__enum,
    BT_HFG_INFO_SEND_RESULT__enum,
    BT_HFG_INFO_AT_SEND_RESULT__enum,
    BT_HFG_INFO_AT_SEND_COMPLETE__enum,
    BT_HFG_INFO_AT_SEND_REMAIN_DATA__enum,
    BT_HFG_INFO_RESPONSE_QUEUE_EMPTY__enum,
    BT_HFG_INFO_RESPONSE_QUEUE_NOT_EMPTY__enum,
    BT_HFG_INFO_SEND_RF_PACKET__enum,
    BT_HFG_INFO_PARSE_COMMAND__enum,
    BT_HFG_INFO_AT_DECODE_CONTINUE__enum,
    BT_HFG_INFO_RF_PACKET__enum,
    BT_HFG_INFO_FLUSH_RESPONSE__enum,
    BT_HFG_INFO_DISCONNECTING__enum,
    BT_HFG_INFO_DISCONNECTING_SDP__enum,
    BT_HFG_INFO_DISCONNECTING_SCO_CONNECT__enum,
    BT_HFG_INFO_DISCONNECTING_SCO_DISCONNECT__enum,
    BT_HFG_INFO_DISCONNECTING_RFCOMM_CONFIRM__enum,
    BT_HFG_INFO_DISCONNECTING_CMGR_CONFIRM__enum,
    BT_HFG_INFO_DISCONNECTING_REMOVE_AUDIO__enum,
    BT_HFG_INFO_DISCONNECTING_DEREGISTER_SCO__enum,
    BT_HFG_INFO_DISCONNECTING_CLOSE_RF__enum,
    BT_HFG_INFO_ALLOC_RF_CHANNEL__enum,
    BT_HFG_INFO_FREE_RF_CHANNEL__enum,
    BT_HFG_INFO_CHANNEL_STATE__enum,
    BT_HFG_INFO_CONNECT_TIMER_CANCELED__enum,
    BT_HFG_INFO_CREATE_AUDIO_CHANNEL__enum,
    BT_HFG_INFO_CODEC_USED__enum,
    BT_HFG_INFO_CODEC_STATE__enum,
    BT_HFG_INFO_SET_CODECSELECTED__enum,
    BT_HFG_INFO_SET_TARGETCODEC__enum,
    BT_HFG_INFO_ADD_AVAILCODEC__enum,
    BT_HFG_WARN_WRONG_CLASS_ID__enum,
    BT_HFG_WARN__enum,
    BT_HFG_WARN_1__enum,
    BT_HFG_WARN_CHANNEL_NOT_REGISTERED__enum,
    BT_HFG_WARN_CHANNEL_ALREADY_REGISTERED__enum,
    BT_HFG_WARN_NO_CONNECTION__enum,
    BT_HFG_WARN_REJECT_CHANNEL_FAIL__enum,
    BT_HFG_WARN_ACCEPT_CHANNEL_FAIL__enum,
    BT_HFG_WARN_OPEN_CHANNEL_FAIL__enum,
    BT_HFG_WARN_INVALID_INDICATOR_VAL__enum,
    BT_HFG_WARN_INDICATOR_REPORT_DISABLED__enum,
    BT_HFG_WARN_INVALID_INDICATOR__enum,
    BT_HFG_WARN_RESPONSE_ALREADY_QUEUED__enum,
    BT_HFG_WARN_SEND_RF_PACKET_FAILED__enum,
    BT_HFG_WARN_ME_ENCODE_FAIL__enum,
    BT_HFG_WARN_ME_DECODE_FAIL__enum,
    BT_HFG_WARN_UNRECOGNIZED_SDP_ATTR__enum,
    BT_HFG_ERROR_UNEXPECTED_STATE__enum,
    BT_HFG_ERROR__enum,
    BT_HFG_ERROR_1__enum,
    BT_HFG_ERROR_NO_FREE_RESPONSE__enum,
    BT_HFG_ERROR_INSERT_FREE_RESPONSE__enum,
    BT_HFG_CIEV_REQ__enum,
    BT_HFG_RING_REQ__enum,
    BT_HFG_REJECT_IND__enum,
    BT_HFG_ANSWER_IND__enum,
    BT_HFG_AT_CMD_IND__enum,
    BT_HFG_CHLD_IND__enum,

    BT_HFG_ADP_STATUS__enum,
    BT_HFG_ADP_STATE_CHANGE_IND__enum,
    BT_HFG_ADP_ACTIVATE_TIMEOUT_HDLER__enum,
    BT_HFG_ADP_DEACTIVATE_TIMEOUT_HDLER__enum,
    BT_HFG_ADP_CONNECT_TIMEOUT_HDLER__enum,
    BT_HFG_ADP_DISCONNECT_TIMEOUT_HDLER__enum,
    BT_HFG_ADP_SCO_CONNECT_TIMEOUT_HDLER__enum,
    BT_HFG_ADP_SCO_DISCONNECT_TIMEOUT_HDLER__enum,
    BT_HFG_ADP_START_TIMER__enum,
    BT_HFG_ADP_STOP_TIMER__enum,
    BT_HFG_ADP_HFP_VERSION__enum,
    BT_HFG_ADP_HFP_CONNECT_CNF_ACCEPT__enum,
    BT_HFG_ADP_HFP_CONNECT_CNF_REJECT__enum,
    BT_HFG_ADP_HFP_REJECT_RFC_ALC_FAILED__enum,
    BT_HFG_ADP_HFP_REJECT_RFC_GET_HFG_CH_FAILED__enum,
    BT_HFG_ADP_HFP_REJECT_RFC_SCO_REG_FAILED__enum,
    BT_HFG_ADP_HFP_CHANNEL_STATE__enum,
    BT_HFG_ADP_HFP_STORE_REMOTE_DEV__enum,
    BT_HFG_ADP_HFP_RESET_REMOTE_DEV__enum,
    BT_HFG_ADP_HFP_REACH_MAX_QUEUED_BUFFER_SIZE__enum,
    BT_HFG_ADP_HFP_FREE_QUEUED_BUFFER__enum,
    BT_HFG_ADP_HFP_FREE_ALL_QUEUED_BUFFER__enum,
    BT_HFG_ADP_HFP_RESET_QUEUED_BUFFER__enum,
    BT_HFG_ADP_HFP_STORE_RFCOMM_CHANNEL__enum,
    BT_HFG_ADP_HFP_CLOSE_CHANNEL__enum,
    BT_HFG_ADP_HFP_FIND_CHANNEL__enum,
    BT_HFG_ADP_HFP_GET_CLOSED_CHANNEL__enum,
    BT_HFG_ADP_HFP_ALLOC_RF_CHANNEL__enum,
    BT_HFG_ADP_HFP_FREE_RF_CHANNEL__enum,
    BT_HFG_ADP_HFP_RF_ACCEPT_CHANNEL__enum,
    BT_HFG_ADP_HFP_REGISTER_RF_SER_CHANNEL__enum,
    BT_HFG_ADP_HFP_DEREGISTER_RF_SER_CHANNEL__enum,
    BT_HFG_ADP_HFP_RF_CALLBACK__enum,
    BT_HFG_ADP_HFP_SEQ1__enum,
    BT_HFG_ADP_HFP_SEQ2__enum,
    BT_HFG_ADP_HFP_VERNO__enum,
    BT_HFG_ADP_HFP_RAND_NUM__enum,
    BT_HFG_ADP_HFP_CONNECT_SCO__enum,
    BT_HFG_ADP_HFP_DISCONNECT_SCO__enum,
    BT_HFG_ADP_HFP_SPK_REQ__enum,
    BT_HFG_ADP_HFP_SPK_SENT__enum,
    BT_HFG_ADP_HFP_SPK_RCV__enum,
    BT_HFG_ADP_HFP_OK_SENT__enum,
    BT_HFG_ADP_HFP_MIC_REQ__enum,
    BT_HFG_ADP_HFP_MIC_SENT__enum,
    BT_HFG_ADP_HFP_MIC_RCV__enum,
    BT_HFG_ADP_SPK_GAIN_REQ__enum,
    BT_HFG_ADP_HFP_RX__enum,
    BT_HFG_ADP_HFP_TX__enum,
    BT_HFG_SDPCALLBACK_ALLOC_CHANNEL__enum,
    BT_HFG_CMGR_CALLBACK__enum,
    BT_HFG_SDPQUERY_CALLBACK__enum,
    BT_HFG_START_SDPQUERY__enum,
    BT_HFG_CREATE_ACL_LINK__enum,
    BT_HFG_CREATE_SERVICE_LINK__enum,
    BT_HFG_CREATE_AUDIO_LINK__enum,
    BT_HFG_DISCONNECT_AUDIO_LINK__enum,
    BT_HFG_DISCONNECT_SERVICE_LINK__enum,
    BT_HFG_SUPPORT_ESCO_RETURN__enum,
    BT_HFG_CALL_CMGR_CREATEAUDIOLINK__enum,
    BT_HFG_WAITFOR_SCO_CON_TO_CLOSE_DATALINK__enum,
    BT_HFG_SCO_CON_COME_SO_CLOSE_DATALINK__enum,
    BT_HFG_CLOSE_DATALINK__enum,
    BT_HFG_DEFERED_DEREGISTERATION__enum,
    BT_HFG_DEFER_DEREGISTERATION__enum,
    BT_HFG_SDPQUERY_PRECALLBACK__enum,
    BT_HFG_SDPQUERY_HF_RECORD_FOUND__enum,
    BT_HFG_SDPQUERY_HF_ATTRIB_FOUND__enum,


    BT_HSG_ADP_STATE_CHANGE_IND__enum,
    BT_HSG_ADP_ACTIVATE_TIMEOUT_HDLER__enum,
    BT_HSG_ADP_DEACTIVATE_TIMEOUT_HDLER__enum,
    BT_HSG_ADP_CONNECT_TIMEOUT_HDLER__enum,
    BT_HSG_ADP_DISCONNECT_TIMEOUT_HDLER__enum,
    BT_HSG_ADP_START_TIMER__enum,
    BT_HSG_ADP_STOP_TIMER__enum,
    BT_HSG_ADP_HSP_STORE_REMOTE_DEV__enum,
    BT_HSG_ADP_HSP_RESET_REMOTE_DEV__enum,
    BT_HSG_ADP_HSP_SPK_REQ__enum,
    BT_HSG_ADP_HSP_SPK_SENT__enum,
    BT_HSG_ADP_HSP_SPK_RCV__enum,
    BT_HSG_ADP_HSP_OK_SENT__enum,
    BT_HSG_ADP_HSP_MIC_REQ__enum,
    BT_HSG_ADP_HSP_MIC_SENT__enum,
    BT_HSG_ADP_HSP_MIC_RCV__enum,
    BT_HSG_ADP_HSP_TX__enum,
    BT_HSG_SET_CONNECTLEVEL__enum,
    BT_HSG_RECEIVE_INVALID_DATA__enum,
    BT_HSG_CMGR_CALLBACK__enum,
    BT_HSG_SDPQUERY_CALLBACK__enum,
    BT_HSG_START_SDPQUERY__enum,
    BT_HSG_RFCOMM_CALLBACK__enum,
    BT_HSG_SEND_DATA__enum,
    BT_HSG_DO_CONNECT__enum,
    BT_HSG_DO_DISCONNECT__enum,

    HFG_RFCOMM_INCOMING_HANDSFREE_CONNECTION__enum,
    HF_RFCOMM_HANDSFREE_CONNECTION_CLOSED__enum,
    HF_UNABLE_TO_SEND_RFCOMM_PACKET__enum,
    HFG_UNABLE_TO_SEND_RFCOMM_PACKET__enum,
    HFG_RFCOMM_HANDSFREE_CONNECTION_ESTABLISHED__enum,
    HFG_RFCOMM_HANDSFREE_CONNECTION_CLOSED__enum,
    HFG_SDP_QUERY_FAILED__enum,
    HF_RFCOMM_HANDSFREE_CONNECTION_ESTABLISHED__enum,
    HF_RFCOMM_INCOMING_HANDSFREE_CONNECTION__enum,
    HF_RFCOMM_HANDSFREE_DATA_RECEIVED__enum,
    HFG_RFCOMM_HANDSFREE_DATA_RECEIVED__enum,
    HFG_COULD_NOT_OPEN_RFCOMM_CHANNEL__enum,
    AG_BTEVENT_SCO_DISCONNECT_RECEIVED__enum,
    AGCREATEACLLINK_CMGR_CREATEDATALINK__enum,
    AG_RFC_UNKNOWN_EVENT_xI__enum,
    HS_COULD_NOT_BRING_DEVICE_OUT_OF_PARK_MODE__enum,
    HS_SECURITY_MODE_3_COMPLETE__enum,
    AG_CONNECTLEVEL_AG_RFCOMMOPEN_DISCONNECTING__enum,
    AG_RF_OPENCLIENTCHANNEL_FAILED__enum,
    HS_PAIRING_FAILED__enum,
    AG_RADIO_IS_DOWN__enum,
    HS_ERROR_MESSAGE_RECEIVED__enum,
    AG_AUDIO_SCO_DISONNECT_REQUEST_FAILED_xD__enum,
    AG_RFEVENT_CLOSED_RECEIVED__enum,
    AG_CLOSING_RFCOMM__enum,
    HS_RFCOMM_CHANNEL_FAILED_TO_OPEN_ABORTING_CONNECTION__enum,
    AG_CLOSING_ACL__enum,
    AG_SCO_CONNECT_HAD_AN_ERROR__enum,
    AG_SCO_CONNECT_PENDING__enum,
    AG_LINK_DISCONNECT_FAILED_ERROR__xI__enum,
    HS_LINK_DISCONNECT_FAILED_ERROR__xI__enum,
    AG_CLOSING_SCO__enum,
    HS_ACL_LINK_DISCONNECTED__enum,
    HS_SCO_DISCONNECTED__enum,
    ATCKPD200_RECEIVED__enum,
    HS_HCI_INITIALIZATION_FAILED__enum,
    HSP_TO_HEADSET_SUCCESS__enum,
    HS_PIN_REQUEST_RECEIVED__enum,
    ERROR_DELETING_RECORD__enum,
    HSP_SDP_QUERY_FAILED__enum,
    AG_AGCONNECTLEVEL__AG_ACLOPEN__enum,
    HS_SCO_CONNECT_ERROR_IND_xD__enum,
    HS_SDP_QUERY_FAILED_TO_START_ABORTING_CONNECTION__enum,
    HS_SDP_PARSEATTRIBUTES_SUCCEEDED_RFCOMM_CHANNEL__xDUPDATED_BUFF_LEN__xD__enum,
    AG_ACL_LINK_CONNECT_FAILED__enum,
    HS_SDP_PARSEATTRIBUTES__FAILURE__enum,
    AG_AUDIO_SCO_CONNECT_REQUEST_FAILED_xD__enum,
    HS_INCOMING_CALL__enum,
    AG_ACLOPEN__FALSE__enum,
    HS_HEADSET_DEINITIALIZED__enum,
    AG_DEINITIALIZED__enum,
    HS_SDP_PARSEATTRIBUTES__CONTINUATION_STATE_QUERY_AGAIN__enum,
    AG_COULD_NOT_BRING_DEVICE_OUT_OF_PARK_MODE__enum,
    HS_SETTING_GENERAL_ACCESSIBLE_MODE__enum,
    HS_HEADSET_OUTBOUND_LINK_FAILED__enum,
    DELETING_OLD_DEVICE_RECORD__enum,
    AG_CONNECTLEVEL_AG_SCOOPEN__enum,
    HS_HEADSET_SDP_QUERY_FAILED__enum,
    HS_UNKNOWN_RFCOMM_EVENT_xI__enum,
    AG_RFCOMM_COMMAND_RECEIVED_BEFORE_A_HEADSET_HAS_BEEN_REGISTERED__enum,
    AG_AG_BUTTONPRESSED_STARTING_MTKAGCLOSELINK__enum,
    INVALID_VOLUME_GAIN_LEVEL__enum,
    AG_THE_AUDIO_GATEWAY_HAS_NOT_BEEN_INITIALIZED__enum,
    BT_HSP_FINDDEVICE_FAIL__enum,

    HFG_SERVICE_CONNECT_REQ__enum,
    HFG_MEMORY_DIAL__enum,
    HFG_REPORT_MIC_VOLUME__enum,
    HFG_LIST_CURRENT_CALLS__enum,
    HFG_REPORT_SPK_VOLUME__enum,
    HFG_DIAL_NUMBER__enum,



    HFG_HANGUP__enum,


    HFG_ANSWER_CALL__enum,

    HFG_RESPONSE_COMPLETE__enum,
    HSG_MVOLUMEDOWN_REQ__enum,

    HFG_AT_COMMAND_DATA__enum,

    HFG_HANDSFREE_FEATURES__enum,


    HSG_CONNECT_REQ__enum,
    HFG_REDIAL__enum,
    HFG_ENABLE_CALLER_ID__enum,
    HSG_DEACTIVATE_REQ__enum,
    HFG_SERVICE_DISCONNECTED__enum,

    HSG_SVOLUMEDOWN_REQ__enum,
    HFG_AUDIO_DISCONNECTED__enum,

    HFG_QUERY_SUBSCRIBER_NUMBER__enum,



    HFG_GET_LAST_VOICE_TAG__enum,


    BT_HSG_BUTTONPRESS_REQ__enum,
    HFG_ENABLE_CALL_WAITING__enum,
    HFG_GENERATE_DTMF__enum,
    HSG_AG_CONNECTED__enum,

    HSG_MVOLUMEUP_REQ__enum,

    HFG_SERVICE_CONNECTED__enum,



    HFG_CALL_HOLD__enum,
    HFG_QUERY_NETWORK_OPERATOR__enum,
    HFG_AUDIO_CONNECTED__enum,


    HFG_ENABLE_EXTENDED_ERRORS__enum,
    HFG_DISABLE_NREC__enum,
    HFG_ENABLE_VOICE_RECOGNITION__enum,




    HSG_SVOLUMEUP_REQ__enum,
    HS_SCO_CONNECT_ACCEPT_STATUS_STATUS_xD__enum,
    AG_CONNECT_LINK_FAILED_TO_START_STATUS__xD__enum,
    HS_ACCESSIBILITY_OPERATION_FAILED_STATUS__xD__enum,
    HS_CONNECT_LINK_FAILED_TO_START_STATUS__xD__enum,
    HS_SCO_CONNECT_REJECT_STATUS_STATUS_xD__enum,
    HFG_EVENT_QUERY_SUBSCRIBER_NUMBER_TRC__enum,
    HS_ANSWER_CALL__enum,
    HSSVU__enum,
    HSMVD__enum,



    BT_SPP_ACITVATE_REQ__enum,
    BT_SPP_ACITVATE_CFM__enum,
    BT_SPP_DEACITVATE_REQ__enum,
    BT_SPP_DEACITVATE_CFM__enum,
    BT_SPP_CONNECT_REQ__enum,
    BT_SPP_CONNECT_IND__enum,
    BT_SPP_DATA_REQ__enum,
    BT_SPP_DATA_CFM__enum,
    BT_SPP_DATA_IND__enum,
    BT_SPP_DATA_RES__enum,
    BT_SPP_CONTROL_REQ__enum,
    BT_SPP_CONTROL_IND__enum,
    BT_SPP_PORTNEG_IND__enum,
    BT_SPP_PORTNEG_RES__enum,
    BT_SPP_DISCONNECT_REQ__enum,
    BT_SPP_DISCONNECT_IND__enum,
    BT_SPPA_PUTBYTES__enum,
    BT_SPPA_ReturnBuf__enum,
    SPPA_SENDDATA__enum,
    SPPA_CLRTX__enum,
    SPPA_CLRRX__enum,
    BT_SPPC_WITH_PORT_TRY_TO_DISC__enum,
    BT_SPPC_CMGRHDLR_NOT_FOUND__enum,
    BT_SPPC_CMGR_BDC_ALREADY_NULL__enum,
    BT_SPPC_CMGR_EVENT_CALLBACK_EVENT_WITH_DEV_INX__enum,
    BT_SPPC_CMGR_EVENT_CALLBACK_EVENT_STATUS__enum,
    BT_SPPC_LINK_CNF_NOT_FOR_IT__enum,
    BT_SPPC_NOT_CALL_CMGRCREATELINK__enum,
    BT_SPPC_SPPCONNECT_FAILED_01__enum,
    BT_SPPC_WIAT_SDP_RSP_01__enum,
    BT_SPP_AUTH_RSP_WITH_RESULT__enum,
    BT_SPPC_SEND_UART_READY_TO_READ_TO_MMI__enum,
    BT_SPPC_NO_AVAILABLE_DEVS__enum,
    BT_SPPC_SPPCONNECT_FAILED_02__enum,
    BT_SPPC_WIAT_SDP_RSP_02__enum,
    BT_SPPC_WAIT_LINK_CNF__enum,
    BT_SPP_CMGR_CREATE_LINK_FAILED__enum,
    BT_SPPC_RECV_DEACTIVATE_REQ_WAIT_CLOSED__enum,
    BT_SPPC_RECV_DEACTIVATE_REQ_BUT_SPPCLOSE_FAILED__enum,
    BT_SPPC_RECV_DISC_REQ_WAIT_CLOSED__enum,
    BT_SPPC_SPPSTARTSERVICEQUERY_STATUS__enum,
    BT_SPPC_SDP_QUERY_NOT_FOR_IT__enum,
    BT_SPPC_RECV_CLOSED_DUE_TO_DEACTIVATE_REQ__enum,
    BT_SPPC_RECV_CLOSED_DUE_TO_DISC_REQ__enum,
    BT_SPPC_SPPCONNECT_FAILED_03__enum,
    BT_SPPC_GET_SRV_CHNL__enum,
    BT_SPPC_RECV_CLOSED_DUE_TO_DEACTIVATE_REQ_02__enum,
    BT_SPPC_RECV_CLOSED_DUE_TO_DISC_REQ_02__enum,
    BT_SPPC_CONNECTED_RECV_CLOSE_NOT_IT_ISSUED__enum,

    BT_SPPC_NO_UART_OWNER_CNF_NO_READY_TO_READ__enum,
    BT_SPPC_CALL_SPPDISC__enum,
    BT_SPP_HIGHWATER_RXBUTES_RFFRAMESIZE__enum,
    BT_SPP_CMEVENT_AUDIO_LINK_CON_SCO_INIT_CMD__enum,
    BT_SPP_CMEVENT_AUDIO_LINK_DIS_SCO_INIT_CMD_STATUS__enum,
    BT_SPP_SCO_READ_RSSI_COMPLETED__enum,
    BT_SPP_STOP_RSSI_TIMER__enum,
    BT_SPP_RSSI_TIMEOUT_DEV_STATE__enum,
    BT_SPP_REMDEV_NOT_IN_CONNECTED_RSSI_TIMEOUT__enum,
    BT_SPP_FIND_SQT_OWNER_INX__enum,
    BT_SPP_SEARCH_SPPCLI_BY_DEV_INX__enum,
    BT_SPP_REG_GENERAL_SRV_NUM__enum,
    BT_SPP_REG_SCO_SRV_NUM__enum,
    BT_SPP_REG_GENERAL_CLI_NUM__enum,
    BT_SPP_REG_SCO_CLI_NUM__enum,
    BT_SPP_NUM_DEV__enum,
    BT_SPPC_DISC_TIMER_500MS__enum,
    BT_SPPC_DISC_TIMER_50S__enum,
    BT_SPPS_RECV_FIRST_DATA__enum,
    BT_SPP_SDP_QUERY_FAILED_ADDR__enum,
    BT_SPP_CMGR_CREATELINK_STATUS__enum,
    BT_SPP_ACLLINK_EXISTED_SET_DISCFLAG_TRUE__enum,
    BT_SPP_OPEN_SCO_HDLR__enum,
    BT_SPP_DISC_SCO_HDLR__enum,
    BT_SPP_SCO_ACTIVATE_SNIFF_TIMER_IN_RFEVENT_OPEN_CLIENT__enum,
    BT_SPP_SCO_ACTIVATE_SNIFF_TIMER_IN_RFEVENT_OPEN_SERVER__enum,
    BT_SPP_SCO_RSSI_TIMER_PERIOD_LINK_MODE__enum,
    BT_SPP_SCO_ASK_RSSI_IN_ACTIVE_MODE__enum,
    BT_SPP_NOT_ASK_RSSI_IN_SNIFF_MODE__enum,
    BT_SPP_ASK_RSSI_IN_SNIFF_MODE__enum,
    BT_SPP_RECV_OPEN_IND_SET_AUTH_MODE_WAIT_PLUGOUT_CNF_FLAG__enum,
    BT_SPP_RECV_OPEN_IND_BUT_REJECT_DUE_TO_WAIT_PLUGOUT_CNF__enum,
    BT_SPPOS_DISCONNECT_IND_WAIT_PLUGOUT_FLAG__enum,
    BT_SPPA_NOT_SEND_PLUGOUT_IND__enum,
    BT_SPP_SET_WAIT_PLUGOUT_CNF_FLAG_INX__enum,
    BT_SPP_RECV_PLUGOUT_CNF_PORT__enum,
    BT_SPP_Check_FLOW_CTRL_SETTING_CASE__enum,
    REGISTER_SPP_SCO_SERVER_NUM_OF_ENTRIES_xD__enum,
    IN_SEARCHSPPCLIENTOSDEVBYSPPDEV_FIND_SPPCLIENT_AT_INXxD__enum,
    REGISTER_GENERAL_SPP_SERVER_NONSPPSCOSERVER_NUM_OF_ENTRIESxD__enum,
    REGISTER_GENERAL_SPP_CLIENT_NONSPPSCO_CLIENT_NUM_OF_ENTRIES_xD__enum,
    TRY_TO_OPEN_SCO_HANDLER__enum,

    BT_SPP_INJECT_ENABLE__enum,
    BT_SPP_INJECT_DISABLE__enum,
    BT_SPP_INJECT_ACTIVATE__enum,
    BT_SPP_INJECT_DEACTIVATE__enum,
    BT_SPP_INJECT_DISCONNECT__enum,
    BT_SPP_INJECT_CONNECT__enum,
    BT_SPP_INJECT_SEND_DATA__enum,

    CREDIT_xD_DEVCREDIT_xD__enum,
    SPP_SPPSLEEPHANDLER__enum,
    IDBT_DEBUGx04X_LENxD__enum,
    SPP_SDP_QUERY_RETURNED_xD__enum,



    BT_SIMAP_LACK_EXPECTED_PARM__enum,
    BT_SIMAP_CONTAIN_INVALID_PARM__enum,
    BT_SIMAP_DISCONNECT_REQ_IN_OPEN__enum,
    BT_SIMAP_GET_DISC_REQ_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT__enum,
    BT_SIMAP_GET_APDU_CMD_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT__enum,
    BT_SIMAP_APDU_REQ_IN_OPEN__enum,
    BT_SIMAP_ATR_REQ_IN_OPEN__enum,
    BT_SIMAP_POWER_ON_REQ_IN_OPEN__enum,
    BT_SIMAP_CARD_RDR_STATUS_REQ_IN_OPEN__enum,
    BT_SIMAP_TRANSPORT_PROTOCOL_REQ_IN_OPEN__enum,
    BT_SIMAP_POWER_OFF_REQ_IN_OPEN__enum,
    BT_SIMAP_RESET_REQ_IN_OPEN__enum,
    BT_SIMAP_ERROR_IND_IN_OPEN__enum,
    BT_SIMAP_GET_DISCGRACE_PACKET_HANDLED_WITH_SUBSTATE__enum,
    BT_SIMAP_SEGMENTS_OF_DISCGRACE_PACKET_CAN_NOT_SEND_IN_OPEN__enum,
    BT_SIMAP_GET_SIM_PACKET_HANDLED_WITH_SUBSTATE__enum,
    BT_SIMAP_STATUS_IN_SEND_DUE_TO_SET_T__enum,
    BT_SIMAP_SIM_PACKET_HANDLED_DUE_TO_SIMSERVER_RSP__enum,
    BT_SIMAP_SEGMENTS_OF_SIM_PACKET_FOR_STATUS_IND_CAN_NOT_SEND_IN_OPEN__enum,
    BT_SIMAP_GET_UNHANDLED_EVENT_IN_OPEN__enum,
    BT_SIMAP_GET_ALREADY_PROCESSED_CMD_IN_OPEN__enum,
    BT_SIMAP_CARD_STATUS_SENT_IN_CONPENDING__enum,
    BT_SIMAP_ATR_SENT_CON_IS_UP__enum,
    BT_SIM_SEND_FAILED_IN_CONNECT_PROCESS__enum,
    BT_SIMAP_GET_ATR_REQ_IN_CONPENDING__enum,
    BT_SIMAP_CMD_ALREADY_PROCESSED_IN_CONPENDING__enum,
    BT_SIMAP_NO_EXPECT_REC_ATR_REQ_IN_CONPENDING__enum,
    BT_SIMAP_RCV_UNHANDLED_EVENT_IN_CONPENDING__enum,
    BT_SIMAP_PACKET_HANDLED_IN_DISCPENDING__enum,
    BT_SIMAP_SEGMENTS_CAN_NOT_SEND_IN_DISCPENDING__enum,
    BT_SIMAP_RCV_UNHANDLED_EVENT_IN_DISCPENDING__enum,
    BT_SIMAP_RCV_CON_REQ_IN_CLOSE__enum,
    BT_SIMAP_SEND_CON_RSP_WITH_REJ_MSGSIZE__enum,
    BT_SIMAP_SIMSERVER_BUSY_FOR_ONE_CLIENT__enum,
    BT_SIMAP_RCV_UNEXPECTED_EVENT_IN_CLOSED__enum,
    BT_SIMAP_UNKNOWN_MSGID__enum,
    BT_SIMAP_CON_NOT_ACCEPTED_IN_SRVCALLBACK__enum,
    BT_SIMAP_CON_ACCEPTED_IN_SRVCALLBACK__enum,
    BT_SIMAP_CON_OPEN_IN_SRVCALLBACK__enum,
    BT_SIMAP_CON_CLOSED_IND_IN_SRVCALLBACK__enum,
    BT_SIMAP_CLOSED_IN_SRVCALLBACK__enum,
    BT_SIMAP_CLOSED_NOTIFY_SIM_TASK_IN_SRVCALLBACK__enum,
    BT_SIMAP_SIMSERVER_AVAILABLE_IN_SRVCALLBACK__enum,
    BT_SIMAP_FAILED_SEND_STATUS_IND_IN_SRVCALLBACK__enum,
    BT_SIMAP_SEND_STATUS_IND_IN_SRVCALLBACK__enum,
    BT_SIMAP_FAILED_SEND_ATR_RSP_IN_SRVCALLBACK__enum,
    BT_SIMAP_SEND_ATR_RSP_IN_SRVCALLBACK__enum,
    BT_SIMAP_SEND_APDU_TO_SIM_IN_SRVCALLBACK__enum,
    BT_SIM_SEND_POWER_OFF_TO_SIM_IN_SRVCALLBACK__enum,
    BT_SIMAP_NO_RULES_PROCESS_SIM_ON_REQ_IN_SRVCALLBACK__enum,
    BT_SIMAP_POWER_OFF_RSP_TO_CLIENT__enum,
    BT_SIMAP_SEND_POWER_ON_RSP_TO_CLIENT_IN_SRVCALLBACK__enum,
    BT_SIMAP_SEND_SET_T_RSP_TO_CLIENT_IN_SRVCALLBACK__enum,
    BT_SIMAP_NO_RULES_PROCESS_RESET_REQ_IN_SRVCALLBACK__enum,
    BT_SIMAP_SEND_RESET_RSP_TO_CLIENT_IN_SRVCALLBACK__enum,
    BT_SIMAP_SEND_CARD_RDS_RSP_TO_CLIENT_IN_SRVCALLBACK__enum,
    BT_SIMAP_STATUS_IND_SENT_IN_SRVCALLBACK__enum,
    BT_SIMAP_ADD_SDPRECORD_OK__enum,
    BT_SIMAP_REMOVE_SECREC_REG__enum,
    BT_SIMAP_SEC_REG_FAILED__enum,
    DEREGISTER_SRV_CHANNEL__enum,
    BT_SIMAP_FAILED_CALL_RFREGSRVCHNL__enum,
    BT_SIMAP_FAILED_CLOSE_CON_IMMD__enum,
    BT_SIMAP_SRVSTATE_RCV_DEACTIVATE__enum,
    BT_SIMAP_FAILED_CLOSE_CON_DEACTIVATE__enum,
    BT_SIMAP_FAILED_CLOSE_CON_WITH_TYPE__enum,
    BT_SIMAP_CLOSE_CON_WITH_GRACEFUL__enum,
    BT_SIMAP_SIMSERVER_STATE__enum,
    BT_SIMAP_CON_CNF_ERROR_FROM_SIM__enum,
    BT_SIMAP_SIMSERVER_STATE_SUBSTATE__enum,
    BT_SIMAP_RESET_CNF_ERROR_FROM_SIM__enum,
    BT_SIMAP_RESET_RSP_TO_CLIENT__enum,
    BT_SIMAP_POWER_ON_ERROR_FROM_SIM__enum,
    BT_SIMAP_SEND_POWER_ON_RSP_TO_CLIENT__enum,
    BT_SIMAP_SET_T_ERROR_FROM_SIM__enum,
    BT_SIMAP_SEND_SET_T_RSP_TO_CLIENT__enum,
    BT_SIMAP_RESET_CNF_ERR_RFOM_SIM_IN_CONPENDING__enum,
    BT_SIMAP_RESET_RSP_NOT_EXPECTED_IN_OPEN__enum,
    BT_SIMAP_GET_RESET_RSP_NOT_IN_CONPENDING_OR_OPEN__enum,
    BT_SIMAP_RCV_APDU_RSP_FROM_SIM__enum,
    BT_SIMAP_SEND_APDU_RSP_TO_CLIENT__enum,
    BT_SIMAP_NOT_EXPECTED_RCV_APDU_RSP_FROM_SIM__enum,
    BT_SIMAP_RCV_GRACEFUL_DISC_PREVIOUSLY__enum,
    BT_SIMAP_ERROR_AND_NOTIFY_SIM_TO_RECOVERY__enum,
    BT_SIMAP_ERR_NO_CON_REQ_SENT_TO_SIM__enum,
    BT_SIMAP_ERR_NO_DISC_REQ_SENT_TO_SIM__enum,
    BT_SIMAP_RCV_POWER_OFF_CNF_FROM_SIM__enum,
    BT_SIMAP_SEND_POWER_OFF_RSP_TO_CLIENT__enum,
    BT_SIMAP_NOT_EXPECTED_RCV_POWER_OFF_RSP_FROM_SIM__enum,
    BT_SIMAP_SIM_REGSERVER__enum,
    BT_SIMAP_ATR_TIMEOUT_HDLR__enum,
    BT_SIMAP_GRACEFUL_TIMEOUT_HDLR__enum,
    BT_SIMAP_GRACEFUL_TIMEOUT_HDLR_CAN_NOT_CLOSE__enum,
    BT_SIMAP_START_TIMER__enum,
    BT_SIMAP_STOP_TIMER__enum,
    BT_SIMAP_NO_DEFINED_MSG_ID__enum,
    BT_SIMAP_SRV_CLOSESTATE_DISC_SENT__enum,
    BT_SIMAP_RFCOMM_SIMSRV_BOTHCLOSED_RECV_DEACTIVE_REQ__enum,
    BT_SIMAP_RELEASE_CONID_IN_DEACTIVE_REQ_HDLR__enum,
    BT_SIMAP_RECV_DEACTIVE_CHECK_DISCGRACE_TIMER__enum,
    BT_SIMAP_DO_NOTHING_IN_DISC_PENDING_STATE_IN_DEACTIVE_REQ__enum,
    BT_SIMAP_CLOSE_RFCOMM_IN_CONN_PENDING_STATE_IN_DEACTIVE_REQ__enum,
    BT_SIMAP_USE_DISCIND_FOR_DEACTIVE_REQ__enum,
    BT_SIMAP_USE_RFCLOSECHNL_FOR_DEACTIVE_REQ__enum,

    BT_SIMAP_MMI_REJECT_SAP_CON_IN_AUTH_RSP_HDLR__enum,


    BT_SIMAP_DISC_REQ_HDLR_NO_ENTRY_TO_DISC__enum,
    BT_SIMAP_DISC_REQ_HDLR_ALREADY_DISC_PENDING__enum,
    BT_SIMAP_RECV_DISC_REQ_SIMSRV_CLOSED_WAIT_DISCCNF__enum,
    BT_SIMAP_SIMSRV_MODE__enum,
    BT_SIMAP_CON_CNF_HDLR_NOT_EXPECT_SIM_CON_CNF__enum,


    BT_SIMAP_OPENSTATE_SEND_POWERON_RSP_FAILED_STATUS__enum,

    BT_SIMAP_FAILED_STATUS__enum,
    BT_SIMAP_OPENSTATE_SETT_CNF_HDLR_STATUS__enum,

    BT_SIMAP_RESET_CNF_HDLR_CT__enum,
    BT_SIMAP_APDU_RSP_FROM_SIM_NOT_ACCESSIBLE__enum,
    BT_SIMAP_RFCHNLCLOSED_SEND_RSP_FAILED_OK__enum,
    BT_SIMAP_DISC_CNF_HDLR_CARDSTATUS__enum,
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR00__enum,
    BT_SIMAP_DISC_CNF_CASE0__enum,
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR01__enum,
    BT_SIMAP_DISC_CNF_CASE1__enum,
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR02__enum,
    BT_SIMAP_DISC_CNF_CASE2__enum,
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR03__enum,
    BT_SIMAP_DISC_CNF_CASE3__enum,
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR04__enum,
    BT_SIMAP_DISC_CNF_CASE4__enum,
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR05__enum,
    BT_SIMAP_DISC_CNF_CASE5__enum,
    BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR06__enum,
    BT_SIMAP_DISC_CNF_CASE6__enum,
    BT_SIMAP_SHOW_APDUREQCONTENT__enum,
    BT_SIMAP_SHOW_ONE_BYTE__enum,
    BT_SIMAP_CHECK_PACKET_IS_GOT_FROM_LIST__enum,
    BT_SIMAP_OPEN_STATE_MSGTYPE_CARDSTATUS_SUBSTATE__enum,
    BT_SIMAP_OPENSTATE_SEND_DISCRSP_FAILED__enum,
    BT_SIMAP_SET_T_PACKET_HANDLED_WITH_PARMTYPE__enum,
    BT_SIMAP_ALREADY_SENT_APDU_RSP_RECV_DISC_REQ__enum,
    BT_SIMAP_NOT_CORRECT_PKT_RECV_IN_OPEN_STATE__enum,
    BT_SIMAP_IN_OPEN_STATE_CHECK_SRVFLAGS__enum,
    BT_SIMAP_CLOSE_RFCOMM_FAILED__enum,
    BT_SIMAP_NO_CONRSP_WITH_OK_RETURNED__enum,
    BT_SIMAP_RESENT_MTU_ACCEPTED__enum,
    BT_SIMAP_SEND_CONRSPERR_FAILED__enum,
    BT_SIMAP_CLOSED_EVENT_DUE_TO_REJECT_SECOND_CLIENT__enum,
    BT_SIMAP_SRVCALLBACK_CASE0__enum,
    BT_SIMAP_SRVCALLBACK_RECV_CLOSED_CHECK_TIMER__enum,
    BT_SIMAP_SET_T0_T1_NOT_SUPPORT_T1_T0__enum,
    BT_SIMAP_CLIENT_REQ_T_TYPE__enum,
    BT_SIMAP_RELEASE_SAP_CONID_CASE1__enum,
    BT_SIMAP_SIMSRV_CLOSED_RFCOMM_CLOSED_DUE_TO_DEACTIVATE_REQ__enum,
    BT_SIMAP_SIMSRVSENDSTATUS__enum,
    BT_SIMAP_STATUS_IND_NOT_ACCESSIBLE_IN_SLOW_CON_MODE__enum,
    BT_SIMAP_SIMSRVRSP_NO_PKT__enum,
    BT_SIMAP_SLOW_CON_MODE_NOT_EXPECT_RECV_ATR_REQ__enum,
    BT_SIMAP_PKT_INUSE__enum,
    BT_SIMAP_FIND_FREE_PKT_INX__enum,
    BT_SIMAP_ALLPKT_USED__enum,
    BT_SIMAP_SIMSRV_AVAILABLE_AGAIN__enum,
    BT_SIMAP_CARDSTATUS_IN_POWER_OFF_HDLER__enum,
    BT_SIMAP_ATR_TIMEOUT_NOT_IN_POWERON_STATE__enum,
    BT_SIMAP_ATRTIMEOUT_SRVSTATE_AND_FLAG__enum,
    BT_SIMAP_GRACEFUL_TIMEOUT_NOT_IN_POWEROFF_STATE__enum,
    BT_SIMAP_GRACEFUL_DISC_TIMEOUT_SRVSTATE_AND_SUBSTATE__enum,
    BT_SIMAP_GRACEFUL_DISC_TIMEOUT_CLOSE_CON_WITH_IMMED_TYPE__enum,
    BT_SIMAP_SEND_IMMED_DISC_IND_FAILED_STATUS__enum,
    BT_SIMAP_SEND_GRACEFUL_DISC_IND_FAILED_STATUS__enum,
    BT_SIMAP_CURRENT_DISC_TYPE__enum,
    BT_SIMAP_MAKE_SIMCARD_UNAVAILABLE_THEN_SEND_STATUS_IND__enum,




    SIMULATE_MMI_TO_SEND_DEACTIVATE_MSG_TO_SIMAP__enum,
    NEW_CURRENT_T_TYPExD__enum,
    CHANGE_TO_IT_MODE__enum,
    NEW_SUPPORTED_T_TYPExD__enum,
    EXIT_SNIFF_MODE_FOR_SAP_CONNECTION__enum,
    NEW_SIMCARDSTATUSxXxXxX__enum,
    SIMULATE_MMI_TO_SEND_ACTIVATE_MSG_TO_SIMAP__enum,
    SIMULATE_MMI_SEND_DISC_REQ_WITH_GRACEFUL_TYPE_TO_BT__enum,
    SIMULATE_MMI_SEND_DISC_REQ_WITH_IMMEDIATE_TYPE_TO_BT__enum,
    SIMULATE_MMI_TO_SEND_AUTHORIZATION_RESPONSE_MSG_TO_SIMAP__enum,
    SIMULATE_SIM_CARD_NOT_ACCESSIBLE_FOR_PTS_TESTING__enum,

    BT_SIMAP_SIMCARDREADER_STATUS__enum,
    BT_SIMAP_SEND_PACKET__enum,
    BT_SIMAP_SEND_ATRRSP_ERR__enum,
    BT_SIMAP_SEND_ATRRSP__enum,
    BT_SIMAP_RFSEND_RETURN__enum,
    BT_SIMAP_CLOSE_RFCOMM_CHNL__enum,
 BT_SIMAP_RESET_IND__enum,
 BT_SIMAP_NOTIFY_APP_RESET_IND__enum,

 BT_SIMAP_ADP_INIT__enum,
 BT_SIMAP_ADP_DEINIT__enum,
 BT_SIMAP_ADP_RESET__enum,
 BT_SIMAP_ADP_HDL_MSG__enum,





    BT_DG_ACITVATE_REQ__enum,
    BT_DG_DEACITVATE_REQ__enum,
    BT_DG_DEACITVATE_CFM__enum,
    BT_DG_CONNECT_IND__enum,
    BT_DG_DATA_REQ__enum,
    BT_DG_DATA_CFM__enum,
    BT_DG_DATA_IND__enum,
    BT_DG_DATA_RES__enum,
    BT_DG_CONTROL_REQ__enum,
    BT_DG_CONTROL_IND__enum,
    BT_DG_PORTNEG_IND__enum,
    BT_DG_PORTNEG_RES__enum,
    BT_DG_DISCONNECT_REQ__enum,
    BT_DG_DISCONNECT_IND__enum,




    BT_AVRCP_ROLE_STATE__enum,
    BT_AVRCP_AVTIVATE_DEREGISTER_RESULT__enum,
    BT_AVRCP_AVTIVATE_REGISTER_RESULT__enum,
    BT_AVRCP_DEAVTIVATE_DEREGISTER_RESULT__enum,
    BT_AVRCP_CONNECT_RESULT__enum,
    BT_AVRCP_CONNECT_IND_RES_RESULT__enum,
    BT_AVRCP_DISCONNECT_RESULT__enum,
    BT_AVRCP_CMD_REQ_RESULT__enum,
    BT_AVRCP_CMD_RSP_IND_RESULT__enum,
    BT_AVRCP_CALLBACK__enum,
    AVC_SENDCONTINUEBT_DEBUGx02X__enum,
    SEND_CONTINUE_CHNL_STATE_IS_AVC_TRANS_STATE_FIRST__enum,
    BT_AVC_TX_TIMEOUT__enum,
    BT_AVCRCP_DISCONNECT_IN_FRAGEMENT__enum,
    AVRCP_CALLBACK_EVENT_CONNECT__enum,
    AVRCP_CALLBACK_EVENT_CONNECT_IND__enum,
    AVRCP_CALLBACK_EVENT_CONNECT_IND_RSP__enum,
    AVRCP_CALLBACK_EVENT_DISCONNECT__enum,
    AVRCP_CALLBACK_EVENT_CMD_RSP__enum,
    AVRCP_CALLBACK_EVENT_CMD_IND__enum,
    AVRCP_CALLBACK_EVENT_CMD_MORE_DATA__enum,
    AVRCP_CALLBACK_EVENT_CMD_TX_DONE__enum,
    BT_AVRCP_UTIL_REGISTERCB__enum,
    BT_AVRCP_UTIL_INIT__enum,
    BT_AVRCP_UTIL_ACTIVATE_REQ__enum,
    BT_AVRCP_UTIL_DEACTIVATE_REQ__enum,
    BT_AVRCP_UTIL_CONNECT_REQ__enum,
    BT_AVRCP_UTIL_CONNECT_IND_RES__enum,
    BT_AVRCP_UTIL_DISCONNECT_REQ__enum,
    BT_AVRCP_UTIL_CMD_FRAME_REQ__enum,
    BT_AVRCP_UTIL_CMD_FRAME_RSP_IND__enum,
    BT_AVRCP_UTIL_APP_CALLBACK__enum,
    BT_AVRCP_SDP_REGISTER__enum,
    BT_AVRCP_SDP_DEREGISTER__enum,
    BT_AVRCP_SDP_CREATEACL__enum,
    BT_AVRCP_SDP_START_QUERY__enum,
    BT_AVRCP_SDP_QUERY_CB__enum,
    BT_AVRCP_SDP_CONNECT_TIMEOUT__enum,
    BT_AVRCP_BROWSE_CALLBACK__enum,
    BT_AVRCP_BROWSE_CALLBACK_CONNECT__enum,
    BT_AVRCP_BROWSE_CALLBACK_CONNECT_IND__enum,
    BT_AVRCP_BROWSE_CALLBACK_CONNECT_IND_RSP__enum,
    BT_AVRCP_BROWSE_CALLBACK_DISCONNECT__enum,
    BT_AVRCP_CONTINUE_TIMEOUT__enum,
    BT_AVRCP_CONTINUE_SEND_FAIL__enum,
    BT_AVRCP_CONNECT_CHECK__enum,
    BT_AVRCP_DISCONNECT_CHECK__enum,
    BT_AVRCP_TX_FINISH__enum,
    BT_AVRCP_UPDATE_TXSTATE__enum,
    BT_AVRCP_BWS_UPDATE_TXSTATE__enum,
    BT_AVRCP_BWS_NO_CLEANUP_PACKET__enum,
    BT_AVRCP_SEND_NEXT_PACKET__enum,
    BT_AVRCP_FAIL_NEXT_PACKET__enum,
    BT_AVRCP_TX_FINISH_NOT_EMPTY__enum,
    BT_AVRCP_BWS_AVCTP_CALLBACK__enum,
    BT_AVRCP_BWS_CONNECT_CHECK__enum,
    BT_AVRCP_BWS_WRONG_CHANNEL__enum,
    BT_AVRCP_DISC_FLAG_IS__enum,
    BT_AVRCP_BWS_DISC_CHECK__enum,
    BT_AVRCP_BWS_AUTO_ACCEPT__enum,
    BT_AVRCP_BWS_REJECT_CONNECTION__enum,
    BT_AVRCP_BWS_FRAGMENT_PACKET_WRN__enum,
    BT_AVRCP_BWS_IGNORE_FRAGMENT__enum,
    BT_AVRCP_BWS_TX_FINISH__enum,
    BT_AVRCP_BWS_NEXT_PACKET__enum,
    BT_AVRCP_BWS_FAIL_NEXT__enum,
    BT_AVRCP_BWS_REGISTER_FAIL__enum,
    BT_AVRCP_COMPOSE_SINGLE_CMD__enum,
    BT_AVRCP_WRONG_PASSTHRU_SIZE__enum,
    BT_AVRCP_WRONG_QUEUE_PACKET_TYPE__enum,
    BT_AVRCP_COMPOSE_SINGLE_RSP__enum,
    BT_AVRCP_SEND_QUEUE_PACKET__enum,
    BT_AVRCP_CMD_TYPE_NOT_SINGLE__enum,
    BT_AVRCP_PUT_PACKET_TO_QUEUELIST__enum,
    BT_AVRCP_CONTINUE_QUEUE_PACKET__enum,
    BT_AVRCP_CONTINUE_QUEUE_FAIL__enum,
    BT_AVRCP_BWS_SEND_QUEUE_PACKET__enum,
    BT_AVRCP_BWS_PACKET_TOO_LARGE__enum,
    BT_AVRCP_BWS_PUT_PACKET_TO_QUEUELIST__enum,
    BT_AVRCP_GET_SINGLE_AVRCP_MTU__enum,
    BT_AVRCP_CMGR_CALLBACK__enum,
    BT_AVRCP_SDP_TG_CALLBACK__enum,
    BT_AVRCP_SDP_TG_INFO__enum,
    BT_AVRCP_SDP_CT_CALLBACK__enum,
    BT_AVRCP_SDP_CT_INFO__enum,
    BT_AVRCP_PARSE_RSP_FAIL__enum,
    BT_AVRCP_DISC_BWS_CHANNEL__enum,
    BT_AVRCP_UTIL_PICK_PACKET__enum,
    BT_AVRCP_UTIL_INSERT_PACKET__enum,
    BT_AVRCP_UTIL_RSP_PICK_PACKET__enum,
    BT_AVRCP_UTIL_REJECT_PICK_PACKET__enum,
    BT_AVRCP_UTIL_BWS_PICK_PACKET__enum,
    BT_AVRCP_UTIL_BWS_INSERT_PACKET__enum,
    BT_AVRCP_UTIL_BWS_REJECT__enum,
    BT_AVRCP_UTIL_NO_AVAILABLE__enum,
    BT_AVRCP_SEND_CMD_PDU_FAIL__enum,
    BT_AVRCP_BWS_SEND_CMD_PDU_FAIL__enum,
    BT_AVRCP_PARSE_AV13_PDU_FAIL__enum,
    BT_AVRCP_CB_TX_ERROR__enum,
    BT_AVRCP_NOT_SIG_COMPANY_ID__enum,
    BT_AVRCP_UNKNOW_AV_TYPE__enum,
    BT_AVRCP_PDUID_NOT_MATCH__enum,
    BT_AVRCP_ABORT_CONTINUE__enum,
    BT_AVRCP_REJECT_BWS_PACKET__enum,
    BT_AVRCP_CONTI_NO_DATA__enum,
    BT_AVRCP_TOO_MANY_ITEM__enum,
    BT_AVRCP_ENCODE_FOLDER_ITEM__enum,
    BT_AVRCP_TOO_LARGE_LENGTH__enum,
    BT_AVRCP_WRONG_DATA_OFFSET__enum,
    BT_AVRCP_ENCODE_FOLDER_ITEM_FAIL__enum,
    BT_AVRCP_NO_MORE_DATA_SPACE__enum,
    BT_AVRCP_INIT_PICK_PACKET__enum,
    BT_AVRCP_SEND_REJECT_PACKET__enum,
    BT_AVRCP_BWS_SEND_REJECT_PACKET__enum,
    BT_AVRCP_EMPTY_PACKET_LIST__enum,
    BT_AVRCP_MARSHAL_BUFFER_WRN__enum,
    BT_AVRCP_CONTINUE_NO_BUFFER__enum,
    BT_AVRCP_NOT_IN_MORE_STATE__enum,
    BT_AVRCP_THROW_MORE_DATA__enum,
    BT_AVRCP_AVCTP_AVC_RESPONSE__enum,
    BT_AVRCP_PDU_LENGTH_NOT_MATCH__enum,
    BT_AVRCP_CB_CMD_IND__enum,
    BT_AVRCP_RECEIVE_CONTINUE_PACKET__enum,
    BT_AVRCP_UNKNOW_FOLDER_ITEM__enum,
    BT_AVRCP_PARSE_REG_EVENT_FAIL__enum,
    BT_AVRCP_SMALL_PACKET_SIZE_FAIL__enum,
    BT_AVRCP_BWS_CMD_RSP__enum,
    BT_AVRCP_RECEIVE_RSP__enum,
    BT_AVRCP_SEND_RSP__enum,
    BT_AVRCP_SEND_GENERIC_RSP__enum,
    BT_AVRCP_STATUS_REPORT_FAIL__enum,
    BT_AVRCP_RSP_PACKET_INFO__enum,
    BT_AVRCP_STATUS_REPORT__enum,
    BT_AVRCP_REDUCE_ITEM_LENGTH__enum,
    BT_AVRCP_WRONG_ITEM_DATA_OFFSET__enum,
    BT_AVRCP_PACKET_START_TIMER__enum,
    BT_AVRCP_PACKET_CANCEL_TIMER__enum,
    BT_AVRCP_PACKET_TIMER_TIMEOUT__enum,
    BT_AVRCP_IGNORE_CONTINUE_EVENT__enum,
    BT_AVRCP_CMD_IND_RECEIVER__enum,
    BT_AVRCP_AVC_HEADER_NOT_MATCH__enum,
    BT_AVRCP_CMD_IND_DISPATCHER__enum,




    BT_AVCTP_INIT_LOG__enum,
    BT_AVCTP_DEINIT_LOG__enum,
    BT_AVCTP_REGISTER_LOG__enum,
    BT_AVCTP_DEREGISTER_LOG__enum,
    BT_AVCTP_DEREGISTER_ALL_LOG__enum,
    BT_AVCTP_CONNECT_API_LOG__enum,
    BT_AVCTP_CONNECT_RSP_API_LOG__enum,
    BT_AVCTP_DISCONNECT_API_LOG__enum,
    BT_AVCTP_SEND_COMMAND_API_LOG__enum,
    BT_AVCTP_SEND_RESPONSE_LOG__enum,
    BT_AVCTP_SEND_RAWMESSAGE_LOG__enum,
    BT_AVCTP_STATE_DISCONNECTED_LOG__enum,
    BT_AVCTP_STATE_CONN_PENDING_LOG__enum,
    BT_AVCTP_STATE_DISCON_PENDING_LOG__enum,
    BT_AVCTP_STATE_CONN_DISCONNECTED_LOG__enum,
    BT_AVCTP_STATE_CONN_INCOMING_LOG__enum,
    BT_AVCTP_STATE_DISC_PENDING_LOG__enum,
    BT_AVCTP_STATE_DISC_INCOMING_LOG__enum,
    BT_AVCTP_STATE_CONNECTED_LOG__enum,
    BT_AVCTP_STATE_INIT_MACHINE_LOG__enum,
    BT_AVCTP_CONN_FIND_CHANNEL_LOG__enum,
    BT_AVCTP_CONN_FIND_FREECHANNEL_LOG__enum,
    BT_AVCTP_CONN_ASSIGN_CHANNEL_LOG__enum,
    BT_AVCTP_L2CALLBACK_LOG__enum,
    BT_AVCTP_L2CALLBACK_REJECT_LOG__enum,
    BT_AVCTP_L2CALLBACK_NEW_CONNECTE_LOG__enum,
    BT_AVCTP_CONN_FREE_CHANNEL_LOG__enum,
    BT_AVCTP_CONNECT_REQ_LOG__enum,
    BT_AVCTP_DISCONNECT_REQ_LOG__enum,
    BT_AVCTP_CONNECT_RSP_LOG__enum,
    BT_AVCTP_CONN_CB__enum,
    BT_AVCTP_MSG_CB__enum,
    BT_AVCTP_MSG_CB_IGNORE_EVENT__enum,
    BT_AVCTP_MSG_HANDLE_COMMAND__enum,
    BT_AVCTP_MSG_HANDLE_REJECT__enum,
    BT_AVCTP_MSG_HANDLE_RESPONSE__enum,
    BT_AVCTP_MSG_SEND_COMMAND__enum,
    BT_AVCTP_MSG_INIT__enum,





    BT_GAVDP_FIND_CMGR_NODE__enum,
    BT_GAVDP_FIND_CMGR_FOUND__enum,
    BT_GAVDP_FIND_CMGR_NOT_FOUND__enum,

    BT_GAVDP_FIND_CHNL_NODE__enum,
    BT_GAVDP_FIND_CHNL_FOUND__enum,
    BT_GAVDP_FIND_CHNL_NOT_FOUND__enum,

    BT_GAVDP_ALL_CMGR_USED__enum,

    BT_GAVDP_ALL_CHNL_USED__enum,

    BT_GAVDP_CHNL_FIND_SEP__enum,
    BT_GAVDP_CHNL_FIND_SEP_FOUND__enum,
    BT_GAVDP_CHNL_FIND_SEP_NOT_FOUND__enum,

    BT_GAVDP_CMGR_FIND_SEP__enum,
    BT_GAVDP_CMGR_FIND_SEP_FOUND__enum,
    BT_GAVDP_CMGR_FIND_SEP_NOT_FOUND__enum,

    BT_GAVDP_ID_FIND_SEP__enum,
    BT_GAVDP_ID_FIND_SEP_FOUND__enum,
    BT_GAVDP_ID_FIND_SEP_NOT_FOUND__enum,

    BT_GAVDP_SEP_AVAILABLE__enum,
    BT_GAVDP_SEP_NOT_AVAILABLE__enum,

    BT_GAVDP_DEV_CONNECTED__enum,
    BT_GAVDP_DEV_NOT_CONNECTED__enum,

    BT_GAVDP_LOCAL_SBC_BYTE0__enum,
    BT_GAVDP_LOCAL_SBC_BYTE1__enum,
    BT_GAVDP_LOCAL_SBC_BYTE2__enum,
    BT_GAVDP_LOCAL_SBC_BYTE3__enum,
    BT_GAVDP_REMOTE_SBC_BYTE0__enum,
    BT_GAVDP_REMOTE_SBC_BYTE1__enum,
    BT_GAVDP_REMOTE_SBC_BYTE2__enum,
    BT_GAVDP_REMOTE_SBC_BYTE3__enum,
    BT_GAVDP_CFG_SBC_BYTE0__enum,
    BT_GAVDP_CFG_SBC_BYTE1__enum,
    BT_GAVDP_CFG_SBC_BYTE2__enum,
    BT_GAVDP_CFG_SBC_BYTE3__enum,
    BT_GAVDP_NO_MATCHED_SMAPLING_FREQ__enum,
    BT_GAVDP_NO_MATCHED_CH_MODE__enum,
    BT_GAVDP_NO_MATCHED_BLK_LEN__enum,
    BT_GAVDP_NO_MATCHED_SBAND_NUM__enum,
    BT_GAVDP_NO_MATCHED_ALLOC__enum,

    BT_GAVDP_LINK_AVDTP_CHNL__enum,
    BT_GAVDP_LINK_AVDTP_CHNL_BUSY__enum,
    BT_GAVDP_LINK_AVDTP_CHNL_PENDING__enum,
    BT_GAVDP_LINK_AVDTP_CHNL_FAILED__enum,

    BT_GAVDP_DISCOVER_STRM_REQ__enum,
    BT_GAVDP_DISCOVER_STRM_REQ_PENDING__enum,

    BT_GAVDP_GET_CAP_REQ__enum,
    BT_GAVDP_GET_CAP_REQ_PENDING__enum,

    BT_GAVDP_SET_CFG_REQ__enum,
    BT_GAVDP_SET_CFG_REQ_NO_MATCHED_CODEC__enum,
    BT_GAVDP_SET_CFG_REQ_PENDING__enum,

    BT_GAVDP_OPEN_STRM_REQ__enum,
    BT_GAVDP_OPEN_STRM_REQ_PENDING__enum,



    BT_GAVDP_GAVDP_CBK_INFO1__enum,
    BT_GAVDP_GAVDP_CBK_SEP_STAT__enum,
    BT_GAVDP_GAVDP_CBK_STRM_EST_FAIL__enum,

    BT_GAVDP_CMGR_CBK_INFO1__enum,
    BT_GAVDP_CMGR_CBK_CON_OUTGOING__enum,
    BT_GAVDP_CMGR_CBK_LINK_CON_CNF_SUCCESS__enum,
    BT_GAVDP_CMGR_CBK_LINK_CON_CNF_FAILED__enum,

    BT_GAVDP_AVDTP_CBK_INFO1__enum,
    BT_GAVDP_AVDTP_CBK_SEP_NOT_REG__enum,
    BT_GAVDP_AVDTP_CBK_USE_FAKE_SEP__enum,
    BT_GAVDP_AVDTP_CBK_SEP_STAT__enum,
    BT_GAVDP_AVDTP_CBK_CONNECTED__enum,
    BT_GAVDP_AVDTP_CBK_CONNECTED_OUT__enum,
    BT_GAVDP_AVDTP_CBK_CONNECTED_IN__enum,
    BT_GAVDP_AVDTP_CBK_CONNECTED_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_CONNECT_IND_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_CONNECT_IND__enum,
    BT_GAVDP_AVDTP_CBK_CONNECT_IND_CMGR_SUCCESS__enum,
    BT_GAVDP_AVDTP_CBK_CONNECT_IND_CMGR_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_CONNECT_IND_NO_SEP__enum,
    BT_GAVDP_AVDTP_CBK_DISCOVER_IND_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_DISCOVER_IND_ACPT__enum,
    BT_GAVDP_AVDTP_CBK_STRM_INFO__enum,
    BT_GAVDP_AVDTP_CBK_STRM_INFO_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_DISCOVER_CNF__enum,
    BT_GAVDP_AVDTP_CBK_DISCOVER_CNF_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_DISCOVER_CNF_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_RAW_DATALEN__enum,
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_RAW_DATA0__enum,
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACP_SEP_ID__enum,
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACP_SEP_ADDR__enum,
    BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACPT__enum,
    BT_GAVDP_AVDTP_CBK_CAP_INFO__enum,
    BT_GAVDP_AVDTP_CBK_CAP_INFO_CNT__enum,
    BT_GAVDP_AVDTP_CBK_CAP_CNF__enum,
    BT_GAVDP_AVDTP_CBK_CAP_CNF_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_CAP_CNF_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_RAW_DATALEN__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_RAW_DATA012__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_PKT_DATA012__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_SEP_NOT_FOUND__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_CODEC_MISMATCHED__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_IND_ACPT__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_CNF__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_CNF_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_SET_CFG_CNF_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_OPEN_IND_BAD_SEP__enum,
    BT_GAVDP_AVDTP_CBK_OPEN_IND_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_OPEN_IND__enum,
    BT_GAVDP_AVDTP_CBK_OPEN_CNF__enum,
    BT_GAVDP_AVDTP_CBK_OPEN_CNF_SUCCESS__enum,
    BT_GAVDP_AVDTP_CBK_OPEN_CNF_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_OPEN_CNF_HAS_OPEND__enum,
    BT_GAVDP_AVDTP_CBK_OPEN_CNF_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_START_IND_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_START_IND__enum,
    BT_GAVDP_AVDTP_CBK_START_IND_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_START_CNF_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_START_CNF_STAT_TRANS__enum,
    BT_GAVDP_AVDTP_CBK_START_CNF_SUCCESS__enum,
    BT_GAVDP_AVDTP_CBK_START_CNF_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_START_CNF_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_SUSPEND_IND_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_SUSPEND_IND__enum,
    BT_GAVDP_AVDTP_CBK_SUSPEND_IND_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_STAT_TRANS__enum,
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_SUCCESS__enum,
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_RECONFIG_IND_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_RECONFIG_IND__enum,
    BT_GAVDP_AVDTP_CBK_RECONFIG_IND_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_SUCCESS__enum,
    BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_ABORT_IND_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_ABORT_IND__enum,
    BT_GAVDP_AVDTP_CBK_ABORT_CNF_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_ABORT_CNF_STAT_TRANS__enum,
    BT_GAVDP_AVDTP_CBK_ABORT_CNF__enum,
    BT_GAVDP_AVDTP_CBK_ABORT_CNF_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_CLOSE_IND_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_CLOSE_IND__enum,
    BT_GAVDP_AVDTP_CBK_CLOSE_IND_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_CMD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_STAT_TRANS__enum,
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_SUCCESS__enum,
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_FAILED__enum,
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_BAD_STAT__enum,
    BT_GAVDP_AVDTP_CBK_CLOSE_CNF_DISC_SIG_CHNL__enum,
    BT_GAVDP_AVDTP_CBK_PACKET_SENT__enum,
    BT_GAVDP_AVDTP_CBK_DISC_SIG_CHNL__enum,
    BT_GAVDP_AVDTP_CBK_DISC_CMGR__enum,
    BT_GAVDP_AVDTP_CBK_DISC_CHNL__enum,
    BT_GAVDP_AVDTP_CBK_DISC_STRM_CHNL__enum,



    BT_GAVDP_INIT__enum,
    BT_GAVDP_INIT_ALREADY__enum,

    BT_GAVDP_REG__enum,
    BT_GAVDP_REG_NO_SEP__enum,
    BT_GAVDP_REG_SEP_ID__enum,
    BT_GAVDP_REG_CHNL__enum,
    BT_GAVDP_REG_STRM__enum,
    BT_GAVDP_REG_STRM_ID__enum,
    BT_GAVDP_REG_CMGR__enum,
    BT_GAVDP_REG_INS_SEP__enum,
    BT_GAVDP_REG_INS_CHNL__enum,
    BT_GAVDP_REG_INS_CMGR__enum,

    BT_GAVDP_DEREG__enum,
    BT_GAVDP_DEREG_NO_SEP__enum,
    BT_GAVDP_DEREG_STRM__enum,
    BT_GAVDP_DEREG_CMGR_NOT_RECALL__enum,
    BT_GAVDP_DEREG_CMGR__enum,
    BT_GAVDP_DEREG_CHNL_NOT_RECALL__enum,
    BT_GAVDP_DEREG_CHNL__enum,

    BT_GAVDP_EST_CON_REQ__enum,
    BT_GAVDP_EST_CON_REQ_STAT__enum,
    BT_GAVDP_EST_CON_REQ_BAD_STAT__enum,
    BT_GAVDP_EST_CON_REQ_STAT_TRANS__enum,
    BT_GAVDP_EST_CON_REQ_CMGR_PENDING__enum,
    BT_GAVDP_EST_CON_REQ_CMGR_SUCCESS__enum,
    BT_GAVDP_EST_CON_REQ_CMGR_FAILED__enum,

    BT_GAVDP_EST_CON_RSP__enum,
    BT_GAVDP_EST_CON_RSP_STAT__enum,
    BT_GAVDP_EST_CON_RSP_STAT_TRANS__enum,
    BT_GAVDP_EST_CON_RSP_ACPT__enum,
    BT_GAVDP_EST_CON_RSP_REJ__enum,
    BT_GAVDP_EST_CON_RSP_BAD_STAT__enum,

    BT_GAVDP_START_STRM_REQ__enum,
    BT_GAVDP_START_STRM_REQ_STAT__enum,
    BT_GAVDP_START_STRM_REQ_BAD_STAT__enum,
    BT_GAVDP_START_STRM_REQ_PENDING__enum,
    BT_GAVDP_START_STRM_REQ_FAILED__enum,

    BT_GAVDP_START_STRM_RSP__enum,
    BT_GAVDP_START_STRM_RSP_STAT__enum,
    BT_GAVDP_START_STRM_RSP_ACPT__enum,
    BT_GAVDP_START_STRM_RSP_REJ__enum,
    BT_GAVDP_START_STRM_RSP_BAD_STAT__enum,

    BT_GAVDP_SUSPEND_STRM_REQ__enum,
    BT_GAVDP_SUSPEND_STRM_REQ_STAT__enum,
    BT_GAVDP_SUSPEND_STRM_REQ_BAD_STAT__enum,
    BT_GAVDP_SUSPEND_STRM_REQ_PENDING__enum,
    BT_GAVDP_SUSPEND_STRM_REQ_FAILED__enum,

    BT_GAVDP_SUSPEND_STRM_RSP__enum,
    BT_GAVDP_SUSPEND_STRM_RSP_STAT__enum,
    BT_GAVDP_SUSPEND_STRM_RSP_ACPT__enum,
    BT_GAVDP_SUSPEND_STRM_RSP_REJ__enum,
    BT_GAVDP_SUSPEND_STRM_RSP_BAD_STAT__enum,

    BT_GAVDP_CHG_PARA_REQ__enum,
    BT_GAVDP_CHG_PARA_REQ_STAT__enum,
    BT_GAVDP_CHG_PARA_REQ_BAD_STAT__enum,
    BT_GAVDP_CHG_PARA_REQ_PENDING__enum,
    BT_GAVDP_CHG_PARA_REQ_FAILED__enum,

    BT_GAVDP_CHG_PARA_RSP__enum,
    BT_GAVDP_CHG_PARA_RSP_STAT__enum,
    BT_GAVDP_CHG_PARA_RSP_ACPT__enum,
    BT_GAVDP_CHG_PARA_RSP_REJ__enum,
    BT_GAVDP_CHG_PARA_RSP_BAD_STAT__enum,

    BT_GAVDP_ABORT_REQ__enum,
    BT_GAVDP_ABORT_REQ_STAT__enum,
    BT_GAVDP_ABORT_REQ_BAD_STAT__enum,
    BT_GAVDP_ABORT_REQ_PENDING__enum,
    BT_GAVDP_ABORT_REQ_FAILED__enum,

    BT_GAVDP_ABORT_RSP__enum,
    BT_GAVDP_ABORT_RSP_STAT__enum,
    BT_GAVDP_ABORT_RSP_ACPT__enum,

    BT_GAVDP_REL_CON_REQ__enum,
    BT_GAVDP_REL_CON_REQ_STAT__enum,
    BT_GAVDP_REL_CON_REQ_BAD_STAT__enum,
    BT_GAVDP_REL_CON_REQ_PENDING__enum,
    BT_GAVDP_REL_CON_REQ_FAILED__enum,

    BT_GAVDP_REL_CON_RSP__enum,
    BT_GAVDP_REL_CON_RSP_STAT__enum,
    BT_GAVDP_REL_CON_RSP_ACPT__enum,
    BT_GAVDP_REL_CON_RSP_REJ__enum,
    BT_GAVDP_REL_CON_RSP_BAD_STAT__enum,

    BT_GAVDP_SEND_DATA_REQ__enum,
    BT_GAVDP_SEND_DATA_REQ_STAT__enum,
    BT_GAVDP_SEND_DATA_REQ_BAD_LEN__enum,
    BT_GAVDP_SEND_DATA_REQ_FATAL__enum,
    BT_GAVDP_SEND_DATA_REQ_SUCCESS__enum,



    BT_A2DP_CMGR_CLOSE__enum,
    BT_A2DP_CMGR_EVENT_CALLBACK__enum,
    BT_A2DP_SDP_EVENT_CALLBACK__enum,
    BT_A2DP_SDP_REQUERY_SUCCESS__enum,
    BT_A2DP_SDP_SUCCESS_AND_CONN_GAVDP__enum,
    BT_A2DP_DO_SDP_AGAIN__enum,
    BT_A2DP_DO_SDP_QUERY__enum,
    BT_A2DP_BAD_ADDRESS__enum,
    BT_A2DP_RELEASE_STREAM_HDL__enum,
    BT_A2DP_CONTINUE_OPEN_REQ__enum,
    BT_A2DP_DEVICE_OPENED__enum,
    BT_A2DP_GET_STREAM_HDL_ERR__enum,
    BT_A2DP_GET_STREAM_SEP_ERR__enum,
    BT_A2DP_CONTINUE_OPEN_INFO__enum,
    BT_A2DP_STREAM_OPEN__enum,
    BT_A2DP_OPEN_CNF_INFO__enum,
    BT_A2DP_ADDR__enum,
    BT_A2DP_STREAM_HANDLE__enum,
    BT_A2DP_OPEN_IND__enum,
    BT_A2DP_OPEN_RES__enum,
    BT_A2DP_RECONFIG_REQ__enum,
    BT_A2DP_RECONFIG_CNF__enum,
    BT_A2DP_RECONFIG_IND__enum,
    BT_A2DP_RECONFIG_RES__enum,
    BT_A2DP_START_REQ__enum,
    BT_A2DP_START_CNF__enum,
    BT_A2DP_START_IND__enum,
    BT_A2DP_START_RES__enum,
    BT_A2DP_SUSPEND_REQ__enum,
    BT_A2DP_SUSPEND_CNF__enum,
    BT_A2DP_SUSPEND_IND__enum,
    BT_A2DP_SUSPEND_RES__enum,
    BT_A2DP_CLOSE_REQ__enum,
    BT_A2DP_CLOSE_CNF__enum,
    BT_A2DP_CLOSE_IND__enum,
    BT_A2DP_CLOSE_RES__enum,
    BT_A2DP_ABORT_REQ__enum,
    BT_A2DP_ABORT_CNF__enum,
    BT_A2DP_ABORT_IND__enum,
    BT_A2DP_ABORT_RES__enum,
    BT_A2DP_DELAY_SEND_QOS__enum,
    BT_A2DP_SEND_STREAM_DATA__enum,
    BT_A2DP_GAVDP_EVENT_CALLBACK__enum,
    BT_A2DP_INIT__enum,
    BT_A2DP_DEINIT__enum,
    BT_A2DP_ACTIVATE__enum,
    BT_A2DP_DEACTIVATE__enum,
    BT_A2DP_STOP_FM__enum,
    BT_A2DP_START_FM__enum,
    BT_A2DP_SUSPEND_FM__enum,
    BT_A2DP_RESUME_FM__enum,
    BT_A2DP_STOP_FM_REQ__enum,
    BT_A2DP_FM_SET_CODEC_ELEMENT__enum,
    BT_A2DP_STREAM_SEND_DATA_REQ__enum,
    BT_A2DP_PANIC__enum,
    BT_A2DP_PRINT_STATE__enum,
    BT_A2DP_PRINT_VALUE1__enum,
    BT_A2DP_PRINT_VALUE2__enum,
    BT_A2DP_PRINT_VALUE3__enum,
    BT_A2DP_PRINT_VALUE4__enum,
    BT_A2DP_PRINT_VALUE5__enum,
    BT_A2DP_PRINT_VALUE6__enum,




    BT_JSR82_DEACTIVATE_STATUD_CONID__enum,
    BT_JSR82_DEACTIVATE_FIND_CHNL_INX__enum,
    BT_JSR82_DEACTIVATE_DEREG_CHNL_STATUS__enum,
    BT_JSR82_VM_END_PEND_CON_REQ_PS_TYPE__enum,
    BT_JSR82_VM_DISC_ALL_LINK_PEND_CON_REQ_NO_TYPE__enum,
    BT_JSR82_AUTH_COMPLETE_BUT_ONE_ENCRYPT_ON_GOING__enum,
    BT_JSR82_SEC_LINK_ENCRYPT_STATUS__enum,
    BT_JSR82_GET_SESSION_INX__enum,
    BT_JSR82_SEARCH_L2CAP_CNTX_DUMP_SESSION_INFO__enum,
    BT_JSR82_SEARCH_L2CAP_CNTX_L2CAP_INFO__enum,
    BT_JSR82_SEARCH_L2CAP_CNTX_FIND_EXISTED_L2CID__enum,
    BT_JSR82_ADD_NEW_L2CAP_TO_CNTX__enum,
    BT_JSR82_ADD_CREATE_L2CAP_TO_CNTX__enum,
    BT_JSR82_FREE_L2CAP_CNTX__enum,
    BT_JSR82_NO_L2CAP_CON_RELEASE_FIND_BY_ID__enum,
    BT_JSR82_REG_SEC_RECORD_ON_CHNL__enum,
    BT_JSR82_FIND_ALLOCATED_L2CAP_PSM_INX__enum,
    BT_JSR82_FIND_EMPTY_PSM_INX_REG_STATUS__enum,
    BT_JSR82_FREE_L2CAP_PSM_INX__enum,
    BT_JSR82_FIND_ONE_ALLOCATED__enum,
    BT_JSR82_DUMP_L2CAP_PSM_INFO__enum,
    BT_JSR82_FREE_L2CAP_PSM_NEW_SEC_VAL__enum,
    BT_JSR82_DUMP_FIND_L2CAP_PSM_CNTX__enum,
    BT_JSR82_FIND_L2CAP_PSM_CNTX_RESULT__enum,
    BT_JSR82_DUMP_FIND_L2CAP_PSM_LISTEN_CNTX__enum,
    BT_JSR82_FIND_L2CAP_PSM_LISTEN_CNTX_RESULT__enum,
    BT_JSR82_TURN_OFF_ALL_SERVICES_DISC_ALL_LINKS__enum,
    BT_JSR82_ACL_ADD_LINK__enum,
    BT_JSR82_FIND_A_ACTIVE_LINK_USED_NO__enum,
    BT_JSR82_FIND_ONE_EMPTY_IN_ADD_LINK__enum,
    BT_JSR82_REMOVE_ACL_LINK__enum,
    BT_JSR82_REMOVE_LINK_USED_NO__enum,
    BT_JSR82_NEXT_CHECK_IN_REMOVE_LINK__enum,
    BT_JSR82_CHECK_DISC_ACL_NO__enum,
    BT_JSR82_CHECK_DISC_ACL_RFCOMM_CON_REQ_ONGOING__enum,
    BT_JSR82_CHECK_DISC_ACL_L2CAP_CON_REQ_ONGOING__enum,
    BT_JSR82_CHECK_DISC_TIMER__enum,
    BT_JSR82_DISC_TIMER_PEND_CON_REQ_NO__enum,
    BT_JSR82_RFCALLBACK_INFO__enum,
    BT_JSR82_RFCOMM_TX_COMPLETED__enum,
    BT_JSR82_RFEVENT_CLOSED_IND__enum,
    BT_JSR82_RFEVENT_CLOSED_RESET_SESSION_CREDIT__enum,
    BT_JSR82_RFSRV_CLOSED__enum,
    BT_JSR82_RFCHNL_DISC_COMPLETED__enum,
    BT_JSR82_RFCOMM_RX_IND_LEN__enum,
    BT_JSR82_RFCOMM_OPEN_IND_AUTHORIZE_SETTING__enum,
    BT_JSR82_RFSRV_OPEN__enum,
    BT_JSR82_L2CAPCALL_INFO__enum,
    BT_JSR82_L2CAP_CON_IND_STATUS__enum,
    BT_JSR82_NOT_ADD_NEW_L2CAP_CNTX__enum,
    BT_JSR82_L2CAP_DISCONNECTED_CHNL_LINK__enum,
    BT_JSR82_L2CAP_DISCONNECTED_INX_CON_ID__enum,
    BT_JSR82_L2CAP_DISCONNECTED_STATE__enum,
    BT_JSR82_L2CAP_DISC_COMPLETED__enum,
    BT_JSR82_L2CAP_CONNECTED_CHNL__enum,
    BT_JSR82_L2CAP_CLIENT_CONNECTED_INX__enum,
    BT_JSR82_L2CAP_CONNECTED_CON_ID__enum,
    BT_JSR82_L2CAP_OPEN_CHNL_FAILED__enum,
    BT_JSR82_L2CAP_RX_IND_LEN__enum,
    BT_JSR82_CMGRCLICALLBACK_NOT_ITS_BD_ADDR__enum,
    BT_JSR82_CLI_CMGR_CALLBACK_CON_ID_EVENT_STATUS__enum,
    BT_JSR82_LINK_COF_CHECK_VM_DISC_PEND_CON_NO__enum,
    BT_JSR82_LINK_CON_CNF_TRY_OPEN_RFCHNL__enum,
    BT_JSR82_LINK_CON_CNF_GET_L2CAP_PSM_INX__enum,
    BT_JSR82_LINK_CON_CNF_TRY_OPEN_L2CAP_CHNL_CID__enum,
    BT_JSR82_LINK_CON_CNF_RET_STATUS__enum,
    BT_JSR82_OPEN_CHNL_FAILED_LINK_CON_CNF_STATUS__enum,
    BT_JSR82_VM_END_ACL_SETUP_OK_BUT_PS_TYPE_REJECTED__enum,
    BT_JSR82_SRV_CMGR_CALLBACK_EVENT_STATUS__enum,
    BT_JSR82_ENABLE_SERVICE_FIND_NO_CHNL__enum,
    BT_JSR82_DISABLE_SERVICE_NO_EMPTY_CHANNEL__enum,
    BT_JSR82_ACLCHECKANDDISCONNECTACLNO__enum,
    BT_JSR82_RELEASE_SRVCHNL_INX_SERVER_CHNL_NUMxD_STILL_HAS_OTHER_REIGSTERED_ONES__enum,
    BT_JSR82_APPSDPDBDEACTIVATE__enum,
    BT_JSR82_RELEASE_PSM_INX_PSM_ERROR_NOT_REGISTERED__enum,
    BT_JSR82_SESSIONAPENABLESERVICECFN_PS_TYPEx02X__enum,
    BT_JSR82_HANDLESESSIONAPTURNOFFSERVICE__enum,
    BT_JSR82_ENABLE_SERVICE_HANDLESESSIONAPENABLESERVICEREGISTRATION_CMGR_HANDLER_STATUSx02X__enum,
    BT_JSR82_ENABLE_SERVICE_AVAILABLE_CHANNELx08X__enum,
    BT_JSR82_SENDTORFCOMM_REMOVE_A_FREE_PKT_TO_SEND_DATA__enum,
    BT_JSR82_GET_FREE_SRVCHNL_INX_GET_FREE_CHANNEL_xD__enum,
    BT_JSR82_HANDLEJSR82DEACTIVATE__enum,
    BT_JSR82_SENDTOL2CAP_REMOVE_A_FREE_PKT_TO_SEND_DATA__enum,
    BT_JSR82_RELEASE_SRVCHNL_INX_CURRENT_RFCOMM_CHANNEL_USAGE_TABLEx08X__enum,
    BT_JSR82_SESSIONAPENABLERESULTEVENT__enum,
    BT_JSR82_SESSIONAPDISCONNECTALLACLCFN__enum,
    BT_JSR82_CREDIT_xD_DEVCREDIT_xD__enum,
    BT_JSR82_L2CAP_CON_REQOPEN_CHANNEL_FAILED__enum,
    BT_JSR82_HANDLESETACLSECURITYREQTHIS_LINKS_AUTH_OR_ENCRYPT_ALREADY_ONGOING__enum,
    BT_JSR82_L2CAP_CON_REQ_INIT_CON_IDx02X__enum,
    BT_JSR82_GET_FREE_PSM_INX_GET_FREE_PSM_xD__enum,
    BT_JSR82_SESSIONAPTURNONSERVICECFN__enum,
    BT_JSR82_SESSIONAPCONNECTCFN_SIZEx02X__enum,
    BT_JSR82_HANDLESETACLSECURITYREQ_RETURN_FROM_SEC_SETLINKENCRYPTION_ERRxD__enum,
    BT_JSR82_CON_RSP_FIND_JSR82_CHANNEL_x02X__enum,
    BT_JSR82_HANDLESETACLSECURITYREQ_RETURN_FROM_SEC_AUTHENTICATELINK_ERRxD__enum,
    BT_JSR82_GET_FREE_PSM_INX_CURRENT_L2CAP_PSM_USAGE_TABLEx08X__enum,
    BT_JSR82_ENABLE_SERVICE_L2CAP_PSMx08X__enum,
    BT_JSR82_SENDTOL2CAP_AFTER_JBT_SESSION_DEVTX_WITH_PS_L2CAP_GET_BYTESxD__enum,
    BT_JSR82_GET_FREE_SRVCHNL_INX_CURRENT_RFCOMM_CHANNEL_USAGE_TABLEx08X__enum,
    BT_JSR82_SET_HIGH_WATER_MARK_SESSION_AP_RECORD_PTRCOD_IDx02X_TRANSACTION_IDx04X__enum,
    BT_JSR82_SENDTORFCOMM_AFTER_JBT_SESSION_DEVTX_GET_BYTESxD__enum,
    BT_JSR82_SESSIONAPCLOSEINDx02X_x02X_x04X__enum,
    BT_JSR82_DISABLE_SERVICE_FIND_JSR82_CHANNEL_x02X__enum,
    BT_JSR82_CON_RSP_NO_EMPTY_CHANNEL__enum,
    BT_JSR82_HANDLESESSIONAPCONNECTREQ__enum,
    BT_JSR82_HANDLESESSIONAPSDPREQ__enum,
    BT_JSR82_SESSIONAPCONNECTIND_SIZEx02X__enum,
    BT_JSR82_RFCOMM_CON_REQ_EMPTY_CHANNEL_FIND__enum,
    BT_JSR82_TRIGGER_PANIC_MECHANISM_BY_JVN_FOR_TESTING_ERROR_HANDLE__enum,
    BT_JSR82_SESSIONAPCONNECTCFN__enum,
    BT_JSR82_SESSIONAPRXRSP__enum,
    BT_JSR82_HANDLESETACLSECURITYREQ_REMDEV_INDEXxDENABLE_AUTHENTICATION_LINKxD_ENABLE_ENCRYPTxD__enum,
    BT_JSR82_HANDLESETACLSECURITYREQ_CURRENT_LINK_AUTHSTATExDENCRYPTSTATExD__enum,
    BT_JSR82_ADVANCECREDIT_CHNL_STATExD_NOT_IN_CONNECTED__enum,
    BT_JSR82_RX_CNF_FIND_JSR82_CHANNEL_x02X__enum,
    BT_JSR82_RFCALLBACKFUNC_CHAN_REMDEV_IS_NULL_EVENTxD_PARMS_REMDEVx08X__enum,
    BT_JSR82_RFCOMM_CON_REQ_NO_EMPTY_CHANNEL__enum,
    BT_JSR82_TX_REQ_NO_EMPTY_CHANNEL__enum,
    BT_JSR82_VM_TERMINATION_PENDING_CON_REQ_IS_ACL_LINK_SETUP_OKBUT_L2CAP_IS_REJECTED__enum,
    BT_JSR82_RFCOMM_CON_REQ_OPEN_RFCOMM_CHNL_FAILED__enum,
    BT_JSR82_L2CAP_CON_REQ_EMPTY_CHANNEL_FIND__enum,
    BT_JSR82_RELEASE_PSM_INX_RETURN_PSM_IDxD__enum,
    BT_JSR82_HANDLESESSIONAPENABLESERVICEREGISTRATION_ON_SERV_CHNL__xD_AND_STATUSx02X__enum,
    BT_JSR82_VM_TERMINATE_PENDING_CON_REQ_CONNECTED_THEN_DISC_THIS_LINK__enum,
    BT_JSR82_SEARCHL2CAPCONTEXT__enum,
    BT_JSR82_VM_TERMINATION_PENDING_CON_REQ_IS_ACL_LINK_SETUP_OKBUT_RFCOMM_IS_REJECTED__enum,
    BT_JSR82_SESSIONAPTXCFN__enum,
    BT_JSR82_TURN_OFF_SERVICE_EMPTY_CHANNEL_IDLE_WRONG_STATE__enum,
    BT_JSR82_TX_REQ_FIND_JSR82_CHANNEL_x02X__enum,
    BT_JSR82_HANDLESESSIONAPTURNONSERVICE__enum,
    BT_JSR82_SESSIONAPRXINDEVENT__enum,
    BT_JSR82_DISC_REQ_FIND_JSR82_CHANNEL_x02X__enum,
    BT_JSR82_DISABLE_SERVICE_DEREGISTER_CHANNEL_x02X__enum,
    BT_JSR82_RELEASE_PSM_INX_CURRENT_L2CAP_PSM_USAGE_TABLEx08X__enum,
    BT_JSR82_SESSIONAPTXREADYIND__enum,
    BT_JSR82_SESSIONAPCONNECTIND__enum,
    BT_JSR82_L2CAP_CON_REQ_L2CAP_PSM_INDEXx02X__enum,
    BT_JSR82_GET_FREE_PSM_INX_CURRENT_MASKx08X__enum,
    BT_JSR82_SESSIONAPRXIND__enum,
    BT_JSR82_HANDLESETACLSECURITYREQTRY_TO_AUTHENTICATE_ACL_LINK__enum,
    BT_JSR82_ENABLE_SERVICE_PS_TYPEx02X__enum,
    BT_JSR82_RX_CNF_NO_EMPTY_CHANNEL__enum,
    BT_JSR82_SESSIONAPRXREADYIND__enum,
    BT_JSR82_HIGHWATERxD_SPPOS_RXBYTESxD_RF_FRAMESIZExD__enum,
    BT_JSR82_L2CAP_CON_REQ_NO_EMPTY_CHANNEL__enum,
    BT_JSR82_SESSIONAPTURNOFFSERVICECFN__enum,
    BT_JSR82_HANDLESETACLSECURITYREQREMOTE_LINK_IS_NOT_EXISTED__enum,
    BT_JSR82_TURN_ON_SERVICE_EMPTY_CHANNEL_IDLE_WRONG_STATE__enum,
    BT_JSR82_RELEASE_SRVCHNL_INX_CHANNEL_ERROR_NOT_REGISTERED__enum,
    BT_JSR82_SESSIONAPTXCFNEVENT__enum,
    BT_JSR82_SESSIONAPDISABLESERVICECFN__enum,
    BT_JSR82_SESSIONAPENABLESERVICECFN__enum,
    BT_JSR82_GET_FREE_SRVCHNL_INX_CURRENT_MASKx08X__enum,
    BT_JSR82_DISABLE_SERVICE_INXx02X_STATUSx02X_CON_IDx02X__enum,
    BT_JSR82_ENABLE_SERVICE_CON_IDx02X__enum,
    BT_JSR82_DISABLE_SERVICE_L2CAP_CON_INDEX_xD_IS_NOT_IDLE_xD__enum,
    BT_JSR82_DISC_REQ_NO_EMPTY_CHANNEL__enum,
    BT_JSR82_ADVANCECREDITCALL_RF_ADVANCECREDIT__enum,
    BT_JSR82_SORT_ATTIBS_ATTRIBUTE_SIZExD__enum,
    BT_JSR82_SDPDBDEACTIVATE_FIND_INDEX_I_TO_UNREGISTERx02X__enum,
    BT_JSR82_VERIFY_RECORD_RECORD_LENGTHx04X__enum,
    BT_JSR82_SORT_ATTIBS_AFTER_SORTING__enum,
    BT_JSR82_RETRIEVERECORDCNF_RECORD_SIZExDX__enum,
    BT_JSR82_VERIFY_RECORD_THE_ELEMENT_TYPE_x02X__enum,
    BT_JSR82_VERIFY_RECORD_TYPEx02X_SIZE_INDEXx02X__enum,
    BT_JSR82_VERIFY_RECORD_C_THE_ELEMENT_SIZE_x02X__enum,
    BT_JSR82_SORT_ATTIBS_ATTRIBUTE_IDxD__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_INVALID_PARAMETERS__enum,
    BT_JSR82_VERIFY_RECORD_B_THE_ELEMENT_SIZE_x02X__enum,
    BT_JSR82_DEREG_RECORD_FIND_INDEX_I_TO_UNREGISTERx02X__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_TYPEx02X_SIZE_INDEXx02X__enum,
    BT_JSR82_VERIFY_RECORD_FINALLY_ATTRIBUTE_INDEXx02X__enum,
    BT_JSR82_VERIFY_RECORD_DATA0x02X_DATA1x02X__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_VERIFY_FAILED__enum,
    BT_JSR82_SORT_ATTIBS_INDEXxD__enum,
    BT_JSR82_VERIFY_RECORD_ATTRIBUTE_VALUE_ELEMENT_HEADER_SIZE_x04X__enum,
    BT_JSR82_GETAVAILABLERECORDHANDLER_RECORD_HANDLERx08X__enum,
    BT_JSR82_REG_RECORD_FIND_INDEX_I_AVAILABLEx02X__enum,
    BT_JSR82_VERIFY_RECORD_ATTRIBUTE_INDEX_xD_TOO_LARGE__enum,
    BT_JSR82_GETAVAILABLERECORDHANDLER_FIND_INDEX_I_AVAILABLEx02X__enum,
    BT_JSR82_RETRIEVERECORDCNF_RESULTx02X__enum,
    BT_JSR82_VERIFY_RECORD_A_THE_ELEMENT_SIZE_x02X__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_PEASE_DATA_ELEMENT_FAILED__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_X3_THE_ELEMENT_SIZE_x02X__enum,
    BT_JSR82_REG_RECORD_REMOVE_STATUSxD__enum,
    BT_JSR82_DEREG_RECORD_STATUSx02X__enum,
    BT_JSR82_RETRIEVERECORDCNF_RAW_DATAx02Xx02X_x02Xx02X__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_X1_THE_ELEMENT_SIZE_x02X__enum,
    BT_JSR82_REG_RECORD_SDP_ADDRECORD_STATUSx02X__enum,
    BT_JSR82_VERIFY_RECORD_VERIFY_FAILED__enum,
    BT_JSR82_REG_RECORD_THE_ATTRIBUTE_NO_ISx02X__enum,
    BT_JSR82_RETRIEVERECORDCNF_HANDLEx08X__enum,
    BT_JSR82_REG_RECORD_UPDATE_THE_RECORD__enum,
    BT_JSR82_VERIFY_RECORD_ATTRIBUTE_VALUE_ELEMENT_SIZE_x04X__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_X2_THE_ELEMENT_SIZE_x02X__enum,
    BT_JSR82_VERIFY_RECORD_E_THE_ELEMENT_SIZE_x02X__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_INVALID_SIZE_DESCRIPTOR_VALUEx02X__enum,
    BT_JSR82_REG_RECORD_INDEXxD__enum,
    BT_JSR82_VERIFY_RECORD_ITS_DATAx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X__enum,
    BT_JSR82_REG_RECORD_NO_AVAILABLE_SERVICE_RECORD__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_X5_THE_ELEMENT_SIZE_x02X__enum,
    BT_JSR82_DEREG_RECORD_NO_REGISTERED_SERVICE_RECORD__enum,
    BT_JSR82_REG_RECORD_RECORD_PARSE_ERROR__enum,
    BT_JSR82_REG_RECORD_ATTRIBUTE_IDxD__enum,
    BT_JSR82_VERIFY_RECORD_INVALID_SIZE_DESCRIPTOR_VALUEx02X__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_DATA_ELEMENT_TOO_LARGE_NOT_CHECK__enum,
    BT_JSR82_REG_RECORD_ATTRIBUTE_SIZExD__enum,
    BT_JSR82_VERIFY_DATA_ELEMENT_ATTRIBUTE_VALUE_ELEMENT_SIZE_x02X__enum,
    BT_JSR82_VERIFY_RECORD_THE_ATTRIBUTE_ID_xD__enum,
    BT_JSR82_L2_DISCON_IND_INX_L2CID__enum,
    BT_JSR82_L2_DISCONNECTED_IND_SRV_CHNL_CLOSED_NEVER_OPENED__enum,
    BT_JSR82_L2_DISCONNECTED_IND_NOT_NOTIFY_JBT_L2CON_STATE__enum,
    BT_JSR82_SDAP_SEARCH_RAW_RETRY_WAIT_FOR_DISC_COMPLETE_TIMEOUT__enum,
    BT_JSR82_CHECK_CONTINUE_QUERY__enum,
    BT_JSR82_CHECK_CONSTATE_VALUE__enum,
    BT_JSR82_CHECK_DUMP_CONSTATE_DATA_INX__enum,
    BT_JSR82_TRY_CONTINUE_LEN_CONTSTATE_PTR__enum,
    BT_JSR82_TRY_CONTINUE_SDP_TO_REMDEV__enum,
    BT_JSR82_CMGR_CREATEDATALINK_STATUS__enum,
    BT_JSR82_HANDLE_AUTH_CNF_ERRCODE__enum,
    BT_JSR82_HANDLE_AUTH_CNF_DEL_DEV_RECORD_STATUS__enum,
    BT_JSR82_RFCOMM_CLOSED_DUE_TO_ACCESS_DENIED_DEL_DEV_RECORD_STATUS__enum,
    BT_JSR82_L2CAP_DEREGISTER_PSM_STATUS__enum,
    BT_JSR82_CHECK_DISC_ACL_L2CAP_SRV_INX_STATE__enum,
    BT_JSR82_CHECK_DSIC_ACL_VM_PEND_CON_NUM__enum,
    BT_JSR82_L2CAP_DEREGISTER_PSM_CHNL_STATE__enum,
    BT_JSR82_FORCE_DEREGISTER_PSM_INX__enum,
    BT_JSR82_L2CAP_DUMMY_CALLBACK_CID_EVENT_STATUS__enum,
    BT_JSR82_CON_REQ_TIMEOUT_HDLR__enum,
    BT_JSR82_SDP_REQ_TIMEOUT_HDLR__enum,
    BT_JSR82_CON_REQ_PREVIOUS_ONGOING__enum,
    BT_JSR82_SDP_REQ_PREVIOUS_ONGOING__enum,
    BT_JSR82_L2CAP_DISCONNECTED_DUE_TO_SECURITY_BLOCK_DEL_DEV_RECORD_STATUS__enum,
    JSR82_SESSION_CONNECT_REQUEST__enum,
    JSR82_FIND_L2CAP_IDBT_DEBUGx04X__enum,
    BT_JSR82_SESSIONAPCLOSEIND__enum,
    BT_JSR82_CMGRCLIENTCALLBACK__enum,
    MSG_ID_BT_JSR82_CONNECT_CFN_TRC__enum,
    MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF_TRC__enum,
    FUNC_JSR82_RING_BUFFER_SET_READY_TO_READ_AS_FALSE__enum,
    FUNC_JSR82_RING_BUFFER_ALLOCATE_READRINGBUF_FAILED__enum,
    FUNC_JSR82_RING_BUFFER_ALLOCATE_WRITERINGBUF_FAILED__enum,
    FUNC_JSR82_RING_BUFFER_READ_01__enum,
    FUNC_JSR82_RING_BUFFER_READ_02__enum,
    BT_JSR82_DEVRX_DATA_LOST_DUE_TO_RING_BUFFER_FULL__enum,
    BT_JSR82_PUTBYTES_INVALID_INDEX__enum,
    BT_JSR82_PUTBYTES_INVALID_STATE__enum,
    BT_JSR82_DATA_AVAILABLE_IND_INVALID_INDEX__enum,
    BT_JSR82_DATA_AVAILABLE_IND_INVALID_STATE__enum,
    BT_JSR82_DATA_AVAILABLE_IND_WAIT_IND_RSP__enum,
    BT_JSR82_DATA_AVAILABLE_IND_RSP_INVALID_INDEX__enum,
    BT_JSR82_DATA_AVAILABLE_IND_RSP_INVALID_STATE__enum,
    BT_JSR82_L2CAPCALL_INFO_NO_MATCHED_CONTEXT__enum,
    BT_JSR82_L2CAP_CALLBACK_L2EVENT_DISCONNECTED_DUE_TO_REJECT__enum,



    FUNC_JBT_INIT__enum,
    FUNC_JBT_RX_MSG__enum,
    FUNC_JBT_RESULT__enum,
    FUNC_JBT_OPCODE__enum,
    FUNC_JBT_TRANSACTION_ID__enum,
    FUNC_JBT_SHOW_8BYTES__enum,
    FUNC_JBT_SHOW_COD__enum,
    FUNC_JBT_SHOW_NAME__enum,
    FUNC_JBT_ADDR__enum,
    FUNC_JBT_UT_INQUIRY_COMPLETED__enum,
    FUNC_JBT_UT_INQUIRY_CANCEL_COMPLETED__enum,
    FUNC_JBT_DISCOVERY_STATE__enum,
    FUNC_JBT_GET_ACL_INFO__enum,
    FUNC_JBT_SDPDB_GET_RECORD_HDL__enum,
    FUNC_JBT_SDPDB_REGISTER_RECORD_RESULT__enum,
    FUNC_JBT_SDPDB_DEREGISTER_RECORD_RESULT__enum,
    FUNC_JBT_COMMAND_ENQUEUE__enum,
    FUNC_JBT_COMMAND_QUEUE_INFO__enum,
    FUNC_JBT_COMMAND_DEQUEUE__enum,
    FUNC_JBT_CMD_INSERT_QUEUE__enum,
    FUNC_JBT_CMD_KICK_OFF__enum,
    FUNC_JBT_CMD_ONE__enum,
    FUNC_JBT_SESSION_REGISTRATION_RESULT__enum,
    FUNC_JBT_SESSION_TURNON_RESULT__enum,
    FUNC_JBT_SPP_GET_DATA__enum,
    FUNC_JBT_SPP_SEND_DATA__enum,
    FUNC_JBT_CAN_NOT_GET_ONE_FREE_ENTRY__enum,
    FUNC_JBT_CAN_NOT_FIND_EXISTING_ENTRY__enum,
    FUNC_JBT_SET_READY_TO_READ_AS_FALSE__enum,
    FUNC_JBT_READ__enum,
    FUNC_JBT_READ_01__enum,
    FUNC_JBT_READ_02__enum,
    FUNC_JBT_ALLOCATE_READRINGBUF_FAILED__enum,
    FUNC_JBT_ALLOCATE_WRITERINGBUF_FAILED__enum,
    FUNC_JBT_SESSION_RX_READY_IND__enum,
    FUNC_JBT_SESSION_TX_READY_IND__enum,
    FUNC_JBT_SESSION_CON_REQ_RESULT__enum,
    FUNC_JBT_SESSION_CON_IND__enum,
    FUNC_JBT_SESSION_RX_BYTES__enum,
    FUNC_JBT_SESSION_RX_END__enum,
    FUNC_JBT_SESSION_ENABLE_TX_TEST_ON_SERVER__enum,
    FUNC_JBT_SESSION_TX_BYTES__enum,
    FUNC_JBT_SESSION_TX_END__enum,
    FUNC_JBT_DISC_IND__enum,
    FUNC_JBT_MEM_ALLOCATED__enum,
    FUNC_JBT_MEM_RELEASED__enum,
    JBT_JBT_SET_ACL_SECURITY_CMD_TRANSACTION_IDx08X__enum,
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_NODE_NOT_0__enum,
    JBT_JBT_FREE_ALL__enum,
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSPS_TYPEx02X__enum,
    JBT_MSG_ID_BT_BM_DISCOVERY_RESULT_IND__enum,
    JBT_JBT_SET_LOCAL_DISCOVERY_CMD_TRANSACTION_IDx08X__enum,
    JBT_JBT_RESTORE_MMI_CMD__enum,
    JBT_MSGRESULTx02X__enum,
    JBT_PARMSCODx08X__enum,
    JBT_MSGCODx08X__enum,
    JBT_JBT_POWER_ONOPERATION_STATEx02X__enum,
    JBT_MSG_ID_MMI_BT_BCC_RESTORE_CNF__enum,
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSL2CAP_IDx04X__enum,
    JBT_JBT_GET_REMOTE_NAME_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    JBT_IN_JBT_SPP_READ_DATAREADxDLENGTHxD__enum,
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSTRANSACTION_IDx08X__enum,
    JBT_MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_IND__enum,
    JBT_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOxD__enum,
    JBT_MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF__enum,
    JBT_JBT_HANDLE_SET_LOCAL_COD_RESULT__enum,
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_WRITERINGBUF__enum,
    JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY__enum,
    JBT_MSG_ID_BT_BM_READ_LOCAL_COD_CNF__enum,
    JBT_JBT_CMD_INSERT_QUEUE_RETURN_STATUS_xD__enum,
    JBT_OLD_TRANSACTION_IDx08X_NEW_TRANSACTION_IDx08X__enum,
    JBT_JBT_SDPDB_CONTEXTJBT_DEREGISTER_RECORDOPERATION_STATEx08X__enum,
    JBT_JBT_REGISTER_RECORD_CMD_RECORD_TYPEx08X__enum,
    JBT_JBT_HANDLE_RESTORE_MMI_REQ_RESULT__enum,
    JBT_JBT_GAP_CONTEXTJBT_READ_ADDRTRANSACTION_IDx08X__enum,
    JBT_JBT_CMD_LIST_INIT__enum,
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_MSGPS_TYPEx02X__enum,
    JBT_JBT_GET_LOCAL_ADDR_CMD_TRANSACTION_IDx08X__enum,
    JBT_JBT_RESTORE_BTSTACK_MEMORY__enum,
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT_MSGPS_TYPEx02X__enum,
    JBT_JBT_RESTORE_PROCEDURE_RESULTxD__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSCON_IDx02X__enum,
    JBT_JBT_HANDLE_SDAP_COMPLETED_RESULT_PARMSRESULTx02X__enum,
    JBT_MSG_ID_BT_BM_SEARCH_RAW_CNF__enum,
    JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_OPCODEx02X__enum,
    JBT_JBT_FREE_INDX_DSIZExD__enum,
    JBT_JBT_HANDLE_REGISTER_RECORD_RESULT__enum,
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT_PARMSTRANSACTION_IDx08X__enum,
    JBT_JBT_GET_ACL_INFO_CMD_TRANSACTION_IDx08X__enum,
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_NODEPARMS_08X__enum,
    JBT_INFOTRANSACTION_IDx08X__enum,
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMDCODE_DEVICE_DISCOVERY_CMD__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSPS_TYPEx02X__enum,
    JBT_JBT_GET_ACL_INFO_CMD_BODY__enum,
    JBT_L2CAP_IDx04X__enum,
    JBT_JBT_DEVICE_DISCOVERYx08X__enum,
    JBT_JBT_GET_ACL_INFO_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    JBT_MSGBDADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    JBT_JBT_CMD_QUEUE_NONCONCURRENT_PROCESSING_END__enum,
    JBT_UUIDx04X__enum,
    JBT_SDPDB_INDEXxD_IS_FREE__enum,
    JBT_JBT_DEVICE_DISCOVERY_CMD_IAC_CODEx08X__enum,
    JBT_JBT_GET_REMOTE_NAME_CMD_TRANSACTION_IDx08X__enum,
    JBT_JBT_HANDLE_SET_DISCOVERABLE_MODE_RESULT__enum,
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSTRANSACTION_IDx08X__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSMTUx04X__enum,
    JBT_JBT_SESSION_DISCONNECT_REQ__enum,
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMD_LIST_INSERT_TAIL__enum,
    JBT_GAP_INIT_RESET_POWER_STATE_TO_OFF__enum,
    JBT_JBT_DEREGISTER_RECORD_CMD_RECORD_TRANSACTION_IDx08X__enum,
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT_PARMSCON_IDx02X__enum,
    JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY_FIND_NONE__enum,
    JBT_DB_INDEXx02X__enum,
    JBT_MSG_ID_BT_JSR82_CONNECT_IND__enum,
    JBT_SDPDB_INIT__enum,
    JBT_JBT_GENERAL_NON_POWERON_REJECT_RETURN_STATUSxD__enum,
    JBT_JBT_GET_LOCAL_COD_CMD_TRANSACTION_IDx08X__enum,
    JBT_JBT_CMD_LIST_REMOVE_HEAD__enum,
    JBT_MSGLENx02X__enum,
    JBT_JBT_HANDLE_SDAP_COMPLETED_RESULT__enum,
    JBT_JBT_MALLOC_INDEXxD_SIZExD__enum,
    JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_OPCODEx02X__enum,
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_MSGPS_TYPEx02X__enum,
    JBT_MSG_ID_BT_JSR82_CONNECT_CNF__enum,
    JBT_JBT_CMD_HANDLE_RESTORE_INDEXx02X__enum,
    JBT_JBT_HANDLE_GET_RECORD_HANDLE_RESULT_x02X__enum,
    JBT_MTUx04X__enum,
    JBT_L2CAP_INIT__enum,
    JBT_SECURITYx02X__enum,
    JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY_FIND_ONE__enum,
    JBT_JBT_SESSION_SERVICE_DEREGISTRATION__enum,
    JBT_MSG_ID_BT_JSR82_RESTROE_ACL_CNF__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSTRANSACTION_IDx08X__enum,
    JBT_JBT_SDPDB_CONTEXTJBT_REGISTER_RECORDOPERATION_STATE_x02X__enum,
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT__enum,
    JBT_JBT_CMD_KICK_CHECK_LIST__enum,
    JBT_JBT_HANDLE_DEVICE_DISCOVERY_ENTRY_RESULT__enum,
    JBT_JBT_GET_LOCAL_COD_CMD_BODY__enum,
    JBT_JBT_SESSION_SERVICE_REGISTRATION__enum,
    JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_JBT_CMD_LIST_RESET__enum,
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT_MSGRESULTx02X__enum,
    JBT_JSR82_HANDLE_MESSAGE_COMPLETED__enum,
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSCON_IDx02X__enum,
    JBT_INSERT_NODE_TO_TARGETLIST_TAIL__enum,
    JBT_TYPEx02X__enum,
    JBT_MSG_ID_BT_JSR82_TX_READY_IND__enum,
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_CHANNEL_BUFFER__enum,
    JBT_JBT_SDPDB_CONTEXTJBT_GET_RECORD_HANDLEOPERATION_STATEx02X__enum,
    JBT_JBT_CMD_INSERT_QUEUE_TYPExD__enum,
    JBT_JBT_GAP_CONTEXTJBT_GET_LOCAL_DISCOVERABLEOPERATION_STATEx02X__enum,
    JBT_JBT_HANDLE_POWER_ON_REQ_RESULT__enum,
    JBT_MSG_ID_BT_JSR82_DISCONNECT_IND__enum,
    JBT_IN_JBT_SPP_DEVRX_SET_READYTOREAD_FALSE__enum,
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_PARMSTRANSACTION_IDx08X__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSL2CAP_IDx04X__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSCON_IDx02X__enum,
    JBT_JBT_HANDLE_DEVICE_DISCOVERY_COMPLETED_RESULT__enum,
    JBT_JBT_SDPDB_CONTEXTSDP_RECORDDB_INDEXUSED__enum,
    JBT_MSG_ID_BT_APP_SDPDB_REGISTER_CNF__enum,
    JBT_MSG_ID_BT_BM_READ_REMOTE_NAME_CNF__enum,
    JBT_JBT_RESTORE_BTSTACK_COD__enum,
    JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULTx02X__enum,
    JBT_JBT_HANDLE_REGISTER_RECORD_RESULT_x02X__enum,
    JBT_JBT_CMD_KICK_CHECK_LIST_DONE__enum,
    JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULT_x02X__enum,
    JBT_JBT_SET_LOCAL_COD_CMD_MODEx08X__enum,
    JBT_JBT_CMD_QUEUE_NONCONCURRENT_COMPLETED__enum,
    JBT_JBT_DEVICE_DISCOVERY_CANCEL_CMD_TRANSACTION_IDx02X__enum,
    JBT_JBT_DEVICE_DISCOVERY_CMD_BODY__enum,
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT__enum,
    JBT_PSM_CHANNELx04X__enum,
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSCON_IDx02X__enum,
    JBT_JBT_GAP_CONTEXTJBT_READ_ADDROPERATION_STATEx02X__enum,
    JBT_MSG_ID_BT_BM_DISCOVERY_CNF__enum,
    JBT_JBT_HANDLE_SDAP_RESULT__enum,
    JBT_JBT_HANDLE_GET_RECORD_HANDLE_RESULT_x08X__enum,
    JBT_MSG_ID_BT_BM_GET_LINK_STATE_CNF__enum,
    JBT_JBT_REGISTER_RECORD_CMD_RECORD_TRANSACTION_IDx08X__enum,
    JBT_SEARCH_TYPEx02X__enum,
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_STATUS_x02X__enum,
    JBT_JBT_SET_ACL_SECURITY_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    JBT_INDEXx02X_USEDx02XHANDLEx08X__enum,
    JBT_JBT_HANDLE_DEVICE_DISCOVERY_CANCEL_RESULT__enum,
    JBT_TRANSACTION_IDx08X__enum,
    JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULT_x08X__enum,
    JBT_SIZEx02X__enum,
    JBT_JBT_HANDLE_GET_REMOTE_NAME_RESULT__enum,
    JBT_JBT_REGISTER_RECORD_CMD_RECORD_SIZEx08X__enum,
    JBT_MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF__enum,
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_MSGRESULTx02X__enum,
    JBT_JBT_GAP_CONTEXTJBT_GET_CODOPERATION_STATEx02X__enum,
    JBT_JBT_GAP_CONTEXTJBT_GET_CODTRANSACTION_IDx08X__enum,
    JBT_MSG_ID_BT_BM_SEARCH_RAW_RESULT__enum,
    JBT_SESSION_ENTRYTURN_ON_OPOPERATION_STATEx02X__enum,
    JBT_JBT_INIT__enum,
    JBT_INITIALIZE__enum,
    JBT_JBT_SESSION_SERVICE_TURN_ON__enum,
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSPSM_CHANNELx04X__enum,
    JBT_JBT_POWER_ON_CMD__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_IND_ADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    JBT_JBT_SET_LOCAL_COD_CMD_BODY__enum,
    JBT_JBT_SDPDB_RELEASE_ENTRY__enum,
    JBT_JBT_HANDLE_RESTORE_BTSTACK_RESULT__enum,
    JBT_JBT_GAP_POWER_STATE_RETURN_STATUSxD__enum,
    JBT_IN_JBT_SPP_READCASE2_SET_READYTOREAD_TO_FALSE__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSTRANSACTION_IDx08X__enum,
    JBT_VALUEx08X__enum,
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSPS_TYPEx02X__enum,
    JBT_JBT_GAP_CONTEXTJBT_RESTORE_STATEx02X__enum,
    JBT_JBT_GAP_CONTEXTJBT_SET_CODOPERATION_STATEx02X__enum,
    JBT_JBT_GAP_CONTEXTJBT_DEVICE_DISCOVERYTRANSACTION_IDx08X__enum,
    JBT_SECURITY_VALUEx02X__enum,
    JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_MATCHED__enum,
    JBT_MSG_ID_BT_JSR82_TURNOFF_SERVICE_CNF__enum,
    JBT_SDAP_INIT__enum,
    JBT_JBT_POWER_OFF_CMD__enum,
    JBT_MSG_ID_MMI_BT_BCC_GET_DISCOVERABLE_MODE_CNF__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSRESULTx02X__enum,
    JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_JBT_POWEROFF_BY_JBT__enum,
    JBT_EXISTED_VALUEx08X_USEDx02X__enum,
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSPS_TYPEx02X__enum,
    JBT_JBT_GET_RECORD_HANDLE_CMD__enum,
    JBT_RESULTx02X__enum,
    JBT_MSGDISCOVERABLE_MODEx02X__enum,
    JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSPS_TYPEx02X__enum,
    JBT_MSG_ID_BT_JSR_DEACTIVE_CNF__enum,
    JBT_JBT_INIT_COMPLETED__enum,
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_READRINGBUF__enum,
    JBT_MSG_ID_MMI_BT_BCC_POWER_ON_CNF__enum,
    JBT_JBT_CMD_QUEUE_CONCURRENT_PROCESSING_END__enum,
    JBT_JBT_GAP_CONTEXTJBT_POWER_STATUSx02X__enum,
    JBT_JBT_SESSION_CONNECT_REQ__enum,
    JBT_JBT_DEREGISTER_RECORD_CMD_HANDLEx08X__enum,
    JBT_JBT_CMD_HANDLE_RESTORE_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOx02X__enum,
    JBT_JBT_CMD_QUEUE_NONCONCURRENT_PROCESSING__enum,
    JBT_MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF__enum,
    JBT_MSG_ID_BT_JSR_POWER_OFF_REQ__enum,
    JBT_COMMAND_REJECT_A__enum,
    JBT_SDAP_SEARCH_PATTx02Xx02Xx02Xx02X__enum,
    JBT_DEVICE_NAMEx02X_xC__enum,
    JBT_JBT_SESSION_SERVICE_TURN_OFF__enum,
    JBT_JBT_GAP_CONTEXT_JBT_RESTORE_STATExD__enum,
    JBT_MSGWRITE_TYPEx08X__enum,
    JBT_MSG_ID_BT_JSR_TEST_CMD2_REQ__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSL2CAP_IDx04X__enum,
    JBT_JBT_GAP_CONTEXTJBT_GET_REMOTE_NAMEOPERATION_STATEx02X__enum,
    JBT_JBT_REGISTER_RECORD_CMD__enum,
    JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT__enum,
    JBT_COMMAND_REJECT_C_DUE_TO_NO_ENTRY__enum,
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMD_LIST_INIT__enum,
    JBT_JBT_GET_REMOTE_NAME_CMD_BODY__enum,
    JBT_JBT_POWER_STATUSx02X__enum,
    JBT_MSG_ID_MMI_BT_BCC_SET_DISCOVERABLE_MODE_CNF__enum,
    JBT_JBT_GAP_CONTEXTJBT_GET_ACL_INFOTRANSACTION_IDx08X__enum,
    JBT_MSG_ID_BT_JSR82_RX_READY_IND__enum,
    JBT_ADDRx02Xx02Xx02Xx02Xx02Xx02X__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF__enum,
    JBT_JBT_GAP_CONTEXTJBT_GET_REMOTE_NAMETRANSACTION_IDx08X__enum,
    JBT_JBT_SET_LOCAL_NAME_CMD_TRANSACTION_IDx08X__enum,
    JBT_JBT_SDPDB_FIND_ENTRY_BY_HANDLE_x08X__enum,
    JBT_COMMAND_REJECT_B__enum,
    JBT_MSG_ID_BT_JSR_TEST_CMD1_REQ__enum,
    JBT_JBT_DEREGISTER_RECORD_CMD__enum,
    JBT_NODECMD_CODExD__enum,
    JBT_JBT_CMD_QUEUE_CONCURRENT_PROCESSING_OPCODExD__enum,
    JBT_SESSION_ENTRYINITIATORxD__enum,
    JBT_JBT_GET_LOCAL_ADDR_CMD_BODY__enum,
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT__enum,
    JBT_RESULTx02X_IS_MASTERx02X_IS_AUTHx02X_IS_ENCRYPTED__enum,
    JBT_MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF__enum,
    JBT_MSGNAME_LENx02X__enum,
    JBT_JBT_HANDLE_GET_DISCOVERABLE_MODE_RESULT__enum,
    JBT_JBT_GET_LOCAL_NAME_CMD_TRANSACTION_IDx08X__enum,
    JBT_JBT_SET_LOCAL_DISCOVERY_CMD_MODEx08X__enum,
    JBT_JBT_REGISTER_RECORD_CMD_HANDLEx08X__enum,
    JBT_JBT_SEARCH_AN_EXISTING_ENTRY__enum,
    JBT_REMOVE_NODE_FROM_TARGETLIST__enum,
    JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSCON_IDx02X__enum,
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_PARMSCON_IDx02X__enum,
    JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_TYPEx02X__enum,
    JBT_IN_JBT_SPP_READCASE1_SET_READYTOREAD_TO_TRUE_AND_READMORExD__enum,
    JBT_JBT_GAP_CONTEXTJBT_GET_ACL_INFOOPERATION_STATEx02X__enum,
    JBT_JBT_SDAP_CMD__enum,
    JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_MSGPS_TYPEx02X__enum,
    JBT_JBT_CMD_QUEUE_CONTEXTQUEUE_KICK_OFF_D__enum,
    JBT_JBT_CMD_LIST_INSERT_TAIL__enum,
    JBT_MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF__enum,
    JBT_JBT_SET_ACL_SECURITY_CMD_SECURITY_MODEx02X__enum,
    JBT_JBT_SDAP_SS_CMD__enum,
    JBT_JBT_SDAP_SA_CMD__enum,
    JBT_JBT_SDAP_SSA_CMD__enum,
    JBT_JBT_SDAP_SA_RECORD_HANDLERx08X__enum,
    JBT_JBT_GAP_CONTEXTJBT_DEVICE_DISCOVERYOPERATION_STATEx02X__enum,
    JBT_JBT_HANDLE_REGISTER_RECORD_RESULT_x08X__enum,
    JBT_JBT_DEVICE_DISCOVERY_CMD_TRANSACTION_IDx08X__enum,
    JBT_PARMSRESULTx02X__enum,
    JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_MSGRESULTx02X__enum,
    JBT_JBT_GAP_CONTEXTJBT_SET_LOCAL_DISCOVERABLEOPERATION_STATEx02X__enum,
    JBT_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOx02X__enum,
    JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_CMD_OPCODExD__enum,
    JBT_MSG_ID_BT_JSR82_TURNON_SERVICE_CNF__enum,
    JBT_JBT_SET_LOCAL_COD_CMD_TRANSACTION_IDx08X__enum,
    JBT_MSG_ID_BT_JSR_KICK_NEW_COMMAND__enum,
    JBT_BT_HANDLE_SESSION_DISCONNECT_IND_SESSION_ENTRYINITIATORxD__enum,
    JBT_JBT_RESTORE_BTSTACK_LINK_CMD__enum,
    JBT_JBT_HANDLE_GET_LOCAL_ADDR_RESULT__enum,
    JBT_JBT_NODECMD_CODExD__enum,
    JBT_MSG_ID_BT_JSR_POWER_OFF_IND__enum,
    JBT_JBT_GAP_CONTEXTJBT_SET_CODTRANSACTION_IDx08X__enum,
    JBT_JBT_GET_LOCAL_DISCOVERY_CMD_TRANSACTION_IDx08X__enum,
    JBT_JBT_HANDLE_GET_ACL_INFO_RESULT__enum,
    JBT_MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF__enum,
    JBT_JBT_SDAP_CONTEXTJBT_SERVICE_SEARCHOPERATION_STATEx02X__enum,
    JBT_JBT_CMD_INSERT_QUEUE__enum,
    JBT_SPP_INIT__enum,
    JBT_PS_TYPEx02X__enum,
    JBT_CON_IDx02X__enum,
    JBT_JBT_HANDLE_SESSION_TURNON_RESULT__enum,
    JBT_JBT_HANDLE_GET_LOCAL_COD_RESULT__enum,

    FUNC_JBT_OPEN_FILE_FAILED__enum,
    FUNC_JBT_GET_FILE_SIZE__enum,
    FUNC_JBT_PUTBYTES__enum,
    FUNC_JBT_PUTBYTES_CLOSE01__enum,
    FUNC_JBT_READ_FAILED__enum,
    FUNC_JBT_WRITE_FAILED__enum,
    FUNC_JBT_OPEN_FILE_FOR_RECEIVED_DATA__enum,
    FUNC_JBT_GETBYTES__enum,
    FUNC_JBT_WRITE_BUF_DATA_TO_FILE__enum,
    FUNC_JBT_RECEIVED_ALL_DATA__enum,
    FUNC_JBT_WAIT_FOR_READY_TO_WRITE_IND__enum,
    FUNC_JBT_WAIT_FOR_READY_TO_READ_IND__enum,
    FUNC_JBT_SEARCH_EACH_ENTRY__enum,
    FUNC_JBT_DISC_IND_CLIENT_FREE_RINGBUF__enum,
    FUNC_JBT_DISC_IND_SRV_RESET_RW_PTR__enum,
    FUNC_JBT_DISC_IND_CLIENT_FREE_CHNL_BUF__enum,
    FUNC_JBT_CON_REQ_FAILED_FREE_RINGBUF__enum,
    FUNC_JBT_CON_REQ_FAILED_FREE_CHNL_BUF__enum,
    FUNC_JBT_REG_SERVICE_ALLOCATE_CHNL_BUF__enum,
    FUNC_JBT_REG_SERVICE_ALLOCATE_RWRING_BUF__enum,
    FUNC_JBT_ENABLE_SERVICE_FAILED_FREE_RING_BUF__enum,
    FUNC_JBT_ENABLE_SERVICE_FAILED_FREE_CHNL_BUF__enum,
    FUNC_JBT_DEREG_SERVICE_SUCCESS_FREE_CHNL_BUF__enum,
    FUNC_JBT_DEREG_SERVICE_SUCCESS_FREE_RING_BUF__enum,
    FUNC_JBT_CON_REQ_ALLOCATE_CHNL_BUF__enum,
    FUNC_JBT_CON_REQ_ALLOCATE_RING_BUF__enum,
    FUNC_JBT_DISC_IND_CLIENT_FREE_SESSION_ENTRY__enum,
    FUNC_JBT_WRITE_BUT_SESSION_NOT_FIND__enum,
    FUNC_JBT_CAN_NOT_GET_ONE_FREE_SUBENTRY__enum,
    FUNC_JBT_CAN_NOT_FIND_EXISTING_SUBENTRY__enum,
    FUNC_JBT_REQ_CMD_FAILED_FREE_BUF_AND_RESET_ENTRY__enum,
    FUNC_JBT_UT_RW_PTR__enum,
    FUNC_JBT_CURRENT_LB_MODE__enum,
    FUNC_JBT_REJCT_DUE_TO_POWEROFF_ONGOING__enum,
    FUNC_JBT_UT_SET_ACL_SECURITY_INFO__enum,
    JBT_HANDLE_SET_ACL_SECURITY_RESULT__enum,

    FUNC_JBT_BCC_INIT__enum,
    FUNC_JBT_BCC_AUTHORIZE_REQ_CMD__enum,
    FUNC_JBT_BCC_IS_AUTHORIZED_REQ_CMD__enum,
    FUNC_JBT_BCC_IS_TRUSTED_REQ_CMD__enum,
    FUNC_JBT_BCC_GET_HOST_SECURITY_MODE_REQ_CMD__enum,
    FUNC_JBT_BCC_GET_PREKNOWN_DEV_COUNT_REQ_CMD__enum,
    FUNC_JBT_BCC_GET_PREKNOWN_DEV_REQ_CMD__enum,
    FUNC_JBT_BCC_GET_NATIVE_PWR_STATUS_REQ_CMD__enum,
    FUNC_JBT_BCC_AUTHORIZE_REQ_CMD_RESULT__enum,
    FUNC_JBT_BCC_IS_AUTHORIZED_REQ_CMD_RESULT__enum,
    FUNC_JBT_BCC_IS_TRUSTED_REQ_CMD_RESULT__enum,
    FUNC_JBT_BCC_GET_HOST_SECURITY_MODE_REQ_CMD_RESULT__enum,
    FUNC_JBT_BCC_GET_PREKNOWN_DEV_COUNT_REQ_CMD_RESULT__enum,
    FUNC_JBT_BCC_GET_PREKNOWN_DEV_REQ_CMD_RESULT__enum,
    FUNC_JBT_BCC_GET_NATIVE_PWR_STATUS_REQ_CMD_RESULT__enum,
    JBT_FINALIZE_REQ_EVENT__enum,
    JBT_FINALIZE_COMPLETE__enum,
    JBT_FINALIZE_ALREADY_OFF__enum,
    JBT_POWEROFF_BY_MMI_END_BEFORE_JBT_POWER_OFF__enum,
    JBT_FINALIZE_WAIT_POWER_ON__enum,
    JBT_FINALIZE_START_POWER_OFF__enum,
    JBT_FINALIZE_COMPLETE_POWER_ON_FAILED__enum,
    JBT_SET_END_POWER_ON_EVENT__enum,
    JBT_JBT_GET_LOCAL_NAME_CMD_BODY__enum,
    JBT_BT_GET_LOCAL_NAME_TRANSACTION_ID__enum,
    JBT_BT_COMPLETE_RESTORE_MMI_AND_COD__enum,
    JBT_HANDLE_GET_LOCAL_NAME_RESULT__enum,
    FUNC_JBT_RING_WRITE_DATA_INFO__enum,
    FUNC_JBT_RING_READ_DATA_INFO__enum,
    FUNC_JBT_RING_READ_DATA_CASE1__enum,
    FUNC_JBT_RING_READ_DATA_CASE2__enum,
    FUNC_JBT_RING_READ_DATA_CASE2_INFO__enum,
    FUNC_JBT_RING_READ_DATA_CASE2_LEFT_INFO__enum,
    FUNC_JBT_CANCEL_INQUIRY_DUE_TO_VM_TERMINATE__enum,
    FUNC_JBT_CANCEL_INQUIRY_FAILED_WHILE_VM_TERMINATE__enum,
    FUNC_JBT_GET_CNF_GENERATE_BY_JBT_DUE_TO_VM_TERMINATE__enum,
    FUNC_JBT_DISC_IND_SUBSESSION_COUNT__enum,
    FUNC_JBT_ADM_CREATE_INIT__enum,
    FUNC_JBT_ADM_ALREADY_CREATE_INIT__enum,
    FUNC_JBT_ADM_CREATE_POWER_ON_SUCCESS__enum,
    FUNC_JBT_ADM_DELETE_STATUS__enum,
    FUNC_JBT_MEM_ALLOC_INX_SIZE_PTR__enum,
    FUNC_JBT_MEM_FREE_INX_SIZE_PTR__enum,
    FUNC_JBT_REPORT_JBT_POWER_OFF_OR_ABNORMAL_RESET__enum,



BT_OBEX_TRACE_START__enum,


    BTSTACK_SENDTXBUFFER_STATUS_xD__enum,
    OBEX_RECEIVED_NEW_OBEX_COMMAND_BEFORE_PREVIOUS_RESPONSE_SENT_SUCCESSFULLY__enum,
    OBEX_CLIENT_RFCOMM_EVENT_RECEIVED_xD_BYTES__enum,
    OBEX_SERVER_SEQUENCE_NUMBER_ERROR__xD__enum,
    DATAIND_RECV_FAILED_WSAGETLASTERROR__xD__enum,
    OBEX_TRANSPORT_BUSY__enum,
    OBEX_ASYNDPROC_SOCKET_xX_RECEIVED_MESSAGE_CLOSE__enum,
    OBEX_SERVER_RFCOMM_EVENT_TRANSMIT_COMPLETE__enum,
    OBEX_SERVER_L2CAP_EVENT_TRANSMIT_COMPLETE__enum,
    OBEX_CLIENT_RFCOMM_EVENT_CLOSED__enum,
    OBEX_CLIENT_L2CAP_EVENT_CLOSED__enum,
    OBEX_TCP_CONNECT_FAILED__enum,
    OBEX_SERVER_RECEIVED_CLOSE_FOR_SESSION_OTHER_THAN_THE_ACTIVE_ONE__enum,
    OBEX_CLIENT_CMEVENT_DATA_LINK_DIS_REPORTS_LINK_DISCONNECT__enum,
    OBEX_RECEIVED_OBEX_CONNECT_OBEX_PACKET_SIZE_xD_BYTES__enum,
    OBEX_RF_SENDDATA_FAILED__enum,
    OBEX_SERVER_SENT_RFPKT_NUM__enum,
    OBEX_ASYNCPROC_SOCKET_xX_RECEIVED_MESSAGE_WRITE_CONN_ACCEPTED__enum,
    OBEX_ASYNCPROC_CLIENT_SOCKET_xX_RECEIVED_MESSAGE_READ__enum,
    OBEX_NONCE_TRC__enum,
    BEFORE_BTSTACK_SENDTXBUFFER_SIF_xD__enum,
    OBEX_CLIENT_RECV_RFPKT_NUM__enum,
    TCPSTACK_SOCKET_FAILURExD__enum,
    OBEX_SEQNUM_xD__enum,
    BTCLIENTSDPCALLBACK_BTXPCLIENTSTATE__OCS_DISCONNECTING__enum,
    BTCLIENTSDPCALLBACK_BTXPCLIENTSTATE_L2CAP_OCS_DISCONNECTING__enum,
    OBEX_CLIENT_IGNORED_EVENT_xD__enum,
    OBEX_CLIENT_IGNORED_RFCOMM_EVENT_xD__enum,
    OBEX_CLIENT_IGNORED_L2CAP_EVENT_xD__enum,
    OBEX_CLIENT_RFCOMM_EVENT_TRANSMIT_COMPLETE__enum,
    OBEX_CLIENT_L2CAP_EVENT_TRANSMIT_COMPLETE__enum,
    BTSTACK_SENDTXBUFFER_LEN_xD__enum,
    OBEX_CALL_OBPARSE_BUFFAVAIL__enum,
    OBEX_ASYNDPROC_SOCKET_xX_RECEIVED_MESSAGE__enum,
    OBEX_IGNORED_EVENT_xD__enum,
    OBEX_CLIENT_SEQUENCE_STATUSxD_EXPECT_SEQNUMxD_NEXTSEQNUMxD_GOT_SEQNUMxD__enum,
    OBEX_CONNECTED_TRC__enum,
    OBEX_SESSION_ID_TRC__enum,
    OBEX_SENDTXBUFFER__enum,
    OBEX_NO_FREE_PACKET__enum,
    OBEXCLIENTCONNECTIONCALLBACK_BTXPCLIENTSTATE__OCS_DISCONNECTING__enum,
    OBEX_SERVER_RFCOMM_EVENT_RECEIVED_xD_BYTES__enum,
    OBEX_SERVER_RFCOMM_EVENT_CLOSED__enum,
    OBSERVERSENDRESPONSE_xD__enum,
    OBEX_BT_DEBUGx02X__enum,
    OBEX_OBEXPACKET_RECEIVED__enum,
    OBEX_TIMEOUT_x0X__enum,
    OBEX_INVALID_SESSION_PARAMETERS_HEADER__enum,
    OBEX_ASYNCPROC_SOCKET_xX_RECEIVED_MESSAGE_ACCEPT__enum,
    OBEX_RFCOMM_SENDDATA_FAILED__enum,
    OBEX_CLIENT_RECV_RESPONSE_WITH_NO_FINALBIT__enum,
    OBEX_CLIENT_RESUME_SEQUENCE_STATUSxD_EXPECT_SEQNUMxD_NEXTSEQNUMxD_GOT_SEQNUMxD__enum,
    OBEX_SELECT_WINDOW_REGISTRATION_FAILED_xX__enum,
    OBEX_CMEVENT_DATA_LINK_DIS__enum,
    OBEX_SERVER_SEQUENCE_NUMBER_VALID__enum,
    OBEX_OBPROT_TXDONE__enum,
    OBEX_SEND_PACKET_WHEN_TRANSPORT_LAYER_IS_DISCONNECTED__enum,
    OBEX_CLIENTSENDCOMMAND__enum,
    OBEX_CALL_RF_SENDDATA__enum,
    OBEX_CALL_RF_CLOSECHANNEL__enum,
    OBEX_CLIENT_RFCOMM_DATA_IND__enum,
    OBEX_CLIENT_RFCOMM_OPEN__enum,
    OBEX_CLIENT_L2CAP_OPEN__enum,
    OBEX_CLIENT_RFCOMM_CLOSED__enum,
    OBEX_SERVER_RFCOMM_OPEN_IND__enum,
    OBEX_SERVER_RFCOMM_OPEN__enum,
    OBEX_CLIENT_DEINIT__enum,
    OBEX_CLIENT_SENDREQUEST__enum,
    OBEX_CLIENT_SENDREQUEST_BUSY__enum,
    OBEX_CLIENT_SENDREQUEST_NOCONNECT__enum,
    OBEX_CLIENT_SENDREQUEST_TOOSMALL__enum,
    OBEX_CLIENT_ABORT__enum,
    OBEX_CLIENT_ABORT_NOCONNECT__enum,
    OBEX_CLIENT_ABORT_BUSY__enum,
    OBEX_CLIENT_EVENTIND__enum,
    OBEX_CLIENT_PROCESS_SIMPLEEVENT__enum,
    OBEX_CLIENT_COMPLETE__enum,
    OBEX_CLIENT_SENDREQUEST_INVALIDPARAM__enum,
    OBEX_SERVER_EVENTIND__enum,
    OBEX_SERVER_PUTDELETE__enum,
    OBEX_SERVER_CREATEEMPTY__enum,
    OBEX_PARSE_RX__enum,
    OBEX_PARSE_RX_OPCODE__enum,
    OBEX_PARSE_RX_RSP__enum,
    OBEX_PARSE_RX_STAGEBUFF0__enum,
    OBEX_PARSE_RX_OPCODE_MISMATCH__enum,
    OBEX_PARSE_RX_COMPARE__enum,
    OBEX_PARSE_RX_DEFER_OPER__enum,
    OBEX_PARSE_RX_DEFER_OPER_FLOAT__enum,
    OBEX_PARSER_SENDPACKET__enum,
    OBEX_NO_FREETXBUFFER__enum,
    OBEX_SENDRESPONDSE__enum,
    OBEX_SENDCOMMAND__enum,
    OBEX_SETABORT__enum,
    OBEX_TX_DONE__enum,
    OBEX_REMOVE_DEFER__enum,
    OBEX_PARSER_DISONNECT__enum,
    OBEX_PARSER_DISONNECTIND__enum,
    OBEX_PARSER_LINKTRANS__enum,
    OBEX_BTSTACK_CLIENTCONNECT__enum,
    OBEX_BTSTACK_CLIENTDISCONNECT__enum,
    OBEX_BTSTACK_RFCLOSECHANNEL__enum,
    OBEX_BTSTACK_RFCLOSECHANNEL_RETURN__enum,
    OBEX_SET_MASTER__enum,
    OBEX_SERVER_CONN_CB__enum,
    OBEX_CLIENT_CONN_CB__enum,
    OBEX_SERVER_REMOVE_DL__enum,
    OBEX_SERVER_BDADDR_ERR__enum,
    OBEX_CLIENT_BDADDR_ERR__enum,
    OBEX_CLIENT_SDPCALLBACK__enum,
    OBEX_CLIENT_OPEN_RFCHANNEL__enum,
    OBEX_TPCONNECT__enum,
    OBEX_TPCONNECT_INVALIDPARAM__enum,
    OBEX_TPCONNECT_CONNECTED__enum,
    OBEX_TPCONNECT_RETURN__enum,
    OBEX_TPDISCONNECT__enum,
    OBEX_TPDISCONNECT_INVALID_PARM__enum,
    OBEX_TPDISCONNECT_NOCONNECT__enum,

    OBEX_CLIENT_L2SDPCALLBACK__enum,
    OBEX_CLIENT_OPEN_L2Channel__enum,
    OBEX_OPEN_L2CHANNEL_RETURN__enum,
    OBEX_CLIENT_L2CALLBACK__enum,

    OBEX_RFCOMM_REGISTER_SERVER_CHANNEL_FAILED__enum,
    OBEX_SERVER_EXPECT_FINALBIT__enum,
    OBEX_PARSERX_HEADERLEN_ERROR__enum,
    OBEX_PARSERX_PACKETLEN_ERROR__enum,
    OBEX_PACKET_SIZE_OVERFLOW__enum,
    OBEX_VERIFY_SERVER_EVENT_FAILED__enum,
    OBEX_CMGR_SCO_REJECT__enum,
    OBEX_CMGR_BTCHIP_REASON__enum,
    OBEX_DISCONNECT_CLIENT_LINK__enum,
    OBEX_START_SERVICE_QUERY__enum,
    OBEX_START_L2CAP_SERVICE_QUERY__enum,
    OBEX_SERVER_READ_HEADERBLOCK_ERROR__enum,
    OBEX_CLIENT_STATE__enum,
    OBEX_RESEND_PENDING_PACKET__enum,
    OBEX_CALL_CMGR_CREATEDATALINK__enum,
    OBEX_CMGR_CREATEDATALINK_RETURN__enum,
    OBEX_CMGR_REMOVEDATALINK_RETURN__enum,
    OBEX_OPEN_RFCHANNEL_RETURN__enum,
    OBEX_CALL_CMGR_REMOVEDATALINK__enum,
    OBEX_SERVER_BUSY_REJECT_CONNECT__enum,
    OBEX_SERVER_LINKTRANSPORTFAILED_REJECT_CONNECT__enum,
    OBEX_SENDTXBUFFER_LEN_ERROR__enum,
    OBEX_CALL_RF_SENDDATA_RETURN__enum,
    OBEX_TOOMUCH_RESPHEADERS__enum,
    OBEX_SERVER_NO_OBJECT__enum,
    OBEX_SERVER_WRITE_OBJECT_FAILED__enum,
    OBEX_INVALID_CONNECTIONID__enum,
    OBEX_SERVER_ABORT__enum,
    OBEX_SERVER_DEINIT_BUSY__enum,
    OBEX_SERVER_DEINIT_RFDEREGISTER_RETURN__enum,
    OBEX_SERVER_DEINIT_CMGRDEREGISTER_RETURN__enum,
    OBEX_SERVER_ABORT_RSP_INVALID__enum,
    OBEX_SERVER_ABORT_EVENT_INVALID__enum,
    OBEX_CLIENT_START_TIMER__enum,
    OBEX_CLIENT_STOP_TIMER__enum,
    OBEX_CLIENT_RESTART_TIMER__enum,
    OBEX_CLIENT_REQTIMEOUT__enum,
    OBEX_SERVER_CANFITONEPACKET__enum,
    OBEX_SERVER_READHDBLOCK_FITONEPKT__enum,
    OBEX_SERVER_READ_HEADERBLOCK_FITONEPKT__enum,
    OBEX_SERVER_READ_HEADERBLOCK_FITONEPKT_FILL_EOB__enum,
    OBEX_CLIENT_READ_HEADERBLOCK_READOBJ_FAILED__enum,
    OBEX_CLIENT_SEND_ABORT_FOR_RW_ERROR__enum,
    OBEX_SERVER_SEND_RESPONSE__enum,
    OBEX_SERVER_PROCGET_SENDOBJ__enum,
    OBEX_SERVER_GET_HB_LEN__enum,
    OBEX_SERVER_READ_HB__enum,
    OBEX_SERVER_GET_HB_LEN_FOP__enum,
    OBEX_BUFAVAIL_MAX_TX_SIZE_ZERO__enum,
    OBEX_SERVER_EVENTIND_OPER_ABORTED__enum,
    OBEX_PARSE_TXDONE_SENDINGRFPNUM__enum,
    OBEX_BTSTACK_TXTIMEOUT__enum,
    OBEX_GIVEPKT_TO_WAITINGAPP__enum,
    OBEX_RETURN_PENDING_PKT__enum,
    OBEX_OBPROT_TXTIMEOUT__enum,
    OBEX_PROC_PENDING_RFPKT__enum,
    OBEX_RFOPEN_TIMEOUT__enum,
    OBEX_CLIENT_DISCONNECTING_ED__enum,
    OBEX_CLIENTTPDISCONNECT_RETURN__enum,
    OBEX_READHEADBLK_ERR__enum,
    OBEX_PBAP_PARAMS__enum,
    OBEX_TX_TIMEOUT_INDEX__enum,
    OBEX_ACCEPT_RFCHNL__enum,
    OBEX_REJECT_RFCHNL__enum,
    OBEX_PARSER_SEND_ABORT_FOR_READ_ERROR__enum,
    OBEX_DISCONNECT_FOR_READHEADBLK_ERR__enum,
    OBEX_NOT_TPCONNECTED_RETURN__enum,
    OBEX_OBPARSE_TXBUFAVAIL__enum,
    OBEX_CLIENT_READ_HB__enum,
    OBEX_TXSEND_FAILED_RETURN_BUF__enum,
    OBEX_PUT_PACKET_TOO_SMALL__enum,
    OBEX_CLIENTSENDREQUEST_TXLENGTH__enum,
    OBEX_CLIENTSENDCOMMAND_TXLENGTH__enum,
    OBEX_CLIENT_APPEND_CONNID__enum,
    OBEX_CLIENT_CALC_OBJ_TXLENGTH_BUFSTYLE__enum,
    OBEX_CLIENT_CALC_OBJ_TXLENGTH_OBSTYLE__enum,
    OBEX_CONNID_VALUE__enum,
    OBEX_APPEND_CONNID_QUEUEHEADER__enum,
    OBEX_REG_RFCOMM_CHANNEL__enum,
    OBEX_SERV_INIT_L2CAP_BUF__enum,
    OBEX_NO_L2CAP_BUF__enum,
    OBEX_REG_L2CAP_PSM__enum,
    OBEX_REG_L2CAP_PSM_RETURN__enum,
    OBEX_DEREG_L2CAP_PSM__enum,
    OBEX_SERVER_CONNECTED_REJECT_INCOMING_RFCOMM__enum,
    OBEX_SERVER_CURRENT_STATE__enum,
    OBEX_SERVER_REJECT_SECOND_INCOMING__enum,
    OBEX_SERVER_L2CAP_OPEN__enum,
    OBEX_SERVER_L2CAP_DISCONNECTED__enum,
    OBEX_SERVER_L2CAP_PACKET_HANDLED__enum,
    OBEX_L2TIMEOUT_IGNORE__enum,
    OBEX_L2CAP_DISCONNECT_REQ__enum,
    OBEX_L2CAP_FLOW_DATA_IND__enum,
    OBEX_L2CAP_GOEPL2SDP_TIMEOUT__enum,
    OBEX_START_SERVICE_QUERY_FAIL__enum,
    OBEX_L2CAP_FLOW_DATA_IND_ERR__enum,
    OBEX_L2CAP_UNREGEISTER_PSM__enum,
    OBEX_L2CAP_CONFIG_INLINKMODE__enum,
    OBEX_L2CAP_SENDDATA__enum,
    OBEX_L2CAP_CONNECT_RSP__enum,
    OBEX_ACCEPT_RFCHNL_RETURN__enum,
    OBEX_RFCOMM_QUERY_UNKNOW__enum,
    OBEX_SDPCALLBACK_IGNORE__enum,
    OBEX_CLIENT_PROCESS_SIMPLEOP__enum,
    OBEX_CLIENT_PROCESS_PUTOP__enum,
    OBEX_CLIENT_PROCESS_GETOP__enum,
    OBEX_TXCOMPLETE_EVENT__enum,
    OBEX_REMOTE_MTU_VALUE__enum,
    OBEX_LOCAL_MTU_VALUE__enum,
    OBEX_L2CAP_INIT__enum,
    OBEX_VERSION_MTU__enum,
    OBEX_SERVER_EVENT_IND__enum,
    OBEX_SERVER_EVENT_START_IND__enum,
    OBEX_SERVER_REMOTE_MTU_TOO_LARGE_WRN__enum,
    OBEX_SERVER_DISABLE_SRM_ENABLE__enum,
    OBEX_SERVER_REMOTE_SEND_LARGE_THEN_MTU__enum,
    OBEX_SERVER_DISABLE_SRM_ENABLE_ENDBODY__enum,
    OBEX_SERVER_PROCESS_GET__enum,
    OBEX_SERVER_PROCESS_GENERAL__enum,
 OBEX_CONN_ID_NOT_VALIED__enum,
 OBEX_SERVER_SENDRESPONSE_COUNT_REJECT__enum,
 OBEX_RESET_SRM_ENABLE__enum,
 OBEX_UNACK_NUMBER__enum,
 OBEX_CLIENT_READ_HB_IN_HEADER__enum,
 OBEX_BCONNTYPE__enum,


    BT_BT_MMI_OBEX_GET_PROFILE_SHARED_BUF__enum,
    OADP_FSM_BEGIN__enum,
    OADP_FSM_END__enum,
    OADP_GOEP_CLINET_EVENT__enum,
    OADP_GOEP_SERVER_EVENT__enum,
    OADP_NEW_INSTANCE__enum,
    OADP_NEW_OPERATION__enum,
    OADP_NEW_CONNECTION__enum,
    OADP_DELETE_INSTANCE__enum,
    OADP_DELETE_OPERATION__enum,
    OADP_DELETE_CONNECTION__enum,
    OADP_DATA_READ__enum,
    OADP_DATA_WRITE__enum,
    OADP_DATA_OBJLEN__enum,
    OADP_NEW_OBJECT__enum,
    OADP_OBJECT_SIZE__enum,
    OADP_OPEN_OBJECT__enum,
    OADP_DELETE_OBJECT__enum,

BT_OBEX_TRACE_END__enum,



    GOEP_SERVERCONTINUE_STATUS__xD__enum,
    GOEP_SERVERACCEPT_STATUS__xD__enum,
    GOEP_SERVERABORT_STATUS__xD__enum,
    GOEP_SERVERAUTH_STATUS__xD__enum,
    GOEP_MAIN_DISCONECT_AN_INEXISTENT_GOEP_CONN_ID_xD__enum,
    GOEP_CANNOT_FIND_FREE_GOEP_CONN_ID__enum,
    GOEP_CANNOT_FIND_SERVER_WITH_GOEP_CONN_ID__enum,
    GOEP_CANNOT_FIND_CLIENT_WITH_GOEP_CONN_ID__enum,
    GOEP_CANNOT_FIND_CLIENT_WITH_REQ_ID__enum,
    GOEP_CANNOT_FIND_BT_UUID__enum,
    GOEP_CANNOT_FIND_OBEX_UUID__enum,
    GOEP_REGISTER_SERVER_RSP_CODE__enum,
    GOEP_DEREGISTER_SERVER_RSP_CODE__enum,
    GOEP_DISCONNECT_REQ_RSP_CODE__enum,
    GOEP_OBEX_DISCONNECT_FAIL__enum,
    GOEP_CALL_OBEX_CLIENTDISCONNECT__enum,
    GOEP_CLIENT_TP_DISCONNECTED__enum,
    GOEP_CLIENT_CALLBACK__enum,
    GOEP_ABORTREQFAIL_SEND_ABORT_RSP__enum,
    GOEP_CLIENT_CONNECTED__enum,
    GOEP_SEND_CONNECT_RSP__enum,
    GOEP_CLIENT_CALL_TEMPOP_HANDLER_CALLBACK__enum,
    GOEP_RECV_MSG_FROM_MMI__enum,
    GOEP_SERVER_CALLBACK__enum,
    GOEP_OBEX_CONNECTION_NUM__enum,
    GOEP_ENTER_SERVER_TPDISCONNECT__enum,
    GOEP_REGISTER_CLIENT__enum,
    GOEP_DEREGISTER_CLIENT__enum,
    GOEP_CONNECT_ENTERING__enum,
    GOEP_CONNECT_STATUS_BUSY__enum,
    GOEP_CONNECT_BUILDHEADERS_FAILED__enum,
    GOEP_CONNECT_STATUS_RESTRICTED__enum,
    GOEP_DISCONNECT_ENTERING__enum,
    GOEP_PUSH_ENTERING__enum,
    GOEP_PULL_ENTERING__enum,
    GOEP_SETFOLDER_ENTERING__enum,
    GOEP_CLIENTABORT_ENTERING__enum,
    GOEP_TPCONNECT_ENTERING__enum,
    GOEP_TPDISCONNECT_ENTERING__enum,
    GOEP_CLIENTCONTINUE_ENTERING__enum,
    GOEP_CLIENT_QUEUEHEADER__enum,
    GOEP_OBCE_CONNECTED__enum,
    GOEP_OBCE_DISCONNECT__enum,
    GOEP_OBCE_ABORTED__enum,
    GOEP_CLIENT_BUILDHEADERS_FAILED__enum,
    GOEP_CLIENTABORT_ALREADY_PENDING__enum,
    GOEP_TPCONNECT_STATUS_BUSY__enum,
    GOEP_TPCONNECT_ACTIVE__enum,
    GOEP_TPDISCONNECT_INUSE__enum,
    GOEP_TPDISCONNECT_STATUS__enum,
    GOEP_CLIENT_QUEUEHEADER_LENTOOLARGE__enum,
    GOEP_WAITFOR_AUTH_REQ__enum,
    GOEP_RECV_AUTH_CHAL__enum,
    GOEP_RECV_AUTH_RESP__enum,
    GOEP_CLIENT_RELEASE_CONNID__enum,
    GOEP_SERVICE_RELEASE_CONNID__enum,
    GOEP_SERVICE_ALLOC_CONNID__enum,
    GOEP_CLIENT_ALLOC_CONNID__enum,
    GOEP_CALL_RFCLOSECHANNEL__enum,
    GOEP_CALL_RFCLOSECHANNEL_FAILED__enum,
    GOEP_DISCONNECT_FLAG_SETUP__enum,
    GOEP_DEINIT_SERVER_FAILED__enum,
    GOEP_DEINIT_CLIENT_FAILED__enum,
    GOEP_IS_OPERATING__enum,
    GOEP_NO_ACTIVE_CONNECT__enum,
    GOEP_CLIENT_HANDLE_ERROR__enum,
    GOEP_RFCOMM_OPENIND_ACCEPT__enum,
    GOEP_SERVER_APP_CALLBACK__enum,
    GOEP_ENTER_SERVER_ABORT__enum,
  GOEP_NOTIFY_ALLCLIENT__enum,
    GOEP_CLIENT_ABORTED__enum,

    GOEP_ENTER_SERVER_ACCEPT__enum,
    GOEP_PROCESS_NAME_HEADER__enum,
    GOEP_FIND_SAME_TARGETUUID__enum,
    GOEP_SAME_SERVICE_HAS_REQUESTED__enum,
    GOEP_ENTER_SERVER_ACCEPT_NO_OBJECT__enum,
    GOEP_SERVER_TPDISCONNECT_RETURN__enum,
    GOEP_SERVERAUTH__enum,
    GOEP_SERVER_VERIFYAUTHRESP__enum,
    GOEP_SERVER_VERIFYAUTHRESP_RETURN__enum,
    GOEP_SERVER_RECEIVE_AUTHCHAL_HEADER__enum,
    GOEP_SERVER_QUEUEHEADER__enum,
    GOEP_ENTER_SERVER_CONTINUE__enum,
    GOEP_SERVER_CONTINUE_FAILED__enum,
    GOEP_SERVER_CONTINUE_BUILDHEADER_FAIL__enum,
    GOEP_CONNECT_NO_CHALLENGE__enum,
    GOEP_SERVER_AUTHORIZE_RES__enum,
    GOEP_INVALID_MSG__enum,
    GOEP_CMCONNID_HAS_ALLOCED__enum,
    GOEP_ALREADY_DISCONNECTING__enum,
    GOEP_SDPIND_CLIENTAPP_ISNULL__enum,






    BT_OPPS_CTX_CHECK__enum,
    BT_OPPS_MSG_CHECK_ERR__enum,
    BT_OPPS_ACTIVATE__enum,



    BT_OPPC_DEINIT_API__enum,
    BT_OPPC_INIT_API__enum,
    BT_OPPC_STATE_ERROR__enum,
    BT_OPPC_CTX_CHECK__enum,
    BT_OPPC_MSG_CHECK_ERR__enum,
    BT_OPPC_MAX_PACKET_SIZE__enum,

    BT_OPPC_DISCONNECT_FEATURE__enum,
    BT_OPPC_PULL_FEATURE__enum,
    BT_OPPC_PULL_FEATURE_WRONG_STATE__enum,
    BT_OPPC_PULL_FEATURE_WRONG_PARAM__enum,
    BT_OPPC_CONNECT_CNF_HDL__enum,

    BT_OPPC_CONN_TERM__enum,
    BT_OPPC_CONN_SERVER__enum,
    BT_OPPC_DISC_CLIENT__enum,
    BT_OPPC_PUSH_RSP_FS_READ__enum,
    BT_OPPC_SEND_FILE_OBJ_FS_OPEN__enum,





    BT_FTPC_STATE_TRANSITION__enum,
    BT_FTPC_STATE_ERROR__enum,
    BT_FTP_POPUP_HDLR__enum,
    BT_FTPS_STATE_TRANSITION__enum,
    BT_FTPS_STATE_ERROR__enum,
    BT_FTPS_INIT__enum,
    BT_FTPS_DEINIT__enum,
    BT_FTPS_EVENT_HDLR__enum,
    BT_FTPS_ACTIVATE__enum,
    BT_FTPS_DEACTIVATE__enum,
    BT_FTPS_STATE__enum,
    BT_FTPS_DISCONNECT_CLIENT__enum,
    BT_FTPS_DISCONNECT_CLIENT_CHECK__enum,
    BT_FTPS_SET_FOLDER_SCR_CALLBACK__enum,
    BT_FTPS_AUTHORIZE_ACCEPT__enum,
    BT_FTPS_AUTHORIZE_REJECT__enum,
    BT_FTPS_AUTHORIZE_DEL_CB__enum,
    BT_FTPS_GET_DEV_NAME__enum,
    BT_FTPS_ICON_STOP_TIMER__enum,
    BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPS__enum,
    BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPC__enum,

    BT_FTPS_CNTX_INIT_FS_OPEN__enum,
    BT_FTPS_CNTX_INIT_FS_READ__enum,
    BT_FTPS_WRITE_OBJ__enum,
    BT_FTPS_WRITE_OBJ_PATH_ERROR__enum,
    BT_FTPS_WRITE_OBJ_OPEN__enum,
    BT_FTPS_WRITE_OBJ_WRITE__enum,
    BT_FTPS_GEN_DUP_OBJ_NAME__enum,
    BT_FTPS_PUSH_OBJ__enum,
    BT_FTPS_PUSH_OBJ_CHECK_FOLDER__enum,
    BT_FTPS_PUSH_OBJ_ERR_GOTO__enum,
    BT_FTPS_PUSH_DELETE__enum,
    BT_FTPS_PUSH_DELETE_INVALID_NAME__enum,
    BT_FTPS_PUSH_DELETE_WITHOUT_NAME__enum,
    BT_FTPS_PUSH_DELETE_FILE__enum,
    BT_FTPS_PUSH_DELETE_FOLDER__enum,
    BT_FTPS_PUSH_CONTINUE__enum,
    BT_FTPS_PUSH_CONTINUE_WRITE__enum,
    BT_FTPS_PUSH_INBUF_CONTINUE__enum,
    BT_FTPS_PUSH_INBUF_CONTINUE_WRITE__enum,
    BT_FTPS_CREATE_FOLDER__enum,
    BT_FTPS_CREATE_FOLDER_CREATE_DIR__enum,
    BT_FTPS_SET_FOLDER__enum,
    BT_FTPS_SET_PARENT_FOLDER__enum,
    BT_FTPS_PULL_CONTINUE__enum,
    BT_FTPS_SEND_OBJ__enum,
    BT_FTPS_SEND_FOLDER_CONTENT__enum,
    BT_FTPS_SEND_FOLDER_CONTENT_OPEN_ERROR__enum,
    BT_FTPS_FIND_GOEP_ID_FAILED__enum,
    BT_FTPS_SDP_DEREGISTER_CNF_HDLR__enum,
    BT_FTPS_REGISTER_SERVER_CNF_HDLR__enum,
    BT_FTPS_DEREGISTER_SERVER_CNF_HDLR__enum,
    BT_FTPS_CONNECT_IND_HDLR__enum,
    BT_FTPS_PUSH_IND_HDLR__enum,
    BT_FTPS_PULL_IND_HDLR__enum,
    BT_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER__enum,
    BT_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER_FS_ERROR__enum,
    BT_FTPS_SET_FOLDER_IND_HDLR__enum,
    BT_FTPS_ABORT_IND_HDLR__enum,
    BT_FTPS_AUTHORIZE_IND_HDLR__enum,
    BT_FTPS_SET_FS_FLAG__enum,
    BT_FTPS_READ_FS_FLAG__enum,
    BT_FTPS_PUSH_DEL_CBK__enum,
    BT_FTPS_USB_PLUG_IN__enum,
    BT_FTPS_AUTH_SCR_HDLR__enum,
    BT_FTPS_CNTX_INIT__enum,
    BT_FTPS_WORK_FOLDER_INIT__enum,
    BT_FTP_UTIL_DELETE_FILE__enum,
    BT_FTPS_WRITER_FLUSH_BUFFER_FAIL__enum,
    BT_FTPS_WRITER_FLUSH_NEWDATA_FAIL__enum,

    BT_FTPS_UTIL_OPEN_FILE_FAIL__enum,
    BT_FTPS_INIT_NBUFFER_DISABLE__enum,
    BT_FTPS_GEN_FOLDER_PARAM__enum,
    BT_FTPS_GEN_FOLDER_PARAM_CHECK_FAIL__enum,
    BT_FTPS_GEN_FOLDER_FINDFIRST_FAIL__enum,
    BT_FTPS_GEN_FOLDER_ADD_EXTRA_OBJECT__enum,
    BT_FTPC_CLOSE_RECV_FILE__enum,
    BT_FTPC_OPEN_FILE_FAIL__enum,
    BT_FTPC_GET_FILESIZE_FAIL__enum,
    BT_FTPC_CLOSE_PUSH_FILE__enum,
    BT_FTPC_ACTION_DELETE_FOLDER__enum,
    BT_FTPC_ACTION_CREATE_FOLDER__enum,
    BT_FTPC_ACTION_PUSH_FILE__enum,
    BT_FTPC_ACTION_PUSH_FILE_FAIL__enum,
    BT_FTPC_ACTION_PUSH_FILE_CHECKSIZE_FAIL__enum,
    BT_FTPC_ACTION_PUSH_FILE_GETFILENAME_FAIL__enum,
    BT_FTPC_PUSH_FILE_HDL__enum,
    BT_FTPC_FILE_STATE_CHECK__enum,


    BT_FTPC_TARGET_FILEPATH__enum,
    BT_FTPC_TARGET_FILENAME__enum,
    BT_FTPC_TARGET_FOLDERPATH__enum,
    BT_FTPC_UTIL_OPEN_FILE_FAIL__enum,
    BT_FTPC_DEL_RECV_FILE__enum,
    BT_FTPC_ACTION_PUSH_FILE_DONE__enum,
    BT_FTPC_PUSH_CNF_HDLR__enum,
    BT_FTPC_TARGET_FOLDERPATH_NO_RESOURCE__enum,

    BT_FTPC_CONNECT_SERVER__enum,
    BT_FTPC_CONNECT_SERVER_CHECK__enum,
    BT_FTPC_BACK_FOLDER__enum,
    BT_FTPC_ROOT_FOLDER__enum,
    BT_FTPC_CHANGE_FOLDER__enum,
    BT_FTPC_CHANGE_FOLDER_FORWARD__enum,
    BT_FTPC_CHANGE_FOLDER_BACK__enum,
    BT_FTPC_CHANGE_FOLDER_REFRESH__enum,
    BT_FTPC_GET_FILE_OBJ__enum,

    BT_FTPC_IS_RUN__enum,
    BT_FTPC_IS_CANCELING__enum,
    BT_FTPC_IS_ABORTING__enum,
    BT_FTPC_CONNECTION_TERMINATED__enum,
    BT_FTPC_WORK_FOLDER_INIT__enum,
    BT_FTPC_WORK_FOLDER_INIT_OPEN_NO_ERROR__enum,
    BT_FTPC_WORK_FOLDER_INIT_OPEN_ERROR__enum,
    BT_FTPC_DISCONNECT_IND_HDLR__enum,
    BT_FTPS_DISCONNECT_IND_HDLR__enum,

    BT_FTPC_DISCONNECT_IND_HDLR_FIND_INDEX_FAILED__enum,
    BT_FTPC_DISCONN_IND_HDLR_FIND_INDEX_FAILED_CONN_CACEL__enum,

    BT_FTPC_UNKNOW_MSG_HDLR__enum,
    BT_FTPC_CONNECT_CANCEL__enum,
    BT_FTPC_SEND_DISCONNECT_MSG__enum,
    BT_FTPC_SEND_ABORT_MSG__enum,
    BT_FTPC_CNTX_INIT__enum,
    BT_FTPC_CNTX_INIT_WRN__enum,
    BT_FTPC_CNTX_DEINIT__enum,
    BT_FTPC_CNTX_DEINIT_WRN__enum,
    BT_FTPC_RECEIVED_FOLDER_INIT_OPEN__enum,
    BT_FTPC_RECEIVED_FOLDER_INIT_CREATE__enum,
    BT_FTPC_FIND_GOEP_ID_FAILED__enum,
    BT_FTPC_WRITE_OBJ__enum,
    BT_FTPC_WRITE_OBJ_OPEN__enum,
    BT_FTPC_WRITE_OBJ_WRITE__enum,
    BT_FTPC_WRITE_OBJ_CONTINUE__enum,
    BT_FTPC_WRITE_OBJ_CONTINUE_WRITE__enum,
    BT_FTPC_GET_FOLDER__enum,
    BT_FTPC_GET_FOLDER_PARSE_RESUME__enum,
    BT_FTPC_GET_FOLDER_PARSE_DONE__enum,
    BT_FTPC_GET_FOLDER_CONTINUE_PARSE__enum,
    BT_FTPC_GET_FOLDER_OPEN__enum,
    BT_FTPC_GET_FOLDER_WRITE__enum,
    BT_FTPC_GET_OBJ__enum,
    BT_FTPC_PARSE_FOLDER_CONTENT__enum,
    BT_FTPC_PARSE_FOLDER_CONTENT_PAUSE__enum,
    BT_FTPC_FOLDER_LISTING_START_EL__enum,
    BT_FTPC_GET_FOLDER_CONTENT__enum,
    BT_FTPC_CONNECT_CNF_HDLR__enum,
    BT_FTPC_PULL_CNF_HDLR__enum,
    BT_FTPC_SET_FOLDER_CNF_HDLR__enum,
    BT_FTPC_ABORT_CNF_HDLR__enum,
    BT_FTPS_CONNECTION_TERMINATED__enum,
    BT_FTPC_CHECK_FOLDER_EXISTED__enum,
    BT_FTPC_CHECK_FOLDER_EXISTED_ERROR__enum,
    BT_FTPC_DELETE_FILE__enum,
    BT_FTPC_GET_LIST__enum,
    BT_FTPC_GET_RECV_CALL_BACK__enum,
    BT_FTPC_GET_ALL__enum,
    BT_FTPC_FIND_NEXT_FILE__enum,
    BT_FTPC_CHECK_LIST__enum,
    BT_FTPC_FREE_LIST__enum,
    BT_FTPC_GET_NEXT_FILE__enum,
    BT_FTPC_RESET_PULL_VAR__enum,
    BT_FTPC_PARSE_EL_START_ERR__enum,
    BT_FTPC_PARSE_EL_END_ERR__enum,
    BT_FTPC_RENAME_OBJ__enum,
    BT_FTPC_ABORTED_HDL__enum,
    BT_FTPC_DEL_TMP_FILE__enum,
    BT_FTPC_SET_FLAG_ABORT_REQ_SENT__enum,
    BT_FTPC_RESET_FLAG_ABORT_REQ_SENT__enum,
    BT_FTPC_BROWSE_FILES_TIMER_TIMEOUT_FAILED_HDLR__enum,
    BT_FTPC_PARSE_FOLDER_CONTENT_FS_OPEN__enum,
    BT_FTPC_PARSE_FOLDER_CONTENT_FS_OPEN_LNAME_FILE__enum,


    BT_FTPC_SET_FS_FLAG__enum,




    BT_FTPC_MAKE_RECV_PATH__enum,
    BT_FTPC_WRITE_LNAME2FILE__enum,
    BT_FTPC_WRITE_LNAME2FILE_FS_OPEN__enum,
    BT_FTPC_WRITE_LNAME2FILE_FS_SEEK__enum,
    BT_FTPC_WRITE_LNAME2FILE_FS_WRITE__enum,
    BT_FTPC_READ_LNAME__enum,
    BT_FTPC_READ_LNAME_FS_OPEN__enum,
    BT_FTPC_READ_LNAME_FS_SEEK__enum,
    BT_FTPC_READ_LNAME_FS_READ__enum,
    BT_FTPC_DISCONNECT_CLIENT_CHECK__enum,



    BT_HIDD_ADP_STATUS__enum,
    BT_HIDD_ADP_STATE_CHANGE_IND__enum,
    BT_HIDD_ADP_START_TIMER__enum,
    BT_HIDD_ADP_STOP_TIMER__enum,
    BT_HIDD_ADP_SEND_MOUSE_COMMAND__enum,
    BT_HIDD_ADP_SEND_KBD_COMMAND__enum,
    BT_HIDD_ADP_SEND_COMPLETE_STATUS__enum,
    BT_HIDD_ADP_SEND_STATUS__enum,
    BT_HIDD_ADP_TRANSATION_COMPLETE__enum,
    INTERRUPT_COMPLETE_FAILED__enum,
    CONNECTION_OPENED__enum,
    HID_SENDING_SET_PROTOCOL_RESPONSE__enum,
    CONTROL_FUNCTION_RECEIVED_SUSPEND__enum,
    HID_SENDING_INTERRUPT__enum,
    INTERRUPT_RECEIVED__enum,
    CONTROL_FUNCTION_RECEIVED_SOFT_RESET__enum,
    SET_PROTOCOL_PROTOCOL__x02X__enum,
    HID_SENDING_GET_PROTOCOL_RESPONSE__enum,
    SET_REPORT_REPORT_DATA_LEN__xD__enum,
    OPEN_REQUEST_RECEIVED__enum,
    INTRPOOL_IS_EMPRY__enum,
    HID_CHANNEL_COULD_NOT_SEND_SET_IDLE_RATE_RESPONSE_REASON_x02X__enum,
    CONTROL__enum,
    CONTROL_FUNCTION_RECEIVED_HARD_RESET__enum,
    HID_CHANNEL_COULD_NOT_SEND_GET_REPORT_RESPONSE_REASON_x02X__enum,
    TRANSACTION_RECEIVED__enum,
    TRANSACTION_COMPLETE_STATUS__x0X2__enum,
    CONTROL_FUNCTION_RECEIVED_NOP__enum,
    HID_SENDING_SET_REPORT_RESPONSE__enum,
    INTERRUPT_COMPLETE__enum,
    HID_CHANNEL_COULD_NOT_SEND_GET_IDLE_RATE_RESPONSE_REASON_x02X__enum,
    GET_PROTOCOL__enum,
    SET_IDLE_IDLE_RATE__xD__enum,
    HID_CHANNEL_COULD_NOT_SEND_SET_REPORT_RESPONSE_REASON_x02X__enum,
    HID_CHANNEL_COULD_NOT_SEND_SET_PROTOCOL_RESPONSE_REASON_x02X__enum,
    COULD_NOT_ACCEPT_THE_INCOMING_CONNECTION__enum,
    CONTROL_FUNCTION_RECEIVED_VIRTUAL_CABLE_UNPLUG__enum,
    UNKNOWN_CONTROL_FUNCTION__enum,
    HID_SENDING_GET_IDLE_RATE_RESPONSE__enum,
    CLOSE_INDICATION_RECEIVED__enum,
    HID_SENDING_GET_REPORT_RESPONSE__enum,
    GET_IDLE__enum,
    CONTROL_FUNCTION_RECEIVED_EXIT_SUSPEND__enum,
    GET_REPORT__enum,
    CONNECTION_CLOSED__enum,
    HID_CHANNEL_COULD_NOT_SEND_GET_PROTOCOL_RESPONSE_REASON_x02X__enum,
    HID_SENDING_SET_IDLE_RATE_RESPONSE__enum,
    HID_CHANNELx08X__enum,
    HIDSTATEOPEN1_PKT_RETURNED_WITH_TRANS_TYPExD__enum,
    HIDSTATEOPEN2_PKT_RETURNED_WITH_TRANS_TYPExD__enum,
    HIDSTATEOPEN_SEND_MORE_DATA__enum,
    HIDSTATEOPENPKT_RETURNED_WITH_ERR_FLAG__enum,
    HIDCOMPLETETRANSACTION_WITH_TYPExD__enum,
    CHANNELSTATEx02X__enum,
    GET_REPORT_BIT3_IS_0__enum,
    GET_REPORT_BIT3_IS_1__enum,
    GET_REPORTIDxD__enum,
    UNUSED_CHANNEL_0_IGNORE_IT__enum,
    INSERT_TO_TRANSQUEUE_WITH_TYPExD__enum,
    TRY_TO_REGISTER_SECURITY_RECORDx02X__enum,
    TRY_TO_REGISTER_SECURITY_RECORD__enum,
    RECV_GET_REPORT_WITH_VALID_ID__enum,
    CHANNEL_IS_0_RETURN__enum,
    GET_REPORT_PARMA_LENxD__enum,
    BEFORE_L2CAP_SEND_TRANSTYPExD__enum,
    L2CAP_CONNECTRSPx02X__enum,
    CIDxDCTRLCIDxD__enum,

    CAR_SDP_PARSEATTRIBUTES__CONTINUATION_STATE_QUERY_AGAIN__enum,
    HID_HOST_INVALID_CONTROL_COMMAND__enum,
    HID_SDP_QUERY_FAILED__enum,
    HID_SDP_PARSEATTRIBUTES_SUCCEEDED_VALUE__0Xx02XUPDATED_BUFF_LEN__xD__enum,
    HID_HIDSENDNEXTTRANSACTION_x02X__enum,
    HID_C_SMAx02XBx02X__enum,
    HID_HIDSENDNEXTINTERRUPT_x02X__enum,
    HID_COULD_NOT_RESTART_QUERY__enum,
    HID_OPENCONNECTION__enum,
    HID_CHANNEL_CLOSED_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X__enum,
    HID_STATUSx02X__enum,
    BT_HID_SDP_QUERY_CALLBACK_x02X__enum,
    HIDSTATEOPENx02X__enum,
    HID_SDP_PARSING_FAILED__enum,
    HIDSTATECONNPENDINGx02X__enum,
    HIDSTATECLOSEDx02X__enum,
    HIDSTATEDISCPENDINGx02X_CIDx02X__enum,
    HID_SDP_PARSEATTRIBUTES_SUCCEEDED_BYTES_READ__xD_UPDATED_BUFF_LEN__xD__enum,
    HID_CHANNEL_CONN_PENDING_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X__enum,
    HIDCHANNELCTRLCIDx02X__enum,
    HID_SERVER_OPEN_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X__enum,
    HID_HID_ISCONNECTEDx02X__enum,
    HID_E_SMAx02XBx02X__enum,
    HID_INVALID_PROFILE_VERSION__enum,
    HID_RESPONDOPENIND_STATEx02X__enum,
    HID_TRY_TO_DISCONNECT_INTR_CHANNEL__enum,
    HID_HOST_UNEXPECTED_DATC__enum,
    HID_CTRL_L2CAP_CONNECTREQSTATUSx02X__enum,
    HID_B_SMAx02XBx02X__enum,
    HID_A_SMAx02XBx02X__enum,
    HID_CID_x02X__enum,
    HIDL2CAP_AUTHORIZECONNECTRSP_STATUSx02X__enum,
    HIDPARMSEVENTx02X__enum,
    L2CAP_HID_TX_STATUSx02X__enum,
    HIDCOMPLETETRANSACTION__enum,
    HID_D_SMAx02XBx02X__enum,
    HID_SDP_PARSEATTRIBUTES_SUCCEEDED_VALUE__0Xx04XUPDATED_BUFF_LEN__xD__enum,
    HIDCMGRCALLBACKx02X__enum,
    HIDFINDUNUSEDCHANNELx02X__enum,
    HID_L2CAP_DISCONNECT_REQ_CID_CIDx02X_STATUSx02X__enum,
    CHANNELCTRLCIDx02XCHANNELINTRCIDx02X__enum,
    HID_NOT_THE_CONNECT_BD_ADDR__enum,
    HID_CHANNELCONCOUNTx02X__enum,
    HIDSENDTRANSPACKET__enum,
    HIDCLEARCONNECTIONx02X__enum,
    HID_CHANNELSTATEx02X__enum,
    HID_START_L2CAP_CONNECTION__enum,
    HIDCHANNEL_0__enum,
    HID_HIDCOMPLETETRANSACTION__enum,
    HIDCHANNELINTRCIDx02X__enum,
    HIDCLEARCONNECTION__enum,
    HIDSENDNEXTTRANSACTION__enum,
    HIDCHANNELCMGRHANDLERBDC0__enum,
    HID_HID_SENDINTERRUPT__enum,
    HID_INITIALIZED__enum,
    HID_SDP_SUCCESSFULLY__enum,
    HID_THIS_IS_DEFININTELY_THE_ONE__enum,
    HID_INVALID_CONNECT_REQUEST__enum,
    HID_HOST_RESPONSE_RECEIVED_BEFORE_REQUEST_SENT__enum,
    HID_HOST_RECEIVED_INPUT_REPORT_IND__enum,



    HID_OPENCONNECTION_DEVTYPE__enum,
    HID_QUERYDEVICE_DEVTYPE__enum,
    HID_QUERYSERVICE_UUID__enum,
    HID_QUERYSERVICE_DONE__enum,
    HID_GATTEVENTCALLBACK_EVENT__enum,
    HID_GATTEVENTCALLBACK_UNEXPECTED_EVENT__enum,
    HID_CMGRCALLBACK_DEVTYPE__enum,
    HID_WRITE_CHARDESC_HANDLE__enum,
    HID_GATTREPORT_INFO__enum,
    HID_SENDLETRANSPACKET__enum,
    HID_NOTIFYCALLBACK_NOMATCH__enum,




    BT_PBAP_SERVER_STATE_LOG__enum,
    BT_PBAP_SERVER_STATE_TRANS_LOG__enum,
    BT_PBAP_FUNC_CONNECT_RSP_HDLR__enum,
    BT_PBAP_INIT__enum,
    BT_PBAP_DEINIT__enum,
    BT_PBAP_START_UP_MOD_USBMS_BOOT__enum,
    BT_PBAP_WORK_FOLDER_INIT__enum,
    BT_PBAP_ACTIVATE_WITH_WRONG_STATE__enum,
    BT_PBAP_SERVER_ACTIVATE_FAIL__enum,
    BT_PBAP_DEACTIVATE_WITH_WRONG_STATE__enum,
    BT_PBAP_SERVER_DEACTIVATE_FAIL__enum,
    BT_PBAP_DISCONNECT_RSP_HDLR__enum,
    BT_PBAP_RECEIVE_DISCONNECT_IN_WRONG_STATE__enum,
    BT_ADP_PBAP_RELEASE_OBJECT__enum,
    BT_ADP_PBAP_CHECK_STATE_VALID__enum,
    BT_ADP_PBAP_GET_OBJECT_LENGTH__enum,
    BT_ADP_PBAP_GET_NEW_CALLS__enum,
    BT_ADP_PBAP_SET_FOLDER_SIZE__enum,
    BT_ADP_PBAP_GET_FOLDER_SIZE__enum,
    BT_ADP_PBAP_GET_FOLDER_OBJECT_LENGTH__enum,
    BT_ADP_PBAP_GET_LIST_OBJECT_LENGTH__enum,
    BT_ADP_PBAP_GET_ENTRY_OBJECT_LENGTH__enum,
    BT_ADP_PBAP_READ_ENTRY_IND__enum,
    BT_ADP_PBAP_READ_FOLDER_IND__enum,
    BT_ADP_PBAP_READ_LIST_IND__enum,
    BT_ADP_PBAP_SET_PATH_IND__enum,
    BT_ADP_PBAP_CALL_BACK__enum,
    BT_PBAP_INIT_FAILED__enum,
    BT_PBAP_REGISTERED__enum,
    BT_PBAP_DEREGISTERED__enum,
    BT_PBAP_SERVER_ABORT__enum,
    BT_PBAP_SERVER_GOEP_CALLBACK__enum,
    BT_PBAP_SERVER_NOT_FOUND__enum,
    BT_PBAP_SERVER_HEADLEN_ZERO__enum,
    BT_PBAP_SERVER_OPER_COMPLETE__enum,
    BT_PBAP_OBS_NEW_FAIL__enum,
    BT_PBAP_OBS_READ_ERROR__enum,
    BT_PBAP_ADP_AUTHORIZE_ERROR_STATE__enum,



    BT_BIP_PRINT_I_STATE__enum,
    BT_BIP_PRINT_I_STATE_TRANS__enum,
    BT_BIP_PRINT_R_STATE__enum,
    BT_BIP_PRINT_R_STATE_TRANS__enum,
    BT_BIP_FUNC_INIT__enum,
    BT_BIP_FUNC_DEINIT__enum,
    BT_BIP_FUNC_CNTX_DEINIT_FS_CLOSE_FAILED__enum,
    BT_BIP_FUNC_CNTX_DEINIT_FS_DELETE_FAILED__enum,
    BT_BIP_FUNC_CNTX_INIT__enum,
    BT_BIP_FUNC_WORK_FOLDER_INIT__enum,
    BT_BIP_FUNC_WORK_FOLDER_INIT_USB_MS__enum,
    BT_BIP_FUNC_WORK_FOLDER_INIT_OPEN_NO_ERROR__enum,
    BT_BIP_FUNC_WORK_FOLDER_INIT_OPEN_ERROR__enum,
    BT_BIP_FUNC_MSG_HDLR__enum,
    BT_BIP_FUNC_CONN_REQ_HDLR_CONN_FAILED__enum,
    BT_BIP_FUNC_DISCONNECT_REQ_HDLR__enum,
    BT_BIP_FUNC_COMMAND_REQ_HDLR__enum,
    BT_BIP_FUNC_ABORT_REQ_HDLR__enum,
    BT_BIP_FUNC_ACTIVATE_REQ_HDLR__enum,
    BT_BIP_FUNC_DEACTIVATE_REQ_HDLR__enum,
    BT_BIP_FUNC_COMMAND_RSP_HDLR__enum,
    BT_BIP_FUNC_CONTINUE_RSP_HDLR__enum,
    BT_BIP_FUNC_CONNECT_RSP_HDLR__enum,
    BT_BIP_FUNC_GENERATE_XML_CAPABILITIES__enum,
    BT_BIP_FUNC_GENERATE_XML_IMG_LIST__enum,
    BT_BIP_FUNC_GENERATE_XML_IMG_PROP__enum,
    BT_BIP_FUNC_PARSE_XML_IMG_LIST_START_FAIL__enum,
    BT_BIP_FUNC_PARSE_XML_IMG_LIST_END_FAIL__enum,
    BT_BIP_FUNC_PARSE_XML_IMG_LIST_DATA_FAIL__enum,
    BT_BIP_FUNC_PARSE_XML_IMG_CAP_START_FAIL__enum,
    BT_BIP_FUNC_PARSE_XML_IMG_CAP_END_FAIL__enum,
    BT_BIP_FUNC_PARSE_XML_IMG_CAP_DATA_FAIL__enum,
    BT_BIP_FUNC_PARSE_XML_IMG_PROP_START_FAIL__enum,
    BT_BIP_FUNC_PARSE_XML_IMG_PROP_END_FAIL__enum,
    BT_BIP_FUNC_PARSE_XML_IMG_PROP_DATA_FAIL__enum,
    BT_BIP_FUNC_CLOSE_FILE_CONTINUALLY__enum,
    BT_BIP_FUNC_START_CLOSE_FILE_CONTINUALLY__enum,
    BT_BIP_FUNC_CHECK_FS_ERROR__enum,
    BT_BIP_FUNC_CONNECT_REQ_HDLR__enum,
    BT_BIP_FS_OPEN_FAILED__enum,
    BT_BIP_GEN_XML_FS_OPEN_FAILED__enum,
    BT_BIP_REGINITIATOR_FAILED__enum,
    BT_BIP_FS_OPEN_SNDFILE_FAILED__enum,
    BT_BIP_FS_READ_SNDFILE_FAILED__enum,
    BT_BIP_FS_OPEN_PUTIMG_FAILED__enum,
    BT_BIP_FS_OPEN_PUTTHM_FAILED__enum,
    BT_BIP_GETIMGREQ_FS_OPEN_FAILED__enum,
    BT_BIP_GETIMGREQ_FS_READ_FAILED__enum,
    BT_BIP_SENDBIPREQ_FAILD__enum,
    BT_BIP_MMI_CONNECT_RSP_FAILED__enum,
    BT_BIP_GEN_XML_FS_WRITE_FALED__enum,
    BT_BIP_XMLPARSE_IMGLIST_FS_OPEN_FAILED__enum,
    BT_BIP_PARSE_XML_IMGLIST_FS_WRITE_FAILED__enum,
    BT_BIP_ADP_CREATE_DIR_RET__enum,
    BT_BIP_ADP_DRM_OPEN_RET__enum,
    BT_BIP_ADP_DRM_GET_OBJ_METHOD_RET__enum,
    BT_BIP_ADP_DRM_GET_RIGHTS_ISSUER_RET__enum,
    BT_BIP_ADP_CHECK_DRM_RET__enum,
    BT_BIP_ADP_FS_DELETE_RET__enum,
    BT_BIP_ADP_FS_WRITE_RET__enum,
    BT_BIP_ADP_GEN_XML_FAILED__enum,
    BT_BIP_ADP_I_DISCONNECT_REQ_IN_WRONG_STATE__enum,
    BT_BIP_ADP_R_DISCONNECT_REQ_IN_WRONG_STATE__enum,
    BT_BIP_ADP_ERROR_SESSION_ROLE__enum,
    BT_BIP_ADP_I_INVALID_CONTINUE_RSP__enum,
    BT_BIP_ADP_R_INVALID_CONTINUE_RSP__enum,
    BT_BIP_FUNC_I_CNTX_DEINIT__enum,
    BT_BIP_FUNC_CNTX_DEINIT__enum,
    BT_BIP_ADP_ABORT_REASON__enum,
    BT_BIP_ADP_RESUME_PARSE_NULL__enum,
    BT_BIP_ADP_PARSE_PAUSED__enum,
    BT_BIP_ADP_PARSE_IMGLIST_END__enum,
    BT_BIP_ADP_XMLPARSE_RETURN__enum,
    BT_BIP_ADP_PARSE_END_FSCLOSED_FAILED__enum,
    BT_BIP_OBS_READ_ERROR__enum,
    BT_BIP_OBS_WRITE_ERROR__enum,
    BT_BIP_DEINIT_CLIENT_FAILED__enum,
    BT_BIP_DEINIT_SERVER_FAILED__enum,
    BT_BIP_ABORT__enum,
    BT_BIP_REGISTERCLIENT_FAILED__enum,
    BT_BIP_REGISTERSERVER_FAILED__enum,
    BT_BIP_RESPONDER_NOT_FOUND__enum,
    BT_BIP_SERVER_OPER_ABORTED__enum,
    BT_BIP_SERVER_PARTIAL_CONTENT_PUTIMG__enum,
    BT_BIP_SERVER_PARTIAL_CONTENT_GETIMGLIST__enum,
    BT_BIP_INITIATOR_NOT_FOUND__enum,
    BT_BIP_I_PARTIALCONTENT_GETIMGLIST__enum,
    BT_BIP_I_PARTIALCONTENT_PUTIMG__enum,


    BIPI_EXT_ADP_STATE_ERR__enum,
    BIPR_EXT_ADP_STATE_ERR__enum,
    BIPI_EXT_ADP_RECEIVE_MSG__enum,
    BIPR_EXT_ADP_RECEIVE_MSG__enum,
    BIPI_EXT_ADP_APP_CMD__enum,
    BIPR_EXT_ADP_APP_CMD__enum,
    BIPI_EXT_ADP_NOTIFY_APP__enum,
    BIPR_EXT_ADP_NOTIFY_APP__enum,
    BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_CN_ID__enum,
    BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_REQ_ID__enum,
    BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_STATUS__enum,
    BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_CN_ID__enum,
    BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_REQ_ID__enum,
    BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_STATUS__enum,
    BIP_EXT_ADP_DO_NOT_SUPPORT_NOW__enum,





    PAN_INITIALIZED__enum,
    PAN_REGISTER_BUSY__enum,
    PAN_OPENCONNECTION__enum,
    PAN_CREATEDATALINK_STATUS__enum,
    PAN_OPENCONNECTION_STATUS__enum,
    PAN_CMGRCALLBACK_EVENT_STATUS__enum,
    PAN_NOT_FOR_THE_BD_ADDR__enum,
    PAN_CMGRCALLBACK_BDADDR0__enum,
    PAN_BNEPCALLBACK__enum,
    PAN_BNEPCALLBACK_EVENT__enum,
    PAN_HANDLEPACKETIND_GRATUITOUS_ARPREQUEST__enum,
    PAN_BNEPCONTROL_PKTTYPE__enum,
    PAN_SENDPKT_BROADCAST__enum,
    PAN_FORWARDPKT_NODST__enum,
    PAN_FORWARDPKT_BROADCAST__enum,
    PAN_FORWARDPKT_TOPEER__enum,
    PAN_SDP_QUERY_CALLBACK_RESULT__enum,
    PAN_SDP_QUERY_CALLBACK_CONNECT_FAILED__enum,
    PAN_SDP_QUERY_CALLBACK_DONE__enum,
    PAN_CLEAR_CONNECTION_STATUS__enum,

    PAN_EXT_ADP_ACTIVATE_DONE__enum,
    PAN_EXT_ADP_DEACTIVATE_DONE__enum,
    PAN_EXT_ADP_HANDLE_CMD__enum,
    PAN_EXT_ADP_HANDLE_CONNECT_CMD__enum,
    PAN_EXT_ADP_HANDLE_DISCONNECT_CMD__enum,
    PAN_EXT_ADP_HANDLE_CONNECT_IND_INVALID_DEVICE__enum,
    PAN_EXT_ADP_HANDLE_CONNECT_IND_PREV_STATE__enum,
    PAN_EXT_ADP_HANDLE_CONNECT_CNF_INVALID_DEVICE__enum,
    PAN_EXT_ADP_HANDLE_CONNECT_CNF_PREV_STATE__enum,
    PAN_EXT_ADP_HANDLE_DISCONNECT_IND_PREV_STATE__enum,
    PAN_EXT_ADP_HANDLE_DISCONNECT_CNF_PREV_STATE__enum,




    BTLOG_MAPS_ADP_MNS_CONNECT_DUPLICATE__enum,
    BTLOG_MAPS_ADP_ACTIVATE_NOT_INITIALIZED__enum,
    BTLOG_MAPS_ADP_DEACTIVATE_DISCONNECTING__enum,
    BTLOG_MAPS_ADP_ADD_CONNECTION__enum,
    BTLOG_MAPS_ADP_ADD_CONNECTION_DUPLICATE__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ_DONE__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ_FAIL__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND_DONE__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND_FAIL__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_TP_DISCONNECTED__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_TP_DISCONNECTED_NO_CONN__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_MNS_CONNECTED__enum,
    BTLOG_MAPS_ADP_APP_CALLBACK_MNS_DISCONNECTED__enum,
    BTLOG_MAPS_ADP_DISCONNECT__enum,

    BTLOG_MAPS_DEREGISTER_SERVER_CHECK_FAILED__enum,
    BTLOG_MAPS_DEREGISTER_SERVER__enum,
    BTLOG_MAPS_GOEP_SERVER_CALLBACK__enum,
    BTLOG_MAPS_GOEP_SERVER_CALLBACK_HEADER_RX__enum,
    BTLOG_MAPS_GOEP_MNS_CLIENT_CALLBACK__enum,
    BTLOG_MAPS_OBS_NEW__enum,
    BTLOG_MAPS_OBS_CLOSE__enum,
    BTLOG_MAPS_OBS_READ__enum,
    BTLOG_MAPS_OBS_WRITE__enum,
    BTLOG_MAPS_OBS_GET_OBJECT_LEN__enum,
    BTLOG_MAPS_MNS_OBS_READ__enum,

    BTLOG_MAPC_GOEP_CLINET_CALLBACK__enum,
    BTLOG_MAPC_GOEP_CLIENT_CALLBACK_HEADER_RX__enum,
    BTLOG_MAPC_GOEP_MNS_SERVER_CALLBACK__enum,
    BTLOG_MAPC_OBS_NEW__enum,
    BTLOG_MAPC_OBS_CLOSE__enum,
    BTLOG_MAPC_OBS_READ__enum,
    BTLOG_MAPC_OBS_WRITE__enum,
    BTLOG_MAPC_OBS_GET_OBJECT_LEN__enum,
    BTLOG_MAPC_MNS_OBS_WRITE__enum,



    BLEDB_LOADRECORD__enum,
    BLEDB_REMOVE_UNBONDEDDEVICE_FROMLIST__enum,
    BLEDB_UPDATERECORD_OFFSET__enum,
    BLEDB_REMOVERECORD_DELETEFILE__enum,
    BLEDB_REMOVERECORD_NOTFOUND__enum,
    BLEDB_BONDINGCB_STATUS__enum,
    BLEDB_GETRECORD_NEW__enum,



    HTP_INITIALIZED__enum,
    HTP_OPENCONNECTION__enum,
    HTP_CREATEDATALINK_STATUS__enum,
    HTP_OPENGATT_STATUS__enum,
    HTP_CMGRCALLBACK_EVENT_STATUS__enum,
    HTP_NOT_FOR_THE_DEVICE__enum,
    HTP_CMGRCALLBACK_BDADDR0__enum,
    HTP_GATTEVENTCALLBACK_EVENT__enum,
    HTP_GATTEVENTCALLBACK_IGNORE__enum,
    HTP_GATTEVENTCALLBACK_INDICATION_IGNORE__enum,
    HTP_GATTEVENTCALLBACK_INDICATION_HANDLE__enum,
    HTP_GATTEVENTCALLBACK_NOTIFICAITON_HANDLE__enum,
    HTP_GATTEVENTCALLBACK_UNEXPECTED_EVENT__enum,
    HTP_BTADDR__enum,
    HTP_QUEREYGATTSERVICE__enum,
    HTP_PACKETPOOL_EMPTY__enum,
    HTP_GATTOPCALLBACK_EVENT__enum,
    HTP_FINDPRIMARYSERVICE_UUID__enum,
    HTP_SET_CLIENT_CONFIG_DESCRIPTOR__enum,
    HTP_SET_MEASUREMENT_INTERVAL__enum,
    HTP_SEND_TEMPERATURE_INDICATION__enum,
    HTP_SEND_TEMPERATURE_NOTIFICATION__enum,
    HTP_CLEAR_CONNECTION_STATUS__enum,
    HTP_FIND_ALLCHAR_ERROR_HANDLE__enum,
    HTP_FIND_ALLCHAR_INFO__enum,
    HTP_FIND_ALLCHARDESC_INFO__enum,
    HTP_FIND_ALLCHARDESC_COMPLETE__enum,
    HTP_FIND_ALLCHARDESC__enum,
    HTP_READ_CHAR_ERROR_HANDLE__enum,
    HTP_READ_CHAR_INFO__enum,
    HTP_READ_CHAR_LASTONE__enum,
    HTP_READ_CHAR_NEXTONE__enum,
    HTP_READ_CHARDESC_INFO__enum,
    HTP_READ_CHARDESC_ONEMORE__enum,
    HTP_READ_CHARDESC_NEXTCHAR__enum,
    HTP_READ_CHARDESC_COMPLETE__enum,
    HTP_READ_CHAR_HANDLE__enum,
    HTP_READ_CHARDESC_HANDLE__enum,
    HTP_WRITE_CHAR_HANDLE__enum,
    HTP_WRITE_CHARDESC_HANDLE__enum,
    HTP_WRITE_INTERVAL__enum,
    HTP_WRITE_TEMPERATURE_CLIENTCONFIG__enum,
    HTP_WRITE_INTERTEMPERATURE_CLIENTCONFIG__enum,
    HTP_WRITE_INTERVAL_CLIENTCONFIG__enum,
    HTP_REMOVEDATABASE_NO_MATCHED__enum,
    HTP_REMOVEDATABASE_DELETEFILE__enum,
    HTP_INTADP_HANDLE_MESSAGE__enum,
    HTP_INTADP_CALLBACK__enum,
    HTP_INTADP_SETCLIENTCONFIG__enum,
    HTP_INTADP_SEND_TEMPERATURE__enum,
    HTP_INTADP_SEND_TEMPERATURE_VALUE__enum,

    HTP_EXT_ADP_HANDLE_CONNECT_CMD__enum,
    HTP_EXT_ADP_HANDLE_DISCONNECT_CMD__enum,





    FMP_INITIALIZED__enum,
    FMP_CMGRCALLBACK_EVENT_STATUS__enum,
    FMP_NOT_FOR_THE_DEVICE__enum,
    FMP_CMGRCALLBACK_BDADDR0__enum,
    FMP_OPENGATT_STATUS__enum,
    FMP_GATTEVENTCALLBACK_EVENT__enum,
    FMP_GATTEVENTCALLBACK_UNEXPECTED_EVENT__enum,
    FMP_GATTOPCALLBACK_EVENT__enum,
    FMP_PACKETPOOL_EMPTY__enum,
    FMP_OPENCONNECTION__enum,
    FMP_CREATEDATALINK_STATUS__enum,
    FMP_QUEREYGATTSERVICE__enum,
    FMP_FINDPRIMARYSERVICE__enum,
    FMP_FINDCHARATERISTIC__enum,
    FMP_ALERTLEVEL_WRITE__enum,
    FMP_REMOVEDATABASE_NO_MATCHED__enum,
    FMP_CLEAR_CONNECTION_STATUS__enum,
    FMP_INTADP_HANDLE_MESSAGE__enum,
    FMP_INTADP_CALLBACK__enum,






    BLEUTILS_QUEREYGATTSERVICE__enum,
    BLEUTILS_GATTOPCALLBACK_EVENT__enum,
    BLEUTILS_READ_CHAR_HANDLE__enum,
    BLEUTILS_READ_LONG_CHAR_HANDLE__enum,
    BLEUTILS_FIND_ALLCHARDESC_INFO__enum,
    BLEUTILS_READ_CHARDESC_HANDLE__enum,
    BLEUTILS_READ_LONG_CHARDESC_HANDLE__enum,
    BLEUTILS_FINDPRIMARYSERVICE_UUID__enum,
    BLEUTILS_FINDINCLUDESERVICES_UUID__enum,
    BLEUTILS_FINDALLCHAR_UUID__enum,
    BLEUTILS_FINDALLCHARDESC_UUID__enum,
    BLEUTILS_FINDCHAR_DONE__enum,
    BLEUTILS_READ_CHAR__enum,
    BLEUTILS_READ_CHAR_DESCRIPTOR__enum,
    BLEUTILS_READCHAR_DONE__enum,





BT_MBT_TRACE_START__enum,


    BTLOG_MBT_A2DP_SOURCE_ENABLED__enum,
    BTLOG_MBT_A2DP_SOURCE_DISABLED__enum,
    BTLOG_MBT_A2DP_SOURCE_CONNECT__enum,
    BTLOG_MBT_A2DP_SOURCE_DISCONNECT__enum,
    BTLOG_MBT_A2DP_SOURCE_START__enum,
    BTLOG_MBT_A2DP_SOURCE_STOP__enum,
    BTLOG_MBT_A2DP_SOURCE_PAUSE__enum,
    BTLOG_MBT_A2DP_SOURCE_RESUME__enum,

    BTLOG_MBT_AVRCP_ENABLED__enum,
    BTLOG_MBT_AVRCP_DISABLED__enum,
    BTLOG_MBT_AVRCP_CONNECT__enum,
    BTLOG_MBT_AVRCP_DISCONNECT__enum,
    BTLOG_MBT_WISE_CMD_REQ__enum,

    BT_DUN_MBT_ENABLE__enum,
    BT_DUN_MBT_DISABLE__enum,
    BT_DUN_MBT_DISCONNECT__enum,
    BT_DUN_MBT_LISTEN__enum,
    BT_DUN_MBT_LISTENSTOP__enum,
    BT_DUN_MBT_ISCONNECTED__enum,
    BT_DUN_MBT_ISDEVCONNECTED__enum,
    BT_DUN_MBT_AUTHORIZE_RES__enum,
    BT_DUN_MBT_CB_ENABLE_CNF__enum,
    BT_DUN_MBT_CB_DISABLE_CNF__enum,
    BT_DUN_MBT_CB_LISTEN_CNF__enum,
    BT_DUN_MBT_CB_LISTEN_STOP_CNF__enum,
    BT_DUN_MBT_CB_CONNECT_IND_REQ__enum,
    BT_DUN_MBT_CB_CONNECT_IND__enum,
    BT_DUN_MBT_CB_DISCONNECT_IND__enum,
    BT_DUN_MBT_CB_DISCONNECT_CNF__enum,

    BT_FTP_WISE_API_POST_EVENT__enum,
    BT_FTP_WISE_API_SDC_STATUS__enum,
    BT_FTP_WISE_API_SERVER_ENABLE__enum,
    BT_FTP_WISE_API_SERVER_DISABLE__enum,
    BT_FTP_WISE_API_SERVER_ACCESS_RESPONSE__enum,
    BT_FTP_WISE_API_SERVER_ACCESS_RESPONSE_FOLDER__enum,
    BT_FTP_WISE_API_SERVER_AUTH_RESPONSE__enum,
    BT_FTP_WISE_API_SERVER_SETROOTFOLDER__enum,
    BT_FTP_WISE_API_SERVER_DISCONNECT__enum,
    BT_FTP_WISE_API_SERVER_AUTHORIZE_RES__enum,
    BT_FTP_WISE_API_SERVER_EXTOBJECT__enum,
    BT_FTP_WISE_API_IS_CONNECTED__enum,
    BT_FTP_WISE_API_IS_DEV_CONNECTED__enum,
    BT_FTP_WISE_API_SERVER_CB__enum,
    BT_FTP_WISE_API_SERVER_CB_FOLDER__enum,
    BT_FTP_WISE_API_CLIENT_ENABLE__enum,
    BT_FTP_WISE_API_CLIENT_DISABLE__enum,
    BT_FTP_WISE_API_CLIENT_OPEN__enum,
    BT_FTP_WISE_API_CLIENT_CLOSE__enum,
    BT_FTP_WISE_API_CLIENT_AUTH_RESPONSE__enum,
    BT_FTP_WISE_API_CLIENT_PUTFILE__enum,
    BT_FTP_WISE_API_CLIENT_GETFILE__enum,
    BT_FTP_WISE_API_CLIENT_CHDIR__enum,
    BT_FTP_WISE_API_CLIENT_MKDIR__enum,
    BT_FTP_WISE_API_CLIENT_LISTDIR__enum,
    BT_FTP_WISE_API_CLIENT_DELDIR__enum,
    BT_FTP_WISE_API_CLIENT_DELFILE__enum,
    BT_FTP_WISE_API_CLIENT_ABORT__enum,
    BT_FTP_WISE_API_CLIENT_CB__enum,
    BT_FTP_WISE_API_CLIENT_CB_NOHANDLE__enum,
    BT_FTP_WISE_ERR_CLIENT_OPEN__enum,
    BT_FTP_WISE_ERR_CLIENT_CLOSE__enum,
    BT_FTP_WISE_ERR_CLIENT_MKDIR__enum,
    BT_FTP_WISE_ERR_CLIENT_PUT_FILE__enum,
    BT_FTP_WISE_ERR_CLIENT_GET_FILE__enum,
    BT_FTP_WISE_ERR_CLIENT_ABORT__enum,
    BT_FTP_WISE_ERR_CLIENT_DELDIR__enum,
    BT_FTP_WISE_ERR_CLIENT_DELFILE__enum,
    BT_FTP_WISE_ERR_CLIENT_LISTDIR__enum,
    BT_FTP_WISE_ERR_CLIENT_CHDIR__enum,

    BTLOG_MBT_GAP_POWER_ON_REQ__enum,
    BTLOG_MBT_GAP_STATE_OFF__enum,
    BTLOG_MBT_GAP_POWER_OFF_REQ__enum,
    BTLOG_MBT_GAP_DISCOVERY_REQ__enum,
    BTLOG_MBT_GAP_DISCOVERY_FILTER_REQ__enum,
    BTLOG_MBT_GAP_DISCOVERY_FILTER_REQ_PARAM__enum,
    BTLOG_MBT_GAP_IS_CONNECTED__enum,
    BTLOG_MBT_GAP_IS_PROFILE_CONNECTED__enum,
    BTLOG_MBT_GAP_GET_LINK_STATE_REQ__enum,
    BTLOG_MBT_GAP_DISCOVERY_CANCEL_REQ__enum,
    BTLOG_MBT_GAP_WRITE_LOCAL_NAME_REQ__enum,
    BTLOG_MBT_GAP_WRITE_REMOTE_NAME_REQ__enum,
    BTLOG_MBT_GAP_IS_AUTHORIZED__enum,
    BTLOG_MBT_GAP_SET_AUTHORIZED__enum,
    BTLOG_MBT_GAP_AUTHORIZE_RESPONSE__enum,
    BTLOG_MBT_GAP_READ_REMOTE_NAME_REQ__enum,
    BTLOG_MBT_GAP_READ_REMOTE_NAME_CANCEL_REQ__enum,
    BTLOG_MBT_GAP_SET_VISIBLE_REQ__enum,
    BTLOG_MBT_GAP_SET_CONNECTABLE_REQ__enum,
    BTLOG_MBT_GAP_BONDING_REQ__enum,
    BTLOG_MBT_GAP_BONDING_CANCEL_REQ__enum,
    BTLOG_MBT_GAP_PAIRING_REQ__enum,
    BTLOG_MBT_GAP_SERVICE_SEARCH_REQ__enum,
    BTLOG_MBT_GAP_SERVICE_SEARCH_FILTER_REQ__enum,
    BTLOG_MBT_GAP_SERVICE_SEARCH_FILTER_REQ_PARAM__enum,
    BTLOG_MBT_GAP_SERVICE_SEARCH_CANCEL_REQ__enum,
    BTLOG_MBT_GAP_DELETE_TRUST_REQ__enum,
    BTLOG_MBT_GAP_DELETE_TRUST_ALL_REQ__enum,
    BTLOG_MBT_GAP_SECURITY_USER_CONFIRM_RES__enum,
    BTLOG_MBT_GAP_BLOCK_LIST_ADD_REQ__enum,
    BTLOG_MBT_GAP_BLOCK_LIST_REMOVE_REQ__enum,
    BTLOG_MBT_GAP_SET_INIT__enum,
    BTLOG_MBT_GAP_HANDLE_POWER_ON_CNF__enum,
    BTLOG_MBT_GAP_HANDLE_POWER_OFF_CNF__enum,
    BTLOG_MBT_GAP_ERR_MAX_REACHED__enum,
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_BLOCKED__enum,
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_SEARCHED__enum,
    BTLOG_MBT_GAP_ERR_ADDR_MISMATCHED__enum,
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_COD_MISMATCHED__enum,
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_SVC__enum,
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_SVC_MISMATCHED__enum,
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_RSSI_MISMATCHED__enum,
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_POST_EVENT__enum,
    BTLOG_MBT_GAP_HANDLE_DISCOVERY_CNF__enum,
    BTLOG_MBT_GAP_HANDLE_GET_SCATTERNET_STATE_CNF__enum,
    BTLOG_MBT_GAP_HANDLE_GET_LINK_STATE_CNF__enum,
    BTLOG_MBT_GAP_HANDLE_WRITE_LOCAL_NAME_CNF__enum,
    BTLOG_MBT_GAP_ERR_CANCELED__enum,
    BTLOG_MBT_GAP_HANDLE_WRITE_SCANENABLE_CNF__enum,
    BTLOG_MBT_GAP_HANDLE_PIN_CODE_IND_IS_BOND__enum,
    BTLOG_MBT_GAP_HANDLE_PIN_CODE_IND_ERR_NOT_21__enum,
    BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_STATE_MISMATCHED__enum,
    BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_ADDR_MISMATCHED__enum,
    BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_RECEIVED__enum,
    BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_CNF_UPDATE_BLIST__enum,
    BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_CNF__enum,
    BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_ALL_CNF__enum,
    BTLOG_MBT_GAP_HANDLE_LINK_STATE_IND__enum,
    BTLOG_MBT_GAP_HANDLE_BLOCK_LIST_UPDATE_CNF__enum,
    BTLOG_MBT_GAP_HANDLE_AUTHORIZE_REQ__enum,
    BTLOG_MBT_GAP_HANDLE_INT_MESSAGE__enum,
    BTLOG_MBT_GAP_INT_DUMP_CNTX__enum,
    BTLOG_MBT_GAP_INT_SET_CNTX__enum,
    BTLOG_MBT_GAP_INT_RESET_CNTX__enum,
    BTLOG_MBT_GAP_POST_EVENT__enum,
    BTLOG_MBT_GAP_LOG_STRING__enum,
    BTLOG_MBT_GAP_BUSY__enum,

    BT_HFG_WISE_API_ENABLE__enum,
    BT_HFG_WISE_API_DISABLE__enum,
    BT_HFG_WISE_API_CONNECT__enum,
    BT_HFG_WISE_API_DISCONNECT__enum,
    BT_HFG_WISE_API_AUDIO_CONNECT__enum,
    BT_HFG_WISE_API_AUDIO_DISCONNECT__enum,
    BT_HFG_WISE_API_GET_CON_STATUS__enum,
    BT_HFG_WISE_API_GET_AUDIO_CON_STATUS__enum,
    BT_HFG_WISE_API_SET_CONNECTABLE__enum,
    BT_HFG_WISE_API_SET_AUDIO_PATH__enum,
    BT_HFG_WISE_API_SET_SPK_VOLUME__enum,
    BT_HFG_WISE_API_CALL_STATE_CHANGE__enum,
    BT_HFG_WISE_API_SET_NETWORK_STATUS__enum,
    BT_HFG_WISE_API_SET_CALLER_ID__enum,
    BT_HFG_WISE_API_SET_SIGNAL_STRENGTH__enum,
    BT_HFG_WISE_API_SET_ROAMING_STATUS__enum,
    BT_HFG_WISE_API_SET_BATTERY_LEVEL__enum,
    BT_HFG_WISE_API_SET_CALLHELD_STATUS__enum,
    BT_HFG_WISE_API_SET_OPERATOR_SELECTION__enum,
    BT_HFG_WISE_API_SET_EXTENDED_ERROR__enum,
    BT_HFG_WISE_API_SET_SUBSCRIBER_NUMBER__enum,
    BT_HFG_WISE_API_SET_CALL_WAITING__enum,
    BT_HFG_WISE_API_SEND_RESPONSE__enum,
    BT_HFG_WISE_API_SET_CIND__enum,
    BT_HFG_WISE_API_SET_CURRENT_CALL_LIST__enum,
    BT_HFG_WISE_API_START_VR__enum,
    BT_HFG_WISE_API_STOP_VR__enum,
    BT_HFG_WISE_API_RING_START__enum,
    BT_HFG_WISE_API_RING_STOP__enum,
    BT_HFG_WISE_API_SEND_SUPPORTED_PB_LIST__enum,
    BT_HFG_WISE_API_SEND_SELECTED_PB_INFO__enum,
    BT_HFG_WISE_API_SEND_PB_SELECT_RESULT__enum,
    BT_HFG_WISE_API_SEND_PB_ENTRIES_INFO__enum,
    BT_HFG_WISE_API_SEND_PB_READ_RESULT__enum,
    BT_HFG_WISE_API_SEND_PB_FIND_ENTRIES_INFO__enum,
    BT_HFG_WISE_API_SEND_PB_FIND_RESULT__enum,
    BT_HFG_WISE_API_SEND_PB_WRITE_INFO__enum,
    BT_HFG_WISE_API_SEND_PB_WRITE_RESULT__enum,
    BT_HFG_WISE_API_SET_CGM__enum,
    BT_HFG_WISE_API_SET_CSCS__enum,
    BT_HFG_WISE_API_SET_MULTI_FUNCTION_KEY__enum,
    BT_HFG_WISE_API_SET_CALL_STATUS__enum,
    BT_HFG_WISE_API_SET_CALLSETUP__enum,
    BT_HFG_WISE_API_SEND_BTRH__enum,
    BT_HFG_WISE_API_SEND_CMS_ERR__enum,
    BT_HFG_WISE_API_SET_MSG_SVC_LIST__enum,
    BT_HFG_WISE_API_SET_MSG_STO_LIST__enum,
    BT_HFG_WISE_API_SEND_MSG_STO_SELECT_RESULT__enum,
    BT_HFG_WISE_API_SEND_MSG_STO_INFO__enum,
    BT_HFG_WISE_API_SET_CMGF__enum,
    BT_HFG_WISE_API_SEND_SCA__enum,
    BT_HFG_WISE_API_SEND_TEXT_MODE_PARAM__enum,
    BT_HFG_WISE_API_SET_CSDH__enum,
    BT_HFG_WISE_API_SET_MSG_SETTING_LIST__enum,
    BT_HFG_WISE_API_SEND_MSG_INDICATION__enum,
    BT_HFG_WISE_API_SEND_MSG_STATUS_LIST__enum,
    BT_HFG_WISE_API_SEND_MSG_LIST__enum,
    BT_HFG_WISE_API_SEND_MSG__enum,
    BT_HFG_WISE_API_SEND_MSG_RESULT__enum,
    BT_HFG_WISE_API_IS_HSAG_CONNECTED__enum,
    BT_HFG_WISE_API_IS_HFAG_CONNECTED__enum,
    BT_HFG_WISE_API_HSAG_AUTHORIZE_RES__enum,
    BT_HFG_WISE_API_HFAG_AUTHORIZE_RES__enum,
    BT_HFG_WISE_CBK__enum,
    BT_HFG_WISE_EVT__enum,
    BT_HFG_WISE_INFO_HDL_ACTIVATE_CNF__enum,
    BT_HFG_WISE_INFO_HDL_DEACTIVATE_CNF__enum,
    BT_HFG_WISE_INFO_HDL_CONNECT_CNF__enum,
    BT_HFG_WISE_INFO_HDL_DISCONNECT_CNF__enum,
    BT_HFG_WISE_INFO_HDL_ACCEPT_CNF__enum,
    BT_HFG_WISE_INFO_HDL_REJECT_CNF__enum,
    BT_HFG_WISE_INFO_HDL_SCO_CONNECT_CNF__enum,
    BT_HFG_WISE_INFO_HDL_SCO_DISCONNECT_CNF__enum,
    BT_HFG_WISE_INFO_HDL_CONNECTED_IND__enum,
    BT_HFG_WISE_INFO_HDL_DISCONNECTED_IND__enum,
    BT_HFG_WISE_INFO_HDL_AUDIO_CONNECTED_IND__enum,
    BT_HFG_WISE_INFO_HDL_AUDIO_DISCONNECTED_IND__enum,
    BT_HFG_WISE_INFO_HDL_AUTH_IND__enum,
    BT_HFG_WISE_INFO_HDL_READ_INDICATOR_IND__enum,
    BT_HFG_WISE_INFO_HDL_HF_FEATURE_IND__enum,
    BT_HFG_WISE_INFO_HDL_AUTO_REJECT__enum,
    BT_HFG_WISE_INFO_SUPPORTED_PB_LIST__enum,
    BT_HFG_WISE_INFO_MSG_STO_SELECT_RESULT__enum,
    BT_HFG_WISE_INFO_MSG_STO_INFO__enum,
    BT_HFG_WISE_INFO_MSG_STATUS_LIST__enum,
    BT_HFG_WISE_INFO_PROFILE_STATE_CHANGE__enum,
    BT_HFG_WISE_INFO_SET_ACTIVE_PROFILE__enum,
    BT_HFG_WISE_INFO_RING_TIMER_START__enum,
    BT_HFG_WISE_INFO_RING_TIMER_STOP__enum,
    BT_HFG_WISE_INFO_RING_TIMER_TRIGGERED__enum,
    BT_HFG_WISE_INFO_INVALID_RING_TIMER__enum,
    BT_HFG_WISE_INFO_RING_TIMER_INVALID_INDEX__enum,
    BT_HFG_WISE_WARN_ALREADY_ENABLED__enum,
    BT_HFG_WISE_WARN_ALREADY_DISABLED__enum,
    BT_HFG_WISE_WARN_NOT_IN_ACTIVATED__enum,
    BT_HFG_WISE_WARN_NOT_CONNECTED__enum,
    BT_HFG_WISE_WARN_NO_AUDIO_CONNECTION__enum,
    BT_HFG_WISE_ERR_ACTIVATE_FAIL__enum,
    BT_HFG_WISE_ERR_UNEXPECTED_STATE__enum,
    BT_HFG_WISE_ERR_UNEXPECTED_AG_STATE__enum,
    BT_HFG_WISE_ERR_CONFIRM_FAIL__enum,
    BT_HFG_WISE_ERR_NO_CONNECTION__enum,
    BT_HFG_WISE_ERR_ALLOC_MEM_FAIL__enum,

    BT_OPP_WISE_API_SERVER_ENABLE__enum,
    BT_OPP_WISE_API_SERVER_DISABLE__enum,
    BT_OPP_WISE_API_SERVER_DISCONNECT__enum,
    BT_OPP_WISE_API_SERVER_ACCESS_RESPONSE__enum,
    BT_OPP_WISE_API_SERVER_CB__enum,
    BT_OPP_WISE_INFO_SERVER_ENABLE__enum,
    BT_OPP_WISE_INFO_SERVER_DISABLE__enum,
    BT_OPP_WISE_INFO_SERVER_AUTHORIZE_REQ__enum,
    BT_OPP_WISE_INFO_SERVER_PUSH_ACCESS__enum,
    BT_OPP_WISE_INFO_SERVER_PULL_ACCESS__enum,
    BT_OPP_WISE_INFO_SERVER_PUSH_FINISH__enum,
    BT_OPP_WISE_INFO_SERVER_PUSH_START__enum,
    BT_OPP_WISE_CHK_SERVER_STATE__enum,
    BT_OPP_WISE_CHK_CLIENT_STATE__enum,
    BT_OPP_WISE_API_OPP_IS_CONNECTED__enum,
    BT_OPP_WISE_API_OPP_IS_DEV_CONNECTED__enum,
    BT_OPP_WISE_API_CLIENT_ENABLE__enum,
    BT_OPP_WISE_API_CLIENT_DISABLE__enum,
    BT_OPP_WISE_API_CLIENT_PUSHOBJECT__enum,
    BT_OPP_WISE_API_CLIENT_PULLOBJECT__enum,
    BT_OPP_WISE_API_CLIENT_EXCHOBJECT__enum,
    BT_OPP_WISE_API_CLIENT_DISCONNECT__enum,
    BT_OPP_WISE_API_POST_EVENT__enum,
    BT_OPP_WISE_API_SDC_STATUS__enum,
    BT_OPP_WISE_API_CLIENT_CB__enum,
    BT_OPP_WISE_API_SERVER_AUTHORIZE_RES__enum,
    BT_OPP_WISE_ERR_CLIENT_DISCONNECT__enum,
    BT_OPP_WISE_ERR_CLIENT_EXCHOBJECT__enum,
    BT_OPP_WISE_ERR_CLIENT_PULLOBJECT__enum,
    BT_OPP_WISE_ERR_CLIENT_PUSHOBJECT__enum,
    BT_OPP_WISE_INFO_CLIENT_PUSH_START__enum,
    BT_OPP_WISE_INFO_CLIENT_PUSH_CONTINUE__enum,
    BT_OPP_WISE_INFO_CLIENT_PUSH_FINISH__enum,
    BT_OPP_WISE_INFO_CLIENT_PULL_START__enum,
    BT_OPP_WISE_INFO_CLIENT_PULL_CONTINUE__enum,
    BT_OPP_WISE_INFO_CLIENT_PULL_FINISH__enum,
    BT_OPP_WISE_INFO_CLIENT_EXCH_PUSH_CONTINUE__enum,
    BT_OPP_WISE_INFO_CLIENT_EXCH_PUSH_FINISH__enum,
    BT_OPP_WISE_INFO_CLIENT_EXCH_PULL_CONTINUE__enum,
    BT_OPP_WISE_INFO_CLIENT_EXCH_PULL_FINISH__enum,
    BT_OPP_WISE_INFO_CLIENT_EXCH_START__enum,
    BT_OPP_WISE_INFO_CLIENT_EXCH_FINISH__enum,
    BT_OPP_WISE_INFO_CLIENT_ENABLE__enum,
    BT_OPP_WISE_INFO_CLIENT_DISABLE__enum,
    BT_OPP_WISE_INFO_CLIENT_ABORT_RESULT__enum,
    BT_OPP_WISE_INFO_CLIENT_DISCONNECT_RESULT__enum,

    BT_SPP_MBT_ENABLE__enum,
    BT_SPP_MBT_DISABLE__enum,
    BT_SPP_MBT_CONNECT__enum,
    BT_SPP_MBT_DISCONNECT__enum,
    BT_SPP_MBT_LISTEN__enum,
    BT_SPP_MBT_LISTENSTOP__enum,
    BT_SPP_MBT_SENDDATA__enum,
    BT_SPP_MBT_ISCONNECTED__enum,
    BT_SPP_MBT_ISDEVCONNECTED__enum,
    BT_SPP_MBT_AUTHORIZE_RES__enum,
    BT_SPP_MBT_CB_ENABLE_CNF__enum,
    BT_SPP_MBT_CB_DISABLE_CNF__enum,
    BT_SPP_MBT_CB_LISTEN_CNF__enum,
    BT_SPP_MBT_CB_LISTEN_STOP_CNF__enum,
    BT_SPP_MBT_CB_CONNECT_CNF__enum,
    BT_SPP_MBT_CB_DISCONNECT_CNF__enum,
    BT_SPP_MBT_CB_SEND_DATA_CNF__enum,
    BT_SPP_MBT_CB_RECEIVE_DATA_IND__enum,
    BT_SPP_MBT_CB_CONNECT_IND_REQ__enum,
    BT_SPP_MBT_CB_CONNECT_IND__enum,
    BT_SPP_MBT_CB_DISCONNECT_IND__enum,

    BT_SIMAP_MBT_ENABLE__enum,
    BT_SIMAP_MBT_DISABLE__enum,
    BT_SIMAP_MBT_SERVER_CONNECT_RESPONSE__enum,
    BT_SIMAP_MBT_DISCONNECT__enum,
    BT_SIMAP_MBT_IS_CONNECTED__enum,
    BT_SIMAP_MBT_ISDEV_CONNECTED__enum,
    BT_SIMAP_MBT_AUTHORIZE_RES__enum,
    BT_SIMAP_MBT_DEINIT__enum,
    BT_SIMAP_MBT_CB_ENABLE_CNF__enum,
    BT_SIMAP_MBT_CB_DISABLE_CNF__enum,
    BT_SIMAP_MBT_CB_AUTH_REQ__enum,
    BT_SIMAP_MBT_CB_CONNECT_IND__enum,
    BT_SIMAP_MBT_CB_DISCONNECT_IND__enum,
    BT_SIMAP_MBT_CB_DISCONNECT_CNF__enum,
    BT_SIMAP_MBT_CB_ATR_RSP_SENT_IND__enum,
    BT_SIMAP_MBT_CB_APDU_RSP_SENT_IND__enum,
    BT_SIMAP_MBT_CB_SIM_ON_RSP_SENT_IND__enum,
    BT_SIMAP_MBT_CB_SIM_OFF_RSP_SENT_IND__enum,
    BT_SIMAP_MBT_CB_SIM_RESET_RSP_SENT_IND__enum,
    BT_SIMAP_MBT_CB_CARD_STATUS_IND_SENT_IND__enum,
    BT_SIMAP_MBT_CB_CARD_READER_STATUS_RSP_SENT_IND__enum,
    BT_SIMAP_MBT_CB_SET_TRANSPORT_PROTOCOL_RSP_SENT_IND__enum,
    BT_SIMAP_MBT_CB_AUTH_REQ_TIMEOUT_RFCLOSE_IND__enum,
    BT_SIMAP_MBT_CB_SIM_CONNECT_FAILED_IND__enum,


    BT_PBAP_MBT_REGISTER_REQ__enum,
    BT_PBAP_MBT_DEREGISTER_REQ__enum,
    BT_PBAP_MBT_DISCONNECT_REQ__enum,
    BT_PBAP_MBT_AUTHORIZE_RSP__enum,
    BT_PBAP_MBT_CLIENT_CONNECT_RSP__enum,
    BT_PBAP_MBT_CLIENT_AUTH_CHALLENGE_RSP__enum,
    BT_PBAP_MBT_SET_PATH_RSP__enum,
    BT_PBAP_MBT_READ_ENTRY_RSP__enum,
    BT_PBAP_MBT_READ_FOLDER_RSP__enum,
    BT_PBAP_MBT_READ_LIST_RSP__enum,
    BT_PBAP_MBT_EXT_HANDLE_MESSAGE__enum,
    BT_PBAP_MBT_INT_HANDLE_MESSAGE__enum,
    BT_PBAP_MBT_POST_EVENT__enum,
    BT_PBAP_MBT_STATA_ERR__enum,
    BT_PBAP_MBT_SET_STATE__enum,
    BT_PBAP_MBT_RSP_WITH_FAIL__enum,
    BT_PBAP_MBT_WISE_ENABLE__enum,
    BT_PBAP_MBT_WISE_DISABLE__enum,
    BT_PBAP_MBT_WISE_AUTHENTICATE__enum,
    BT_PBAP_MBT_WISE_CLOSE__enum,
    BT_PBAP_MBT_WISE_WRITEDATA__enum,
    BT_PBAP_MBT_GAP_AUTH_RES__enum,
    BT_PBAP_MBT_FILE_PATH__enum,
    BT_PBAP_MBT_FILE_PATH_LEN__enum,


    BTLOG_MBT_MAP_LOG_STRING__enum,
    BTLOG_MBT_MAP_SERVER_ENABLE__enum,
    BTLOG_MBT_MAP_SERVER_DISABLE__enum,
    BTLOG_MBT_MAP_SERVER_REGISTER__enum,
    BTLOG_MBT_MAP_SERVER_DEREGISTER__enum,
    BTLOG_MBT_MAPS_AUTHORIZE_RES__enum,
    BTLOG_MBT_MAPS_ACCESS_RESPONSE__enum,
    BTLOG_MBT_MAP_SERVER_SEND_EVENT__enum,
    BTLOG_MBT_MAP_SERVER_MNS_DISCONNECT__enum,
    BTLOG_MBT_MAP_SERVER_MAS_DISCONNECT__enum,
    BTLOG_MBT_MAP_SERVER_DISCONNECT__enum,
    BTLOG_MBT_MAP_INT_DUMP_CNTX__enum,
    BTLOG_MBT_MAP_INT_SET_CNTX__enum,
    BTLOG_MBT_MAP_INT_RESET_CNTX__enum,
    BTLOG_MBT_MAP_INT_RESET_CLIENT_CNTX__enum,
    BTLOG_MBT_MAP_HANDLE_INT_MESSAGE__enum,
    BTLOG_MBT_MAP_POST_EVENT__enum,
    BTLOG_MBT_MAP_INT_SERVER_DISABLE__enum,
    BTLOG_MBT_MAP_INT_SERVER_REGISTER_DUPLICATE__enum,
    BTLOG_MBT_MAP_INT_SERVER_REGISTER_CONFLICT__enum,
    BTLOG_MBT_MAP_INT_SERVER_DEREGISTER_DUPLICATE__enum,
    BTLOG_MBT_MAP_INT_DISCONNECT_IN_PROGRESS__enum,
    BTLOG_MBT_MAP_WRITE_XML_ERROR__enum,
    BTLOG_MBT_MAP_WRITE_FILE_ERROR__enum,
    BTLOG_MBT_MAP_WRITE_VCARD_ERROR__enum,
    BTLOG_MBT_MAP_PARSE_VCARD_ERROR__enum,
    BTLOG_MBT_MAP_PARSE_VCARD_WRONG_STORAGE__enum,
    BTLOG_MBT_MAP_HANDLE_ACTIVATE_CNF__enum,
    BTLOG_MBT_MAP_HANDLE_DEACTIVATE_CNF__enum,
    BTLOG_MBT_MAP_HANDLE_REGISTER_CNF__enum,
    BTLOG_MBT_MAP_HANDLE_DEREGISTER_CNF__enum,
    BTLOG_MBT_MAP_HANDLE_AUTHORIZE_IND__enum,
    BTLOG_MBT_MAP_HANDLE_CONNECT_IND__enum,
    BTLOG_MBT_MAP_HANDLE_SET_FOLDER_IND__enum,
    BTLOG_MBT_MAP_CONNECTION_NOT_FOUND__enum,
    BTLOG_MBT_MAP_FOLDER_NOT_FOUND__enum,
    BTLOG_MBT_MAP_HANDLE_GET_FOLDER_LIST_IND__enum,
    BTLOG_MBT_MAP_HANDLE_GET_MSG_LIST_IND__enum,
    BTLOG_MBT_MAP_HANDLE_GET_MSG_IND__enum,
    BTLOG_MBT_MAP_HANDLE_PUSH_MSG_IND__enum,
    BTLOG_MBT_MAP_HANDLE_SET_NOTIF_IND__enum,
    BTLOG_MBT_MAP_HANDLE_SET_MSG_STATUS_IND__enum,
    BTLOG_MBT_MAP_HANDLE_UPDATE_INBOX_IND__enum,
    BTLOG_MBT_MAP_HANDLE_MNS_CONNECT_CNF__enum,
    BTLOG_MBT_MAP_HANDLE_MNS_SEND_EVENT_CNF__enum,
    BTLOG_MBT_MAP_HANDLE_MNS_DISCONNECT_IND__enum,
    BTLOG_MBT_MAP_HANDLE_MNS_DISCONNECT_CNF__enum,
    BTLOG_MBT_MAP_HANDLE_ABORT_CNF__enum,
    BTLOG_MBT_MAP_HANDLE_DISCONNECT_CNF__enum,
    BTLOG_MBT_MAP_HANDLE_DISCONNECT_IND__enum,
    BTLOG_MBT_MAP_WRITE_LIST__enum,

BT_MBT_TRACE_END__enum,



BT_BLE_TRACE_START__enum,
    BT_LE_ADFLAG__enum,
    BT_LE_CURRENT_INQUIRY_TYPE__enum,

    BT_MEIF_ME_LE_INQUIRY__enum,
    BT_MEIF_ME_LE_CANCELINQUIRY__enum,
    BT_MEIF_ME_LE_GETREMOTEDEVICENAME__enum,
    BT_MEIF_ME_LE_GETREMOTEDEVICENAME1__enum,
    BT_MEIF_ME_LE_CREATELINK__enum,
    BT_MEIF_ME_LE_CREATELINK1__enum,
    BT_DEVICE_NOT_FOUND__enum,
    BT_MEIF_ME_LE_DISCLINK__enum,
    BT_MEIF_ME_LE_ENCRYPTLINK__enum,
    BT_MEIF_ME_LE_ENCRYPTLINK_RESTART__enum,
    BT_MEIF_ME_LE_SIGNDATA__enum,
    BT_MEIF_ME_LE_SIGNDATA1__enum,
    BT_MEIF_ME_LE_VERIFYSIGNDATA__enum,

    BT_MELE_LEALLOCHCITOKEN__enum,
    BT_MELE_LEUTILCOMPOSEADVERTISEDATA__enum,
    BT_MELE_LEHCISETEVENTMASK__enum,
    BT_MELE_LEHCIREADBUFFERSIZE__enum,
    BT_MELE_LEHCIREADLOCALFEATURES__enum,
    BT_MELE_LEHCISETRANDOMADDRESS__enum,
    BT_MELE_LEHCISETADVERTISEPARM__enum,
    BT_MELE_LEHCIREADADVERTISETXPOWER__enum,
    BT_MELE_LEHCISETADVERTISEDATA__enum,
    BT_MELE_LEHCISETSCANRSPDATA__enum,
    BT_MELE_LEHCISETADVERTISEENABLE__enum,
    BT_MELE_LEHCISETSCANPARM__enum,
    BT_MELE_LEHCISETSCANENABLE__enum,
    BT_MELE_LEHCICREATECONNECTION__enum,
    BT_MELE_LEHCICREATECONNECTION2__enum,
    BT_MELE_LEHCICREATECONNECTIONCANCEL__enum,
    BT_MELE_LEHCIREADWHITELISTSIZE__enum,
    BT_MELE_LEHCICLEARWHITELIST__enum,
    BT_MELE_LEHCIADDTOWHITELIST__enum,
    BT_MELE_LEHCIREMOVEFROMWHITELIST__enum,
    BT_MELE_LEHCIUPDATECONNECTION__enum,
    BT_MELE_LEHCISETCHANNELMAP__enum,
    BT_MELE_LEHCIREADCHANNELMAP__enum,
    BT_MELE_LEHCIREADREMOTEFEATURES__enum,
    BT_MELE_LEHCIAES128ENCRYPT__enum,
    BT_MELE_LEHCIRAND__enum,
    BT_MELE_LEHCISTARTENCRYPTION__enum,
    BT_MELE_LEHCILTKREQUESTREPLY__enum,
    BT_MELE_LEHCILTKREQUESTNEGREPLY__enum,
    BT_MELE_LEHCIREADSUPPORTEDSTATES__enum,
    BT_MELE_LEHANDLEOP__enum,
    BT_MELE_LEHANDLEOP2__enum,
    BT_MELE_HANDLELEADVERTISEREPORT__enum,
    BT_MELE_HANDLELEADVERTISEREPORT1__enum,
    BT_MELE_HANDLELEADVERTISEREPORT2__enum,
    BT_MELE_HANDLELECONNECTCOMPLETE__enum,
    BT_MELE_HANDLELECONNECTCOMPLETE2__enum,
    BT_MELE_HANDLELEREADREMOTEFEATURE__enum,
    BT_MELE_HANDLELELTKREQUEST__enum,
    BT_MELE_HANDLELELTKREQUEST1__enum,
    BT_MELE_LEHANDLEEVENTS__enum,
    BT_MELE_LEHANDLECONNECTTIMEOUT__enum,
    BT_MELE_LEHCIRECEIVERTEST__enum,
    BT_MELE_LEHCITRANSMITTERTEST__enum,
    BT_MELE_LEHCITESTEND__enum,

    BT_SM_SM_INIT__enum,
    BT_SM_SM_HANDLEREQTIMEOUT__enum,
    BT_SM_SM_GENLTK__enum,
    BT_SM_SM_GENEDIV__enum,
    BT_SM_SM_GENCSRK__enum,
    BT_SM_SM_GENIRK__enum,
    BT_SM_SM_GETSESSION_NOT_FOUND__enum,
    BT_SM_SM_STARTSESSION__enum,
    BT_SM_SM_UPDATESESSION__enum,
    BT_SM_SM_UPDATESESSIONFSM__enum,
    BT_SM_SM_ENDSESSION__enum,
    BT_SM_SM_SETPAIRINFO__enum,
    BT_SM_SM_BOND__enum,
    BT_SM_SM_PASSKEYENTRY__enum,
    BT_SM_SM_SETOOBDATA__enum,
    BT_SM_SM_PASSKEYENTRY1__enum,
    BT_SM_SM_HANDLEEVENT__enum,
    BT_SM_SM_PHASEFSM_SESSION_NOT_FOUND__enum,
    BT_SM_SM_PHASEFSM__enum,
    BT_SM_SM_PHASE3KEYRECEIVE__enum,
    BT_SM_SM_PHASE3KEYSEND__enum,
    BT_SM_SM_CMACFSM__enum,
    BT_SM_SM_CMAC__enum,
    BT_SM_SM_CMACVERIFYCB__enum,
    BT_SM_SM_CMACVERIFY__enum,
    BT_SM_SM_RECVDATA__enum,
    BT_SM_SM_L2CAPCALLBACK__enum,
    BT_SM_SM_HANDLEDISCDELAYTIMEOUT__enum,

    BT_SMP_SMP_INIT__enum,
    BT_SMP_SM_GETPAIRMODELBYIO__enum,
    BT_SMP_SM_GETPASSKEYROLE__enum,
    BT_SMP_SM_SENDPAIRREQ__enum,
    BT_SMP_SM_SENDPAIRRSP__enum,
    BT_SMP_SM_SENDPAIRCONFIRM__enum,
    BT_SMP_SM_SENDPAIRRANDOM__enum,
    BT_SMP_SM_SENDPAIRFAILED__enum,
    BT_SMP_SM_SENDENCRYPTINFO__enum,
    BT_SMP_SM_SENMASTERIDENTITY__enum,
    BT_SMP_SM_SENDIDENTITYINFO__enum,
    BT_SMP_SM_SENDIDENTITYADDRINFO__enum,
    BT_SMP_SM_SENDSIGNINGINFO__enum,
    BT_SMP_SM_SENDSECURITYREQ__enum,
    BT_SMP_SM_CALCPAIRCONFIRMFSM__enum,
    BT_SMP_SM_CALCPAIRCONFIRM__enum,
    BT_SMP_SM_CALCSTK__enum,
    BT_SMP_SM_RANDFSM__enum,
    BT_SMP_SM_RAND__enum,

BT_BLE_TRACE_END__enum,


    FTP_CLIENT_CREATE_BUFFER__enum,
    FTP_CLIENT_GOEP_CALLBACK__enum,
    FTP_UTIL_READ_RESULT__enum,
    FTP_UTIL_OBSREAD_PARAM__enum,
    FTP_UTIL_OBSWRITE_PARAM__enum,
    FTP_UTIL_CHECK_PROGRESS__enum,
    FTP_UTIL_GET_FILESIZE__enum,
    FTP_UTIL_FLUSH__enum,
    FTP_START_ABORT_TIMER__enum,
    FTP_STOP_ABORT_TIMER__enum,
    FTP_ADP_CALLBACK__enum,
    FTP_GOEP_SERVER_CALLBACK__enum,
    FTP_GOEP_CLIENT_CONTINUE_RESULT__enum,
    FTP_UTIL_CHECK_PROGRESS_RET__enum,
    FTP_RESERVED_15__enum,
    FTP_RESERVED_16__enum,
    FTP_RESERVED_17__enum,
    FTP_RESERVED_18__enum,
    FTP_RESERVED_19__enum,
    FTP_RESERVED_20__enum,
    GOEP_L2CAP_RAWDATA_BUFF__enum,
    GOEP_CLIENT_SRM_FLAG__enum,
    GOEP_L2CAP_CHANNEL_STATUS__enum,
    GOEP_SERVER_L2CAP_RAWDATA_BUFF__enum,
    GOEP_CLIENT_SENDCOMMAND__enum,
    GOEP_SERVER_PROCESS_PUT_OPER__enum,
    GOEP_RESERVED_7__enum,
    GOEP_RESERVED_8__enum,
    GOEP_RESERVED_9__enum,
    GOEP_RESERVED_10__enum,
    GOEP_RESERVED_11__enum,
    GOEP_RESERVED_12__enum,
    GOEP_RESERVED_13__enum,
    GOEP_RESERVED_14__enum,
    GOEP_RESERVED_15__enum,
    GOEP_RESERVED_16__enum,
    GOEP_RESERVED_17__enum,
    GOEP_RESERVED_18__enum,
    GOEP_RESERVED_19__enum,
    GOEP_RESERVED_20__enum,
    L2CAP_CHANNEL_DUMP_INFO__enum,
    L2CAP_REGULAR_MOVE_AMP_PARAM__enum,
    L2CAP_REGULAR_MOVE_AMP_TIMER__enum,
    L2CAP_RESERVED_4__enum,
    L2CAP_RESERVED_5__enum,
    L2CAP_RESERVED_6__enum,
    L2CAP_RESERVED_7__enum,
    L2CAP_RESERVED_8__enum,
    L2CAP_RESERVED_9__enum,
    L2CAP_RESERVED_10__enum,
    L2CAP_RESERVED_11__enum,
    L2CAP_RESERVED_12__enum,
    L2CAP_RESERVED_13__enum,
    L2CAP_RESERVED_14__enum,
    L2CAP_RESERVED_15__enum,
    L2CAP_RESERVED_16__enum,
    L2CAP_RESERVED_17__enum,
    L2CAP_RESERVED_18__enum,
    L2CAP_RESERVED_19__enum,
    L2CAP_RESERVED_20__enum,
    DDB_LINKKEY_RECORD__enum,

    BTLOG_ME_HCI_COMMAND__enum,
    BTLOG_HCI_COMMAND_STATUS__enum,

MOD_BT__end};
# 136 "../btadp_int/include/bt_common.h" 2
# 1 "../btadp_int/include/ps_trace.h" 1
# 137 "../btadp_int/include/bt_common.h" 2
# 69 "../btcore/inc/xatypes.h" 2
# 1 "../btcore/inc/config.h" 1
# 70 "../btcore/inc/xatypes.h" 2
# 153 "../btcore/inc/xatypes.h"
typedef void (*PFV) (void);
# 67 "../btcore/inc/bttypes.h" 2
# 1 "../btcore/inc/btconfig.h" 1
# 67 "../btcore/inc/btconfig.h"
# 1 "../btcore/inc/bt_common_config.h" 1
# 68 "../btcore/inc/btconfig.h" 2
# 1 "../btcore/inc/bt_jsr82_setting.h" 1
# 69 "../btcore/inc/btconfig.h" 2
# 1 "../btcore/inc/bt_feature.h" 1
# 70 "../btcore/inc/btconfig.h" 2
# 68 "../btcore/inc/bttypes.h" 2
# 1 "../btcore/inc/xastatus.h" 1
# 73 "../btcore/inc/xastatus.h"
typedef unsigned short XaStatus;
# 69 "../btcore/inc/bttypes.h" 2
# 1 "../btcore/inc/utils.h" 1
# 72 "../btcore/inc/utils.h"
unsigned char StrnCmp(const kal_uint8 *str1, kal_uint16 len1, const kal_uint8 *str2, kal_uint16 len2);
# 211 "../btcore/inc/utils.h"
kal_uint16 LEtoHost16(const kal_uint8 *le_value);
kal_uint32 LEtoHost32(const kal_uint8 *le_value);
unsigned long long LEtoHost64(const kal_uint8 *le_value);


kal_uint16 BEtoHost16(const kal_uint8 *be_ptr);
kal_uint32 BEtoHost32(const kal_uint8 *be_ptr);
unsigned long long BEtoHost64(const kal_uint8 *be_ptr);


void StoreLE16(kal_uint8 *buff, kal_uint16 le_value);
void StoreLE32(kal_uint8 *buff, kal_uint32 le_value);
void StoreLE64(kal_uint8 *buff, unsigned long long le_value);


void StoreBE16(kal_uint8 *ptr, kal_uint16 be_value);
void StoreBE32(kal_uint8 *ptr, kal_uint32 be_value);
void StoreBE64(kal_uint8 *buff, unsigned long long be_value);
# 309 "../btcore/inc/utils.h"
typedef struct _ListEntry
{
    struct _ListEntry *Flink;
    struct _ListEntry *Blink;

} ListEntry;
# 323 "../btcore/inc/utils.h"
typedef struct _XaBufferDesc
{
    ListEntry link;

    kal_uint16 writeOffset;
    kal_uint16 readOffset;
    kal_uint16 buffSize;
    kal_uint8 *buff;
} XaBufferDesc;
# 352 "../btcore/inc/utils.h"
extern void InitializeListHead(ListEntry *list);

extern void InitializeListEntry(ListEntry *list);




extern kal_uint8 IsListEmpty(ListEntry *list);
# 369 "../btcore/inc/utils.h"
void _InsertTailList(ListEntry *head, ListEntry *entry);
extern void InsertTailList(ListEntry *head, ListEntry *entry);

void _InsertHeadList(ListEntry *head, ListEntry *entry);





ListEntry *_RemoveHeadList(ListEntry *head);
extern ListEntry *RemoveHeadList(ListEntry *head);

void RemoveEntryList(ListEntry *entry);
unsigned char IsNodeOnList(ListEntry *head, ListEntry *node);
unsigned char IsListCircular(ListEntry *list);
void MoveList(ListEntry *dest, ListEntry *src);
# 70 "../btcore/inc/bttypes.h" 2
# 1 "../btcore/inc/eventmgr.h" 1
# 66 "../btcore/inc/eventmgr.h"
# 1 "../btcore/inc/osapi.h" 1
# 95 "../btcore/inc/osapi.h"
typedef kal_uint32 TimeT;






typedef void (*OsTimerNotify) (void);
# 139 "../btcore/inc/osapi.h"
unsigned char OS_Init(void);
# 148 "../btcore/inc/osapi.h"
void OS_Deinit(void);
# 168 "../btcore/inc/osapi.h"
TimeT OS_GetSystemTime(void);
# 179 "../btcore/inc/osapi.h"
kal_uint16 OS_Rand(void);
# 189 "../btcore/inc/osapi.h"
signed int OS_Rand32(void);
# 206 "../btcore/inc/osapi.h"
void OS_MemCopy(void *dest, const void *source, kal_uint32 numBytes);
# 235 "../btcore/inc/osapi.h"
unsigned char OS_MemCmp(const void *buffer1, kal_uint16 len1, const void *buffer2, kal_uint16 len2);
# 252 "../btcore/inc/osapi.h"
void OS_MemSet(void *dest, kal_uint8 byte, kal_uint32 len);
# 278 "../btcore/inc/osapi.h"
void OS_StartTimer(TimeT time, OsTimerNotify func);
# 296 "../btcore/inc/osapi.h"
void OS_CancelTimer(void);
void OS_ResetTimerId(void);
void OS_ResetInd(void);
# 324 "../btcore/inc/osapi.h"
void OS_NotifyEvm(void);
# 346 "../btcore/inc/osapi.h"
kal_uint8 OS_StrCmp(const char *Str1, const char *Str2);

kal_uint8 OS_StriCmp(const char *str1, const char *str2);

kal_uint8 OS_StrnCmp(const char *Str1, const char *Str2, kal_uint32 size);

kal_uint8 OS_StrniCmp(const char *str1, const char *str2, kal_uint32 size);
# 365 "../btcore/inc/osapi.h"
kal_uint16 OS_StrLen(const char *Str);
# 379 "../btcore/inc/osapi.h"
char* OS_StrCpy(char *dest, const char *source);
# 394 "../btcore/inc/osapi.h"
char *OS_StrnCpy(char *dest, const char *source, kal_uint32 numBytes);
# 408 "../btcore/inc/osapi.h"
char* OS_StrCat(char *dest, const char *source);
# 423 "../btcore/inc/osapi.h"
kal_uint32 OS_SetSystemPropertyUint(const char *name, kal_uint32 val, kal_uint8 persist);
# 438 "../btcore/inc/osapi.h"
kal_uint32 OS_GetSystemPropertyUint(const char *name, kal_uint32 *val, kal_uint8 persist);
# 453 "../btcore/inc/osapi.h"
kal_uint32 OS_GetBitsValue(const kal_uint8 *addr, kal_uint32 start_pos, kal_uint32 bits);
# 468 "../btcore/inc/osapi.h"
kal_uint32 OS_TestBit(kal_uint32 nr, const kal_uint8 *addr);
# 481 "../btcore/inc/osapi.h"
void OS_SetBit(kal_uint32 nr, kal_uint8 *addr);


void MTK_BT_Assert(void);
# 520 "../btcore/inc/osapi.h"
void OS_Report(const char *format, ...);
# 67 "../btcore/inc/eventmgr.h" 2
# 84 "../btcore/inc/eventmgr.h"
typedef struct _EvmTimer EvmTimer;




typedef void (*EvmTimerNotify) (EvmTimer *);
# 103 "../btcore/inc/eventmgr.h"
struct _EvmTimer
{
    ListEntry node;
    void *context;
    EvmTimerNotify func;


    TimeT time;
    TimeT startTime;
};
# 131 "../btcore/inc/eventmgr.h"
unsigned char EVM_Init(void);







void EVM_Deinit(void);
# 148 "../btcore/inc/eventmgr.h"
void EVM_Process(void);


void EvmStartTimer(EvmTimer *timer, TimeT ticks, unsigned char stopHardware);
void EvmCancelTimer(EvmTimer *timer, unsigned char stopHardware);
# 181 "../btcore/inc/eventmgr.h"
void EVM_StartTimer(EvmTimer *timer, TimeT ms);
# 196 "../btcore/inc/eventmgr.h"
void EVM_CancelTimer(EvmTimer *timer);



void EvmResetTimer(EvmTimer *timer);
# 71 "../btcore/inc/bttypes.h" 2
# 108 "../btcore/inc/bttypes.h"
typedef XaStatus BtStatus;
# 145 "../btcore/inc/bttypes.h"
typedef kal_uint8 BtPacketFlags;
# 179 "../btcore/inc/bttypes.h"
typedef struct _BtPacket
{
    ListEntry node;

    kal_uint8 *data;
    kal_uint16 dataLen;

    kal_uint8 flags;





    kal_uint8 priority_type;

    kal_uint8 timebound;



    void *ulpContext;
    kal_uint8 *tail;
    kal_uint16 tailLen;







    kal_uint16 llpContext;
    kal_uint16 remoteCid;


    kal_uint16 segStart;
    kal_uint16 segNum;
    kal_uint8 fcs[2];
    kal_uint16 internalUsed;
    kal_uint8 pollFinal;


    kal_uint8 hciPackets;
    kal_uint8 headerLen;
    kal_uint8 header[(12+6)];
} BtPacket;

typedef struct _BtRxPacket
{
    ListEntry node;

    kal_uint8 *data;
    kal_uint16 dataLen;
    kal_uint16 reqSeq;
} BtRxPacket;
# 241 "../btcore/inc/bttypes.h"
typedef struct _BD_ADDR
{
    kal_uint8 addr[6];
} BD_ADDR;


extern const BD_ADDR INVALID_BDADDR;
# 269 "../btcore/inc/bttypes.h"
BD_ADDR bdaddr_aton(const char *addr);
# 285 "../btcore/inc/bttypes.h"
char *bdaddr_ntoa(const BD_ADDR *addr, char *addrString);
# 300 "../btcore/inc/bttypes.h"
unsigned char AreBdAddrsEqual(const BD_ADDR *addrA, const BD_ADDR *addrB);
# 316 "../btcore/inc/bttypes.h"
unsigned char IsValidBdAddr(const BD_ADDR *Addr);
# 141 "../include/profiles/bluetooth_hid_struct.h" 2
# 229 "../include/profiles/bluetooth_hid_struct.h"
typedef enum
{
 hidd_state_idle,
 hidd_state_activated,
 hidd_state_connected,


 hidd_state_deactivating,
 hidd_state_connecting,
 hidd_state_disconnecting,
 hidd_state_authorizing,
 hidd_state_waitconnect,
 hidd_state_total

} bt_hidd_state;


typedef enum
{

    hidda_handshake,
    hidda_control,
    hidda_get_report,
    hidda_set_report,
    hidda_get_protocol,
    hidda_set_protocol,
    hidda_get_idle_rate,
    hidda_set_idle_rate,
    hidda_trasation_type_total

} hidda_trasation_type_enum;


typedef enum
{
 hidd_result_ok,
 hidd_result_failed,
 hidd_result_sco_reject,
 hidd_result_no_resource,
 hidd_result_total

} bt_hidd_result_enum;

typedef enum
{
 hidd_connect_authorization_result_accepted,
 hidd_connect_authorization_result_rejected,
 hidd_connect_authorization_total

} bt_hidd_connect_authorization_enum;

typedef enum
{
 hidda_ctrl_eq_unknow,
 hidda_ctrl_eq_keyboard,
 hidda_ctrl_eq_mouse,
 hidda_ctrl_eq_total

} hidda_ctrl_eq_struct;

typedef enum
{
 hidd_ctrl_op_nop = 0,
 hidd_ctrl_op_hard_reset = 1,
 hidd_ctrl_op_soft_reset = 2,
 hidd_ctrl_op_suspend = 3,
 hidd_ctrl_op_exit_suspend = 4,
 hidd_ctrl_op_virtual_cable_unplug = 5,
 hidd_ctrl_op_total

} bt_hidd_ctrl_op_enum;

typedef enum
{
 hidd_report_other,
 hidd_report_input,
 hidd_report_output,
 hidd_report_feature,
 hidd_report_total

} bt_hidd_report_type_enum;

typedef enum
{
 hidd_protocol_boot,
 hidd_protocol_report,
 hidd_protocol_total

} bt_hidd_protocol_type_enum;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 command;
    BD_ADDR addr;
    void *param;
} bt_hidd_req_ext_struct;

typedef bt_hidd_req_ext_struct bt_hidh_req_ext_struct;

typedef struct
{
    kal_uint8 *DescStr;
    kal_uint16 DescLen;
    kal_uint16 ParserVersion;
    kal_uint8 CountryCode;
    kal_uint16 LangBase;
    kal_uint16 VendorID;
    kal_uint16 DeviceID;
    kal_uint16 ProductVersion;
} bt_hidd_sdp_attribute_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_sdp_attribute_struct sdpAttr;
} bt_hidd_activate_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_sdp_attribute_struct sdpAttr;
    bt_hidd_result_enum result;
} bt_hidd_activate_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
} bt_hidd_deactivate_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
} bt_hidd_connect_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint8 *descList;
    kal_uint16 descLen;
} bt_hidd_connect_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
} bt_hidd_query_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint8 *descList;
    kal_uint16 descLen;
} bt_hidd_query_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidd_connect_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint8 dev_name[80];
} bt_hidd_connection_authorize_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_connect_authorization_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidd_connection_authorize_rsp_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidd_disconnect_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidd_disconnect_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidd_disconnect_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidh_reconnect_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidh_unplug_ind_struct;



typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
} bt_hidd_unplug_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_ctrl_op_enum ctrl_op;
} bt_hidd_control_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_ctrl_op_enum ctrl_op;
} bt_hidh_send_control_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_ctrl_op_enum ctrl_op;
} bt_hidd_control_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint16 data_len;
    kal_uint8 *data_ptr;
} bt_hidd_interrupt_data_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint16 data_len;

    kal_uint8 data_ptr[0];
} bt_hidh_interrupt_data_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;

} bt_hidd_interrupt_data_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint16 data_len;
    kal_uint8 *data_ptr;
} bt_hidd_interrupt_data_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint16 data_len;
    kal_uint16 data;
} bt_hidh_interrupt_data_ind_struct;



typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint8 report_id;
    kal_uint16 buffer_size;
    char use_rpt_id;
} bt_hidd_get_report_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint8 report_id;
    kal_uint16 buffer_size;
    char use_rpt_id;
} bt_hidh_get_report_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint16 data_len;
    kal_uint8 *data_ptr;
} bt_hidd_get_report_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint16 data_len;
    kal_uint8 *data_ptr;
} bt_hidh_get_report_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint16 data_len;
    kal_uint8 *data_ptr;
} bt_hidd_set_report_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint16 data_len;
    kal_uint8 *data_ptr;
} bt_hidd_set_report_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
    kal_uint16 data_len;

    kal_uint8 data_ptr[0];
} bt_hidh_set_report_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_report_type_enum report_type;
} bt_hidd_set_report_rsp_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidd_get_protocol_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidh_get_protocol_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_protocol_type_enum protocol_type;
} bt_hidd_get_protocol_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_protocol_type_enum protocol_type;
} bt_hidh_get_protocol_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_protocol_type_enum protocol_type;
} bt_hidd_set_protocol_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    bt_hidd_protocol_type_enum protocol_type;
} bt_hidh_set_protocol_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidd_get_idle_rate_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidh_get_idle_rate_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
} bt_hidh_get_desclist_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint8 idle_rate;
} bt_hidd_get_idle_rate_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint8 idle_rate;
} bt_hidh_get_idle_rate_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint8 idle_rate;
} bt_hidd_set_idle_rate_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint8 idle_rate;
} bt_hidh_set_idle_rate_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint32 data;
} bt_hidd_set_cmd_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint32 data;
} bt_hidh_set_cmd_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    bt_hidd_result_enum result;
    BD_ADDR bt_addr;
    kal_uint32 connection_id;
    kal_uint32 data;
} bt_hidh_descinfo_cnf_struct;



typedef enum
{
 MBTEVT_HID_HOST_ENABLE_SUCCESS,
 MBTEVT_HID_HOST_ENABLE_FAIL,
 MBTEVT_HID_HOST_DISABLE_SUCCESS,
 MBTEVT_HID_HOST_DISABLE_FAIL,

 MBTEVT_HID_HOST_CONNECT_SUCCESS,
 MBTEVT_HID_HOST_CONNECTING,
 MBTEVT_HID_HOST_CONNECT_FAIL,
 MBTEVT_HID_HOST_DISCONNECT_SUCCESS,
 MBTEVT_HID_HOST_DISCONNECTING,
 MBTEVT_HID_HOST_DISCONNECT_FAIL,

 MBTEVT_HID_HOST_GET_DESC_SUCCESS,
 MBTEVT_HID_HOST_GET_DESC_FAIL,
 MBTEVT_HID_HOST_SEND_CONTROL_SUCCESS,
 MBTEVT_HID_HOST_SEND_CONTROL_FAIL,
 MBTEVT_HID_HOST_SET_REPORT_SUCCESS,
 MBTEVT_HID_HOST_SET_REPORT_FAIL,
 MBTEVT_HID_HOST_GET_REPORT_SUCCESS,
 MBTEVT_HID_HOST_GET_REPORT_FAIL,
 MBTEVT_HID_HOST_SET_PROTOCOL_SUCCESS,
 MBTEVT_HID_HOST_SET_PROTOCOL_FAIL,
 MBTEVT_HID_HOST_GET_PROTOCOL_SUCCESS,
 MBTEVT_HID_HOST_GET_PROTOCOL_FAIL,
 MBTEVT_HID_HOST_SET_IDLE_SUCCESS,
 MBTEVT_HID_HOST_SET_IDLE_FAIL,
 MBTEVT_HID_HOST_GET_IDLE_SUCCESS,
 MBTEVT_HID_HOST_GET_IDLE_FAIL,
 MBTEVT_HID_HOST_SEND_REPORT_SUCCESS,
 MBTEVT_HID_HOST_SEND_REPORT_FAIL,
 MBTEVT_HID_HOST_RECEIVE_UNPLUG,
 MBTEVT_HID_HOST_RECEIVE_AUTHORIZE,

 MBTEVT_HID_DEVICE_ENABLE_SUCCESS,
 MBTEVT_HID_DEVICE_DISABLE_SUCCESS,
 MBTEVT_HID_DEVICE_CONNECT_FAIL,
 MBTEVT_HID_DEVICE_DISCONNECT_FAIL,
 MBTEVT_HID_DEVICE_ENABLE_FAIL,
 MBTEVT_HID_DEVICE_DISABLE_FAIL,
 MBTEVT_HID_DEVICE_CONNECT_SUCCESS,
 MBTEVT_HID_DEVICE_DISCONNECT_SUCCESS,
 MBTEVT_HID_DEVICE_SEND_UNPLUG_SUCCESS,
 MBTEVT_HID_DEVICE_SEND_UNPLUG_FAIL,
 MBTEVT_HID_DEVICE_SEND_REPORT_SUCCESS,
 MBTEVT_HID_DEVICE_SEND_REPORT_FAIL,
 MBTEVT_HID_DEVICE_RECEIVE_CONTROL,
 MBTEVT_HID_DEVICE_RECEIVE_REPORT,
 MBTEVT_HID_DEVICE_CHANGE_KEYBOARD_SUCCESS,
 MBTEVT_HID_DEVICE_CHANGE_MOUSE_SUCCESS,
 MBTEVT_HID_DEVICE_CHANGE_PHONE_SUCCESS,
}bt_hid_host_event_type;
# 115 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_ftpc_struct.h" 1
# 141 "../include/profiles/bluetooth_ftpc_struct.h"
typedef enum
{
    BT_FTPC_STATE_IDLE,
    BT_FTPC_STATE_CONNECTING,
    BT_FTPC_STATE_CONNECTED,
    BT_FTPC_STATE_GETTING_FOLDER,

    BT_FTPC_STATE_GETTING_OBJ,
    BT_FTPC_STATE_ABORTING,
    BT_FTPC_STATE_SETTING_FOLDER,
    BT_FTPC_STATE_SETTING_BACK_FOLDER,
    BT_FTPC_STATE_SETTING_ROOT_FOLDER,
    BT_FTPC_STATE_CREATE_FOLDER,
    BT_FTPC_STATE_DEL_FOLDER,
    BT_FTPC_STATE_PUSHING_OBJ,
    BT_FTPC_STATE_DISCONNECTING,
    BT_FTPC_STATE_TPDISCONNECTING,
    BT_FTPC_STATE_ACTION
} bt_ftpc_state_enum;


typedef enum
{
    BT_FTPC_TOTAL_LEN_NO_FIRST_PKT,
    BT_FTPC_TOTAL_LEN_NO_ZERO,
    BT_FTPC_TOTAL_LEN_ZERO
} bt_ftpc_total_len_type;

typedef enum
{
    BT_FTP_OBJ_TYPE_NONE,
    BT_FTP_OBJ_TYPE_FILE,
    BT_FTP_OBJ_TYPE_FOLDER
} bt_ftp_obj_type_enum;


typedef struct
{

    kal_uint16 name[101] ;


    kal_uint16 actual_name_len;



    kal_uint32 offset;

    kal_uint16 created_date[(80) / 2];
    kal_uint16 size[(16) / 2];
    bt_ftp_obj_type_enum type;
} bt_ftp_obj_entity_struct;
# 116 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_ftps_struct.h" 1
# 123 "../include/profiles/bluetooth_ftps_struct.h"
typedef enum
{
    BT_FTPS_OBJ_TYPE_NONE,
    BT_FTPS_OBJ_TYPE_FILE,
    BT_FTPS_OBJ_TYPE_FOLDER
} bt_ftps_obj_type_enum;

typedef enum
{
    BT_FTP_AUTO_AUTHORIZATION =1,
    BT_FTP_AUTO_BROWSE = 2,
    BT_FTP_AUTO_PUSH = 4,
    BT_FTP_AUTO_PULL = 8,
    BT_FTP_AUTO_CREATE_FOLDER = 16,
    BT_FTP_AUTO_DELETE = 32,
    BT_FTP_AUTO_SETPATH = 64,
    BT_FTP_AUTO_ALL = 0xff,
} BT_FTPS_AUTO_BITMASK;

typedef enum
{
    BT_FTPS_STATE_IDLE,
    BT_FTPS_STATE_REGISTERING,
    BT_FTPS_STATE_ACTIVE,
    BT_FTPS_STATE_AUTHORIZING,
    BT_FTPS_STATE_CONNECTED,
    BT_FTPS_STATE_RECEIVE_WAIT,
    BT_FTPS_STATE_RECEIVING,
    BT_FTPS_STATE_SEND_WAIT,
    BT_FTPS_STATE_SENDING,
    BT_FTPS_STATE_SETPATH_WAIT,
    BT_FTPS_STATE_SETPATHING,
    BT_FTPS_STATE_ACTION_WAIT,
    BT_FTPS_STATE_ACTION,
    BT_FTPS_STATE_DISCONNECTING,
    BT_FTPS_STATE_DEACTIVATING
} bt_ftps_state_enum;


typedef enum
{
    BT_FTP_ACCESS_RIGHT_FULLY_CONTROL,
    BT_FTP_ACCESS_RIGHT_READ_ONLY
} bt_ftp_access_right_enum;



typedef void (*BTMTK_FTPS_CALLBACK)(kal_uint32 u4OPPUIEvent, kal_uint8* ucdata);
# 117 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_goepc_struct.h" 1
# 104 "../include/profiles/bluetooth_goepc_struct.h"
typedef enum
{
    BT_FTPC_STATE_IDLE,
    BT_FTPC_STATE_CONNECTING,
    BT_FTPC_STATE_CONNECTED,
    BT_FTPC_STATE_GETTING_FOLDER,
    BT_FTPC_STATE_PARSING_FOLDER,
    BT_FTPC_STATE_GETTING_OBJ,
    BT_FTPC_STATE_ABORTING,
    BT_FTPC_STATE_SETTING_FOLDER,
    BT_FTPC_STATE_SETTING_BACK_FOLDER,
    BT_FTPC_STATE_SETTING_ROOT_FOLDER,
    BT_FTPC_STATE_CREATE_FOLDER,
    BT_FTPC_STATE_DEL_FOLDER,
    BT_FTPC_STATE_PUSHING_OBJ,
    BT_FTPC_STATE_DISCONNECTING,
    BT_FTPC_STATE_TPDISCONNECTING

} bt_ftpc_state_enum;


typedef enum
{
    BT_FTPC_TOTAL_LEN_NO_FIRST_PKT,
    BT_FTPC_TOTAL_LEN_NO_ZERO,
    BT_FTPC_TOTAL_LEN_ZERO
} bt_ftpc_total_len_type;
# 118 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_goeps_struct.h" 1
# 119 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_jsr82_struct.h" 1
# 175 "../include/profiles/bluetooth_jsr82_struct.h"
typedef enum _JSR82_SESSION_RESULT
{
 JSR82_SESSION_RESULT_SUCCESS = 0x01,
 JSR82_SESSION_RESULT_FAIL = 0x02,
 JSR82_SESSION_RESULT_INVALID_PARAMS = 0x03,
} JSR82_SESSION_RESULT;


typedef struct {
    kal_uint8 address[6];
} bt_bdaddr;

typedef struct {
    short size;
    bt_bdaddr bd_addr;
    int channel;
    int status;
} connection_signal;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 bd_addr[6];
    kal_uint8 ps_type;
    kal_uint16 mtu;
    kal_uint16 channel;
    kal_uint32 identify;
    kal_uint8 security_value;
    kal_uint8 *channel_context;

    kal_uint32 sessionid;
    kal_uint8 uuid_128[16];
} bt_jsr82_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 bd_addr[6];
    kal_uint16 mtu;
    kal_uint16 in_mtu;
    kal_uint8 ps_type;
    kal_uint32 channel;
    kal_uint8 index;
    kal_uint32 identify;
    kal_uint16 l2cap_id;
    kal_uint8 result;
} bt_jsr82_connect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint16 mtu;
    kal_uint32 identify;
    kal_uint8 security_value;
    kal_uint8 *channel_context;

    kal_uint16 existing_psm_chnl_num;

    kal_uint32 sessionid;
    kal_bool authorize;
} bt_jsr82_enable_service_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 ps_type;
    kal_uint16 channel;
    kal_uint8 index;
    kal_uint32 identify;
} bt_jsr82_enable_service_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 ps_type;
    kal_uint32 identify;
} bt_jsr82_turnon_service_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 ps_type;
    kal_uint32 identify;
} bt_jsr82_turnoff_service_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 index;
    kal_uint32 identify;
    kal_uint8 ps_type;
} bt_jsr82_turnon_service_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 index;
    kal_uint32 identify;
    kal_uint8 ps_type;
} bt_jsr82_turnoff_service_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint32 identify;
} bt_jsr82_disable_service_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint32 identify;
} bt_jsr82_disable_service_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 bd_addr[6];
    kal_uint8 ps_type;
    kal_uint16 mtu;
    kal_uint16 in_mtu;
    kal_uint32 channel;
    kal_uint8 index;
    kal_uint32 identify;
    kal_uint16 l2cap_id;
    kal_uint8 rsp_result;
} bt_jsr82_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 bd_addr[6];
    kal_uint8 ps_type;
    kal_uint16 mtu;
    kal_uint16 channel;
    kal_uint8 index;
    kal_uint32 identify;
    kal_uint16 l2cap_id;
    kal_uint8 result;

    kal_uint32 sessionid;
    signed int fd;
} bt_jsr82_connect_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint32 identify;
    kal_uint16 l2cap_id;
} bt_jsr82_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint32 identify;
    kal_uint8 index;
    kal_uint16 l2cap_id;
} bt_jsr82_disconnect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint16 length;
    kal_uint16 l2cap_id;
    kal_uint8 *data;
} bt_jsr82_tx_data_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint8 result;
} bt_jsr82_tx_data_cfn_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint16 length;
    kal_uint16 l2cap_id;
    kal_uint8 *data;
} bt_jsr82_rx_data_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint8 ps_type;
 kal_bool isTxEmpty;

} bt_jsr82_tx_ready_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint16 length;
    kal_uint16 l2cap_id;
    kal_uint8 ps_type;
} bt_jsr82_rx_ready_ind_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint32 identify;
    kal_uint16 length;
    kal_uint16 l2cap_id;
} bt_jsr82_spp_get_data_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint16 l2cap_id;
} bt_jsr82_rx_data_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint16 psm_chnl_num;
} bt_jsr82_allocate_txrx_buf_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint16 psm_chnl_num;
} bt_jsr82_allocate_txrx_buf_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 transaction_id;
    kal_uint8 bd_addr[6];
    kal_uint8 security_mode;
} bt_jsr82_set_acl_security_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint32 transaction_id;
    kal_uint8 bdAddr[6];
} bt_jsr82_set_acl_security_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint8 *buffAddr;
    kal_uint16 length;
} bt_jsr82_put_bytes_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint16 length;
} bt_jsr82_put_bytes_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint8 *buffAddr;
    kal_uint16 length;
} bt_jsr82_get_bytes_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint16 length;
    kal_uint8 *buffAddr;
} bt_jsr82_get_bytes_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    unsigned short length;
} bt_jsr82_get_available_data_length_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint16 length;



} bt_jsr82_data_available_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 ps_type;
    kal_uint8 index;
    kal_uint16 l2cap_id;
    kal_uint16 length;
} bt_jsr82_data_available_ind_rsp_struct;



typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint16 l2cap_id;

    char memNamePut[50];
    char memNameGet[50];



    kal_uint16 deliverBufSize;
} bt_jsr82_assign_buffer_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint16 l2cap_id;
} bt_jsr82_assign_buffer_cnf_struct;
# 120 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_oppc_struct.h" 1
# 104 "../include/profiles/bluetooth_oppc_struct.h"
typedef enum
{
    BT_OPC_IDLE,
    BT_OPC_CONNECTING,
    BT_OPC_CONNECTED,
    BT_OPC_SENDING,
    BT_OPC_RECEIVING,
    BT_OPC_ABORTING,
    BT_OPC_DISCONNECTING
} BT_OPC_STATE;
# 121 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_opps_struct.h" 1
# 105 "../include/profiles/bluetooth_opps_struct.h"
typedef enum
{
    BT_OPP_AUTO_AUTHORIZATION =1,
    BT_OPP_AUTO_PUSH = 2,
    BT_OPP_AUTO_PULL = 4,
    BT_OPP_AUTO_ALL = 0xff,
} BT_OPPS_AUTO_BITMASK;


typedef enum
{
    BT_OPS_IDLE,
    BT_OPS_OBEX_REGISTERING,
    BT_OPS_SDP_REGISTERING,
    BT_OPS_ACTIVE,
    BT_OPS_CONNECTING,
    BT_OPS_CONNECTED,
    BT_OPS_ACCEPT_WAIT,
    BT_OPS_PREPARE_WAIT,
    BT_OPS_RECEIVING,
    BT_OPS_SENDING,
    BT_OPS_ABORTING,
    BT_OPS_DISCONNECTING,
    BT_OPS_DEACTIVATING
} BT_OPS_STATE;
# 122 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_simap_struct.h" 1
# 121 "../include/profiles/bluetooth_simap_struct.h"
typedef kal_uint8 SimDisconnectType;
# 145 "../include/profiles/bluetooth_simap_struct.h"
typedef kal_uint8 SimCardStatus;
# 175 "../include/profiles/bluetooth_simap_struct.h"
typedef void (* kal_timer_func_ptr)(void *);



typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_simap_connect_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 cid;

} bt_simap_disconnect_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
    kal_uint8 cid;
} bt_simap_disconnect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_simap_activate_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_simap_deactivate_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_simap_auth_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool result;
} bt_simap_auth_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    SimDisconnectType discType;
} bt_simap_disconnect_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_simap_auth_req_timeout_rfclose_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 transport_protocol_type;
} bt_sim_reset_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 transport_protocol_type;
    kal_uint16 apdu_req_len;
    kal_uint8 apdu_req[261];
} bt_sim_apdu_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint16 result;
    kal_uint8 current_transport_protocol_type;
    kal_uint8 supported_transport_protocol_type_capability;
    kal_uint16 atr_len;
    kal_uint8 atr[40];
} bt_sim_connect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint16 result;
    kal_uint8 current_transport_protocol_type;
    kal_uint16 atr_len;
    kal_uint8 atr[40];
} bt_sim_reset_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint16 result;
    kal_uint16 apdu_rsp_len;
    kal_uint8 apdu_rsp[258];
} bt_sim_apdu_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint16 result;
} bt_sim_power_off_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint16 result;
} bt_sim_disconnect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 string[100];
} bt_simap_inject_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    SimCardStatus status;
} bt_simap_card_status_ind_sent_ind_struct;
# 123 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_spp_struct.h" 1
# 172 "../include/profiles/bluetooth_spp_struct.h"
typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 server_chnl_num;
    kal_uint16 uuid;
} bt_spp_connect_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_send_data_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_get_data_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_spp_connect_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_audio_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_audio_disconnect_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_disconnect_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 result;
} bt_spp_audio_connect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_audio_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 result;
} bt_spp_audio_disconnect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_audio_disconnect_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 result;
} bt_spp_disconnect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;

} bt_spp_auth_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_spp_connect_ind_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 result;
} bt_spp_connect_ind_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_dun_connect_ind_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 result;
} bt_dun_connect_ind_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 result;
} bt_dun_disconnect_cnf_struct;



typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_fax_connect_ind_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 result;
} bt_fax_connect_ind_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 result;
} bt_fax_disconnect_cnf_struct;



typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 result;
    kal_uint8 server_chnl_num;
} bt_spp_connect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_bool result;
} bt_spp_auth_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 profile;
} bt_spp_uart_owner_ind_struct;



typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_uart_owner_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_spp_uart_plugout_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 bd_address[6];
    kal_uint8 rssi_value;
} bt_spp_sco_rssi_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 server_chnl_num;
} bt_dun_connect_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_dun_connect_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_dun_disconnect_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_dun_disconnect_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_bool result;
} bt_dun_auth_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 result;
    kal_uint8 server_chnl_num;
} bt_dun_connect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
} bt_fax_connect_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_fax_disconnect_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} bt_fax_disconnect_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_bool result;
} bt_fax_auth_rsp_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 cid;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 result;
    kal_uint8 server_chnl_num;
} bt_fax_connect_cnf_struct;
# 568 "../include/profiles/bluetooth_spp_struct.h"
typedef bt_spp_connect_req_struct btmtk_spp_connect_req_struct;


typedef bt_spp_send_data_req_struct btmtk_spp_send_data_req_struct;


typedef bt_spp_get_data_req_struct btmtk_spp_get_data_req_struct;


typedef bt_spp_connect_ind_struct btmtk_spp_connect_ind_struct;


typedef bt_spp_disconnect_req_struct btmtk_spp_disconnect_req_struct;

typedef bt_spp_audio_connect_req_struct btmtk_spp_audio_connect_req_struct;

typedef bt_spp_audio_disconnect_req_struct btmtk_spp_audio_disconnect_req_struct;


typedef bt_spp_disconnect_ind_struct btmtk_spp_disconnect_ind_struct;

typedef bt_spp_audio_connect_cnf_struct btmtk_spp_audio_connect_cnf_struct;

typedef bt_spp_audio_connect_ind_struct btmtk_spp_audio_connect_ind_struct;

typedef bt_spp_audio_disconnect_cnf_struct btmtk_spp_audio_disconnect_cnf_struct;

typedef bt_spp_audio_disconnect_ind_struct btmtk_spp_audio_disconnect_ind_struct;


typedef bt_spp_disconnect_cnf_struct btmtk_spp_disconnect_cnf_struct;


typedef bt_spp_auth_req_struct btmtk_spp_auth_req_struct;


typedef bt_spp_auth_req_struct btmtk_dun_auth_req_struct;


typedef bt_spp_auth_req_struct btmtk_fax_auth_req_struct;


typedef bt_spp_connect_ind_req_struct btmtk_spp_connect_ind_req_struct;


typedef bt_spp_connect_ind_rsp_struct btmtk_spp_connect_ind_rsp_struct;


typedef bt_dun_connect_ind_req_struct btmtk_dun_connect_ind_req_struct;


typedef bt_dun_connect_ind_rsp_struct btmtk_dun_connect_ind_rsp_struct;


typedef bt_dun_disconnect_cnf_struct btmtk_dun_disconnect_cnf_struct;


typedef bt_fax_connect_ind_req_struct btmtk_fax_connect_ind_req_struct;


typedef bt_fax_connect_ind_rsp_struct btmtk_fax_connect_ind_rsp_struct;


typedef bt_fax_disconnect_cnf_struct btmtk_fax_disconnect_cnf_struct;


typedef bt_spp_connect_cnf_struct btmtk_spp_connect_cnf_struct;


typedef bt_spp_auth_rsp_struct btmtk_spp_auth_rsp_struct;


typedef bt_spp_uart_owner_ind_struct btmtk_spp_uart_owner_ind_struct;


typedef bt_spp_uart_owner_cnf_struct btmtk_spp_uart_owner_cnf_struct;


typedef bt_spp_uart_plugout_cnf_struct btmtk_spp_uart_plugout_cnf_struct;


typedef bt_spp_sco_rssi_ind_struct btmtk_spp_sco_rssi_ind_struct;


typedef bt_dun_connect_req_struct btmtk_dun_connect_req_struct;


typedef bt_dun_connect_ind_struct btmtk_dun_connect_ind_struct;


typedef bt_dun_disconnect_req_struct btmtk_dun_disconnect_req_struct;


typedef bt_dun_disconnect_ind_struct btmtk_dun_disconnect_ind_struct;


typedef bt_dun_auth_rsp_struct btmtk_dun_auth_rsp_struct;


typedef bt_dun_connect_cnf_struct btmtk_dun_connect_cnf_struct;


typedef bt_fax_connect_ind_struct btmtk_fax_connect_ind_struct;


typedef bt_fax_disconnect_req_struct btmtk_fax_disconnect_req_struct;


typedef bt_fax_disconnect_ind_struct btmtk_fax_disconnect_ind_struct;


typedef bt_fax_auth_rsp_struct btmtk_fax_auth_rsp_struct;

typedef bt_fax_connect_cnf_struct btmtk_fax_connect_cnf_struct;
# 695 "../include/profiles/bluetooth_spp_struct.h"
typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 profile;
} btmtk_spp_register_callback_cnf_struct;

typedef btmtk_spp_register_callback_cnf_struct bt_spp_register_callback_cnf_struct;





typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;

    kal_uint16 length;

    kal_uint8 *buffer;



} btmtk_spp_uart_put_bytes_req_struct;

typedef btmtk_spp_uart_put_bytes_req_struct bt_spp_uart_put_bytes_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint16 length;
    kal_uint8 profile;
} btmtk_spp_uart_put_bytes_cnf_struct;

typedef btmtk_spp_uart_put_bytes_cnf_struct bt_spp_uart_put_bytes_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;

    kal_uint16 length;
} btmtk_spp_uart_get_bytes_req_struct;

typedef btmtk_spp_uart_get_bytes_req_struct bt_spp_uart_get_bytes_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint16 length;

    kal_uint8 *buffer;



    kal_uint8 profile;
} btmtk_spp_uart_get_bytes_cnf_struct;

typedef btmtk_spp_uart_get_bytes_cnf_struct bt_spp_uart_get_bytes_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;

} btmtk_spp_uart_open_req_struct;

typedef btmtk_spp_uart_open_req_struct bt_spp_uart_open_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_bool result;
    kal_uint8 profile;
} btmtk_spp_uart_open_cnf_struct;

typedef btmtk_spp_uart_open_cnf_struct bt_spp_uart_open_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;

} btmtk_spp_uart_close_req_struct;

typedef btmtk_spp_uart_close_req_struct bt_spp_uart_close_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 profile;
} btmtk_spp_uart_close_cnf_struct;

typedef btmtk_spp_uart_close_cnf_struct bt_spp_uart_close_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} btmtk_spp_uart_get_bytes_avail_req_struct;

typedef btmtk_spp_uart_get_bytes_avail_req_struct bt_spp_uart_get_bytes_avail_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint16 length;
    kal_uint8 profile;
} btmtk_spp_uart_get_bytes_avail_cnf_struct;

typedef btmtk_spp_uart_get_bytes_avail_cnf_struct bt_spp_uart_get_bytes_avail_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} btmtk_spp_uart_get_tx_room_left_req_struct;

typedef btmtk_spp_uart_get_tx_room_left_req_struct bt_spp_uart_get_tx_room_left_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint16 length;
    kal_uint8 profile;
} btmtk_spp_uart_get_tx_room_left_cnf_struct;

typedef btmtk_spp_uart_get_tx_room_left_cnf_struct bt_spp_uart_get_tx_room_left_cnf_struct;



typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;

} btmtk_spp_uart_set_owner_req_struct;

typedef btmtk_spp_uart_set_owner_req_struct bt_spp_uart_set_owner_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 profile;
} btmtk_spp_uart_set_owner_cnf_struct;

typedef btmtk_spp_uart_set_owner_cnf_struct bt_spp_uart_set_owner_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    IO_level sdcd;

} btmtk_spp_uart_ctrl_dcd_req_struct;

typedef btmtk_spp_uart_ctrl_dcd_req_struct bt_spp_uart_ctrl_dcd_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 profile;
} btmtk_spp_uart_ctrl_dcd_cnf_struct;

typedef btmtk_spp_uart_ctrl_dcd_cnf_struct bt_spp_uart_ctrl_dcd_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    IO_level sbreak;

} btmtk_spp_uart_ctrl_break_req_struct;

typedef btmtk_spp_uart_ctrl_break_req_struct bt_spp_uart_ctrl_break_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 profile;
} btmtk_spp_uart_ctrl_break_cnf_struct;

typedef btmtk_spp_uart_ctrl_break_cnf_struct bt_spp_uart_ctrl_break_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} btmtk_spp_uart_get_owner_id_req_struct;

typedef btmtk_spp_uart_get_owner_id_req_struct bt_spp_uart_get_owner_id_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;

    kal_uint8 profile;
} btmtk_spp_uart_get_owner_id_cnf_struct;

typedef btmtk_spp_uart_get_owner_id_cnf_struct bt_spp_uart_get_owner_id_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;

} btmtk_spp_uart_clr_rx_buffer_req_struct;

typedef btmtk_spp_uart_clr_rx_buffer_req_struct bt_spp_uart_clr_rx_buffer_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 profile;
} btmtk_spp_uart_clr_rx_buffer_cnf_struct;

typedef btmtk_spp_uart_clr_rx_buffer_cnf_struct bt_spp_uart_clr_rx_buffer_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;

} btmtk_spp_uart_clr_tx_buffer_req_struct;

typedef btmtk_spp_uart_clr_tx_buffer_req_struct bt_spp_uart_clr_tx_buffer_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 profile;
} btmtk_spp_uart_clr_tx_buffer_cnf_struct;

typedef btmtk_spp_uart_clr_tx_buffer_cnf_struct bt_spp_uart_clr_tx_buffer_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint16 length;

    kal_uint8 *buffer;



    kal_uint8 profile;
} btmtk_spp_uart_data_available_ind_struct;

typedef btmtk_spp_uart_data_available_ind_struct bt_spp_uart_data_available_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint16 length;
} btmtk_spp_uart_data_available_ind_rsp_struct;

typedef btmtk_spp_uart_data_available_ind_rsp_struct bt_spp_uart_data_available_ind_rsp_struct;



typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
    kal_uint8 *getBufPtr;
    kal_uint16 getBufSize;
} btmtk_spp_uart_assign_buffer_req_struct;

typedef btmtk_spp_uart_assign_buffer_req_struct bt_spp_uart_assign_buffer_req_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 port;
} btmtk_spp_uart_assign_buffer_cnf_struct;

typedef btmtk_spp_uart_assign_buffer_cnf_struct bt_spp_uart_assign_buffer_cnf_struct;



 typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
 kal_uint8 profile;
}btmtk_spp_uart_plugout_ind_struct;

typedef btmtk_spp_uart_plugout_ind_struct bt_spp_uart_plugout_ind_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
 kal_uint8 profile;
}btmtk_spp_uart_ready_to_read_ind_struct;

typedef btmtk_spp_uart_ready_to_read_ind_struct bt_spp_uart_ready_to_read_ind_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
 kal_uint8 profile;
}btmtk_spp_uart_ready_to_write_ind_struct;

typedef btmtk_spp_uart_ready_to_write_ind_struct bt_spp_uart_ready_to_write_ind_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 char svcName[50];
 kal_uint16 svcUUID;
 kal_uint8 * getBufPtr;
 kal_uint16 getBufSize;
}btmtk_spp_activate_req_struct;

typedef btmtk_spp_activate_req_struct bt_spp_activate_req_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
 char result;
}btmtk_spp_activate_cnf_struct;

typedef btmtk_spp_activate_cnf_struct bt_spp_activate_cnf_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
}btmtk_spp_deactivate_req_struct;

typedef btmtk_spp_deactivate_req_struct bt_spp_deactivate_req_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
 char result;
}btmtk_spp_deactivate_cnf_struct;

typedef btmtk_spp_deactivate_cnf_struct bt_spp_deactivate_cnf_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
 char result;
}btmtk_dun_activate_cnf_struct;

typedef btmtk_dun_activate_cnf_struct bt_dun_activate_cnf_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
}btmtk_dun_deactivate_req_struct;

typedef btmtk_dun_deactivate_req_struct bt_dun_deactivate_req_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
 char result;
}btmtk_dun_deactivate_cnf_struct;

typedef btmtk_dun_deactivate_cnf_struct bt_dun_deactivate_cnf_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
 char result;
}btmtk_fax_activate_cnf_struct;

typedef btmtk_fax_activate_cnf_struct bt_fax_activate_cnf_struct;



typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
}btmtk_fax_deactivate_req_struct;

 typedef btmtk_fax_deactivate_req_struct bt_fax_deactivate_req_struct;


typedef struct
{
 kal_uint8 ref_count;
 kal_uint16 msg_len;
 kal_uint8 port;
 char result;
}btmtk_fax_deactivate_cnf_struct;

 typedef btmtk_fax_deactivate_cnf_struct bt_fax_deactivate_cnf_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 lap;
    kal_uint8 uap;
    kal_uint16 nap;
    kal_uint8 server_chnl_num;
} btmtk_fax_connect_req_struct;

  typedef btmtk_fax_connect_req_struct bt_fax_connect_req_struct;
# 124 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_sdp_struct.h" 1
# 112 "../include/profiles/bluetooth_sdp_struct.h"
typedef enum
{
    BTSDPDBAPP_SUCCESS,
    BTSDPDBAPP_FAILED,
    BTSDPDBAPP_SDP_REGISTER_FAILED,
    BTSDPDBAPP_INVALID_HANDLE,
    BTSDPDBAPP_SDP_DEREGISTER_FAILED,
    BTSDPDBAPP_SDP_DDB_FULL,
    BTSDPDBAPP_SDP_RECORD_SYNTAX_ERROR,
    BTSDPDBAPP_SDP_RECORD_TOO_LARGE,
    BTSDPDBAPP_SDP_RECORD_ATTRIBUTE_BUFFER_TOO_SMALL
} bt_sdpdb_result;

typedef enum
{
    BT_APP_REGISTER_RECORD = 1,
    BT_APP_UPDATE_RECORD
} bt_sdpdb_op_type;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 uuid;
} bt_sdpdb_register_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 uuid;
} bt_sdpdb_deregister_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint32 uuid;
} bt_sdpdb_register_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint32 uuid;
} bt_sdpdb_deregister_cnf_struct;

typedef struct
{
    kal_uint16 id;
    kal_uint16 len;
    kal_uint8 value[(80)];
} bt_sdpdb_attr_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 attr_no;
    bt_sdpdb_attr_struct attrs[(15)];
} bt_sdpdb_add_record_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
} bt_sdpdb_add_record_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint32 identify;
} bt_app_sdpdb_get_handle_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_sdpdb_result result;
    kal_uint32 handle;
    kal_uint32 identify;
} bt_app_sdpdb_get_handle_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 handle;
    bt_sdpdb_op_type type;

    kal_uint8 record_raw[256];
    kal_uint16 record_raw_length;
    kal_uint32 identify;






} bt_app_sdpdb_register_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_sdpdb_result result;
    kal_uint32 handle;
    kal_uint32 identify;
} bt_app_sdpdb_register_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 handle;
} bt_app_sdpdb_deregister_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_sdpdb_result result;
    kal_uint32 handle;
} bt_app_sdpdb_deregister_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 handle;
} bt_app_sdpdb_retrieve_record_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 result;
    kal_uint32 handle;
    kal_uint8 *record;
    kal_uint16 record_size;
} bt_app_sdpdb_retrieve_record_cnf_struct;
# 125 "database/parse_db.c" 2
# 1 "../bwcs/inc/bluetooth_bwcs.h" 1
# 39 "../bwcs/inc/bluetooth_bwcs.h"
typedef struct _bdaddr_t{
 unsigned char b[6];
} bdaddr_t;

typedef struct _hci_conn_info {
 unsigned short handle;
 bdaddr_t bdaddr;
 unsigned char type;
 unsigned char out;
 unsigned short state;
 unsigned int link_mode;
 unsigned int mtu;
 unsigned int cnt;
 unsigned int pkts;
}hci_conn_info;

typedef struct _hci_request {
    unsigned short ogf;
    unsigned short ocf;
    int event;
    void *cparam;
    int clen;
    void *rparam;
    int rlen;
}hci_request;

typedef struct _BWCS_MESSAGE_STRUCT {
    unsigned short usType;
    unsigned short bwcs_event;
    hci_conn_info bt_conn;
    unsigned short conn_num;
} BWCS_MESSAGE_STRUCT, *P_BWCS_MESSAGE_STRUCT;
# 126 "database/parse_db.c" 2
# 1 "../bwcs/inc/wmt_struct.h" 1
# 137 "../bwcs/inc/wmt_struct.h"
typedef enum{
    WMT_BT_STACK_UP = 0,
    WMT_BT_STACK_DOWN,
    WMT_BT_CONNECTION,
    WMT_BT_DISCONNECTION,
    WMT_BT_AVDTP_STATE,
    WMT_BT_NONE,
    WMT_BT_NUM
}WMT_BTEVENT;

typedef enum{
    BT_AVDTP_STATE_NONE = 0,
    BT_AVDTP_STATE_SUSPENDED,
    BT_AVDTP_STATE_STREAMING,
    BT_AVDTP_STATE_DISCONNECTED,
    BT_AVDTP_STATE_NUM
}WMT_BT_AVDTP_EVENT;

typedef enum{
    WMT_WIFI_UP = 0,
    WMT_WIFI_DOWN,
    WMT_WIFI_CONNECTION,
    WMT_WIFI_DISCONNECTION,
    WMT_WIFI_RATE_UPDATE,
    WMT_WIFI_NONE,
    WMT_WIFI_NUM
}WMT_WIFIEVENT;

typedef enum{
    BWCS_PROFILE_CUSTOM = 0,
    BWCS_PROFILE_SCO,
    BWCS_PROFILE_ACL,
    BWCS_PROFILE_A2DP,
    BWCS_PROFILE_MIXED,
    BWCS_PROFILE_NOCONN,
    BWCS_PROFILE_NONE,
    BWCS_PROFILE_NUM
}BWCS_PROFILE;

typedef enum{
    WIFI_PTA_ENABLE = 0,
    WIFI_PTA_DISABLE,
    WIFI_PTA_NOCHANGE,
    WIFI_PTA_NONE,
    WIFI_PTA_NUM
}BWCS_WIFI_PTA;

typedef enum{
    WIFI_PSP_CONTINUOUS_ACTIVE = 0,
    WIFI_PSP_CONTINUOUS_POWER_SAVE,
    WIFI_PSP_FAST_SWITCH_DIRECT,
    WIFI_PSP_FAST_SWITCH_TIME,
    WIFI_PSP_DEFAULT,
    WIFI_PSP_NUM
}WIFI_PS_PROFILE;


typedef enum{
    BWCS_EVENT_INIT = 0,
    BWCS_EVENT_BT_UP,
    BWCS_EVENT_BT_DOWN,
    BWCS_EVENT_BT_CONN,
    BWCS_EVENT_BT_DISCONN,
    BWCS_EVENT_BT_AVDTP_STREAM,
    BWCS_EVENT_BT_AVDTP_SUSPEND,
    BWCS_EVENT_BT_AVDTP_DISCONN,
    BWCS_EVENT_WIFI_UP,
    BWCS_EVENT_WIFI_DOWN,
    BWCS_EVENT_WIFI_CONN,
    BWCS_EVENT_WIFI_RATE_UPDATE,
    BWCS_EVENT_WIFI_DISCONN,
    BWCS_EVENT_TIMEOUT_DECISION,
    BWCS_EVENT_NUM
}BWCS_EVENT;

typedef enum{
   STEP1 =0,
   STEP2,
   STEP3,
}BWCS_DECISION_CASE;




typedef struct
{
    kal_int32 bt_conn_handle;
    kal_uint8 bd_address[6];
    kal_uint8 bt_link_type;
    WMT_BT_AVDTP_EVENT bt_avdtp_state;
} bt_conn_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    WMT_BTEVENT bt_eventid;
    WMT_BT_AVDTP_EVENT bt_avdtp_state;
    kal_uint8 update_conn_num;
    kal_uint8 valid_conn_num;
    bt_conn_struct bt_conn;
} wmt_bt_connection_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;

    kal_uint32 bt_conn_handle;
} wmt_bt_query_rssi_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool is_valid;

    kal_uint8 bd_address[6];
    kal_int8 bt_rssi;
} wmt_bt_query_rssi_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool afh;
    kal_uint32 freq;



    kal_bool pta;
    kal_uint8 pta_action;
} wmt_bt_set_bwcs_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 lower_boundary;
    kal_uint8 higher_boundary;
} wmt_bt_set_rx_range_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 ucPower;
}wmt_bt_set_default_tx_power_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 conn_handle;
    kal_uint8 ucPower;
}wmt_bt_update_conn_tx_power_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
} wmt_bt_query_state_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint8 state;
} wmt_bt_query_state_cnf_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    BWCS_MESSAGE_STRUCT msg;
    kal_int32 result;
} wmt_bt_status_ind_struct;



typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    WMT_WIFIEVENT wifi_eventid;
    kal_uint8 curr_data_rate;
    kal_uint8 curr_chnl;
    kal_bool curr_ant_usage;
} wndrv_wmt_conn_status_update_ind_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool is_valid;
    kal_int32 wifi_rssi;
}wmt_wifi_query_rssi_ind_struct;


typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_bool fgAntForBT;
} wmt_wndrv_set_ant_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    BWCS_WIFI_PTA eWiFiPta;
    BWCS_PROFILE eBwcsProfile;
    WIFI_PS_PROFILE eWiFiPsProfile;
    kal_uint32 wifi_poll_Int;
    kal_bool fgUseSingleAntSet;
} wmt_wndrv_set_bwcs_req_struct;

typedef struct
{
    kal_uint8 ref_count;
    kal_uint16 msg_len;
    kal_uint32 u4MediumTime;
    kal_uint32 u4PeriodTime;
}wmt_wndrv_set_flow_ctrl_req_struct;
# 127 "database/parse_db.c" 2
# 1 "../include/pal/pal_hci_struct.h" 1
# 206 "../include/pal/pal_hci_struct.h"
typedef struct
{
    unsigned char ref_count;
    unsigned short msg_len;
} ref_hdr_struct;
# 219 "../include/pal/pal_hci_struct.h"
typedef struct
{
   ref_hdr_struct ref_hdr;
} pal_bt_read_local_version_info_command_struct;
# 231 "../include/pal/pal_hci_struct.h"
typedef struct
{
   ref_hdr_struct ref_hdr;
} pal_bt_read_local_amp_info_command_struct;
# 243 "../include/pal/pal_hci_struct.h"
typedef struct
{
   ref_hdr_struct ref_hdr;
} pal_bt_reset_command_struct;
# 255 "../include/pal/pal_hci_struct.h"
typedef struct
{
   ref_hdr_struct ref_hdr;
} pal_bt_read_data_block_size_command_struct;
# 267 "../include/pal/pal_hci_struct.h"
typedef struct
{
   ref_hdr_struct ref_hdr;
   kal_uint16 u2Handle;
} pal_bt_read_link_quality_command_struct;
# 280 "../include/pal/pal_hci_struct.h"
typedef struct
{
   ref_hdr_struct ref_hdr;
   kal_uint16 u2Handle;
} pal_bt_read_rssi_command_struct;
# 293 "../include/pal/pal_hci_struct.h"
typedef struct
{
 ref_hdr_struct ref_hdr;
    kal_uint8 ucPhysical_link_handle;
    kal_uint16 u2Length_so_far;
    kal_uint16 u2Amp_assoc_length;
} pal_bt_read_local_amp_assoc_command_struct;
# 308 "../include/pal/pal_hci_struct.h"
typedef struct
{
 ref_hdr_struct ref_hdr;
    kal_uint8 ucPhysical_link_handle;
    kal_uint16 u2Length_so_far;
    kal_uint16 u2Amp_assoc_remaining_length;
    kal_uint8 ucAmp_assoc_fragment_size;
    kal_uint8 aucAmp_assoc_fragment[ (248) ];
} pal_bt_write_remote_amp_assoc_command_struct;
# 325 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucPhysical_link_handle;
    kal_uint8 ucDedicate_amp_key_length;
    kal_uint8 ucDedicate_amp_key_type;
    kal_uint8 aucDedicate_amp_key[ (248) ];
} pal_bt_create_physical_link_command_struct;
# 341 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucPhysical_link_handle;
    kal_uint8 ucDedicate_amp_key_length;
    kal_uint8 ucDedicate_amp_key_type;
    kal_uint8 aucDedicate_amp_key[ (248) ];
} pal_bt_accept_physical_link_command_struct;
# 357 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
   kal_uint16 u2Handle;
} pal_bt_read_link_supervision_timeout_command_struct;
# 370 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
   kal_uint8 ucPhysical_link_handle;
   kal_uint8 ucReason;
} pal_bt_disconnect_physical_link_command_struct;
# 384 "../include/pal/pal_hci_struct.h"
typedef struct
{
   ref_hdr_struct ref_hdr;
   kal_uint16 u2Handle;
   kal_uint16 u2Link_supervision_timeout;
} pal_bt_write_link_supervision_timeout_command_struct;
# 398 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
   kal_uint8 ucPhysical_link_handle;
   kal_uint8 aucTx_flow_spec[ (16) ];
   kal_uint8 aucRx_flow_spec[ (16) ];
} pal_bt_create_logical_link_command_struct;
# 413 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
   kal_uint8 ucPhysical_link_handle;
   kal_uint8 aucTx_flow_spec[ (16) ];
   kal_uint8 aucRx_flow_spec[ (16) ];
} pal_bt_accept_logical_link_command_struct;
# 428 "../include/pal/pal_hci_struct.h"
typedef struct
{
   ref_hdr_struct ref_hdr;
   kal_uint16 u2Logical_link_handle;
   kal_uint8 aucTx_flow_spec[ (16) ];
   kal_uint8 aucRx_flow_spec[ (16) ];
} pal_bt_flow_spec_modify_command_struct;
# 443 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
   kal_uint16 u2Logical_link_handle;
} pal_bt_disconnect_logical_link_command_struct;
# 456 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
   kal_uint8 ucPhysical_link_handle;
   kal_uint8 ucTx_flow_spec_id;
} pal_bt_logical_link_cancel_command_struct;
# 470 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
} pal_bt_read_logical_link_accept_timeout_command_struct;
# 482 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
   kal_uint16 u2Logical_link_accept_timeout;
} pal_bt_write_logical_link_accept_timeout_command_struct;
# 507 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint16 u2Handle;
    kal_uint8 ucPb_flag;
    kal_uint8 ucBc_flag;
    kal_uint8 data_count;
    kal_uint16 u2Data_total_len;
    void* ucData_p;
    kal_uint8 aucData_p[(1500-8)];
    kal_uint16 u2Data_total_len1;
    kal_uint8 aucData_p1[(1500-8)];
    kal_uint16 u2Data_total_len2;
    kal_uint8 aucData_p2[(1500-8)];
    kal_uint16 u2Data_total_len3;
    kal_uint8 aucData_p3[(1500-8)];

} pal_bt_data_command_struct;
# 534 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 aucEvent_Mask_Page_2[8];
} pal_bt_set_event_mask_page2_command_struct;
# 547 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint16 u2Handle;
    kal_uint8 ucPacket_type;
} pal_bt_enhanced_flush_command_struct;
# 561 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucPhysical_link_handle;
    kal_uint8 ucShort_range_mode;
} pal_bt_short_range_mode_command_struct;
# 575 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
 kal_uint8 ucHci_version;
 kal_uint16 u2Hci_revision;
 kal_uint8 ucPal_version;
 kal_uint16 u2Manufacturer_name;
 kal_uint16 u2Pal_subversion;
} pal_bt_read_local_version_complete_event_struct;
# 593 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
    kal_uint8 ucAmp_status;
    kal_uint32 u4Total_bandwidth;
    kal_uint32 u4Max_guaranteed_bandwidth;
    kal_uint32 u4Min_latency;
    kal_uint32 u4Max_pdu_size;
    kal_uint8 ucController_type;
    kal_uint16 u2Pal_capabilities;
    kal_uint16 u2Max_amp_assoc_length;
    kal_uint32 u4Max_flush_timeout;
    kal_uint32 u4Best_effort_flush_timeout;
} pal_bt_read_local_amp_info_complete_event_struct;
# 616 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
    kal_uint8 ucPhysical_link_handle;
    kal_uint16 u2Amp_assoc_remaining_length;
    kal_uint8 aucAmp_assoc_fragment_size;
    kal_uint8 aucAmp_assoc_fragment[ (248) ];
} pal_bt_read_local_amp_assoc_complete_event_struct;
# 633 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
} pal_bt_reset_complete_event_struct;
# 646 "../include/pal/pal_hci_struct.h"
typedef struct
{
   ref_hdr_struct ref_hdr;
   kal_uint8 ucStatus;
   kal_uint16 u2Max_acl_data_packet_length;
   kal_uint16 u2Data_block_length;
   kal_uint16 u2Total_num_data_blocks;
} pal_bt_read_data_block_size_complete_event_struct;
# 662 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucPhysical_link_handle;
} pal_bt_channel_selected_event_struct;
# 675 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
    kal_uint16 u2Handle;
    kal_uint8 ucLink_quality;
} pal_bt_read_link_quality_complete_event_struct;
# 690 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
    kal_uint16 u2Handle;
    kal_uint8 ucRssi;
} pal_bt_read_rssi_complete_event_struct;
# 705 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
    kal_uint8 ucPhysical_link_handle;
} pal_bt_write_remote_amp_assoc_complete_event_struct;
# 719 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
} pal_bt_create_physical_link_status_event_struct;
# 732 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
} pal_bt_accept_physical_link_status_event_struct;
# 745 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
    kal_uint8 ucPhysical_link_handle;
} pal_bt_physical_link_complete_event_struct;
# 759 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
    kal_uint16 u2Handle;
    kal_uint16 u2Link_supervision_timeout;
} pal_bt_read_link_supervision_timeout_complete_event_struct;
# 774 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
} pal_bt_disconnect_physical_link_status_event_struct;
# 787 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
 kal_uint8 ucStatus;
    kal_uint8 ucPhysical_link_handle;
    kal_uint8 ucReason;
} pal_bt_disconnect_physical_link_complete_event_struct;
# 802 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucPhysical_link_handle;
    kal_uint8 ucLink_loss_reason;
} pal_bt_physical_link_loss_early_warning_event_struct;
# 816 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
    kal_uint16 u2Handle;
} pal_bt_write_link_supervision_timeout_complete_event_struct;
# 830 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
} pal_bt_flow_spec_modify_status_event_struct;
# 843 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
    kal_uint16 u2handle;
} pal_bt_flow_spec_modify_complete_event_struct;
# 857 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
} pal_bt_create_logical_link_status_event_struct;
# 870 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
} pal_bt_accept_logical_link_status_event_struct;
# 883 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
    kal_uint16 u2Logical_link_handle;
    kal_uint8 ucPhysical_link_handle;
    kal_uint8 ucTx_flow_spec_id;
} pal_bt_logical_link_complete_event_struct;
# 899 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
} pal_bt_disconnect_logical_link_status_event_struct;
# 912 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
    kal_uint16 u2Logical_link_handle;
    kal_uint8 ucReason;
} pal_bt_disconnect_logical_link_complete_event_struct;
# 927 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
} pal_bt_logical_link_cancel_status_event_struct;
# 940 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
    kal_uint8 ucPhysical_link_handle;
    kal_uint8 ucTx_flow_spec_id;
} pal_bt_logical_link_cancel_complete_event_struct;
# 955 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
    kal_uint16 ucLogical_link_accept_timeout;
} pal_bt_read_logical_link_accept_timeout_complete_event_struct;
# 969 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
} pal_bt_write_logical_link_accept_timeout_complete_event_struct;
# 982 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint16 u2Handle;
    kal_uint8 ucPb_flag;
    kal_uint8 ucBc_flag;
    kal_uint16 u2Data_total_len;
    void* ucData_p;
    kal_uint8 aucData_p[(1500-8)];
} pal_bt_data_event_struct;
# 1000 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
    kal_uint8 ucAmp_status;
} pal_bt_amp_status_change_event_struct;
# 1014 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint16 u2Total_num_data_blocks;
    kal_uint8 ucNum_of_handles;
    kal_uint16 au2Handle[(10)];
    kal_uint16 au2Num_of_completed_packet[(10)];
    kal_uint16 au2Num_of_completed_blocks[(10)];
} pal_bt_num_of_complete_data_blocks_event_struct;
# 1031 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucPhysical_link_handle;
    kal_uint8 ucLink_loss_reason;
} pal_bt_phy_link_loss_early_warning_event_struct;
# 1045 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
} pal_bt_set_event_mask_page2_complete_event_struct;
# 1058 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
} pal_bt_enhanced_flush_status_event_struct;
# 1071 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint16 u2Handle;
} pal_bt_enhanced_flush_complete_event_struct;
# 1084 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
} pal_bt_short_range_mode_status_event_struct;
# 1097 "../include/pal/pal_hci_struct.h"
typedef struct
{
    ref_hdr_struct ref_hdr;
    kal_uint8 ucStatus;
    kal_uint8 ucPhysical_link_handle;
    kal_uint8 ucShort_range_mode;
} pal_bt_short_range_mode_change_complete_event_struct;
# 128 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_prx_struct.h" 1
# 101 "../include/profiles/bluetooth_prx_struct.h"
typedef kal_uint8 PRXREventType;
# 113 "../include/profiles/bluetooth_prx_struct.h"
typedef kal_uint8 PrxMEventType;
# 159 "../include/profiles/bluetooth_prx_struct.h"
typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 addr[6];
} bt_prxm_connect_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 rspcode;
} bt_prxm_connect_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_prxm_disconnect_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 rspcode;
} bt_prxm_disconnect_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_prxm_get_capability_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
 kal_uint8 rspcode;
    kal_uint32 capability;
} bt_prxm_get_capability_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_prxm_get_remote_txpower_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
 kal_uint8 rspcode;
    char txpower;
} bt_prxm_get_remote_txpower_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 level;
} bt_prxm_set_pathloss_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 rspcode;
} bt_prxm_set_pathloss_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 level;
} bt_prxm_set_linkloss_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 rspcode;
} bt_prxm_set_linkloss_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_prxm_get_rssi_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
 kal_uint8 rspcode;
    char rssi;
} bt_prxm_get_rssi_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_prxm_get_linkloss_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
 kal_uint8 rspcode;
 kal_uint8 level;
} bt_prxm_get_linkloss_cnf_struct;




typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_prxr_register_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 rspcode;
} bt_prxr_register_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_prxr_deregister_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 rspcode;
} bt_prxr_deregister_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 addr[6];
} bt_prxr_authorize_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 rspcode;
} bt_prxr_authorize_rsp_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 addr[6];
} bt_prxr_connect_ind_struct;
# 352 "../include/profiles/bluetooth_prx_struct.h"
typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_prxr_disconnect_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 rspcode;
} bt_prxr_disconnect_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
 kal_uint8 level;
} bt_prxr_pathloss_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 level;
} bt_prxr_linkloss_ind_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_prxr_update_txpower_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    char txpower;
} bt_prxr_update_txpower_cnf_struct;
# 129 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_map_struct.h" 1
# 152 "../include/profiles/bluetooth_map_struct.h"
typedef enum
{
    BT_MAP_MSG_NONE = 0x0,
    BT_MAP_MSG_SMS_GSM = 0x1,
    BT_MAP_MSG_SMS_CDMA = 0x2,
    BT_MAP_MSG_EMAIL = 0x4,
    BT_MAP_MSG_MMS = 0x8
} bt_map_msg_enum;

typedef enum
{
    BT_MAP_SUCCESS,
    BT_MAP_FAIL,
    BT_MAP_FAIL_BUSY,
    BT_MAP_FAIL_NOT_FOUND,
    BT_MAP_FAIL_NOT_SUPPORT,
    BT_MAP_FAIL_FORBIDDEN,
    BT_MAP_FAIL_TIMEOUT,
    BT_MAP_FAIL_NO_RESOURCE,
    BT_MAP_FAIL_UNAUTHORIZED,
    BT_MAP_FAIL_BAD_FORMAT,
    BT_MAP_FAIL_INVALID_PARAMETER,
    BT_MAP_FAIL_STORAGE_FULL
} bt_map_result_enum;

typedef enum
{
    BT_MAP_FOLDER_OP_ROOT,
    BT_MAP_FOLDER_OP_NEXT,
    BT_MAP_FOLDER_OP_DOWN,
    BT_MAP_FOLDER_OP_UP
} bt_map_folder_op_enum;

typedef enum
{
    BT_MAP_MSGLIST_MASK_NONE = 0x0000,
    BT_MAP_MSGLIST_MASK_SUBJECT = 0x0001,
    BT_MAP_MSGLIST_MASK_DATETIME = 0x0002,
    BT_MAP_MSGLIST_MASK_SENDER_N = 0x0004,
    BT_MAP_MSGLIST_MASK_SENDER_ADDR = 0x0008,
    BT_MAP_MSGLIST_MASK_REC_N = 0x0010,
    BT_MAP_MSGLIST_MASK_REC_ADDR = 0x0020,
    BT_MAP_MSGLIST_MASK_TYPE = 0x0040,
    BT_MAP_MSGLIST_MASK_SIZE = 0x0080,
    BT_MAP_MSGLIST_MASK_REC_STATUS = 0x0100,
    BT_MAP_MSGLIST_MASK_TEXT = 0x0200,
    BT_MAP_MSGLIST_MASK_ATTACH_SIZE = 0x0400,
    BT_MAP_MSGLIST_MASK_PRIO = 0x0800,
    BT_MAP_MSGLIST_MASK_READ = 0x1000,
    BT_MAP_MSGLIST_MASK_SENT = 0x2000,
    BT_MAP_MSGLIST_MASK_DRM = 0x4000,
    BT_MAP_MSGLIST_MASK_REPLY_ADDR = 0x8000,
    BT_MAP_MSGLIST_MASK_ALL = 0xFFFF
} bt_map_msg_list_mask_enum;

typedef enum
{
    BT_MAP_FILTER_MSG_SMS_GSM = 0x1,
    BT_MAP_FILTER_MSG_SMS_CDMA = 0x2,
    BT_MAP_FILTER_MSG_EMAIL = 0x4,
    BT_MAP_FILTER_MSG_MMS = 0x8
} bt_map_filter_msg_enum;

typedef enum
{
    BT_MAP_FILTER_STATUS_ALL = 0,
    BT_MAP_FILTER_STATUS_UNREAD = 0x1,
    BT_MAP_FILTER_STATUS_READ = 0x2
} bt_map_filter_status_enum;

typedef enum
{
    BT_MAP_FILTER_PRIO_ALL = 0,
    BT_MAP_FILTER_PRIO_HIGH = 0x1,
    BT_MAP_FILTER_PRIO_NOT_HIGH = 0x2
} bt_map_filter_prio_enum;

typedef enum
{
    BT_MAP_CHARSET_NATIVE = 0,
    BT_MAP_CHARSET_UTF8 = 0x1
} bt_map_charset_enum;

typedef enum
{
    BT_MAP_FRACTION_REQ_FIRST = 0,
    BT_MAP_FRACTION_REQ_NEXT = 0x1,
    BT_MAP_FRACTION_REQ_NO
} bt_map_fraction_req_enum;

typedef enum
{
    BT_MAP_FRACTION_RSP_MORE = 0,
    BT_MAP_FRACTION_RSP_LAST = 0x1,
    BT_MAP_FRACTION_RSP_NO
} bt_map_fraction_rsp_enum;

typedef enum
{
    BT_MAP_MSG_STATUS_READ,
    BT_MAP_MSG_STATUS_UNREAD,
    BT_MAP_MSG_STATUS_DELETE,
    BT_MAP_MSG_STATUS_UNDELETE
} bt_map_msg_status_enum;

typedef enum
{
    BT_MAP_SAVE_AND_SENT,
    BT_MAP_SENT
} bt_map_sent_op_enum;

typedef bt_addr_struct bt_map_addr_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
} bt_maps_activate_cnf_struct;

typedef bt_maps_activate_cnf_struct bt_maps_deactivate_cnf_struct;
typedef bt_maps_activate_cnf_struct bt_mapc_activate_cnf_struct;
typedef bt_maps_activate_cnf_struct bt_mapc_deactivate_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    kal_uint8 srv_name[256 + 1];
    kal_uint16 srv_name_len;
    bt_map_msg_enum msg_type;
} bt_maps_register_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
} bt_maps_register_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
} bt_maps_deregister_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
} bt_maps_deregister_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_addr_struct addr;
    kal_uint8 dev_name[80 + 1];
} bt_maps_authorize_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_bool accept;
    bt_map_addr_struct addr;
} bt_maps_authorize_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 conn_id;
    bt_map_addr_struct addr;
    kal_uint8 dev_name[80 + 1];
    kal_uint8 mas_id;
} bt_maps_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_bool accept;
    kal_uint8 mas_id;
    kal_uint32 conn_id;
    bt_map_addr_struct addr;
} bt_maps_connect_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_abort_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_abort_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_disconnect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_disconnect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_uint8 folder[256 + 1];
    bt_map_folder_op_enum flag;
} bt_maps_set_folder_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_set_folder_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_uint16 list_size;
    kal_uint16 list_offset;
} bt_maps_get_folder_listing_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_uint16 list_size;
    kal_uint16 data_size;
    kal_uint8 file[80 + 1];
} bt_maps_get_folder_listing_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_uint8 child_folder[256 + 1];
    kal_uint16 list_size;
    kal_uint16 list_offset;
    kal_uint8 max_subject_len;
    bt_map_msg_list_mask_enum mask;
    bt_map_filter_msg_enum filter_msg;
    kal_uint8 filter_begin[16 + 1];
    kal_uint8 filter_end[16 + 1];
    bt_map_filter_status_enum filter_status;
    kal_uint8 filter_rec[80];
    kal_uint8 filter_orig[80];
    bt_map_filter_prio_enum filter_prio;
} bt_maps_get_message_listing_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_bool unread;
    kal_uint8 datetime[20 + 1];
    kal_uint16 list_size;
    kal_uint16 data_size;
    kal_uint8 file[80 + 1];
} bt_maps_get_message_listing_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_uint8 handle[32 + 1];
    kal_bool attachment;
    bt_map_charset_enum charset;
    bt_map_fraction_req_enum fraction_req;
} bt_maps_get_message_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    bt_map_fraction_rsp_enum fraction_rsp;
    kal_uint16 data_size;
    kal_uint8 file[80 + 1];
} bt_maps_get_message_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_bool on;
} bt_maps_set_notif_registration_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_set_notif_registration_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_uint8 handle[32 + 1];
    bt_map_msg_status_enum status;
} bt_maps_set_message_status_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_set_message_status_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_uint8 child_folder[256 + 1];
    bt_map_sent_op_enum sent_op;
    kal_bool retry;
    bt_map_charset_enum charset;
    kal_uint8 file[80 + 1];
    kal_uint16 data_size;
} bt_maps_push_message_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
    kal_uint8 handle[32 + 1];
} bt_maps_push_message_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_update_inbox_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_update_inbox_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_addr_struct addr;
} bt_maps_mns_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    bt_map_addr_struct addr;
    kal_uint8 dev_name[80 + 1];
} bt_maps_mns_connect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_addr_struct addr;
} bt_maps_mns_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_addr_struct addr;
} bt_maps_mns_disconnect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    bt_map_addr_struct addr;
} bt_maps_mns_disconnect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;

    kal_uint16 data_size;
    kal_uint8 file[80 + 1];
} bt_maps_mns_send_event_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    kal_uint8 mas_id;
    bt_map_addr_struct addr;
} bt_maps_mns_send_event_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
} bt_mapc_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
    kal_uint8 dev_name[80 + 1];
} bt_mapc_connect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
} bt_mapc_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
} bt_mapc_disconnect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
} bt_mapc_disconnect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
} bt_mapc_get_folder_listing_size_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
    kal_uint16 list_size;
} bt_mapc_get_folder_listing_size_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
    kal_uint8 child_folder[256 + 1];
} bt_mapc_get_message_listing_size_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
    kal_uint16 list_size;
    kal_bool unread;
    kal_uint8 datetime[20 + 1];
} bt_mapc_get_message_listing_size_cnf_struct;


typedef bt_maps_authorize_ind_struct bt_mapc_mns_authorize_ind_struct;
typedef bt_maps_authorize_rsp_struct bt_mapc_mns_authorize_rsp_struct;
typedef bt_maps_set_folder_ind_struct bt_mapc_set_folder_req_struct;
typedef bt_maps_set_folder_rsp_struct bt_mapc_set_folder_cnf_struct;
typedef bt_maps_get_folder_listing_ind_struct bt_mapc_get_folder_listing_req_struct;
typedef bt_maps_get_folder_listing_rsp_struct bt_mapc_get_folder_listing_cnf_struct;
typedef bt_maps_get_message_listing_ind_struct bt_mapc_get_message_listing_req_struct;
typedef bt_maps_get_message_listing_rsp_struct bt_mapc_get_message_listing_cnf_struct;
typedef bt_maps_get_message_ind_struct bt_mapc_get_message_req_struct;
typedef bt_maps_get_message_rsp_struct bt_mapc_get_message_cnf_struct;
typedef bt_maps_set_notif_registration_ind_struct bt_mapc_set_notif_registration_req_struct;
typedef bt_maps_set_notif_registration_rsp_struct bt_mapc_set_notif_registration_cnf_struct;
typedef bt_maps_set_message_status_ind_struct bt_mapc_set_message_status_req_struct;
typedef bt_maps_set_message_status_rsp_struct bt_mapc_set_message_status_cnf_struct;
typedef bt_maps_push_message_ind_struct bt_mapc_push_message_req_struct;
typedef bt_maps_push_message_rsp_struct bt_mapc_push_message_cnf_struct;
typedef bt_maps_update_inbox_ind_struct bt_mapc_update_inbox_req_struct;
typedef bt_maps_update_inbox_rsp_struct bt_mapc_update_inbox_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
} bt_mapc_abort_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_map_result_enum result;
    bt_map_addr_struct addr;
    kal_uint8 mas_id;
} bt_mapc_abort_cnf_struct;

typedef bt_maps_mns_disconnect_req_struct bt_mapc_mns_disconnect_req_struct;
typedef bt_maps_mns_disconnect_cnf_struct bt_mapc_mns_disconnect_cnf_struct;
typedef bt_maps_mns_send_event_req_struct bt_mapc_mns_send_event_ind_struct;
typedef bt_maps_mns_send_event_cnf_struct bt_mapc_mns_send_event_rsp_struct;
# 130 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_pan_struct.h" 1
# 83 "../include/profiles/bluetooth_pan_struct.h"
typedef enum
{
    PAN_SERVICE_NAP = 0x01,
    PAN_SERVICE_GN = 0x02,
    PAN_SERVICE_PANU = 0x04
} bt_pan_service_enum;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    int service;
} bt_pan_activate_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_pan_service_enum local_service;
    bt_pan_service_enum remote_service;
    BD_ADDR bt_addr;
} bt_pan_connect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
} bt_pan_disconnect_req_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    char result;
} bt_pan_activate_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    char result;
} bt_pan_deactivate_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    bt_pan_service_enum local_service;
    bt_pan_service_enum remote_service;
} bt_pan_connection_authorize_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    char accept;
} bt_pan_connection_authorize_rsp_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_pan_service_enum local_service;
    bt_pan_service_enum remote_service;
    BD_ADDR bt_addr;
    kal_uint16 unit;
} bt_pan_connect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_pan_service_enum local_service;
    bt_pan_service_enum remote_service;
    BD_ADDR bt_addr;
    char result;
    kal_uint16 unit;
} bt_pan_connect_cnf_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_pan_service_enum local_service;
    bt_pan_service_enum remote_service;
    BD_ADDR bt_addr;
} bt_pan_disconnect_ind_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    bt_pan_service_enum local_service;
    bt_pan_service_enum remote_service;
    BD_ADDR bt_addr;
    char result;
} bt_pan_disconnect_cnf_struct;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint16 listLen;
    kal_uint8 list[0];
} bt_pan_set_nettype_filter_req;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BD_ADDR bt_addr;
    kal_uint16 listLen;
    kal_uint8 list[0];
} bt_pan_set_multiaddr_filter_req;

typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint16 len;
    kal_uint8 packet_type;
    kal_uint8 packet[0];
} bt_pan_pts_test_send_packet_req_struct;
# 131 "database/parse_db.c" 2
# 1 "../btadp_int/include/bt_adp_debug.h" 1
# 73 "../btadp_int/include/bt_adp_debug.h"
# 1 "../btadp_int/include/bt_common.h" 1
# 74 "../btadp_int/include/bt_adp_debug.h" 2
# 1 "../btcore/inc/bt_feature.h" 1
# 75 "../btadp_int/include/bt_adp_debug.h" 2
# 1 "../btcore/inc/sys/btstats.h" 1
# 76 "../btadp_int/include/bt_adp_debug.h" 2

# 1 "../btcore/inc/sys/mei.h" 1
# 69 "../btcore/inc/sys/mei.h"
# 1 "../btcore/inc/me.h" 1
# 67 "../btcore/inc/me.h"
# 1 "../btcore/inc/me_adp.h" 1
# 69 "../btcore/inc/me_adp.h"
# 1 "../btcore/inc/bttypes.h" 1
# 70 "../btcore/inc/me_adp.h" 2
# 1 "../btcore/inc/metypes.h" 1
# 76 "../btcore/inc/metypes.h"
typedef struct _BtEvent BtEvent;

typedef struct _BtDeviceContext BtDeviceContext;







typedef void (*BtCallBack) (const BtEvent *);







typedef kal_uint8 BtOpEvent;







typedef kal_uint8 BtOpType;
# 230 "../btcore/inc/metypes.h"
typedef struct _BtOperation
{
    ListEntry node;
    BtOpType opType;
} BtOperation;
# 71 "../btcore/inc/me_adp.h" 2

# 1 "../btcore/inc/le_adp.h" 1
# 40 "../btcore/inc/le_adp.h"
# 1 "../btcore/inc/sys/lei.h" 1
# 83 "../btcore/inc/sys/lei.h"
# 1 "../btcore/inc/utils.h" 1
# 84 "../btcore/inc/sys/lei.h" 2
# 1 "../btcore/inc/sys/hci.h" 1
# 120 "../btcore/inc/sys/hci.h"
typedef kal_uint8 HciCallbackEvent;
# 217 "../btcore/inc/sys/hci.h"
typedef enum
{
    MTK_FEATURE_FM_OVER_CONTROLLER = 0,
    NUM_OF_MTK_FEATURE,
}MTKSupportFeature;
# 231 "../btcore/inc/sys/hci.h"
typedef enum
{

    HCC_INQUIRY = 0x0401,
    HCC_INQUIRY_CANCEL = 0x0402,
    HCC_START_PERIODIC_INQ_MODE = 0x0403,
    HCC_EXIT_PERIODIC_INQ_MODE = 0x0404,
    HCC_CREATE_CONNECTION = 0x0405,
    HCC_DISCONNECT = 0x0406,
    HCC_ADD_SCO_CONNECTION = 0x0407,
    HCC_CREATE_CONNECTION_CANCEL = 0x0408,
    HCC_ACCEPT_CON_REQ = 0x0409,
    HCC_REJECT_CON_REQ = 0x040A,
    HCC_LINK_KEY_REQ_REPL = 0x040B,
    HCC_LINK_KEY_REQ_NEG_REPL = 0x040C,
    HCC_PIN_CODE_REQ_REPL = 0x040D,
    HCC_PIN_CODE_REQ_NEG_REPL = 0x040E,
    HCC_CHNG_CONN_PACKET_TYPE = 0x040F,
    HCC_AUTH_REQ = 0x0411,
    HCC_SET_CONN_ENCRYPT = 0x0413,
    HCC_CHNG_CONN_LINK_KEY = 0x0415,
    HCC_MASTER_LINK_KEY = 0x0417,
    HCC_REM_NAME_REQ = 0x0419,
    HCC_REM_NAME_REQ_CANCEL = 0x041A,
    HCC_READ_REMOTE_FEATURES = 0x041B,
    HCC_READ_REMOTE_EXT_FEATURES = 0x041C,
    HCC_READ_REMOTE_VERSION = 0x041D,
    HCC_READ_CLOCK_OFFSET = 0x041F,
    HCC_READ_LMP_HANDLE = 0x0420,
    HCC_EXCHANGE_FIXED_INFO = 0x0421,
    HCC_EXCHANGE_ALIAS_INFO = 0x0422,
    HCC_PRIVATE_PAIRING_REQ_REPL = 0x0423,
    HCC_PRIVATE_PAIRING_REQ_NEG_REPL = 0x0424,
    HCC_GENERATED_ALIAS = 0x0425,
    HCC_ALIAS_ADDRESS_REQ_REPL = 0x0426,
    HCC_ALIAS_ADDRESS_REQ_NEG_REPL = 0x0427,
    HCC_SETUP_SYNC_CONNECTION = 0x0428,
    HCC_ACCEPT_SYNC_CON_REQ = 0x0429,
    HCC_REJECT_SYNC_CON_REQ = 0x042A,
    HCC_IO_CAPABILITY_REPL = 0x042B,
    HCC_USER_CONFIRM_REPL = 0x042C,
    HCC_USER_CONFIRM_NEG_REPL = 0x042D,
    HCC_USER_PASSKEY_REQ_REPL = 0x042E,
    HCC_USER_PASSKEY_REQ_NEG_REPL = 0x042F,
    HCC_USER_OOB_DATA_REQ_REPL = 0x0430,
    HCC_USER_OOB_DATA_REQ_NEG_REPL = 0x0433,

    HCC_IO_CAPABILITY_NEG_REPL = 0x0434,
    HCC_CREATE_PHYSICAL_LINK = 0x0435,
    HCC_ACCEPT_PHYSICAL_LINK = 0x0436,
    HCC_DISCONNECT_PHYSICAL_LINK = 0x0437,
    HCC_CREATE_LOGICAL_LINK = 0x0438,
    HCC_ACCEPT_LOGICAL_LINK = 0x0439,
    HCC_DISCONNECT_LOGICAL_LINK = 0x043A,
    HCC_LOGICAL_LINK_CANCEL = 0x043B,
    HCC_FLOW_SPEC_MODIFY = 0x043C,

    HCC_ENHANCED_SETUP_SYNC_CONNECTION = 0x043D,


    HCC_HOLD_MODE = 0x0801,
    HCC_SNIFF_MODE = 0x0803,
    HCC_EXIT_SNIFF_MODE = 0x0804,
    HCC_PARK_MODE = 0x0805,
    HCC_EXIT_PARK_MODE = 0x0806,
    HCC_QOS_SETUP = 0x0807,
    HCC_ROLE_DISCOVERY = 0x0809,
    HCC_SWITCH_ROLE = 0x080B,
    HCC_READ_LINK_POLICY = 0x080C,
    HCC_WRITE_LINK_POLICY = 0x080D,
    HCC_READ_DEFAULT_LINK_POLICY = 0x080E,
    HCC_WRITE_DEFAULT_LINK_POLICY = 0x080F,
    HCC_FLOW_SPECIFICATION = 0x0810,
    HCC_SNIFF_SUBRATING = 0x0811,


    HCC_SET_EVENT_MASK = 0x0C01,
    HCC_RESET = 0x0C03,
    HCC_EVENT_FILTER = 0x0C05,
    HCC_FLUSH = 0x0C08,
    HCC_READ_PIN_TYPE = 0x0C09,
    HCC_WRITE_PIN_TYPE = 0x0C0A,
    HCC_CREATE_NEW_UNIT_KEY = 0x0C0B,
    HCC_READ_STORED_LINK_KEY = 0x0C0D,
    HCC_WRITE_STORED_LINK_KEY = 0x0C11,
    HCC_DEL_STORED_LINK_KEY = 0x0C12,
    HCC_CHNG_LOCAL_NAME = 0x0C13,
    HCC_READ_LOCAL_NAME = 0x0C14,
    HCC_READ_CONN_ACCEPT_TIMEOUT = 0x0C15,
    HCC_WRITE_CONN_ACCEPT_TIMEOUT = 0x0C16,
    HCC_READ_PAGE_TIMEOUT = 0x0C17,
    HCC_WRITE_PAGE_TIMEOUT = 0x0C18,
    HCC_READ_SCAN_ENABLE = 0x0C19,
    HCC_WRITE_SCAN_ENABLE = 0x0C1A,
    HCC_READ_PAGE_SCAN_ACTIVITY = 0x0C1B,
    HCC_WRITE_PAGE_SCAN_ACTIVITY = 0x0C1C,
    HCC_READ_INQ_SCAN_ACTIVITY = 0x0C1D,
    HCC_WRITE_INQ_SCAN_ACTIVITY = 0x0C1E,
    HCC_READ_AUTH_ENABLE = 0x0C1F,
    HCC_WRITE_AUTH_ENABLE = 0x0C20,
    HCC_READ_ENCRYPT_MODE = 0x0C21,
    HCC_WRITE_ENCRYPT_MODE = 0x0C22,
    HCC_READ_CLASS_OF_DEVICE = 0x0C23,
    HCC_WRITE_CLASS_OF_DEVICE = 0x0C24,
    HCC_READ_VOICE_SETTING = 0x0C25,
    HCC_WRITE_VOICE_SETTING = 0x0C26,
    HCC_READ_AUTO_FLUSH_TIMEOUT = 0x0C27,
    HCC_WRITE_AUTO_FLUSH_TIMEOUT = 0x0C28,
    HCC_READ_NUM_BC_RETRANSMIT = 0x0C29,
    HCC_WRITE_NUM_BC_RETRANSMIT = 0x0C2A,
    HCC_READ_HOLD_MODE_ACTIVITY = 0x0C2B,
    HCC_WRITE_HOLD_MODE_ACTIVITY = 0x0C2C,
    HCC_READ_XMIT_POWER_LEVEL = 0x0C2D,
    HCC_READ_SCO_FC_ENABLE = 0x0C2E,
    HCC_WRITE_SCO_FC_ENABLE = 0x0C2F,
    HCC_SET_CTRLR_TO_HOST_FLOW_CTRL = 0x0C31,
    HCC_HOST_BUFFER_SIZE = 0x0C33,
    HCC_HOST_NUM_COMPLETED_PACKETS = 0x0C35,
    HCC_READ_LINK_SUPERV_TIMEOUT = 0x0C36,
    HCC_WRITE_LINK_SUPERV_TIMEOUT = 0x0C37,
    HCC_READ_NUM_IAC = 0x0C38,
    HCC_READ_CURRENT_IAC_LAP = 0x0C39,
    HCC_WRITE_CURRENT_IAC_LAP = 0x0C3A,
    HCC_READ_PAGE_SCAN_PERIOD_MODE = 0x0C3B,
    HCC_WRITE_PAGE_SCAN_PERIOD_MODE = 0x0C3C,
    HCC_READ_PAGE_SCAN_MODE = 0x0C3D,
    HCC_WRITE_PAGE_SCAN_MODE = 0x0C3E,
    HCC_SET_AFH_HOST_CHAN_CLASS = 0x0C3F,
    HCC_READ_INQ_SCAN_TYPE = 0x0C42,
    HCC_WRITE_INQ_SCAN_TYPE = 0x0C43,
    HCC_READ_INQ_MODE = 0x0C44,
    HCC_WRITE_INQ_MODE = 0x0C45,
    HCC_READ_PAGE_SCAN_TYPE = 0x0C46,
    HCC_WRITE_PAGE_SCAN_TYPE = 0x0C47,
    HCC_READ_AFH_CHAN_ASSESS_MODE = 0x0C48,
    HCC_WRITE_AFH_CHAN_ASSESS_MODE = 0x0C49,
    HCC_READ_ANONYMITY_MODE = 0x0C4A,
    HCC_WRITE_ANONYMITY_MODE = 0x0C4B,
    HCC_READ_ALIAS_AUTH_ENABLE = 0x0C4C,
    HCC_WRITE_ALIAS_AUTH_ENABLE = 0x0C4D,
    HCC_READ_ANON_ADDR_CHNG_PARM = 0x0C4E,
    HCC_WRITE_ANON_ADDR_CHNG_PARM = 0x0C4F,
    HCC_RESET_FIXED_ADDR_COUNTER = 0x0C50,
    HCC_WRITE_EXT_INQUIRY_RESPONSE = 0x0C52,
    HCC_WRITE_SIMPLE_PAIRING_MODE = 0x0C56,
    HCC_WRITE_INQUIRY_TX_PWR = 0x0C59,
    HCC_WRITE_FLOW_CONTROL_MODE = 0x0C67,
    HCC_READ_LE_HOST_SUPPORT = 0x0C6C,
    HCC_WRITE_LE_HOST_SUPPORT = 0x0C6D,


    HCC_READ_LOCAL_VERSION = 0x1001,
    HCC_READ_LOCAL_COMMANDS = 0x1002,
    HCC_READ_LOCAL_FEATURES = 0x1003,
    HCC_READ_LOCAL_EXT_FEATURES = 0x1004,
    HCC_READ_BUFFER_SIZE = 0x1005,
    HCC_READ_COUNTRY_CODE = 0x1007,
    HCC_READ_BD_ADDR = 0x1009,
    HCC_READ_DATA_BLOCK_SIZE = 0x100A,


    HCC_READ_FAILED_CONTACT_COUNT = 0x1401,
    HCC_RESET_FAILED_CONTACT_COUNT = 0x1402,
    HCC_GET_LINK_QUALITY = 0x1403,
    HCC_READ_RSSI = 0x1405,
    HCC_READ_AFH_CHANNEL_MAP = 0x1406,
    HCC_READ_CLOCK = 0x1407,
    HCC_READ_LOCAL_AMP_INFO = 0x1409,
    HCC_READ_LOCAL_AMP_ASSOC = 0x140A,
    HCC_WRITE_REMOTE_AMP_ASSOC = 0x140B,


    HCC_READ_LOOPBACK_MODE = 0x1801,
    HCC_WRITE_LOOPBACK_MODE = 0x1802,
    HCC_ENABLE_DUT = 0x1803,
    HCC_WRITE_SSP_DEBUG_MODE = 0x1804,


    HCC_LE_SET_EVENT_MASK = 0x2001,
    HCC_LE_READ_BUFFER_SIZE = 0x2002,
    HCC_LE_READ_LOCAL_FEATURES = 0x2003,
    HCC_LE_SET_RANDOM_ADDRESS = 0x2005,
    HCC_LE_SET_ADVERTISE_PARAM = 0x2006,
    HCC_LE_READ_ADVERTISE_TX_POWER = 0x2007,
    HCC_LE_SET_ADVERTISE_DATA = 0x2008,
    HCC_LE_SET_SCAN_RESPONSE_DATA = 0x2009,
    HCC_LE_SET_ADVERTISE_ENABLE = 0x200A,
    HCC_LE_SET_SCAN_PARAM = 0x200B,
    HCC_LE_SET_SCAN_ENABLE = 0x200C,
    HCC_LE_CREATE_CONNECTION = 0x200D,
    HCC_LE_CREATE_CONNECTION_CANCEL = 0x200E,
    HCC_LE_READ_WHITE_LIST_SIZE = 0x200F,
    HCC_LE_CLEAR_WHITE_LIST = 0x2010,
    HCC_LE_ADD_TO_WHITE_LIST = 0x2011,
    HCC_LE_REMOVE_FROM_WHITE_LIST = 0x2012,
    HCC_LE_CONNECT_UPDATE = 0x2013,
    HCC_LE_SET_HOST_CHANNEL_CLASS = 0x2014,
    HCC_LE_READ_CHANNEL_MAP = 0x2015,
    HCC_LE_READ_REMOTE_FEATURES = 0x2016,
    HCC_LE_ENCRYPT = 0x2017,
    HCC_LE_RAND = 0x2018,
    HCC_LE_START_ENCRYPT = 0x2019,
    HCC_LE_LONG_TERM_KEY_REQ_REPL = 0x201A,
    HCC_LE_LONG_TERM_KEY_REQ_NEG_REPL= 0x201B,
    HCC_LE_READ_SUPPORT_STATES = 0x201C,
    HCC_LE_RECEIVER_TEST = 0x201D,
    HCC_LE_TRANSMITTER_TEST = 0x201E,
    HCC_LE_TEST_END = 0x201F,


    HCC_SET_BD_ADDR = 0xFC1A,

    HCC_SET_LMP_EXTENDED_FEATURE = 0xFC1F,

    HCC_READ_PROPRIETARY_EXTENDED_FEATURES = 0xFC54,

    HCC_SET_PINCODE_RSP_TIMEOUT = 0xFC66,

    HCC_DUAL_PCM_SET_VALUE = 0xFC72,
    HCC_DUAL_PCM_SWITCH = 0xFC90,



    HCC_MT66XX_Enabled_FLOW_CONTROL = 0xFCEF,
    HCC_UART_PERIPHERAL_REQ = 0xFCF0,
    HCC_UART_TEST_REQ = 0xFCF1,
    HCC_DMA_TEST_REQ = 0xFCF2,
    HCC_GPIO_TEST_REQ = 0xFCF3,
    HCC_WDT_TEST_REQ = 0xFCF4,
    HCC_PATCH_TEST_REQ = 0xFCF5,
}HciCommandType;
# 471 "../btcore/inc/sys/hci.h"
typedef enum
{
    HCE_INQUIRY_COMPLETE = 0x01,
    HCE_INQUIRY_RESULT = 0x02,
    HCE_CONNECT_COMPLETE = 0x03,
    HCE_CONNECT_REQUEST = 0x04,
    HCE_DISCONNECT_COMPLETE = 0x05,
    HCE_AUTH_COMPLETE = 0x06,
    HCE_REMOTE_NAME_REQ_COMPLETE = 0x07,
    HCE_ENCRYPT_CHNG = 0x08,
    HCE_CHNG_CONN_LINK_KEY_COMPLETE = 0x09,
    HCE_MASTER_LINK_KEY_COMPLETE = 0x0A,
    HCE_READ_REMOTE_FEATURES_COMPLETE = 0x0B,
    HCE_READ_REMOTE_VERSION_COMPLETE = 0x0C,
    HCE_QOS_SETUP_COMPLETE = 0x0D,
    HCE_COMMAND_COMPLETE = 0x0E,
    HCE_COMMAND_STATUS = 0x0F,
    HCE_HARDWARE_ERROR = 0x10,
    HCE_FLUSH_OCCURRED = 0x11,
    HCE_ROLE_CHANGE = 0x12,
    HCE_NUM_COMPLETED_PACKETS = 0x13,
    HCE_MODE_CHNG = 0x14,
    HCE_RETURN_LINK_KEYS = 0x15,
    HCE_PIN_CODE_REQ = 0x16,
    HCE_LINK_KEY_REQ = 0x17,
    HCE_LINK_KEY_NOTIFY = 0x18,
    HCE_LOOPBACK_COMMAND = 0x19,
    HCE_DATA_BUFFER_OVERFLOW = 0x1A,
    HCE_MAX_SLOTS_CHNG = 0x1B,
    HCE_READ_CLOCK_OFFSET_COMPLETE = 0x1C,
    HCE_CONN_PACKET_TYPE_CHNG = 0x1D,
    HCE_QOS_VIOLATION = 0x1E,
    HCE_PAGE_SCAN_MODE_CHANGE = 0x1F,
    HCE_PAGE_SCAN_REPETITION_MODE = 0x20,
    HCE_FLOW_SPECIFICATION_COMPLETE = 0x21,
    HCE_INQUIRY_RESULT_WITH_RSSI = 0x22,
    HCE_READ_REMOTE_EXT_FEAT_COMPLETE = 0x23,
    HCE_FIXED_ADDRESS = 0x24,
    HCE_ALIAS_ADDRESS = 0x25,
    HCE_GENERATE_ALIAS_REQ = 0x26,
    HCE_ACTIVE_ADDRESS = 0x27,
    HCE_ALLOW_PRIVATE_PAIRING = 0x28,
    HCE_ALIAS_ADDRESS_REQ = 0x29,
    HCE_ALIAS_NOT_RECOGNIZED = 0x2A,
    HCE_FIXED_ADDRESS_ATTEMPT = 0x2B,
    HCE_SYNC_CONNECT_COMPLETE = 0x2C,
    HCE_SYNC_CONN_CHANGED = 0x2D,
    HCE_SNIFF_SUBRATING_EVENT = 0x2E,
    HCE_INQUIRY_RESULT_WITH_EIR = 0x2F,
    HCE_ENCRYPTION_KEY_REFRESH_COMPLETE_EVENT = 0x30,
    HCE_IO_CAPABILITY_REQUEST = 0x31,
    HCE_IO_CAPABILITY_RESPONSE = 0x32,
    HCE_USER_CONFIRM_REQUSEST = 0x33,
    HCE_USER_PASSKEY_REQUEST_EVENT = 0x34,
    HCE_REMOTE_OOB_DATA_REQUEST_EVENT = 0x35,
    HCE_SIMPLE_PAIRING_COMPLETE = 0x36,
    HCE_LINK_SUPERVISION_TIMEOUT_CHNG = 0x38,
    HCE_ENHANCED_FLUSH_COMPLETE = 0x39,

    HCE_USER_PASSKEY_NOTIFICATION = 0x3B,
    HCE_USER_KEYPRESS = 0x3C,
    HCE_REMOTE_HOST_SUPPORTED_FEATURES_NOTIFICATION_EVENT = 0x3D,
    HCE_LE_META_EVENT = 0x3E,
    HCE_PHYSICAL_LINK_COMPLETE = 0x40,
    HCE_CHANNEL_SELECTED = 0x41,
    HCE_DISCONNECT_PHYSICAL_LINK = 0x42,
    HCE_PHYSICAL_LINK_EARLY_WARNING = 0x43,
    HCE_PHYSICAL_LINK_RECOVERY = 0x44,
    HCE_LOGICAL_LINK_COMPLETE = 0x45,
    HCE_DISCONNECT_LOGICAL_LINK = 0x46,
    HCE_NUM_OF_COMPLETE_DATA_BLOCKS = 0x48,
    HCE_AMP_STATUS_CHANGE = 0x4D,

    HCE_UART_SETTING_COMPLETE = 0xF0,
    HCE_BLUETOOTH_LOGO = 0xFE,
    HCE_VENDOR_SPECIFIC = 0xFF,
}HciEventType;

typedef enum
{
    HCE_LE_CONNECT_COMPLETE = 0x01,
    HCE_LE_ADVERTISE_REPORT,
    HCE_LE_CONNECT_UPDATE_COMPLETE,
    HCE_LE_READ_REMOTE_FEATURES_COMPLETE,
    HCE_LE_LONG_TERM_KEY_REQUEST_EVENT,
}HciLeSubEventType;
# 566 "../btcore/inc/sys/hci.h"
typedef kal_uint8 HcStatus;
# 646 "../btcore/inc/sys/hci.h"
typedef kal_uint16 HciHandle;
# 731 "../btcore/inc/sys/hci.h"
typedef kal_uint8 HciPrescanFlags;





typedef struct _HciPacket HciPacket;
# 755 "../btcore/inc/sys/hci.h"
typedef struct _HciCommand
{
    ListEntry node;

    kal_uint8 header[3];
# 768 "../btcore/inc/sys/hci.h"
    kal_uint8 parms[248];

} HciCommand;

typedef struct _HciReducedCommand
{
    ListEntry node;

    kal_uint8 header[3];
# 785 "../btcore/inc/sys/hci.h"
    kal_uint8 parms[10];

} HciReducedCommand;
# 801 "../btcore/inc/sys/hci.h"
typedef struct _HciEvent
{
    HciEventType event;
    kal_uint8 len;
    kal_uint8 *parms;
} HciEvent;
# 816 "../btcore/inc/sys/hci.h"
typedef struct _HciBuffer
{
    ListEntry node;
    kal_uint16 len;
    kal_uint8 *buffer;
    kal_uint8 flags;






} HciBuffer;
typedef struct _HciMetaBuffer
{
    kal_uint16 con_hdl;
    kal_uint16 len;
    kal_uint8 *buffer;
} HciMetaBuffer;
# 847 "../btcore/inc/sys/hci.h"
typedef struct _HciCallbackParms
{
    BtStatus status;
    HciHandle hciHandle;



    kal_uint8 morePacketWaiting;






    HciHandle ampHandle;

    union
    {
        HciEvent *hciEvent;
        HciBuffer *rxBuff;
        BtPacket *packet;
        HciCommand *cmd;
        HciMetaBuffer *rxMetaBuff;
        kal_uint8 txNumber;
    } ptr;
} HciCallbackParms;


void ME_Callback(kal_uint8 event, HciCallbackParms *parms);






typedef void (*RadioHandlerCallback) (kal_uint8 event, HciCallbackParms *parms);
# 959 "../btcore/inc/sys/hci.h"
BtStatus HCI_Init(void);






void HCI_Deinit(void);
# 981 "../btcore/inc/sys/hci.h"
BtStatus HCI_Reset(void);
# 1003 "../btcore/inc/sys/hci.h"
BtStatus HCI_Config(void);
# 1029 "../btcore/inc/sys/hci.h"
void HCI_RegisterRadioHandler(RadioHandlerCallback radioHandlerCallback);
# 1046 "../btcore/inc/sys/hci.h"
void HCI_DeregisterRadioHandler(void);
# 1064 "../btcore/inc/sys/hci.h"
void HCI_RadioInitialized(BtStatus Status);
# 1078 "../btcore/inc/sys/hci.h"
void HCI_RadioDeinitialized(void);
# 1117 "../btcore/inc/sys/hci.h"
BtStatus MeSendHciCommandRaw(HciCommandType opCode, kal_uint8 parmLen);
void BT_Xfile_PrintOpcode(kal_uint16 opcode);
# 1130 "../btcore/inc/sys/hci.h"
void HciRadioWakeupRetryHandler(EvmTimer *timer);
# 1236 "../btcore/inc/sys/hci.h"
BtStatus HCI_RequestToSend(HciHandle handle);
# 1252 "../btcore/inc/sys/hci.h"
void HCI_Process(void);
unsigned char HciCheckWifiSetting(void);
void HCI_WifiCommandTimeoutHandler(EvmTimer *Timer);
kal_uint8 BTQueryPowerOnState(void);

kal_uint8 HCI_IsValidAclPacketCount(kal_uint16 packetLeft);
kal_uint8 HCI_IsValidAclPacket(void);
kal_uint8 HCI_IsValidAclPacketLen(void);
kal_uint8 HCI_IsValidScoPacketLen(void);
# 85 "../btcore/inc/sys/lei.h" 2
# 1 "../btcore/inc/metypes.h" 1
# 86 "../btcore/inc/sys/lei.h" 2







typedef enum
{
    LE_ADV_CHANNEL_37 = 0x01,
    LE_ADV_CHANNEL_38 = 0x02,
    LE_ADV_CHANNEL_39 = 0x04,
    LE_ADV_CHANNEL_ALL = 0x07
} LeAdvChannelType;

typedef enum
{
    HCI_ADV_IND = 0x00,
    HCI_ADV_DIRECT_IND = 0x01,
    HCI_ADV_SCAN_IND = 0x02,
    HCI_ADV_NONCONN_IND = 0x03,

    HCI_SCAN_RSP = 0x04

} HciLeAdvertiseType;

typedef enum
{
    HCI_SCAN_PASSIVE = 0x00,
    HCI_SCAN_ACTIVE = 0x01
} HciLeScanType;

typedef enum
{
    ADV_ALLOW_ALL = 0x00,
    ADV_ALLOW_SCAN_WL = 0x01,
    ADV_ALLOW_CONNECT_WL = 0x02,
    ADV_ALLOW_SCAN_CONNECT_WL = 0x03,
} HciLeAdvertiseFilter;

typedef enum
{
    SCAN_ALLOW_ALL = 0x00,
    SCAN_ALLOW_WL_ONLY = 0x01,
} HciLeScanFilter;

typedef enum
{
    INITIAOR_NOT_USE_WL = 0x00,
    INITIAOR_USE_WL = 0x01,
} HciLeInitiatorFilter;

typedef struct
{
    BtOperation op;


    HciCommandType cmd;
    kal_uint8 parmLen;
    kal_uint8 parms[248];
    kal_uint8 cmdToHci;

    union
    {
        unsigned char enable;
    } cmdParm;

    union
    {
        struct _BtRemoteDevice *remDev;
        BtCallBack callback;
    } handler;
} LeHciCmd;





typedef struct _BtLeContext
{
    HciLeAdvertiseType advCur;
    kal_uint16 interval;
    kal_uint16 window;
    kal_uint8 type;
    kal_uint8 ownAddrType;
    kal_uint8 filter;
    unsigned char enabled;
    kal_uint8 setScanParameterFlag;
    kal_uint8 setEnabledFlag;
    kal_uint8 currentEnabledState;
    LeHciCmd hciScanParmCmd;
    LeHciCmd hciScanEnabledCmd;
    kal_uint8 advData[31];
    kal_uint8 advDataLen;

    LeHciCmd hciCmd[32];
    kal_uint8 curCmdIdx;

    struct _SmContext *smCtx;
# 204 "../btcore/inc/sys/lei.h"
} BtLeContext;

void SM_LinkCallback(struct _BtRemoteDevice *remDev, struct _BtEvent *event);
# 41 "../btcore/inc/le_adp.h" 2

typedef enum
{
    BT_DEV_TYPE_UNKNOWN,
    BT_DEV_TYPE_LE,
    BT_DEV_TYPE_BR_EDR,
    BT_DEV_TYPE_BR_EDR_LE
} BtDevType;

typedef enum
{
    BT_CONN_TYPE_UNKNOWN,
    BT_CONN_TYPE_LE,
    BT_CONN_TYPE_BR_EDR,
} BtConnType;

typedef enum
{
    LE_ADDR_PUBLIC,
    LE_ADDR_RANDOM
} LeAddrType;

typedef enum
{
    BEF_LE_LIMITED_DISCOVERABLE_MODE = 0x01,
    BEF_LE_GENERAL_DISCOVERABLE_MODE = 0x02,
    BEF_BR_EDR_NOT_SUPPORTED = 0x04,
    BEF_SIMUL_LE_BR_EDR_CAPABLE_CONTROLLER = 0x08,
    BEF_SIMUL_LE_BR_EDR_CAPABLE_HOST = 0x10
} LeAdFlags;

typedef enum
{
    LE_APPEARANCE_UNKNOWN = 0,
    LE_APPEARANCE_PHONE = 64,
    LE_APPEARANCE_COMPUTER = 128,
    LE_APPEARANCE_WATCH = 192,
    LE_APPEARANCE_CLOCK = 256,
    LE_APPEARANCE_DISPLAY = 320,
    LE_APPEARANCE_REMOTE_CONTROL = 384,
    LE_APPEARANCE_EYE_GLASSES = 448,
    LE_APPEARANCE_TAG = 512,
    LE_APPEARANCE_KEYRING = 576,
    LE_APPEARANCE_MEDIA_PLAYER = 640,
    LE_APPEARANCE_BARCODE_SCANNER = 704,
} LeAppearanceType;


typedef enum
{
    LE_PROFILE_NONE = 0,
    LE_PROFILE_ANP = 0x00000001,
    LE_PROFILE_BLP = 0x00000002,
    LE_PROFILE_FMP = 0x00000004,
    LE_PROFILE_HOGP = 0x00000008,
    LE_PROFILE_HRP = 0x00000010,
    LE_PROFILE_HTP = 0x00000020,
    LE_PROFILE_PASP = 0x00000040,
    LE_PROFILE_PXP = 0x00000080,
    LE_PROFILE_SCPP = 0x00000100,
    LE_PROFILE_TIP = 0x00000200,
    LE_PROFILE_ALL = 0xFFFFFFFF,
} LeProfile;

typedef struct
{
    kal_uint16 intervalMin;
    kal_uint16 intervalMax;
} BtLEAdvParm;

typedef struct
{
    kal_uint16 scanInterval;
    kal_uint16 scanWindow;
    kal_uint16 connIntervalMin;
    kal_uint16 connIntervalMax;
    unsigned char privacy;
} BtLELinkParm;

typedef struct
{
    unsigned long long random;
    kal_uint16 ediv;
    kal_uint8 ltk[16];
} BtLEEncParm;

typedef struct _BtLERecord
{
    BD_ADDR bdAddr;
    BtDevType devType;
    LeAddrType addrType;
    LeProfile profiles;
} BtLERecord;
# 150 "../btcore/inc/le_adp.h"
typedef enum
{
    SM_KEY_LTK = 0x01,
    SM_KEY_EDIV = 0x02,
    SM_KEY_RAND = 0x04,
    SM_KEY_IRK = 0x08,
    SM_KEY_ADDR = 0x10,
    SM_KEY_CSRK = 0x20
} SmKeyType;

typedef enum
{
    SM_IO_CAPABILITY_DISPLAY_ONLY,
    SM_IO_CAPABILITY_DISPLAY_YESNO,
    SM_IO_CAPABILITY_KEYBOARD_ONLY,
    SM_IO_CAPABILITY_NO_INPUT_NO_OUTPUT,
    SM_IO_CAPABILITY_KEYBOARD_DISPLAY
} SmIOCapability;

typedef enum
{
    SM_OOB_DATA_PRESENT_NO,
    SM_OOB_DATA_PRESENT_YES
} SmOOBFlag;

typedef enum
{
    SM_BONDING_NO,
    SM_BONDING_YES
} SmBondingFlag;

typedef struct
{
    unsigned char mitm;
    SmOOBFlag oob;
    SmBondingFlag bond;
 kal_uint8 *service_list;
 kal_uint8 service_no;
} SmPairAttribute;



void LE_Init(void);

kal_uint8 leUtilComposeAdvertiseData(kal_uint8 *buf, kal_uint32 bufLen, LeAdFlags flags, const kal_uint8 *name, kal_uint32 nameLen);
kal_uint8 leUtilComposeScanRspData(kal_uint8 *buf, kal_uint32 bufLen, const kal_uint8 *name, kal_uint32 nameLen);
BtStatus leUtilUpdateAdvertiseData(void);
LeHciCmd *LeFindHciToken(BtOperation *op);

void LeHciSetEventMask(kal_uint8 *mask);
void LeHciReadBufferSize(void);
void LeHciReadLocalFeatures(void);
void LeHciSetRandomAddress(BD_ADDR bdAddr);
void LeHciSetAdvertiseParm(kal_uint16 intervalMin,
                           kal_uint16 intervalMax,
                           HciLeAdvertiseType type,
                           LeAddrType ownAddrType,
                           LeAddrType directAddrType,
                           BD_ADDR bdAddr,
                           LeAdvChannelType channelMap,
                           HciLeAdvertiseFilter filter);
void LeHciReadAdvertiseTxPower(void);
void LeHciSetAdvertiseData(kal_uint8 dataLen, kal_uint8 *data);
void LeHciSetScanRspData(kal_uint8 dataLen, kal_uint8 *data);
BtStatus LeHciSetAdvertiseEnable(unsigned char enable);
void LeHciSetScanParm(HciLeScanType type, kal_uint16 interval, kal_uint16 window, LeAddrType ownAddrType, HciLeScanFilter filter);
BtStatus LeHciSetScanEnable(unsigned char enable, unsigned char filterDup);
BtStatus LeHciCreateConnection(struct _BtRemoteDevice *remDev,
                           kal_uint16 scanInterval,
                           kal_uint16 scanWindow,
                           HciLeInitiatorFilter filter,
                           LeAddrType peerAddrType,
                           BD_ADDR *peerAddr,
                           LeAddrType ownAddrType,
                           kal_uint16 connIntervalMin,
                           kal_uint16 connIntervalMax,
                           kal_uint16 connLatency,
                           kal_uint16 supervisionTO,
                           kal_uint16 CEMin,
                           kal_uint16 CEMax);
void LeHciCreateConnectionCancel(void);
void LeHciReadWhiteListSize(void);
void LeHciClearWhiteList(void);
void LeHciAddToWhiteList(LeAddrType addrType, BD_ADDR bdAddr);
void LeHciRemoveFromWhiteList(LeAddrType addrType, BD_ADDR bdAddr);
void LeHciUpdateConnection(kal_uint16 handle, kal_uint16 intervalMin, kal_uint16 intervalMax, kal_uint16 latency, kal_uint16 sTimeout, kal_uint16 ceMin, kal_uint16 ceMax);
void LeHciSetChannelMap(kal_uint8 *map);
void LeHciReadChannelMap(kal_uint16 handle);
void LeHciReadRemoteFeatures(kal_uint16 handle);
BtStatus LeHciAES128Encrypt(BtCallBack cb, kal_uint8 *key, kal_uint8 *data);
BtStatus LeHciRand(BtCallBack cb);
BtStatus LeHciStartEncryption(kal_uint16 hciHandle, unsigned long long random, kal_uint16 ediv, kal_uint8 *ltk);
void LeHciLTKRequestReply(kal_uint16 hciHandle, kal_uint8 *ltk);
void LeHciLTKRequestNegReply(kal_uint16 hciHandle);
void LeHciReadSupportedStates(void);
void LeHandleEvents(kal_uint8 len, kal_uint8 *parm);
void LeHandleOp(BtOpEvent event);
void LeHandleSetScanParmOp(BtOpEvent event);
void LeHandleSetScanEnabledOp(BtOpEvent event);
void LeHandleConnectTimeout(EvmTimer *timer);
void LeHciReceiverTest(kal_uint8 rxFreq);
void LeHciTransmitterTest(kal_uint8 txFreq, kal_uint8 len, kal_uint8 payload);
void LeHciTestEnd(void);




BtStatus SM_PasskeyEntry(BtDeviceContext *bdc, unsigned char accept, kal_uint32 passkey);
BtStatus SM_JustWorkRsp(BtDeviceContext *bdc, unsigned char accept);
BtStatus SM_SetOobData(BtDeviceContext *bdc, unsigned char accept, kal_uint8 *tk);
BtStatus SM_Bond(BtDeviceContext *bdc, SmPairAttribute *attr);
void SM_CMAC(BtCallBack callback, BD_ADDR *bdAddr, kal_uint8 *k, kal_uint8 *m, kal_uint32 mLen, kal_uint32 tLen);
void SM_CMAC_Verify(BtCallBack callback, BD_ADDR *bdAddr, kal_uint8 *k, kal_uint8 *m, kal_uint32 mLen, kal_uint32 tLen, kal_uint8 *mac);
void SM_Init(void);
void SM_GenCSRK(kal_uint8 *csrk);
void SM_GenIRK(kal_uint8 *irk);
# 73 "../btcore/inc/me_adp.h" 2
# 149 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtEventType;
# 469 "../btcore/inc/me_adp.h"
typedef kal_uint16 BtEventMask;
# 496 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtErrorCode;
# 588 "../btcore/inc/me_adp.h"
typedef kal_uint32 BtIac;
# 601 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtLinkType;
# 620 "../btcore/inc/me_adp.h"
typedef kal_uint16 BtAclPacketType;
# 649 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtQosServiceType;
# 664 "../btcore/inc/me_adp.h"
typedef kal_uint16 BtLinkPolicy;
# 673 "../btcore/inc/me_adp.h"
typedef enum
{
    BT_OP_DISABLE,
    BT_OP_ENABLE,
    BT_OP_DONT_CARE
} BtEnableOption;
# 692 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtAccessibleMode;
# 706 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtLinkMode;
# 721 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtConnectionRole;
# 745 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtStackState;
# 762 "../btcore/inc/me_adp.h"
typedef struct _BtScoConnect BtScoConnect;
typedef struct _BtScoTxParms BtScoTxParms;
typedef struct _BtScoRxParms BtScoRxParms;
# 774 "../btcore/inc/me_adp.h"
typedef BtCallBack BtProtocolId;
# 790 "../btcore/inc/me_adp.h"
typedef kal_uint32 BtClassOfDevice;
# 891 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtLinkKeyType;
# 908 "../btcore/inc/me_adp.h"
typedef kal_uint8 BtRemDevState;
# 933 "../btcore/inc/me_adp.h"
typedef enum
{
    BDF_3_SLOT_PACKET = 0,
    BDF_5_SLOT_PACKET = 1,
    BDF_ENCRYPTION = 2,
    BDF_SLOT_OFFSET = 3,
    BDF_TIMING_ACCURACY = 4,
    BDF_ROLE_SWITCH = 5,
    BDF_HOLD_MODE = 6,
    BDF_SNIFF_MODE = 7,

    BDF_PARK_STATE = 8,
    BDF_POWER_CONTROL_REQ = 9,
    BDF_CQDDR = 10,
    BDF_SCO_LINK = 11,
    BDF_HV2_PACKET = 12,
    BDF_HV3_PACKET = 13,
    BDF_U_LAW_SYNC_DATA = 14,
    BDF_A_LAW_SYNC_DATA = 15,

    BDF_CVSD_SYNC_DATA = 16,
    BDF_PAGING_PN = 17,
    BDF_POWER_CONTROL = 18,
    BDF_TRANSPARENT_SYNC_DATA = 19,
    BDF_FLOW_CTRL_LAG_LSB = 20,
    BDF_FLOW_CTRL_LAG_MB = 21,
    BDF_FLOW_CTRL_LAG_MSB = 22,
    BDF_BROADCAST_ENCRYPTION = 23,

    BDF_RESERVED1 = 24,
    BDF_EDR_ACL_2M_MODE = 25,
    BDF_EDR_ACL_3M_MODE = 26,
    BDF_ENHANCED_INQ_SCAN = 27,
    BDF_INTERLACED_INQ_SCAN = 28,
    BDF_INTERLACED_PAGE_SCAN = 29,
    BDF_INQ_W_RSSI = 30,
    BDF_EV3_PACKET = 31,

    BDF_EV4_PACKET = 32,
    BDF_EV5_PACKET = 33,
    BDF_RESERVED2 = 34,
    BDF_AFH_CAPABLE_SLAVE = 35,
    BDF_AFH_CLASSIFICATION_SLAVE = 36,
    BDF_BR_EDR_NOT_SUPPORT = 37,
    BDF_LE_SUPPORT_CONTROLLER = 38,
    BDF_3_SLOT_EDR_PACKET = 39,

    BDF_5_SLOT_EDR_PACKET = 40,
    BDF_SNIFF_SUBRATING = 41,
    BDF_PAUSE_ENCRYPTION = 42,
    BDF_AFH_CAPABLE_MASTER = 43,
    BDF_AFH_CLASSIFICATION_MASTER = 44,
    BDF_EDR_ESCO_2M_MODE = 45,
    BDF_EDR_ESCO_3M_MODE = 46,
    BDF_3_SLOT_EDR_ESCO_PACKET = 47,

    BDF_EIR = 48,
    BDF_SIMUL_LE_BR_EDR_CAPABLE = 49,
    BDF_RESERVED3 = 50,
    BDF_SSP = 51,
    BDF_ENCAPSULATED_PDU = 52,
    BDF_ERR_DATA_REPORTING = 53,
    BDF_NONFLUSHABLE_FLAG = 54,
    BDF_RESERVED4 = 55,

    BDF_SUPERVISIONTO_CHANGE_EVENT = 56,
    BDF_INQ_TX_POWER_LEVEL = 57,
    BDF_ENHANCED_POWER_CONTROL = 58,
    BDF_RESERVED5 = 59,
    BDF_RESERVED6 = 60,
    BDF_RESERVED7 = 61,
    BDF_RESERVED8 = 62,
    BDF_EXTENDED_FEATURE = 63,
} BtRemDevFeature;

typedef enum
{
    BDEF_SSP_HOST = 0,
    BDEF_LE_SUPPORT_HOST = 1,
} BtRemDevExtFeature;
# 1024 "../btcore/inc/me_adp.h"
typedef struct _BtPageScanInfo
{
    kal_uint8 psRepMode;
    kal_uint8 psMode;
    kal_uint16 clockOffset;
} BtPageScanInfo;







typedef struct _BtSniffInfo
{
# 1048 "../btcore/inc/me_adp.h"
    kal_uint16 maxInterval;







    kal_uint16 minInterval;






    kal_uint16 attempt;






    kal_uint16 timeout;

} BtSniffInfo;

typedef enum
{
    BT_QOS_NO_TRAFFIC,
    BT_QOS_BEST_EFFORT,
    BT_QOS_GUARANTEED
} BtQoSServiceType;







typedef struct _BtQoSInfo
{
    BtConnectionRole role;
    kal_uint8 flags;
    BtQoSServiceType serviceType;
    kal_uint32 tokenRate;
    kal_uint32 peakBandwidth;
    kal_uint32 latency;
    kal_uint32 delayVar;
} BtQoSInfo;





typedef struct _BtAccessModeInfo
{
    kal_uint16 inqInterval;
    kal_uint16 inqWindow;
    kal_uint16 pageInterval;
    kal_uint16 pageWindow;
} BtAccessModeInfo;







typedef struct _BtInquiryResult
{
    BD_ADDR bdAddr;
    BtPageScanInfo psi;
    kal_uint8 psPeriodMode;
    BtClassOfDevice classOfDevice;





    char rssi;

    kal_uint8 supported_eir;
    kal_uint8 *eirResponse;


    BtDevType devType;
    LeAddrType addrType;
    HciLeAdvertiseType advType;

} BtInquiryResult;
# 1146 "../btcore/inc/me_adp.h"
typedef struct _BtChannelClass
{
    kal_uint8 map[10];
} BtChannelClass;




typedef struct _BtHandler
{
    ListEntry node;
    BtCallBack callback;
    BtEventMask eMask;




    kal_uint8 pending;
} BtHandler;


typedef kal_uint8 BtAuthState;
typedef kal_uint8 BtEncryptState;
typedef kal_uint8 BtAuthorizeState;
typedef kal_uint8 BtSecAccessState;
typedef kal_uint8 BtLinkRxState;
typedef kal_uint8 BtIoCapabilityState;
# 1181 "../btcore/inc/me_adp.h"
typedef struct _internal_logical_link_flow_spec
{
    kal_uint8 logical_link_tx_flow_spec[16];
    kal_uint8 logical_link_rx_flow_spec[16];
}internal_logical_link_flow_spec;

typedef struct _BTRemoteAMPLogicalLink
{
    kal_uint16 logical_link_handle;
    kal_uint8 logical_link_sate;
    kal_uint8 logical_link_type;
    BtOperation disconnectLogicalLinkOp;
    BtOperation flowSpecModifyOp;
    kal_uint8 tx_flow_spec_id;
    void *link;
    internal_logical_link_flow_spec flow_spec;
    kal_uint16 l2cap_id;
}BTRemoteAMPLogicalLink;

typedef struct _internal_read_local_amp_assoc
{
    kal_uint16 length_so_far;
    kal_uint16 amp_assoc_length;
}internal_read_local_amp_assoc;
typedef struct _internal_write_remote_amp_assoc
{
    kal_uint16 length_so_far;
    kal_uint16 amp_assoc_remain_length;
    kal_uint8 *amp_assoc_fragment;
    kal_uint16 amp_assoc_size;
}internal_write_remote_amp_assoc;

typedef struct _BtRemoteAMPDevice
{
    kal_uint8 detected;
    kal_uint8 exists;
    kal_uint8 state;
    kal_uint8 initiator;
    kal_uint8 ampStatus;
    kal_uint8 creatingLogicalLinkTxFlowId;
    BtOperation createPhysicalLinkOp;
    BtOperation acceptPhysicalLinkOp;
    BtOperation disconnectPhysicalLinkOp;
    BtOperation createLogicalLinkOp;
    BtOperation acceptLogicalLinkOp;
    BtOperation logicalLinkCancelOp;
    BtOperation flowSpecModifyOp;
    BtOperation readLocalAmpInfo;
    BtOperation readLocalAmpAssoc;
    BtOperation writeRemoteAmpAssoc;
    BtOperation readDataBlockSize;
    kal_uint8 remoteControllerId;
    kal_uint8 physical_link_handle;
    kal_uint8 physical_link_sate;
    BTRemoteAMPLogicalLink logicalLink[2];
    kal_uint8 currentLogicLinkOperationIndex;
    kal_uint8 discReason;
    internal_read_local_amp_assoc read_local_assoc;
    internal_write_remote_amp_assoc write_remote_assoc;
}BtRemoteAMPDevice;



typedef enum _BtRemoteLinkInfo{
    BT_REMOTE_LINK_INFO_VERSION = 0,
    BT_REMOTE_LINK_INFO_FEATURE,
    BT_REMOTE_LINK_INFO_EXT_FEATURE,
    NUM_OF_BT_REMOTE_LINK_INFO,
}BtRemoteLinkInfo;







typedef struct _BtRemoteDevice
{
    BtOperation op;
    BtOperation policyOp;
    BtOperation cancelOp;
    BtOperation roleOp;
    BtOperation packetTypeOp;
    BtOperation remoteFeatureOp;
    BtOperation remoteExtFeatureOp;
    BtOperation remoteVersionOp;
    BtOperation remoteClockOffsetOp;
    BtOperation supervisionOp;

    BtOperation automaticallyFlushedOp;


    BtOperation sniffSubrateOp;


    BtOperation readRSSIOp;
    BtOperation readTxPowerOp;

    BtOperation readWIFIRSSIOp;
    BtOperation qosOp;




    BD_ADDR bdAddr;
    BtConnectionRole req_role;
    BtConnectionRole role;
    BtLinkMode mode;
    BtClassOfDevice cod;
    void *secRec;





    ListEntry handlers;
    ListEntry scoList;
    ListEntry secTokens;
    BtHandler *scoHandler;
    BtHandler *authHandler;
    BtHandler *encryptHandler;
    kal_uint16 hciHandle;
    kal_uint16 LinkPolicySetting;
    kal_uint16 LinkPolicyParms;
    BtRemDevState state;
    kal_uint16 maxTxCount;
    kal_uint8 remoteLinkInfo[(NUM_OF_BT_REMOTE_LINK_INFO+7)/8];
    kal_uint8 remoteFeature[8];
    kal_uint8 remoteExtFeature[8];
    kal_uint8 remoteVersion[5];
    kal_uint8 restricted;
    kal_uint8 remoteCapability;
    kal_uint8 discFlag;
    kal_uint8 discReason;
    kal_uint8 discTimeoutLevel;

    kal_uint8 sniffSubrateState;
    kal_uint16 sniffSubrateMaxLatency;
    kal_uint16 sniffSubrateMinRemoteTimeout;
    kal_uint16 sniffSubrateMinLocalTimeout;



    kal_uint16 supervisionTimeout;

    EvmTimer connectTimer;
    EvmTimer discTimer;
    EvmTimer readyToSendTimer;
    EvmTimer sdapTimer;
    EvmTimer changePacketTimer;
    EvmTimer disconnectACLCheckCreatACLTimer;





    EvmTimer monitorPairResultTimer;
    kal_uint8 disconnectACLCheckCreatACLCount;
    kal_uint8 disconnectACLCheckCreatACLAlwaysForce;

    BtSecAccessState secAccessState;
    kal_uint8 authInitiator;
    BtAuthState authState;
    BtAuthorizeState authorizeState;
    BtEncryptState encryptState;
    kal_uint8 pairingType;

    kal_uint8 switchState;
    kal_uint8 oldEncryptionMode;
    kal_uint8 roleSwitchCounter;
    kal_uint8 sniffCounter;
    kal_uint8 connectCounter;

    union
    {

        struct
        {
            BtPageScanInfo psi;
            kal_uint8 allowRoleChange;
        } con;


        struct
        {
            kal_uint16 max;
            kal_uint16 min;
        } mode;

        BtSniffInfo sniff;
        BtConnectionRole acceptRole;

        kal_uint8 rejectReason;
        BtLinkPolicy policy;
    } parms;


    unsigned char okToSend;
    ListEntry txHighPriorityQueue;
    ListEntry txLowPriorityQueue;
    kal_uint32 lastHighPriorityTxTime;
    kal_uint32 lastLowPriorityTxTime;
    kal_uint32 lastTxRxTime;

    kal_uint32 lastTxRxOverDataChannel;

    kal_uint8 refCount;
    BtLinkRxState rxState;
    kal_uint16 rxBufferLen;
    kal_uint8 *rxBuffer;

    kal_uint32 l2cap_feature;
    ListEntry txPacketList;
    BtPacket txPackets[(0x08)];
    kal_uint8 linkModes;
    kal_uint8 FixedChannelSupported[8];
    ListEntry txNonAckQueue;



    kal_uint16 sdpClientChannel;
    ListEntry queryList;
    BtPacket sdpClientPacket;
    kal_uint16 transId;
    kal_uint8 sdpClientState;
    kal_uint32 flushTimeOut;

    BtIoCapabilityState ioCapabilitiyState;
    kal_uint8 gapKeyType;
    kal_uint8 gapSecurityLevel;

    kal_uint8 rssi;
    kal_uint8 txPower;
    struct _SdpQueryToken *curToken;


    struct _SdpServerInfo *sdpServInfo;
    kal_uint8 scOutoConnectState;
    kal_uint8 scoParms;

    kal_uint8 scoCodec;
    kal_uint8 supportESCO;
    BtQoSInfo qos;
    kal_uint8 jsr82_used;

    BtRemoteAMPDevice remoteWifiAMP;



    kal_uint8 remoteLEFeature[8];
    kal_uint16 leConnInterval;
    kal_uint32 signCounter;
    ListEntry txSignQueue;
    kal_uint8 fixCidState[3];
    EvmTimer bleNameReqTimer;
    EvmTimer bleServiceRequestDisconnectTimer;





} BtRemoteDevice;

typedef struct _BtDisconnectAMPCommand
{
    BtOperation disconnect;
    kal_uint8 physical_hdl;
    kal_uint8 reason;
    kal_uint8 ampControllerId;
}BtDisconnectAMPCommand;
# 1459 "../btcore/inc/me_adp.h"
typedef struct _BtRestrictedInfo
{
    BtAclPacketType aclPacketType;
    BtQosServiceType serviceType;







    kal_uint16 minRemoteFlushTo;
    kal_uint16 minLocalFlushTo;

    kal_uint32 tokenRate;
    kal_uint32 peakBandwidth;
    kal_uint32 latency;
    kal_uint32 delayVariation;
    BtLinkPolicy linkPolicy;

} BtRestrictedInfo;







typedef struct _BtDeviceRecord
{
    BD_ADDR bdAddr;
    unsigned char trusted;
    kal_uint8 linkKey[16];
    kal_uint8 gampKey[32];
    kal_uint8 dampKey[32];
    BtLinkKeyType keyType;


    kal_uint8 gapKeyType;






    BtDevType devType;
    LeAddrType addrType;


    SmKeyType smKeyType;
    kal_uint16 ediv;
    unsigned long long rand;
    kal_uint8 csrk[16];







    SmKeyType distSmKeyType;
    kal_uint16 distEDIV;
    unsigned long long distRAND;
    kal_uint8 distLTK[16];

} BtDeviceRecord;

typedef struct _BtCodRecord
{
    BD_ADDR bdAddr;
    kal_uint32 cod;
} BtCodRecord;

typedef enum _BTDB
{
    BTDB_BTDEV_INFO,
    NUM_OF_BTDB,
}BTDB;

typedef struct _BtCommonRecord
{
    BD_ADDR bdAddr;
}BtCommonRecord;

typedef enum
{
    BTDEV_INFO_PSI,
    BTDEV_INFO_VERSION,
    NUM_OF_BTDEV_INFO,
}BTDEV_INFO;

typedef struct _BtDeviceInfoRecord
{
    BD_ADDR bdAddr;
    kal_uint8 info_mask[((NUM_OF_BTDEV_INFO+7)/8)];
    BtPageScanInfo psi;
    kal_uint8 version[8];

}BtDeviceInfoRecord;







typedef struct _BtDeviceLinkKey
{
    BD_ADDR bdAddr;
    kal_uint8 linkKey[16];
} BtDeviceLinkKey;







typedef struct _MeRemoteNameRequest
{

    BD_ADDR bdAddr;






    union
    {


        struct
        {
            BtPageScanInfo psi;
        } in;


        struct
        {


            kal_uint8 len;


            kal_uint8 *name;
        } out;

    } io;

} MeRemoteNameRequest;







typedef struct _MeGeneralHciCommand
{

    struct
    {





        kal_uint16 hciCommand;
        kal_uint8 parmLen;
        kal_uint8 *parms;
        kal_uint8 event;
    } in;


    struct
    {





        BtStatus status;

        kal_uint8 event;
        kal_uint8 parmLen;
        kal_uint8 *parms;
    } out;
} MeGeneralHciCommand;

typedef kal_uint16 BtScoAudioSettings;


typedef struct _BtAudioCodingFormat{
    kal_uint8 id;

    struct {
        kal_uint16 comanyId;
        kal_uint16 id;
    }vendor;
}BtAudioCodingFormat;







typedef struct _BtEnhancedScoAudioSettings{
    kal_uint32 transmitBandwidth;
    kal_uint32 receiveBandwidth;
    BtAudioCodingFormat txCoding;
    BtAudioCodingFormat rxCoding;
    kal_uint16 txCodecFrameSize;
    kal_uint16 rxCodecFrameSize;
    kal_uint32 inputBandwith;
    kal_uint32 outputBandwith;
    BtAudioCodingFormat inputCoding;
    BtAudioCodingFormat outputCoding;
    kal_uint16 inputCodedDataSize;
    kal_uint16 outputCodedDataSize;
    kal_uint8 inputPCMDataFormat;
    kal_uint8 outputPCMDataFormat;
    kal_uint8 inputPCMSamplePayloadMSBPos;
    kal_uint8 outputPCMSamplePayloadMSBPos;
    kal_uint8 inputDataPath;
    kal_uint8 outputDataPath;
    kal_uint8 inputTransportUnitSize;
    kal_uint8 outputTransportUnitSize;
    kal_uint16 maxLatency;
    kal_uint16 packetType;
    kal_uint8 retransmissionEffort;
}BtEnhancedScoAudioSettings;







typedef struct _BtGattRequest
{
    BD_ADDR bdAddr;
    kal_uint8 bleSearchWithDeviceName;

    union
    {
        kal_uint8 privacy;
        BD_ADDR recon;
        kal_uint32 service_list;
    } u;
} BtGattRequest;
# 1719 "../btcore/inc/me_adp.h"
typedef struct _MeCommandToken
{
    BtOperation op;
    BtOperation cancelOp;
    BtRemoteDevice *remDev;
    EvmTimer tokenTimer;




    BtCallBack callback;





    union
    {


        MeRemoteNameRequest name;


        BtScoAudioSettings vsettings;


        MeGeneralHciCommand general;


        BtGattRequest gattReq;

    } p;


    BtEventType eType;
    kal_uint8 flags;
} MeCommandToken;
# 1764 "../btcore/inc/me_adp.h"
struct _BtEvent
{
    BtEventType eType;
    BtErrorCode errCode;
    BtHandler *handler;

    kal_uint8 *raw_data;

    union
    {
        BtInquiryResult inqResult;
        BtDeviceLinkKey bdLinkKey;

        BtAccessibleMode aMode;
        BtRemoteDevice *remDev;
        BD_ADDR bdAddr;
        MeCommandToken *meToken;

        struct _BtSecurityToken *secToken;
        struct _SdpQueryToken *token;


        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 mode;

        } encrypt;



        struct
        {
            BtRemoteDevice *remDev;
            BtScoConnect *scoCon;
            BtPacket *scoPacket;
        } scoPacketHandled;





        struct
        {
            BtRemoteDevice *remDev;
            kal_uint16 scoHandle;
            BtScoConnect *scoCon;
            BtLinkType scoLinkType;
            BtScoTxParms *scoTxParms;
            BtScoRxParms *scoRxParms;
        } scoConnect;


        struct
        {
            BtRemoteDevice *remDev;
            kal_uint16 scoHandle;
            BtScoConnect *scoCon;
            kal_uint8 len;
            kal_uint8 *ptr;
        } scoDataInd;





        struct
        {
            kal_uint8 mode;

            unsigned char encrypt;
        } secMode;


        struct
        {
            BtRemoteDevice *remDev;
            BtLinkMode curMode;
            kal_uint16 interval;
        } modeChange;


        struct
        {
            BtRemoteDevice *remDev;
            BtConnectionRole newRole;
        } roleChange;


        struct
        {

            kal_uint16 type;


            kal_uint8 length;





            const kal_uint8 *parms;
        } hciCmd;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 RSSI;

        } rssi;

        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 txPower;
        } txPower;




        struct _BtSelectDeviceToken *select;


        BtDeviceContext *device;

        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 ioCapability;
            kal_uint8 OOBDataPresent;
            kal_uint8 authRequirements;
        } ioCapabilityResponse;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint32 numericValue;
        } userConfirmRequest;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint32 numericValue;
        } passKeyEntry;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 passkeyEvent;
        } passKeyPress;


        struct
        {
            kal_uint8 length;
            kal_uint8 controllerId;
            const kal_uint8 *parms;
        } hciAmpEvent;

        struct
        {
            BtRemoteDevice *link;
            void *parms;
         } attEvent;


        struct
        {
            BtRemoteDevice *remDev;
            SmIOCapability ioCapability;
            SmOOBFlag OOBDataPresent;
            kal_uint8 authRequirements;
            kal_uint8 maxEncKeySize;
            kal_uint8 initKeyDist;
            kal_uint8 respKeyDist;
        } smPairResponse;
        struct
        {
            BtRemoteDevice *remDev;
            SmIOCapability ioCapability;
            SmOOBFlag OOBDataPresent;
            kal_uint8 authRequirements;
            kal_uint8 maxEncKeySize;
            kal_uint8 initKeyDist;
            kal_uint8 respKeyDist;
        } smPairRequest;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 randValue64[8];
        } smRand64Response;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 randValue128[16];
        } smRand128Response;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 EncryptData[16];
        } smEncryptResponse;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 ConfirmValue[16];
        } smConfirmResponse;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 ltk[16];
        } smLTKInfo;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint16 ediv;
            unsigned long long rand;
        } smMasterIDInfo;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 irk[16];
        } smIDInfo;
        struct
        {
            BtRemoteDevice *remDev;
            LeAddrType addrType;
            BD_ADDR addr;
        } smIDAddrInfo;
        struct
        {
            BtRemoteDevice *remDev;
            kal_uint8 csrk[16];
        } smSignInfo;
        struct
        {
            BD_ADDR bdAddr;
            kal_uint8 *data;
            kal_uint32 dataLen;
        } smSignData;

    } p;
};


typedef struct _BtEIRSdpRecord
{
    kal_uint8 used;
    kal_uint8 counter;
    kal_uint16 service_class;
} BtEIRSdpRecord;
# 68 "../btcore/inc/me.h" 2
# 98 "../btcore/inc/me.h"
BtStatus ME_RegisterGlobalHandler(BtHandler *handler);
# 112 "../btcore/inc/me.h"
void ME_InitHandler(BtHandler *handler);
# 132 "../btcore/inc/me.h"
BtStatus ME_UnregisterGlobalHandler(BtHandler *handler);
# 152 "../btcore/inc/me.h"
BtStatus ME_SetEventMask(BtHandler *handler, BtEventMask mask);
# 170 "../btcore/inc/me.h"
BtEventMask ME_GetEventMask(BtHandler *handler);
# 226 "../btcore/inc/me.h"
BtStatus ME_Inquiry(BtIac lap, kal_uint8 Length, kal_uint8 maxResp);
# 247 "../btcore/inc/me.h"
BtStatus ME_InquiryTxPwr(unsigned short pwr);
# 279 "../btcore/inc/me.h"
BtStatus ME_CancelInquiry(void);
# 322 "../btcore/inc/me.h"
BtStatus ME_GetRemoteDeviceName(MeCommandToken *token);
# 349 "../btcore/inc/me.h"
BtStatus ME_CancelGetRemoteDeviceName(MeCommandToken *token);
# 374 "../btcore/inc/me.h"
BtStatus ME_SetLocalDeviceName(const kal_uint8 *name, kal_uint8 len);
# 398 "../btcore/inc/me.h"
BtStatus ME_ReadLocalBdAddr(BD_ADDR *Addr);
# 415 "../btcore/inc/me.h"
BtStatus ME_SetClassOfDevice(BtClassOfDevice classOfDevice);


BtStatus ME_StartWriteEIR(void);
# 443 "../btcore/inc/me.h"
BtRemoteDevice *ME_FindRemoteDevice(BD_ADDR *bdAddr);


BtRemoteDevice *ME_FindRemoteDeviceP(const kal_uint8 *bdAddr);
# 532 "../btcore/inc/me.h"
BtStatus ME_CreateLink(BtHandler *handler, BD_ADDR *bdAddr, BtPageScanInfo *psi, BtRemoteDevice **remDev);







unsigned char ME_CheckCreatingLink(void);
# 600 "../btcore/inc/me.h"
BtStatus ME_CreateRestrictedLink(
            BtHandler *handler,
            BD_ADDR *bdAddr,
            BtPageScanInfo *psi,
            BtRestrictedInfo *resInfo);
# 631 "../btcore/inc/me.h"
BtStatus ME_ForceDisconnectLinkWithReason(
            BtHandler *handler,
            BtRemoteDevice *remDev,
            BtErrorCode reason,
            unsigned char forceDisconnect);
# 660 "../btcore/inc/me.h"
BtStatus ME_DisconnectLinkWithReason(BtHandler *handler, BtRemoteDevice *remDev, BtErrorCode reason);
# 710 "../btcore/inc/me.h"
BtStatus ME_DisconnectLink(BtHandler *handler, BtRemoteDevice *remDev);
# 743 "../btcore/inc/me.h"
BtStatus ME_CancelCreateLink(BtHandler *handler, BtRemoteDevice *remDev);
# 764 "../btcore/inc/me.h"
BtHandler *ME_RegisterAcceptHandler(BtHandler *handler);
# 801 "../btcore/inc/me.h"
BtStatus ME_AcceptIncomingLink(BtRemoteDevice *remDev, BtConnectionRole role);
# 842 "../btcore/inc/me.h"
BtStatus ME_RejectIncomingLink(BtRemoteDevice *remDev, BtErrorCode reason);
# 859 "../btcore/inc/me.h"
BtLinkMode ME_GetCurrentMode(BtRemoteDevice *rm);
# 880 "../btcore/inc/me.h"
BtConnectionRole ME_GetCurrentRole(BtRemoteDevice *rm);
# 925 "../btcore/inc/me.h"
BtStatus ME_Hold(BtRemoteDevice *remDev, kal_uint16 max, kal_uint16 min);
# 961 "../btcore/inc/me.h"
BtStatus ME_StartSniff(BtRemoteDevice *remDev, const BtSniffInfo *info);
# 997 "../btcore/inc/me.h"
BtStatus ME_StopSniff(BtRemoteDevice *remDev);
# 1021 "../btcore/inc/me.h"
BtStatus ME_StartSniffSubrating(BtRemoteDevice *remDev);
# 1062 "../btcore/inc/me.h"
BtStatus ME_StartPark(BtRemoteDevice *remDev, kal_uint16 max, kal_uint16 min);
# 1098 "../btcore/inc/me.h"
BtStatus ME_StopPark(BtRemoteDevice *remDev);
# 1142 "../btcore/inc/me.h"
BtStatus ME_StartParkAll(kal_uint16 max, kal_uint16 min, kal_uint8 *num);
# 1180 "../btcore/inc/me.h"
BtStatus ME_StopParkAll(kal_uint8 *num);
# 1218 "../btcore/inc/me.h"
BtStatus ME_SwitchRole(BtRemoteDevice *remDev);

BtStatus ME_SetUpQoS(BtRemoteDevice *remDev, const BtQoSInfo *info);
# 1291 "../btcore/inc/me.h"
BtStatus ME_SetAccessibleModeNC(BtAccessibleMode mode);
# 1314 "../btcore/inc/me.h"
BtStatus ME_GetAccessibleModeNC(BtAccessibleMode *mode);
# 1334 "../btcore/inc/me.h"
BtStatus ME_GetCurAccessibleMode(BtAccessibleMode *mode);
# 1366 "../btcore/inc/me.h"
BtStatus ME_SetDefaultLinkPolicy(BtLinkPolicy inACL, BtLinkPolicy outACL);

void MeEnabledLocalLoopback(void);
# 1384 "../btcore/inc/me.h"
kal_uint16 ME_GetHciConnectionHandle(BtRemoteDevice *rm);
# 1397 "../btcore/inc/me.h"
void ME_GetBdAddr(BtRemoteDevice *rm, BD_ADDR *bdAddr);
# 1411 "../btcore/inc/me.h"
BtRemDevState ME_GetRemDevState(BtRemoteDevice *remDev);
# 1427 "../btcore/inc/me.h"
BtClassOfDevice ME_GetRemDevCOD(BtRemoteDevice *remDev);
# 1443 "../btcore/inc/me.h"
BtEncryptState ME_GetRemDevEncryptState(BtRemoteDevice *remDev);
# 1456 "../btcore/inc/me.h"
BtStackState ME_GetStackInitState(void);
# 1469 "../btcore/inc/me.h"
kal_uint8 ME_GetBtVersion(void);
# 1484 "../btcore/inc/me.h"
kal_uint8 ME_GetBtFeatures(kal_uint8 byte);
# 1499 "../btcore/inc/me.h"
kal_uint16 ME_HasPendingTask(void);
# 1515 "../btcore/inc/me.h"
BtStatus ME_GetChannelClassification(BtChannelClass *channelClass);
# 1547 "../btcore/inc/me.h"
BtStatus ME_SetChannelClassification(BtChannelClass *channelClass, unsigned char autoMode);

void MeChangePacketType(BtRemoteDevice *remDev);

void MeReadRemoteSupportedFeature(BtRemoteDevice *remDev);

void MeReadRemoteSupportedExtFeature(BtRemoteDevice *remDev);

void MeReadRemoteVersion(BtRemoteDevice *remDev);

void MeReadRemoteClockOffset(BtRemoteDevice *remDev);
# 1585 "../btcore/inc/me.h"
BtStatus ME_MarkAfhChannels(BtChannelClass *channelClass, kal_uint8 begin, kal_uint8 count, unsigned char state, unsigned char initialize);
# 1611 "../btcore/inc/me.h"
BtStatus ME_MarkWiFiChannel(BtChannelClass *channelClass, kal_uint8 wifiChannel, unsigned char state, unsigned char initialize);
# 1641 "../btcore/inc/me.h"
BtStatus ME_RadioInit(void);
# 1664 "../btcore/inc/me.h"
BtStatus ME_RadioShutdown(void);
BtStatus ME_RadioShutdownTime(TimeT time);

BtStatus ME_ReadWifiRSSI(BtRemoteDevice *remDev);
BtStatus ME_SetRangeRequest(kal_uint8 high_range, kal_uint8 low_range);







void Me_ChangeLinkPolicy(BtRemoteDevice *remDev, BtEnableOption roleSwitch, BtEnableOption sniff);
kal_uint32 ME_IsMtkBTChip(BtRemoteDevice *remDev);


BtDevType ME_GetDeviceType(BD_ADDR *BdAddr);
BtConnType ME_GetConnType(BtRemoteDevice *remDev);
BtStatus ME_LE_SetAccessible(BtAccessibleMode mode, BtLEAdvParm *parm);
BtStatus ME_LE_Inquiry(void);
BtStatus ME_LE_CancelInquiry(void);
BtStatus ME_LE_CreateLink(BtHandler *handler, BD_ADDR *bdAddr, BtLELinkParm *parm, BtRemoteDevice **remDevice);
BtStatus ME_LE_DiscLink(BtHandler *handler, BD_ADDR *bdAddr, BtErrorCode reason);
BtStatus ME_LE_ForceDiscLink(BtHandler *handler, BD_ADDR *bdAddr, BtErrorCode reason);

BtStatus ME_LE_EncryptLink(BtRemoteDevice *remDev, BtLEEncParm *parm);
BtStatus ME_LE_SignData(BtCallBack callback, BD_ADDR *bdAddr, kal_uint8 *buf, kal_uint32 bufLen, kal_uint32 dataLen);
BtStatus ME_LE_VerifySignedData(BtCallBack callback, BD_ADDR *bdAddr, kal_uint8 *buf, kal_uint32 dataLen);



BtStatus ME_IsSSPSupported(BtRemoteDevice *remDev);


BtStatus ME_CancelBonding(BtRemoteDevice *remDev);
# 70 "../btcore/inc/sys/mei.h" 2
# 1 "../btcore/inc/sec.h" 1
# 67 "../btcore/inc/sec.h"
# 1 "../btcore/inc/sec_adp.h" 1
# 91 "../btcore/inc/sec_adp.h"
typedef kal_uint8 BtPairingType;
# 106 "../btcore/inc/sec_adp.h"
typedef kal_uint8 BtSecurityLevel;
# 127 "../btcore/inc/sec_adp.h"
typedef kal_uint8 BtEncryptMode;
# 137 "../btcore/inc/sec_adp.h"
typedef kal_uint8 BtSecurityMode;
# 158 "../btcore/inc/sec_adp.h"
typedef struct _BtSecurityRecord
{
    ListEntry node;


    BtProtocolId id;
    kal_uint32 channel;
    BtSecurityLevel level;
    kal_uint8 level_type;

} BtSecurityRecord;







typedef struct _BtSecurityToken
{
    ListEntry node;





    BtProtocolId id;


    BtRemoteDevice *remDev;






    kal_uint32 channel;






    unsigned char incoming;


    BtEventType result;
    BtSecurityRecord *record;
    BtSecurityLevel level;
    EvmTimer timer;
} BtSecurityToken;
# 68 "../btcore/inc/sec.h" 2
# 113 "../btcore/inc/sec.h"
BtHandler *SEC_RegisterPairingHandler(BtHandler *handler);
# 144 "../btcore/inc/sec.h"
BtHandler *SEC_RegisterAuthorizeHandler(BtHandler *handler);
# 177 "../btcore/inc/sec.h"
BtStatus SEC_AccessRequest(BtSecurityToken *token);
# 194 "../btcore/inc/sec.h"
BtStatus SEC_CancelAccessRequest(BtSecurityToken *token);
# 217 "../btcore/inc/sec.h"
BtStatus SEC_Register(BtSecurityRecord *sr);
BtStatus SEC_RegisterRecord(BtSecurityRecord *sr);
# 234 "../btcore/inc/sec.h"
BtStatus SEC_Unregister(BtSecurityRecord *sr);
# 277 "../btcore/inc/sec.h"
BtStatus SEC_Authorize(BtRemoteDevice *rm, unsigned char isAuthorized, unsigned char futureTrust);
# 319 "../btcore/inc/sec.h"
BtStatus SEC_AuthorizeService(BtRemoteDevice *rm, unsigned char isAuthorized);




BtStatus SEC_AuthorizeServiceB(BtRemoteDevice *rm, unsigned char isAuthorized, unsigned char futureTrust, unsigned char authService);
# 340 "../btcore/inc/sec.h"
BtSecurityRecord *SEC_GetSecurityRecord(BtRemoteDevice *rm);
# 382 "../btcore/inc/sec.h"
BtStatus SEC_SetPin(BtRemoteDevice *rm, const kal_uint8 *pin, kal_uint8 len, BtPairingType type);
BtStatus SEC_SetPinByAddr(BD_ADDR addr, const kal_uint8 *pin, kal_uint8 len, BtPairingType type);


BtStatus SEC_PasskeyEntry(BD_ADDR addr, unsigned char accept, kal_uint32 passkey);
BtStatus SEC_SetIoCapabilityByAddr(BD_ADDR addr, kal_uint8 auth_required, unsigned char accept);
BtStatus SEC_SetUserConfirmByAddr(BD_ADDR addr, unsigned char userConfirm);
BtStatus SEC_SetOobData(BD_ADDR addr, unsigned char userConfirm, kal_uint8 *c, kal_uint8 *r);
# 441 "../btcore/inc/sec.h"
BtStatus SEC_AuthenticateLink(BtHandler *handler, BtRemoteDevice *remDev);
# 498 "../btcore/inc/sec.h"
BtStatus SEC_SetLinkEncryption(BtHandler *handler, BtRemoteDevice *remDev, BtEncryptMode mode);
# 561 "../btcore/inc/sec.h"
BtStatus SEC_EnableSecurityMode3(BtHandler *handler, unsigned char encryption);
# 606 "../btcore/inc/sec.h"
BtStatus SEC_DisableSecurityMode3(BtHandler *handler);
# 625 "../btcore/inc/sec.h"
BtStatus SEC_DeleteDeviceRecord(const BD_ADDR *bdAddr);
# 649 "../btcore/inc/sec.h"
BtStatus SEC_AddDeviceRecord(const BtDeviceRecord *record);
# 670 "../btcore/inc/sec.h"
BtStatus SEC_FindDeviceRecord(const BD_ADDR *bdAddr, BtDeviceRecord *record);
# 698 "../btcore/inc/sec.h"
BtStatus SEC_EnumDeviceRecords(unsigned short i, BtDeviceRecord *record);
# 71 "../btcore/inc/sys/mei.h" 2
# 1 "../btcore/inc/sys/mexp.h" 1
# 82 "../btcore/inc/sys/mexp.h"
unsigned char ME_Init(void);
# 94 "../btcore/inc/sys/mexp.h"
void ME_Deinit(void);
# 72 "../btcore/inc/sys/mei.h" 2

# 1 "../btcore/inc/hcitrans.h" 1
# 68 "../btcore/inc/hcitrans.h"
# 1 "../btcore/inc/sys/hci.h" 1
# 69 "../btcore/inc/hcitrans.h" 2
# 114 "../btcore/inc/hcitrans.h"
typedef HciBuffer *RxBuffHandle;
# 126 "../btcore/inc/hcitrans.h"
typedef HciHandle HciConnHandle;
# 137 "../btcore/inc/hcitrans.h"
typedef kal_uint8 HciBufFlags;
# 152 "../btcore/inc/hcitrans.h"
typedef BtStatus(*HciGetRxBufferFunc) (RxBuffHandle *rxBuffHandle, HciConnHandle hciConnHandle, kal_uint16 len, kal_uint8 type);
# 161 "../btcore/inc/hcitrans.h"
typedef BtStatus(*HciSetRxBufferLenFunc) (RxBuffHandle rxBuffHandle, kal_uint16 len);
# 170 "../btcore/inc/hcitrans.h"
typedef void (*HciRxBufferIndFunc) (RxBuffHandle rxBuffhandle, BtStatus status);
# 179 "../btcore/inc/hcitrans.h"
typedef void (*HciPacketSentFunc) (HciPacket *packet);
# 188 "../btcore/inc/hcitrans.h"
typedef void (*HciTransportErrorFunc) (void);
# 198 "../btcore/inc/hcitrans.h"
typedef void (*TranSendDataFunc) (HciPacket *packet);

typedef void (*TranReSendDataFunc) (void);
# 210 "../btcore/inc/hcitrans.h"
typedef void (*TranBufferAvailFunc) (HciBufFlags buffType);
# 219 "../btcore/inc/hcitrans.h"
typedef void (*TranSetSpeedFunc) (kal_uint16 speed);
# 231 "../btcore/inc/hcitrans.h"
typedef kal_uint8 TranEvent;
# 257 "../btcore/inc/hcitrans.h"
typedef void (*TranCallback) (TranEvent Event, BtStatus Status);
# 269 "../btcore/inc/hcitrans.h"
typedef kal_uint8 RadioEvent;
# 302 "../btcore/inc/hcitrans.h"
typedef void (*RadioCallback) (RadioEvent Event, BtStatus Status);
# 317 "../btcore/inc/hcitrans.h"
typedef struct _HciFragment
{
    const kal_uint8 *buffer;
    kal_uint16 len;
} HciFragment;
# 340 "../btcore/inc/hcitrans.h"
struct _HciPacket
{
    ListEntry node;

    kal_uint8 header[4];






    kal_uint8 fCount;




    HciFragment f[4];
    kal_uint8 hciConEntryindex;
    kal_uint8 *txCounter;




    kal_uint8 controllerType;

    HciBufFlags flags;
};
# 376 "../btcore/inc/hcitrans.h"
typedef struct _TranEntry
{
    TranSendDataFunc sendData;




    TranBufferAvailFunc buffAvail;




    TranSetSpeedFunc setSpeed;



    TranReSendDataFunc reSendData;

    TranSendDataFunc sendAMPData;




} TranEntry;
# 409 "../btcore/inc/hcitrans.h"
# 1 "../btcore/inc/sys/host.h" 1
# 70 "../btcore/inc/sys/host.h"
# 1 "../btcore/inc/eventmgr.h" 1
# 71 "../btcore/inc/sys/host.h" 2
# 1 "../btcore/inc/sys/hci.h" 1
# 72 "../btcore/inc/sys/host.h" 2
# 1 "../btcore/inc/sys/rxbuff.h" 1
# 67 "../btcore/inc/sys/rxbuff.h"
# 1 "../btcore/inc/hcitrans.h" 1
# 68 "../btcore/inc/sys/rxbuff.h" 2
# 138 "../btcore/inc/sys/rxbuff.h"
typedef struct _BtRxbuffContext
{



    ListEntry rxSCOFreeList;

    ListEntry rxACLFreeList;
    ListEntry rxEvtFreeList;



    HciBuffer rxSCOBuffers[8];

    HciBuffer rxACLBuffers[12];
    HciBuffer rxEvtBuffers[8];



    kal_uint8 rxSCOBuffer[8 *(255 + 4)];

    kal_uint8 rxACLBuffer[12 *(1500 + 4)];
    kal_uint8 rxEvtBuffer[8 *257];

} BtRxbuffContext;
# 171 "../btcore/inc/sys/rxbuff.h"
BtStatus RXBUFF_Init(void);
void RXBUFF_Deinit(void);
BtStatus RXBUFF_Alloc(RxBuffHandle *rxBuffhandle, HciConnHandle hciConnHandle, kal_uint16 len, kal_uint8 type);
void RXBUFF_Free(RxBuffHandle rxBuffhandle);
BtStatus RXBUFF_SetLength(RxBuffHandle rxBuffHandle, kal_uint16 len);
# 73 "../btcore/inc/sys/host.h" 2
# 1 "../btcore/inc/btconfig.h" 1
# 74 "../btcore/inc/sys/host.h" 2

# 1 "../btcore/inc/prescan.h" 1
# 104 "../btcore/inc/prescan.h"
# 1 "../btcore/inc/sys/evmxp.h" 1
# 66 "../btcore/inc/sys/evmxp.h"
# 1 "../btcore/inc/osapi.h" 1
# 67 "../btcore/inc/sys/evmxp.h" 2
# 105 "../btcore/inc/prescan.h" 2
# 76 "../btcore/inc/sys/host.h" 2
# 104 "../btcore/inc/sys/host.h"
typedef kal_uint8 HciConFlags;
# 124 "../btcore/inc/sys/host.h"
typedef struct _HciConnection
{
    HciHandle hciHandle;
    HciConFlags conFlags;


    ListEntry btPacketList;
    BtPacket *btPacket;
    kal_uint16 remaining;
    kal_uint16 fragRemain;
    const kal_uint8 *buffPtr;
    kal_uint8 txState;
    kal_uint8 flowControl;

    kal_uint16 packetsSent;
    kal_uint8 ampTxFailed;


    kal_uint16 packetsComplete;


} HciConnection;

typedef struct _BtHciWifiController
{
    kal_uint8 controllerId;
    kal_uint16 maxACLTxDataLength;
    kal_uint16 maxDataBlockLength;
    kal_uint16 numOfDataBlockbuffer;
    kal_uint8 ampTxPacketsSent;
}BtHciWifiController;


typedef struct _BtHciContext
{


    ListEntry rxBuffList;
    ListEntry sentPacketList;
    ListEntry commandList;
    ListEntry deferredList;
    ListEntry sentCommandList;
    ListEntry hciPacketPool;
    ListEntry metaTxDataList;
    ListEntry metaTxQueueList;
    unsigned char metaMode;
    kal_uint16 metaTxCounter;
    kal_uint16 metaTxSentCounter;
    kal_uint16 metaTxRealSentCounter;
    kal_uint32 metaTxTimerCounter;
    kal_uint8 *metaTxDataBuffer;

    HciPacket hciPackets[20 + 1];
    BtPacket metaPackets[(0x03)];
    kal_uint16 hciPacketsLeft;
    kal_uint16 aclTxPacketLen;
    kal_uint16 aclTxPacketsLeft;
    kal_uint8 scoTxPacketLen;
    kal_uint16 scoTxPacketsLeft;

    kal_uint16 aclRxPacketsLeft;




    kal_uint16 maxAclTxPacketsLeft;




    HciCommand cmd;


    kal_uint8 maxCommands;


    HciConnection con[(3 + (1) + 2)];
    HciConnection ampCon[(12)];
    kal_uint16 activeAclCons;
    kal_uint16 txCon;


    kal_uint8 state;
    kal_uint8 flags;
    kal_uint8 conReqs;
    kal_uint8 transportError;

    kal_uint8 reset_received;

    kal_uint8 FactoryMode;




    HciHandle piconetBcHandle;
    HciHandle activeBcHandle;






    EvmTimer resetTimer;
    EvmTimer retryTimer;



    EvmTimer wifisettingTimer;


    TranEntry tranEntry;


    RadioHandlerCallback radioEntry;

    BtHciWifiController wifiController;




} BtHciContext;






void HciTransportError(void);
void HciTransportError1(kal_uint8 index);
void HciTransportReset(void);
void Hci_ReturnOneNoneSentACL(void);

void HciBufferInd(HciBuffer *buffer, BtStatus status);
void HciPacketSent(HciPacket *packet);
BtStatus HciSendCommand(kal_uint16 opCode, kal_uint8 parmLen, HciCommand *cmd, unsigned char internal, unsigned char insertTail);


kal_uint16 HciGetTableEntry(HciHandle hciHandle);
HciHandle HciAddConnection(HciHandle hciHandle, kal_uint8 linkType);
BtStatus HciDeleteConnection(HciHandle hciHandle);
void HciSetNewBcHandle(HciHandle *handle);
kal_uint8 HCI_GetState(void);




void HciProcessEvent(HciBuffer *hciBuffer);


void HciInitPrescan(void);
# 410 "../btcore/inc/hcitrans.h" 2
# 431 "../btcore/inc/hcitrans.h"
BtStatus HCI_RegisterTransport(TranEntry *tranEntry);
# 446 "../btcore/inc/hcitrans.h"
void HCI_DeregisterTransport(void);
# 478 "../btcore/inc/hcitrans.h"
BtStatus HCI_GetAclBuffer(RxBuffHandle *rxBuffHandle, HciConnHandle hciConnHandle, kal_uint16 len);
# 510 "../btcore/inc/hcitrans.h"
BtStatus HCI_GetScoBuffer(RxBuffHandle *rxBuffHandle, HciConnHandle hciConnHandle, kal_uint16 len);
# 539 "../btcore/inc/hcitrans.h"
BtStatus HCI_GetEventBuffer(RxBuffHandle *rxBuffHandle, kal_uint16 len);
# 569 "../btcore/inc/hcitrans.h"
BtStatus HCI_SetBufferLen(RxBuffHandle rxBuffHandle, kal_uint16 len);
# 584 "../btcore/inc/hcitrans.h"
kal_uint8 *HCI_GetRxPtr(RxBuffHandle rxBuffHandle);
# 613 "../btcore/inc/hcitrans.h"
void HCI_RxBufferInd(RxBuffHandle rxBuffHandle, BtStatus status);
# 630 "../btcore/inc/hcitrans.h"
void HCI_PacketSent(HciPacket *packet);
# 645 "../btcore/inc/hcitrans.h"
void HCI_TransportError(void);


void HCI_TransportReset(void);



void HciReturnOneNoneSentACL(kal_uint8 hciConEntryIndex);
void HciReturnAMPWifiOneNoneSentACL(kal_uint8 hciConEntryIndex);

void HCI_ReturnOneNoneSentACL(kal_uint8 hciConEntryIndex);
# 690 "../btcore/inc/hcitrans.h"
BtStatus TRAN_Init(TranCallback tranCallback);
# 713 "../btcore/inc/hcitrans.h"
BtStatus TRAN_Shutdown(void);
# 732 "../btcore/inc/hcitrans.h"
void TRAN_SendData(HciPacket *packet);
# 751 "../btcore/inc/hcitrans.h"
void TRAN_BufferAvailable(HciBufFlags buffType);
# 770 "../btcore/inc/hcitrans.h"
void TRAN_SetSpeed(kal_uint16 speed);
# 799 "../btcore/inc/hcitrans.h"
void TRAN_StartTimer(EvmTimer *timer, TimeT ms);
# 814 "../btcore/inc/hcitrans.h"
void TRAN_CancelTimer(EvmTimer *timer);
# 838 "../btcore/inc/hcitrans.h"
void HCI_SetSpeed(kal_uint16 Speed);
# 895 "../btcore/inc/hcitrans.h"
BtStatus RADIO_Init(RadioCallback Callback);
# 919 "../btcore/inc/hcitrans.h"
BtStatus RADIO_Shutdown(void);
# 941 "../btcore/inc/hcitrans.h"
void RADIO_EventHandler(HciEventType Event, HciCallbackParms *Parms);

void Radio_wakeupEventHandler(HciEventType Event, HciCallbackParms *Parms);
void Radio_hostWakeup(void);
void Radio_hostWakedup(void);
void Radio_hostSleep(void);
# 74 "../btcore/inc/sys/mei.h" 2

# 1 "../btcore/inc/sys/l2capxp.h" 1
# 81 "../btcore/inc/sys/l2capxp.h"
BtStatus L2CAP_Init(void);
# 92 "../btcore/inc/sys/l2capxp.h"
void L2CAP_Deinit(void);
# 103 "../btcore/inc/sys/l2capxp.h"
void L2CAP_HciReceive(const HciBuffer *BuffDesc, HciHandle HciHndl);
# 115 "../btcore/inc/sys/l2capxp.h"
BtPacket *L2CAP_HciTxReady(HciCallbackParms *parms, kal_uint8 controllerType);
# 126 "../btcore/inc/sys/l2capxp.h"
void L2CAP_HciTxDone(BtPacket *Packet, BtStatus Status, HciHandle HciHndl);
# 137 "../btcore/inc/sys/l2capxp.h"
void L2CAP_LinkDisconnect(BtRemoteDevice *remDev);
# 76 "../btcore/inc/sys/mei.h" 2



# 1 "../btcore/inc/mesco.h" 1
# 67 "../btcore/inc/mesco.h"
# 1 "../btcore/inc/mesco_adp.h" 1
# 100 "../btcore/inc/mesco_adp.h"
typedef kal_uint16 BtScoPacketType;
# 116 "../btcore/inc/mesco_adp.h"
typedef kal_uint16 BtEscoPktType;
# 187 "../btcore/inc/mesco_adp.h"
struct _BtScoTxParms
{
    kal_uint32 transmitBandwidth;
    kal_uint32 receiveBandwidth;
    kal_uint16 maxLatency;
    kal_uint16 voiceSetting;
    kal_uint8 retransmissionEffort;
    BtEscoPktType eScoPktType;

    kal_uint8 isExtendedSco;
    BtEnhancedScoAudioSettings extScoSettings;
};




struct _BtScoRxParms
{
    kal_uint8 scoTransmissionInterval;
    kal_uint8 scoRetransmissionWindow;
    kal_uint16 scoRxPacketLen;
    kal_uint16 scoTxPacketLen;

};







struct _BtScoConnect
{

    BtOperation scoop;
    ListEntry node;
    BtRemDevState scostate;
    kal_uint16 scoHciHandle;



    BtRemoteDevice *scord;



    BtLinkType scoLinkType;

    BtScoPacketType scopt;

    kal_uint8 scoRejectReason;


    BtScoTxParms scoTxParms;
    BtScoRxParms scoRxParms;
};
# 68 "../btcore/inc/mesco.h" 2
# 111 "../btcore/inc/mesco.h"
BtStatus SCO_CreateLink(BtScoConnect **scocon, BtRemoteDevice *remDev, BtScoPacketType types);
# 153 "../btcore/inc/mesco.h"
BtStatus SCO_SetupLink(BtScoConnect **scocon, BtRemoteDevice *remDevice, BtScoTxParms *scoTxParms);
# 179 "../btcore/inc/mesco.h"
BtStatus SCO_DisconnectLink(BtScoConnect *scocon);
# 233 "../btcore/inc/mesco.h"
BtStatus SCO_RegisterHandler(BtRemoteDevice *remDev, BtHandler *handler);
# 254 "../btcore/inc/mesco.h"
BtStatus SCO_UnregisterHandler(BtRemoteDevice *remDev, BtHandler *handler);
# 286 "../btcore/inc/mesco.h"
BtStatus SCO_AcceptIncomingConnection(BtScoConnect *scoCon, BtHandler *handler);
# 308 "../btcore/inc/mesco.h"
BtStatus SCO_RejectIncomingConnection(BtScoConnect *scoCon, BtHandler *handler, BtErrorCode reason);
# 80 "../btcore/inc/sys/mei.h" 2


# 1 "../btcore/inc/medev.h" 1
# 67 "../btcore/inc/medev.h"
# 1 "../btcore/inc/medev_adp.h" 1
# 68 "../btcore/inc/medev_adp.h"
# 1 "../btcore/inc/sdp_adp.h" 1
# 69 "../btcore/inc/sdp_adp.h"
# 1 "../btcore/inc/attdef.h" 1
# 222 "../btcore/inc/attdef.h"
typedef enum
{
    ATT_OP_BROADCAST,
    ATT_OP_READ,
    ATT_OP_WRITE_WO_RESPONSE,
    ATT_OP_WRITE,
    ATT_OP_NOTIFY,
    ATT_OP_INDICATE,
    ATT_OP_SIGNED_WRITE
} bt_att_op;

typedef enum
{
    GATT_CHAR_PROP_BROADCAST = 0x01,
    GATT_CHAR_PROP_READ = 0x02,
    GATT_CHAR_PROP_WRITE_WO_RESPONSE = 0x04,
    GATT_CHAR_PROP_WRITE = 0x08,
    GATT_CHAR_PROP_NOTIFY = 0x10,
    GATT_CHAR_PROP_INDICATE = 0x20,
    GATT_CHAR_PROP_SIGNED_WRITE = 0x40,
    GATT_EXT_PROP = 0x80
} bt_gatt_char_properties;
# 339 "../btcore/inc/attdef.h"
typedef kal_uint8 (*AttdbCallback) (kal_uint8 type, BtRemoteDevice *link, kal_uint16 *len, kal_uint8 **raw);

typedef void (*AttBondCallback) (kal_uint8 type, const kal_uint8 *bd_addr);


typedef struct _BtBleBondCbHandler
{
    ListEntry node;
    AttBondCallback callback;
} BtBleBondCbHandler;
# 70 "../btcore/inc/sdp_adp.h" 2
# 102 "../btcore/inc/sdp_adp.h"
typedef kal_uint8 SdpParsingMode;
# 140 "../btcore/inc/sdp_adp.h"
typedef kal_uint8 SdpQueryMode;
# 175 "../btcore/inc/sdp_adp.h"
typedef kal_uint8 SdpQueryType;
# 319 "../btcore/inc/sdp_adp.h"
typedef kal_uint16 SdpErrorCode;
# 344 "../btcore/inc/sdp_adp.h"
typedef kal_uint8 SdpDataElemType;
# 419 "../btcore/inc/sdp_adp.h"
typedef kal_uint8 SdpDataElemSize;
# 462 "../btcore/inc/sdp_adp.h"
typedef kal_uint16 SdpAttributeId;
# 652 "../btcore/inc/sdp_adp.h"
typedef kal_uint16 SdpServiceClassUuid;
# 903 "../btcore/inc/sdp_adp.h"
typedef kal_uint16 SdpProtocolUuid;
# 998 "../btcore/inc/sdp_adp.h"
typedef struct _SdpClientParsingStateInfo
{
    kal_uint8 state;

    kal_uint16 attribByteCount;
    kal_uint32 attribListLen;
    kal_uint16 attribId;
    kal_uint32 attribIdLen;
    kal_uint32 attribSkipLen;
    kal_uint32 resultValueLen;

    kal_uint8 storedBuff[17];
    kal_uint8 storedLen;
    kal_uint8 curStoredOff;

    kal_uint8 flags;
} SdpClientParsingStateInfo;
# 1027 "../btcore/inc/sdp_adp.h"
typedef struct _SdpQueryToken
{
    ListEntry node;





    BtRemoteDevice *rm;





    SdpQueryType type;

    const kal_uint8 *parms;





    kal_uint16 plen;

    BtCallBack callback;
# 1061 "../btcore/inc/sdp_adp.h"
    kal_uint8 *contState;

    kal_uint8 contStateLen;
# 1075 "../btcore/inc/sdp_adp.h"
    SdpErrorCode errorCode;
# 1085 "../btcore/inc/sdp_adp.h"
    kal_uint8 *results;

    kal_uint16 rLen;






    SdpAttributeId attribId;
    kal_uint16 uuid;
    SdpParsingMode mode;
# 1109 "../btcore/inc/sdp_adp.h"
    kal_uint32 totalValueLen;
    kal_uint16 availValueLen;
    kal_uint8 *valueBuff;






    kal_uint8 *remainBuff;
    kal_uint16 remainLen;


    SdpClientParsingStateInfo parseData;



    kal_uint16 transId;

} SdpQueryToken;
# 1139 "../btcore/inc/sdp_adp.h"
typedef struct _SdpAttribute
{
    SdpAttributeId id;

    kal_uint16 len;

    const kal_uint8 *value;







    kal_uint16 flags;

} SdpAttribute;







typedef struct _SdpRecord
{
    ListEntry node;

    kal_uint8 num;
# 1178 "../btcore/inc/sdp_adp.h"
    SdpAttribute *attribs;





    BtClassOfDevice classOfDevice;


    kal_uint32 handle;
    kal_uint32 recordState;
    kal_uint16 flags;
    kal_uint16 handleFlag;
    kal_uint16 stateFlag;

} SdpRecord;
# 69 "../btcore/inc/medev_adp.h" 2
# 100 "../btcore/inc/medev_adp.h"
typedef enum
{
    BDS_NONE = 0x00,
    BDS_BONDING = 0x01,
    BDS_CONNECTING = 0x02,
    BDS_NAME_REQESTING = 0x04
}BtDeviceStatus;
# 117 "../btcore/inc/medev_adp.h"
typedef kal_uint8 BtDeviceQualityMask;
# 145 "../btcore/inc/medev_adp.h"
struct _BtDeviceContext
{
    ListEntry node;





    BD_ADDR addr;





    BtPageScanInfo psi;





    BtClassOfDevice classOfDevice;
# 176 "../btcore/inc/medev_adp.h"
    BtRemoteDevice *link;
    BtDeviceStatus under_used;






    void *context;

    kal_uint8 rssi;
    kal_uint8 support_eir;
    kal_uint8 support_service_list;
    kal_uint8 device_name_length;
    kal_uint8 *device_name;
    kal_uint32 eir_response[6];


    kal_uint8 gapKeyType;


    BtDevType devType;
    LeAddrType addrType;
    LeAdFlags adFlag;


    ListEntry active;

} ;
# 213 "../btcore/inc/medev_adp.h"
typedef struct _BtSelectDeviceToken
{
    ListEntry node;





    BtCallBack callback;






    BtDeviceContext *result;


    kal_uint8 state;

} BtSelectDeviceToken;
# 68 "../btcore/inc/medev.h" 2






kal_uint8 DS_GetDDBNumber(void);
# 101 "../btcore/inc/medev.h"
BtStatus DS_AddDevice(const BtDeviceContext *tmplt, BtDeviceContext **newDevice);
# 121 "../btcore/inc/medev.h"
BtStatus DS_DeleteDevice(const BD_ADDR *addr);
# 147 "../btcore/inc/medev.h"
BtStatus DS_EnumDeviceList(BtDeviceContext **lastDevice);
# 160 "../btcore/inc/medev.h"
BtDeviceContext *DS_FindDevice(const BD_ADDR *addr);
# 83 "../btcore/inc/sys/mei.h" 2
# 95 "../btcore/inc/sys/mei.h"
typedef kal_uint16 BtOpMask;
# 164 "../btcore/inc/sys/mei.h"
typedef kal_uint8 BtSecurityModeState;
# 203 "../btcore/inc/sys/mei.h"
typedef void (*MeTaskHandler) (kal_uint8 event, kal_uint8 len, kal_uint8 *data);






typedef void (*MeOpHandler) (BtOpEvent event);
# 222 "../btcore/inc/sys/mei.h"
typedef struct
{
    BtOperation op;
    BtIac lap;
    kal_uint8 len;
    kal_uint8 max;
} BtInquiryOp;





typedef struct
{
    BtOperation op;
    char pwr;
} BtInquiryTxPwrOp;





typedef struct
{
    BtOperation op;
    BtAccessibleMode mode;
} BtScanOp;





typedef struct
{
    BtOperation op;
    BtRemoteDevice *remDev;
    BD_ADDR bdAddr;
    kal_uint8 pin[16];

    unsigned char userConfirm;
    kal_uint8 c[16];
    kal_uint8 r[16];


    union
    {
        kal_uint8 pLen;
        BtEncryptMode eMode;

        unsigned char ioCapability;

        struct
        {
            BtSecurityMode mode;
            unsigned char encrypt;
        } secMode;
    } x;

} BtSecurityOp;
# 296 "../btcore/inc/sys/mei.h"
typedef struct
{
    BtOperation op;
    BD_ADDR bdAddr;
    kal_uint8 rejectReason;
} BtConRejectOp;







typedef struct
{
    ListEntry regList;
    ListEntry opList;
    ListEntry secList;
    ListEntry cmdList;
    ListEntry pendList;
    BtEvent btEvent;
    BtOpMask opMask;

    BtOperation *curOp;

    HciCommand hciGenCmd;
    MeTaskHandler taskHandler;
    kal_uint8 taskEvent;
    MeOpHandler opHandler;

    BtHandler *authorizeHandler;
    BtHandler *secModeHandler;


    BtHandler *pairingHandler;


    BtHandler *acceptHandler;
    kal_uint32 command_tick;
    kal_uint8 stackState;
    kal_uint8 opState;
    kal_uint8 taskState;
    kal_uint16 conn_acceptable_timeout;

    BtScoConnect scoTable[(1)];
    BtScoAudioSettings vSettings;

    EvmTimer encryptChipTimer;
    kal_uint8 *BT_Key;

    BtRemoteDevice devTable[3];

    BtOperation readDataBlockSize;
    BtDisconnectAMPCommand disconnectAMPCommand[3];

    BtSecurityOp secOpTable[3];
    kal_uint8 *hciTable;
    kal_uint8 rxBuffTable[3][1480 + 6 + 0];



    ListEntry deviceList;
    ListEntry btDeviceFreeList;
    BtDeviceContext btDevices[30];
    BtHandler *dsMonitor;
    kal_uint8 allocated_number;

    kal_uint8 *BT_Sres1;
    BtConRejectOp rejectOp;

    kal_uint8 pendCons;
    kal_uint8 activeCons;
    kal_uint8 inHoldCons;
    kal_uint8 holdCons;
    kal_uint8 *BT_Sres2;


    unsigned char isLiac;
    BtAccessibleMode accModeCur;
    BtAccessibleMode accModeExpValue;
    kal_uint8 *BT_Rand;

    BtInquiryOp inquiryOp;
    BtInquiryTxPwrOp inquiryTxPwrOp;
    BtScanOp writeScanModeOp;
    BtScanOp writeIacOp;
    BtOperation codOp;
    BtOperation afhOp;
    BtOperation pta1Op;
    BtOperation pta2Op;
    BtOperation ptaInfoOp;
    BtOperation changeUartSpeedOp;
    BtOperation setRxRangeOp;





    kal_uint8 changedUartSpeed;
    BtOperation nameOp;
    BtOperation policyOp;
    BtOperation channelOp;
    BtOperation loopbackOp;
    BtOperation authenChipOp;
    BtOperation encrypChipOp;
    kal_uint8 *BT_Keyaddr;
    BtOperation eventmaskOp;




    BtSecurityModeState secModeState;
    kal_uint8 secLevel;
    unsigned char secModeEncrypt;

    BtClassOfDevice classOfDevice;
    BtClassOfDevice sdpServCoD;
    BtClassOfDevice writeCoD;

    kal_uint16 curTask;
    kal_uint8 *BT_KeyClk;
    BtLinkPolicy inAclPolicy;
    BtLinkPolicy outAclPolicy;


    kal_uint16 radioPageTimeout;
    BD_ADDR bdaddr;
    const kal_uint8 *localName;
    kal_uint8 localNameLen;
    kal_uint8 btVersion;
    kal_uint8 btFeatures[8];
    kal_uint8 btChipVer;
    kal_uint8 *BT_TempKey;
    kal_uint8 btLMPVer;
    EvmTimer timer;
    kal_uint16 pendingEvent;
    BtChannelClass channelClass;
    kal_uint8 autoMode;
    kal_uint8 loopbackMode;
    unsigned char commandPending;


    kal_uint8 eirRecordUpdated;
    BtEIRSdpRecord eirSdpCtx[30];
    BtOperation eirOp;


    kal_uint8 sspAuthenRequirements;

    kal_uint8 setWifiRxRangeHigh;
    kal_uint8 setWifiRxRangeLow;






    BtOperation sspDebugOp;
    kal_uint8 sspDebugMode;
# 470 "../btcore/inc/sys/mei.h"
} BtMeContext;
# 502 "../btcore/inc/sys/mei.h"
void MeStartOperation(void);

void MeOperationEnd(void);
void MeStartInquiry(BtInquiryOp *op);
void MeReportResults(BtEventMask mask);
void MeHandleCompleteTask(kal_uint8 event, kal_uint8 len, kal_uint8 *parm);
BtRemoteDevice *MeGetFreeRemoteDevice(void);
void MeFreeRemoteDevice(BtRemoteDevice *remDev);
void MeHandleLinkConnectOp(BtOpEvent event);
void MeHandleConnectionStatusOnly(kal_uint8 event, kal_uint8 len, kal_uint8 *parm);
void MeCallLinkHandlers(BtRemoteDevice *remDev, BtEvent *event);
unsigned char MeHandleEvents(kal_uint8 event, kal_uint8 len, kal_uint8 *parm);
void MeHandleLinkConnectReq(kal_uint8 len, kal_uint8 *parm);
void MeHandleLinkAcceptOp(BtOpEvent event);
void MeHandleConnectComplete(kal_uint8 len, kal_uint8 *parm);
void MeReportLinkUp(BtRemoteDevice *remDev, BtEventType eType);
BtRemoteDevice *MeMapHciToRemoteDevice(HciHandle hciHandle);
void MeDisconnectLink(BtRemoteDevice *remDev, kal_uint8 index);
void MeHandleDisconnectComplete(kal_uint8 len, kal_uint8 *parm);
void MeHandleLinkDisconnectOp(BtOpEvent event);
void MePendingCommandHandler(EvmTimer *timer);
void MeRemovePendingRemoteOperation(BtRemoteDevice *remDev);
void MeHandleWriteScanModeOp(BtOpEvent event);
void MeHandleWriteIacOp(BtOpEvent event);

BtSecurityOp *SecBtGetFreeSecurityOp(void);
BtSecurityOp *SecBtFindSecurityOp(BtRemoteDevice *remDev);



void SecHandleLinkKeyReq(kal_uint8 len, kal_uint8 *parm);
void SecHandlePinCodeReq(kal_uint8 len, kal_uint8 *parm);
void SecHandleAuthenticateOp(BtOpEvent event);
void SecHandleLinkKeyRspOp(BtOpEvent event);
void SecHandlePinCodeRspOp(BtOpEvent event);
void SecHandlePinCodeByAddrRspOp(BtOpEvent event);


void SecHandleIoCapabilityAddrRspOp(BtOpEvent event);
void SecHandleUserConfirmByAddrRspOp(BtOpEvent event);
void SecHandleDeleteStoredLinkKeyOp(BtOpEvent event);
void SecHandleUserOobDataRspOp(BtOpEvent event);


void SecHandleAuthenticateComplete(kal_uint8 len, kal_uint8 *parm);
void SecHandleLinkKeyNotify(kal_uint8 len, kal_uint8 *parm);
BtStatus SecAddAuthenticateOpToQueue(BtRemoteDevice *remDev);
BtStatus SecRemoveAuthenticateOpFromQueue(BtRemoteDevice *remDev);
BtStatus SecProcessSecurityToken(BtSecurityToken *token);


void SecAccessTimeoutHandler(EvmTimer *timer);

void SecHandleAuthorizeOp(BtOpEvent event);
void SecHandleAuthorizeRequest(BtRemoteDevice *remDev);
void SecHandleEncryptOp(BtOpEvent event);
void SecProcessAllSecurityTokens(BtRemoteDevice *remDev);
void SecHandleEncryptChange(kal_uint8 len, kal_uint8 *parm);
BtStatus SecSetSecurityMode(BtHandler *handler, BtSecurityMode mode, unsigned char encrypt);
BtStatus SecSetEncryptMode(BtHandler *handler, unsigned char encrypt);
void SecHandleSecurityModeOp(BtOpEvent event);
void SecReportAuthenticateResult(BtRemoteDevice *remDev);
void SecReportEncryptionResult(BtRemoteDevice *remDev, kal_uint8 mode);
void SecReportSecurityModeResult(void);


void SecHandleIoCapabilityRequest(kal_uint8 len, kal_uint8 *parm);
void SecHandleIoCapabilityResponse(kal_uint8 len, kal_uint8 *parm);
void SecHandleUserConfirmRequest(kal_uint8 len, kal_uint8 *parm);
void SecHandleUserPasskeyNotification(kal_uint8 len, kal_uint8 *parm);
void SecHandleUserKeyPress(kal_uint8 len, kal_uint8 *parm);
void SecHandleSimplePairingComplete(kal_uint8 len, kal_uint8 *parm);
void SecHandleRemoteOobDataRequest(kal_uint8 len, kal_uint8 *parm);






BtRemoteDevice *MeEnumerateRemoteDevices(unsigned short i);
void MeReportInqCancelComplete(void);
void MeHandleRemNameReqOp(BtOpEvent event);
MeCommandToken *MeFindMatchingToken(MeCommandToken *token, ListEntry *list);
void MeReportMeCommandComplete(MeCommandToken *token);
void MeHandleRemNameReqTimeoutNoRspCancelNameReq(EvmTimer *timer);
void MeHandleRemNameReqChipNoResponse(EvmTimer *timer);
void MeHandleRemNameReqComplete(kal_uint8 len, kal_uint8 *parm);
void MeProcessToken(MeCommandToken *token);
void MeHandleLinkRejectOp(BtOpEvent event);
void MeSuspendTransmitters(void);
void MeSuspendPacket(BtRemoteDevice * remDev, kal_uint32 time);
void MeRestartTransmitters(void);
void MeHandleHoldModeOp(BtOpEvent event);
void MeHandleModeChange(kal_uint8 len, kal_uint8 *parm);
void MeHandleSniffModeOp(BtOpEvent event);
void MeHandleParkModeOp(BtOpEvent event);
void MeHandleExitParkModeOp(BtOpEvent event);
void MeHandleExitSniffModeOp(BtOpEvent event);
void MeHandleSwitchRoleOp(BtOpEvent event);
void MeHandleRoleChange(kal_uint8 len, kal_uint8 *parm);
void MeHandleQoSSetupOp(BtOpEvent event);




void MeHandleReadWIFIRSSIOp(BtOpEvent event);
void MeHandleDiscoverRole(BtOpEvent event);
void MeHandleReadRemoteFeature(kal_uint8 len, kal_uint8 *parm);
void MeHandleReadRemoteExtFeature(kal_uint8 len, kal_uint8 *parm);
void MeHandleReadRemoteVersion(kal_uint8 len, kal_uint8 *parm);
void MeHandleReadRemoteClockOffset(kal_uint8 len, kal_uint8 *parm);


void MeHandleSupervisionTimeoutChange(kal_uint8 len, kal_uint8 *parm);



void MeHandleEnhancedFlush(kal_uint8 len, kal_uint8 *parm);


void MeWriteClassOfDevice(void);

void MeWriteSSPDebug(void);





void MeWriteDefaultLinkPolicy(void);
void MeWriteLocalName(void);

BtStatus ME_SendHciCommand(MeCommandToken *token);
MeCommandToken *MeFindGeneralEvent(BtOpEvent event, kal_uint8 *parm);
void MeProcessGenToken(MeCommandToken *token);
void MeReportNMResults(void);
void MeHandleWriteLinkPolicyOp(BtOpEvent event);
void MeHandleChangePacketTypeOp(BtOpEvent event);
void MeHandleWriteSupervisionTimeoutOp(BtOpEvent event);


void MeHandleWriteAutomaticallyFlushOp(BtOpEvent event);



void MeHandleWriteSniffSubratingOp(BtOpEvent event);



void MeHandleWriteEirOp(BtOpEvent event);


void MeHandleReadRemoteFeatureTypeOp(BtOpEvent event);
void MeHandleReadRemoteExtFeatureTypeOp(BtOpEvent event);
void MeHandleReadRemoteVersionTypeOp(BtOpEvent event);
void MeHandleReadRemoteClockOffsetTypeOp(BtOpEvent event);
void MeHandleCancelConnectOp(BtOpEvent event);
void MeHandleCancelRemNameOp(BtOpEvent event);
BtStatus MeCheckModeChange(BtRemoteDevice *remDev, BtOpType bop);
void MeHandleDataReqWhileNotActive(BtRemoteDevice *remDev);
kal_uint8 MeSetBits(kal_uint8 byte, kal_uint8 bit, kal_uint8 n, unsigned char state);




void MeDevEventHandler(void);
void MeDevInquiryStart(void);


void ScoHandleLinkAcceptOp(BtOpEvent event);
BtScoConnect *ScoMapHciToConnect(HciHandle hcihandle);
void MeScoDisconnectLink(BtScoConnect *scoConnect);
void ScoHandleLinkRejectOp(BtOpEvent event);
void ScoHandleVoiceSettingsOp(BtOpEvent event);
void ScoHandleConnectComplete(kal_uint8 len, kal_uint8 *parm);
void ScoHandleConnChanged(kal_uint8 len, kal_uint8 *parm);
void ScoHandleLinkSetupOp(BtOpEvent event);
void ScoHandleLinkDisconnectOp(BtOpEvent event);
unsigned char ScoHandleLinkConnectReq(kal_uint8 len, kal_uint8 *parm);
unsigned char ScoHandleDisconnectComplete(kal_uint8 len, kal_uint8 *parm);
void ScoHandleDisconnectAcl(BtRemoteDevice *remDev);
void ScoReportScoLinkUp(BtScoConnect *scocon, BtEventType evnt);
BtScoConnect *ScoGetFreeConnect(void);
# 693 "../btcore/inc/sys/mei.h"
kal_uint8 meUtilWriteEirName(kal_uint8 *buf, kal_uint8 bufLen, const kal_uint8 *name, kal_uint8 nameLen);

kal_uint8 meUtilWriteEirBLEServiceList(kal_uint8 *buf, kal_uint8 bufLen);
# 78 "../btadp_int/include/bt_adp_debug.h" 2
# 1 "../btcore/inc/sys/host.h" 1
# 79 "../btadp_int/include/bt_adp_debug.h" 2

# 1 "../btcore/inc/sys/radiomgi.h" 1
# 84 "../btcore/inc/sys/radiomgi.h"
typedef struct _BtRmgContext
{
    kal_uint8 retries;
    kal_uint8 rmState;
} BtRmgContext;
# 81 "../btadp_int/include/bt_adp_debug.h" 2
# 1 "../btcore/inc/sys/l2cap_i.h" 1
# 69 "../btcore/inc/sys/l2cap_i.h"
# 1 "../btcore/inc/l2cap.h" 1
# 67 "../btcore/inc/l2cap.h"
# 1 "../btcore/inc/l2cap_adp.h" 1
# 144 "../btcore/inc/l2cap_adp.h"
typedef kal_uint8 L2capEventType;
# 293 "../btcore/inc/l2cap_adp.h"
typedef kal_uint16 L2capDiscReason;
# 346 "../btcore/inc/l2cap_adp.h"
typedef kal_uint16 L2capConnStatus;
# 415 "../btcore/inc/l2cap_adp.h"
typedef kal_uint16 L2capPsmValue;
# 486 "../btcore/inc/l2cap_adp.h"
typedef kal_uint16 L2capInfoType;
# 500 "../btcore/inc/l2cap_adp.h"
typedef kal_uint16 L2capConfigFlags;
# 517 "../btcore/inc/l2cap_adp.h"
typedef kal_uint16 L2capConfigResult;
# 556 "../btcore/inc/l2cap_adp.h"
typedef kal_uint8 L2capConfigOption;
# 601 "../btcore/inc/l2cap_adp.h"
typedef kal_uint8 L2capQosServiceType;
# 635 "../btcore/inc/l2cap_adp.h"
typedef kal_uint8 L2capLinkMode;
# 667 "../btcore/inc/l2cap_adp.h"
typedef kal_uint16 L2capChannelId;
# 682 "../btcore/inc/l2cap_adp.h"
typedef kal_uint32 L2ExtendedFeatures;
# 726 "../btcore/inc/l2cap_adp.h"
typedef kal_uint32 L2FixChannelSupportedLSB;
typedef kal_uint32 L2FixChannelSupportedMSB;
# 738 "../btcore/inc/l2cap_adp.h"
typedef struct _L2capCallbackParms L2capCallbackParms;
# 751 "../btcore/inc/l2cap_adp.h"
typedef void (*L2capCallback) (L2capChannelId cid, L2capCallbackParms *Info);
# 768 "../btcore/inc/l2cap_adp.h"
typedef struct _L2capExtendedFlowSpecOption
{
    kal_uint8 identifier;
    kal_uint8 serviceType;
    kal_uint16 maxSduSize;
    kal_uint32 sduIntArrialTime;
    kal_uint32 accessLatency;
    kal_uint32 flushTimeout;
}L2capExtendedFlowSpecOption;
# 790 "../btcore/inc/l2cap_adp.h"
struct _L2capCallbackParms
{

    L2capEventType event;






    kal_uint16 status;


    BtRemoteDevice *aclLink;

    union
    {

        const struct _L2capPsm *psm;


        const struct _L2capGroup *group;
    } owner;


    kal_uint16 dataLen;

    union
    {




        BtPacket *packet;
# 833 "../btcore/inc/l2cap_adp.h"
        kal_uint8 *data;

        struct _ConfigInd
        {
            kal_uint8 ident;
            L2capConfigFlags flags;
            kal_uint8 *options;
            kal_uint16 optionsLen;
        } configInd;
# 853 "../btcore/inc/l2cap_adp.h"
            struct _LockStepConfigReq
            {
                L2capExtendedFlowSpecOption flowSpec;
            kal_uint8 createChannelnitiator;
            } lockstepConfigReq;

  struct _NotifyA2MPPsmConnected
  {
   kal_uint16 psm;
  } NotifyA2MPPsmConnected;

  struct _CreateChannelReq
  {
   kal_uint16 psm;
   kal_uint8 controllerId;
  } createChannelReq;

  struct _CreateChannelRsp
  {
   kal_uint16 result;
   kal_uint16 status;
  } createChannelRsp;

  struct _MoveChannelReq
  {
   kal_uint8 controllerId;
            kal_uint8 oldControllerId;
  } moveChannelReq;

  struct _MoveChannelRsp
  {
   kal_uint16 result;
            kal_uint8 controllerId;
  } moveChannelRsp;

  struct _MoveChannelCnfReq
  {
   kal_uint16 result;
  } moveChannelCnfReq;

  struct _NotifyL2CAPA2MPPDisconnected
  {
   kal_uint16 localCid;
  } NotifyL2CAPA2MPPDisconnected;

    } ptrs;
};
# 913 "../btcore/inc/l2cap_adp.h"
typedef struct _L2capPsm
{

    L2capCallback callback;


    L2capPsmValue psm;
    unsigned char authorizedSetting;
# 935 "../btcore/inc/l2cap_adp.h"
    kal_uint16 localMtu;





    kal_uint16 minRemoteMtu;


    kal_uint8 channelUsage;
# 962 "../btcore/inc/l2cap_adp.h"
    L2capLinkMode inLinkMode;


    L2capLinkMode outLinkMode;
# 974 "../btcore/inc/l2cap_adp.h"
    kal_uint8 inTransmitMax;
# 984 "../btcore/inc/l2cap_adp.h"
    kal_uint16 inRetransTimeout;
# 993 "../btcore/inc/l2cap_adp.h"
    kal_uint16 inMonitorTimeout;






    kal_uint32 inBufferSize;
    L2capExtendedFlowSpecOption l2capExtFlowSpec;




    kal_uint8 op_state;
    kal_uint8 lockStepNeeded;
    kal_uint8 lockStepBRNeeded;
    kal_uint8 highSpeedRequired;


} L2capPsm;






typedef struct _L2capConnSettings
{
# 1030 "../btcore/inc/l2cap_adp.h"
    ListEntry *reasmBuffer;
    ListEntry *receivedBuffer;
    kal_uint16 rxWindowSize;
    kal_uint8 *txMaxTransmitCount;
    kal_uint8 *txSrejList;
 kal_uint8 maxSrejNo;
} L2capConnSettings;







typedef struct _L2capAMPConnSettings
{
 kal_uint16 Psm;
 BtRemoteDevice *Device;
 kal_uint16 ampPsm;
 kal_uint8 currentAmpControllerId;
 kal_uint8 remoteAmpControllerId;
} L2capAMPConnSettings;
# 1093 "../btcore/inc/l2cap_adp.h"
typedef struct _L2capFixCid
{
    L2capCallback callback;

    L2capChannelId cid;
    kal_uint16 inUse;
} L2capFixCid;
# 68 "../btcore/inc/l2cap.h" 2
# 89 "../btcore/inc/l2cap.h"
BtStatus L2CAP_InitDefaultPSM(L2capPsm *Protocol, L2capLinkMode mode);
# 113 "../btcore/inc/l2cap.h"
BtStatus L2CAP_RegisterPsm(L2capPsm *protocol);
# 139 "../btcore/inc/l2cap.h"
BtStatus L2CAP_DeregisterPsm(const L2capPsm *protocol);
# 189 "../btcore/inc/l2cap.h"
BtStatus L2CAP_ConnectReq(
            const L2capPsm *protocol,
            L2capPsmValue psm,
            BtRemoteDevice *remDevice,
            L2capConnSettings *settings,
            L2capChannelId *localCid);



void L2CAP_ConnectReqAssignFlowControlBuffer(
            L2capConnSettings *Settings,
            kal_uint16 ChannelId);
# 246 "../btcore/inc/l2cap.h"
BtStatus L2CAP_ConnectRsp(L2capChannelId cid, L2capConnStatus status, L2capConnSettings *settings);

BtStatus L2Cap_AuthorizeConnectRsp(kal_uint16 ChannelId, unsigned char result);
# 272 "../btcore/inc/l2cap.h"
BtStatus L2CAP_DisconnectReq(L2capChannelId cid);
# 323 "../btcore/inc/l2cap.h"
BtStatus L2CAP_SendData(L2capChannelId cid, BtPacket *packet);

BtStatus L2CAP_SendUnicastData(const L2capPsm *Protocol, BtRemoteDevice *link, BtPacket *Packet);

BtStatus L2CAP_AvSendData(L2capChannelId ChannelId, BtPacket *Packet);
# 355 "../btcore/inc/l2cap.h"
BtStatus L2CAP_UpdateSduDataBufferSeq(L2capChannelId cid);
# 373 "../btcore/inc/l2cap.h"
L2capLinkMode L2CAP_GetConnectionMode(L2capChannelId Cid, unsigned char In);
# 388 "../btcore/inc/l2cap.h"
BtStatus L2CAP_DisableRetransmissions(L2capChannelId Cid);
# 403 "../btcore/inc/l2cap.h"
BtStatus L2CAP_EnableRetransmissions(L2capChannelId Cid);
# 420 "../btcore/inc/l2cap.h"
kal_uint16 L2CAP_GetTxMtu(L2capChannelId cid);
# 458 "../btcore/inc/l2cap.h"
BtStatus L2CAP_Ping(const L2capPsm *pingClient, BtRemoteDevice *remDevice, const kal_uint8 *data, kal_uint16 dataLen);
# 495 "../btcore/inc/l2cap.h"
BtStatus L2CAP_GetInfo(const L2capPsm *infoClient, BtRemoteDevice *remDevice, L2capInfoType type);
# 799 "../btcore/inc/l2cap.h"
void L2Cap_EnableHeavyRTTraffic(void);
void L2Cap_DisableHeavyRTTraffic(void);

void L2Cap_SecAccessRsp(const BtEvent *Event);
void L2Cap_SecAMPAccessRsp(const BtEvent *Event);

BtStatus L2CAP_SendFixChannelData(kal_uint16 local_cid, kal_uint16 remote_cid, BtRemoteDevice *link, BtPacket *Packet);

BtStatus L2CAP_AllocateFixChannel(const L2capPsm *Protocol,
          BtRemoteDevice *link,
          L2capConnSettings *Settings,
          kal_uint16 *localCid);
void L2CAP_FreeFixChannel(L2capChannelId id);



void L2Cap_StartLockStepConfig(kal_uint8 local_cid);
BtStatus L2CAP_SendLockStepConfigReq(L2capChannelId ChannelId);
BtStatus L2CAP_SendLockStepConfigRsp(L2capChannelId ChannelId, kal_uint16 result);


BtStatus L2CAP_SetRetransDisableFlag(L2capChannelId Cid, unsigned char Disable);




void L2Cap_DumpHex(const char *prefix, const char *data, kal_uint32 datalen);



kal_uint8 L2CAP_IsHeavyLoading(void);
# 70 "../btcore/inc/sys/l2cap_i.h" 2


# 1 "../btcore/inc/sys/evmxp.h" 1
# 73 "../btcore/inc/sys/l2cap_i.h" 2


# 1 "../btcore/inc/meamp_adp.h" 1
# 48 "../btcore/inc/meamp_adp.h"
typedef struct _BtAMPDeviceInfo
{

    kal_uint16 supervisionTimeout;
    kal_uint32 flushTimeOut;

} BtAMPDeviceInfo;
# 76 "../btcore/inc/sys/l2cap_i.h" 2
# 137 "../btcore/inc/sys/l2cap_i.h"
typedef struct _SignalPacket
{
    BtPacket packet;
    kal_uint8 workspace[72];
} SignalPacket;

typedef struct _L2CAPTxSelectRejectTable
{
    kal_uint16 ReqSeq;
} L2CAPTxSelectRejectTable;
# 159 "../btcore/inc/sys/l2cap_i.h"
typedef struct _L2CAP_Channel
{
    kal_uint16 flags;
    kal_uint16 flags3;
    kal_uint8 state;
    kal_uint8 localIdent;

    BtRemoteDevice *link;
    EvmTimer timer;

    kal_uint16 outMtu;

    kal_uint16 l2capTxCount;

    kal_uint16 remotePsm;


    const L2capPsm *psmInfo;
    L2capChannelId localCid;
    L2capChannelId remoteCid;
    kal_uint8 remoteIdent;
    kal_uint8 remoteMoveIdent;
    kal_uint8 workspace[48];
    kal_uint8 wsLen;
    kal_uint16 result;
    kal_uint16 waitMoveCnfResult;
    kal_uint8 configFlowSpec;
    kal_uint8 configExtendedFlowSpec;
    kal_uint8 ertxTimer;

    BtSecurityToken authorization;

    kal_uint16 localMtu;
    kal_uint8 connectedEventReported;


    kal_uint16 flags2;
    kal_uint8 infoReqDone;

    kal_uint8 outLinkMode;
    kal_uint16 txWindow;
    kal_uint16 extRxWindow;
    kal_uint8 supportExtControl;
    kal_uint16 sendSeq;
    kal_uint16 ackSeq;
    kal_uint16 transmitMax;
    kal_uint16 retransTimeout;
    kal_uint16 monitorTimeout;
    kal_uint16 outMpu;
    kal_uint16 txCountNormalSent;
    kal_uint8 outFcsUsed;
    kal_uint8 inFcsUsed;

    kal_uint8 inLinkMode;
    kal_uint16 recvSeq;
    kal_uint16 buffSeq;
    kal_uint16 lastRxStateAckSeq;
    kal_uint16 rxWindow;
    kal_uint8 sar;
    ListEntry *freeSduBuffer;
    ListEntry *rxSduBuffer;
    BtRxPacket *flowRxBuffer;
    kal_uint16 rxWindowSize;
    kal_uint16 sduLength;
    kal_uint16 segReceivedStart;
    kal_uint16 localMpu;
    kal_uint16 l2capSduSAR;
    kal_uint16 parsePDUOffset;
    kal_uint8 tempFCS[2];
    kal_uint8 tempControlHdr[4];
    kal_uint8 tempSDULengthHdr[2];
    kal_uint8 frameType;
    kal_uint16 frameLength;
    kal_uint16 frameOffset;
    kal_uint16 frameStartOffset;
    kal_uint16 txIFrameRetransmissionInBasebandCount;
    kal_uint16 txIFrameRxAck;
    kal_uint16 txComposeSeq;
    kal_uint8 verifyRetransmissionQueueState;
    kal_uint8 *txIframeCount;
    kal_uint32 *txSrejList;
    kal_uint8 flagReportReturnPacketToUpper;
    kal_uint8 LastConfigStateRejectCount;
    L2capExtendedFlowSpecOption outExtFlowSpec;
    L2capExtendedFlowSpecOption inExtFlowSpec;
    kal_uint8 enhancedRetransRemoteBusy;
    kal_uint8 enhancedRetransRNRSent;
    kal_uint8 enhancedLocalBusy;
    kal_uint8 enhancedSFrameRetryCount;
    kal_uint8 enhancedWait_F;
    kal_uint8 enhancedAckWaiting;
    kal_uint8 enhancedNeedToSendFinal;
    kal_uint8 enhancedRejActioned;
    kal_uint8 enhancedRejSent;
    kal_uint8 enhancedSrejSent;
    kal_uint8 enhancedSrejActioned;
    kal_uint16 enhancedSrejSaveReqSeq;
    kal_uint16 enhancedSrejListTxCount;
    kal_uint8 enhancedPollFinal;
    kal_uint8 enhancedSrejList;
    kal_uint8 enhancedSrejSendRej;
    kal_uint8 enhancedMaxMissingSrejNo;
    L2CAPTxSelectRejectTable enhancedTxSrejFrame[0x02];
    kal_uint8 lockStepBRNeeded;
    unsigned char reConfigState;
    unsigned char configLockStep;
    unsigned char lockstepRxPendingDone;
    unsigned char lockstepNegoDone;
    unsigned char lockstepTxPendingDone;
    kal_uint16 lockstepResult;
    kal_uint8 waitPreviousChannelConnected;
    kal_uint8 a2mpSupported;
    kal_uint16 hciAMPHandler;
    BtAMPDeviceInfo AMPInfo;
    kal_uint8 currentAmpControllerId;
    kal_uint8 remoteAmpControllerId;
    kal_uint8 MoveOperationAmpControllerId;
    kal_uint16 ampPsm;
    kal_uint8 ampSuspend;
    kal_uint8 createChannelInitiator;
    EvmTimer verifyAmpTimer;
    EvmTimer verifyMoveAmpTimer;
    kal_uint8 setupByCreateChannel;
    kal_uint8 txFlowAvailable;
    kal_uint8 rxFlowAvailable;
    kal_uint8 localUsedFlag;


} L2CAP_Channel;
# 477 "../btcore/inc/sys/l2cap_i.h"
typedef struct _BtL2CapContext
{
    const L2capPsm *protocols[9+5+1];
    L2CAP_Channel channels[((9+5+1 * 3) + 2 +(10))];

 L2CAP_Channel ampChannels[(10)];





    L2capFixCid fixCid[3];


    BtRemoteDevice broadcastLink;
    ListEntry signalPackets;
    kal_uint8 flags;
    kal_uint8 nextIdent;
    kal_uint16 currRxDataLen;
    kal_uint8 *currRxData;
    L2capCallbackParms callbackParms;
    kal_uint32 highPriorityNo;
    kal_uint32 lowPriorityNo;
    kal_uint8 lowPriorityInBB;
    kal_uint8 heavyTrafficSource;

    SignalPacket _sigPacket[((9+5+1 * 3) + 2) + 2];
    kal_uint8 hs_enabled;
} BtL2CapContext;
# 686 "../btcore/inc/sys/l2cap_i.h"
void WriteSignalHeader(kal_uint8 Command, kal_uint8 Identifier, kal_uint16 Length);
# 715 "../btcore/inc/sys/l2cap_i.h"
L2CAP_Channel *L2Cap_GetValidChannel(L2capChannelId Cid);
kal_uint16 L2CAP_GetL2CAPRemoteCid(L2capChannelId ChannelId);
L2CAP_Channel *L2Cap_FindChannelByLocalIdent(kal_uint8 Ident);
L2CAP_Channel *L2Cap_FindChannelByRemoteCid(kal_uint16 cid, kal_uint16 HciHandle);
L2CAP_Channel *L2Cap_CheckForDupilicateRequest(kal_uint8 Ident, BtRemoteDevice *Link);
L2CAP_Channel *L2Cap_AllocLinkChannel(const L2capPsm *Psm, BtRemoteDevice *Device, BtStatus *Error);
L2CAP_Channel *L2Cap_AllocPsmChannel(kal_uint16 Psm, kal_uint16 *Reason);
BtPacket *L2Cap_GetSysPkt(unsigned char Priority);




void L2Cap_FreeChannel(L2CAP_Channel *);
void L2Cap_DisconnectACLLink(BtRemoteDevice *link);
void L2Cap_StartRtx(L2CAP_Channel *Channel);
void L2Cap_StartErtx(L2CAP_Channel *Channel);
void L2Cap_StopTimer(L2CAP_Channel *Channel);
kal_uint16 L2Cap_GetMtu(kal_uint8 *Options, kal_uint16 OptionLen);
unsigned char L2Cap_ValidateCommand(const kal_uint8 *RxData, kal_uint16 RxLen);
void L2Cap_NotifyPsm(L2CAP_Channel *Channel, L2capEventType Event, kal_uint16 Status);
unsigned char L2Cap_QueryHeavyTraffic(void);


unsigned char L2Cap_IsValidProtocol(const L2capPsm *Protocol);

void L2Cap_IssueHciRequestToSend(BtRemoteDevice *Link);
void L2Cap_FlushChannelTransmits(L2CAP_Channel *Channel);
kal_uint8 L2Cap_FlushOnePktTransmits(L2capChannelId channel_id);
void L2Cap_NotifyUserAndCloseChannel(L2CAP_Channel *Channel, kal_uint16 Status);


unsigned char L2Cap_ProcessReqSeq(L2CAP_Channel *Channel, kal_uint16 Control, kal_uint8 FBit, kal_uint8 *acked);
unsigned char L2Cap_ProcessTxSeq(L2CAP_Channel *Channel, kal_uint16 Control);
void L2Cap_ProcessRbit(L2CAP_Channel *Channel, kal_uint8 Control);
void L2Cap_ProcessFlowControlRetransmissionTimeout(L2CAP_Channel *Channel);
void L2Cap_SendSFrame(L2CAP_Channel *Channel);
void L2Cap_StartMonitorTimer(L2CAP_Channel *Channel);
void L2Cap_StartRetransmitTimer(L2CAP_Channel *Channel);
unsigned char L2Cap_GetNextSegment(BtPacket *Segment, BtPacket *Sdu, kal_uint8 checkPacketTxComplete);
unsigned char L2Cap_GetNextSegmentBySrej(BtPacket *Segment, BtPacket *Sdu, kal_uint16 *ReqSeq);
void L2Cap_BuildIFrameHeader(BtPacket *Segment, kal_uint8 IframeBuildType);
void L2Cap_BuildIFrameHeaderSrej(BtPacket *Segment, kal_uint16 ReqSeq);
BtPacket *L2Cap_BuildSFrame(L2CAP_Channel *Channel, BtPacket *Packet);
unsigned char L2Cap_IsTxWindowAvailable(L2CAP_Channel *Channel);
unsigned char L2Cap_IsRetransTxAvailable(L2CAP_Channel *Channel);

void L2Cap_ReturnSentPackets(L2CAP_Channel *Channel, BtStatus Status);
void L2Cap_ChannelRxError(L2CAP_Channel *Channel, kal_uint8 Error);
kal_uint16 L2Cap_ComputeCrc(const kal_uint8 *Buffer, kal_uint16 Length, kal_uint16 Crc);
kal_uint16 L2Cap_SetFlowControlOptions(L2CAP_Channel *Channel, const kal_uint8 *Options, kal_uint16 OptionsLen);
void L2Cap_InitFlowControlSettings(L2CAP_Channel *Channel);







BtStatus L2Cap_Send(L2CAP_Channel *Channel, BtPacket *Packet, kal_uint16 RemoteCid);

BtStatus L2Cap_SendSFrameData(L2CAP_Channel *Channel, BtPacket *Packet, kal_uint16 RemoteCid);

BtStatus L2Cap_QueueTxPacket(kal_uint16 controllerId, BtRemoteDevice *Link, BtPacket *Packet);
BtStatus L2Cap_SendConnRspInternal(L2CAP_Channel *Channel);




BtStatus L2Cap_SendConnReqInternal(L2CAP_Channel *Channel);
BtStatus L2Cap_SendDiscReqInternal(L2CAP_Channel *Channel);
BtStatus L2Cap_SendDiscRspInternal(L2CAP_Channel *Channel);
BtStatus L2Cap_SendConfigReqInternal(L2CAP_Channel *Channel, BtPacket *Req, L2capConfigFlags Flags);
BtStatus L2Cap_SendConfigRspInternal(L2CAP_Channel *Channel, BtPacket *Rsp, kal_uint16 Result, L2capConfigFlags Flags);


void L2Cap_StateMachine(L2CAP_Channel *Channel, unsigned short Event);
void L2Cap_ProcessReq(kal_uint8 *RxData, kal_uint16 RxDataLen, BtRemoteDevice *Link);
void L2Cap_ProcessRsp(kal_uint8 *RxData, kal_uint16 RxDataLen);

BtStatus SendAutoLockStepConfigReq(L2CAP_Channel *Channel);
BtStatus SendLockStepConfigRsp(L2CAP_Channel *Channel, kal_uint16 result);



kal_uint8 L2CAP_GetControlFieldType(L2CAP_Channel *Channel);
# 810 "../btcore/inc/sys/l2cap_i.h"
BtStatus L2CAP_RegisterFixCid(L2capCallback callback, kal_uint16 cid);
void L2Cap_NotifyBLE(L2capFixCid *fixCid, L2capEventType Event, kal_uint16 Status, kal_uint16 cid);


BtStatus L2Cap_SendFeaturesReq(L2CAP_Channel *Channel, BtPacket *Request);
# 82 "../btadp_int/include/bt_adp_debug.h" 2

# 1 "../btcore/inc/sys/rfc.h" 1
# 71 "../btcore/inc/sys/rfc.h"
# 1 "../btcore/inc/rfcomm.h" 1
# 67 "../btcore/inc/rfcomm.h"
# 1 "../btcore/inc/rfcomm_adp.h" 1
# 150 "../btcore/inc/rfcomm_adp.h"
typedef kal_uint8 RfEvent;
# 313 "../btcore/inc/rfcomm_adp.h"
typedef kal_uint8 RfSignals;
# 353 "../btcore/inc/rfcomm_adp.h"
typedef kal_uint8 RfBaudRate;
# 374 "../btcore/inc/rfcomm_adp.h"
typedef kal_uint8 RfDataFormat;
# 427 "../btcore/inc/rfcomm_adp.h"
typedef kal_uint8 RfFlowControl;
# 453 "../btcore/inc/rfcomm_adp.h"
typedef kal_uint16 RfPortSettingsMask;
# 509 "../btcore/inc/rfcomm_adp.h"
typedef kal_uint8 RfLineStatus;
# 529 "../btcore/inc/rfcomm_adp.h"
typedef kal_uint8 RfAggregateFlow;
# 549 "../btcore/inc/rfcomm_adp.h"
typedef struct _RfCallbackParms RfCallbackParms;
typedef struct _RfChannel RfChannel;
# 563 "../btcore/inc/rfcomm_adp.h"
typedef void (*RfCallback) (RfChannel *channel, RfCallbackParms *parms);
# 598 "../btcore/inc/rfcomm_adp.h"
void RfSecCallback(const BtEvent *Event);
# 626 "../btcore/inc/rfcomm_adp.h"
typedef struct _RfPortSettings
{
    RfBaudRate baudRate;
    RfDataFormat dataFormat;



    RfFlowControl flowControl;
    kal_uint8 xonChar;
    kal_uint8 xoffChar;
# 646 "../btcore/inc/rfcomm_adp.h"
    RfPortSettingsMask parmMask;

} RfPortSettings;
# 660 "../btcore/inc/rfcomm_adp.h"
typedef struct _RfModemStatus
{
    RfSignals signals;



    kal_uint8 breakLen;




} RfModemStatus;
# 680 "../btcore/inc/rfcomm_adp.h"
struct _RfCallbackParms
{
    RfEvent event;
    BtStatus status;
    kal_uint16 dataLen;
# 693 "../btcore/inc/rfcomm_adp.h"
    union
    {





        BtPacket *packet;





        kal_uint8 *data;




        RfModemStatus *modemStatus;




        RfLineStatus *lineStatus;





        RfPortSettings *portSettings;


        BtRemoteDevice *remDev;

    } ptrs;
};
# 738 "../btcore/inc/rfcomm_adp.h"
typedef struct _RfService
{
# 748 "../btcore/inc/rfcomm_adp.h"
    kal_uint8 serviceId;
} RfService;
# 759 "../btcore/inc/rfcomm_adp.h"
struct _RfChannel
{
    ListEntry node;


    RfCallback callback;





    kal_uint16 maxFrameSize;







    kal_uint8 priority;







    void *userContext;



    BtSecurityToken secToken;

    BtSecurityRecord secRecord;
    kal_uint8 incoming;


    BtRemoteDevice *remDev;
    kal_uint8 secLevel;
    kal_uint8 state;
    kal_uint8 muxId;
    kal_uint8 dlcId;
    kal_uint8 dlci;
    kal_uint8 rfChFlags;
    ListEntry txQueue;
    EvmTimer timer;
    kal_uint8 cmdSent;
    RfSignals rfSignals;
    signed short rxCredit;
    kal_uint16 BusyCredit;
    EvmTimer creditTimer;
    kal_uint16 txCredit;
    kal_uint8 grantedCredit;
    kal_uint8 initialRxCredit;
    kal_uint16 initialFrameSize;
};
# 879 "../btcore/inc/rfcomm_adp.h"
BtStatus RF_AdvanceCredit(RfChannel *Channel, kal_uint8 Credit);

BtStatus RF_RespondChannel(RfChannel *channel, unsigned char flag);
# 908 "../btcore/inc/rfcomm_adp.h"
BtStatus RF_AcceptChannel(RfChannel *channel);
# 934 "../btcore/inc/rfcomm_adp.h"
BtStatus RF_RejectChannel(RfChannel *channel);
# 975 "../btcore/inc/rfcomm_adp.h"
BtStatus RF_CloseChannel(RfChannel *Channel);
# 68 "../btcore/inc/rfcomm.h" 2
# 132 "../btcore/inc/rfcomm.h"
void RF_ChannelInit(RfChannel *Channel, kal_uint8 sec_level);


void RF_RegisterSecurityRecord(RfChannel *Channel, unsigned char incoming, kal_uint8 service_id);
void RF_DeRegisterSecurityRecord(RfChannel *Channel);



BtStatus RF_RegisterServerChannel(RfChannel *Channel, RfService *Service, kal_uint8 Credit);
# 165 "../btcore/inc/rfcomm.h"
BtStatus RF_DeregisterServerChannel(RfChannel *Channel, RfService *Service);
# 193 "../btcore/inc/rfcomm.h"
BtStatus RF_DeregisterService(RfService *service);
# 242 "../btcore/inc/rfcomm.h"
BtStatus RF_OpenClientChannel(BtRemoteDevice *RemDev, kal_uint8 ServerId, RfChannel *Channel, kal_uint8 Credit);
# 271 "../btcore/inc/rfcomm.h"
BtStatus RF_SendData(RfChannel *channel, BtPacket *packet);
# 320 "../btcore/inc/rfcomm.h"
BtStatus RF_SetModemStatus(RfChannel *channel, RfModemStatus *modemStatus);
# 355 "../btcore/inc/rfcomm.h"
BtStatus RF_SetLineStatus(RfChannel *channel, RfLineStatus lineStatus);


BtStatus RF_SendPortSettings(RfChannel *Channel, RfPortSettings *PortSettings);
# 407 "../btcore/inc/rfcomm.h"
BtStatus RF_RequestPortSettings(RfChannel *channel, RfPortSettings *portSettings);
# 442 "../btcore/inc/rfcomm.h"
BtStatus RF_RequestPortStatus(RfChannel *channel);




BtStatus RF_RespondPortSettings(RfChannel *Channel, RfPortSettings *PortSettings, unsigned char delayedResponse);
# 503 "../btcore/inc/rfcomm.h"
BtStatus RF_AcceptPortSettings(RfChannel *channel, RfPortSettings *portSettings);
# 556 "../btcore/inc/rfcomm.h"
BtStatus RF_SendPortStatus(RfChannel *channel, RfPortSettings *portSettings);
# 587 "../btcore/inc/rfcomm.h"
BtStatus RF_DelayPortRsp(RfChannel *channel);
# 645 "../btcore/inc/rfcomm.h"
kal_uint16 RF_FrameSize(RfChannel *Channel);
unsigned char RF_QuerySpecVersion(RfChannel *Channel);
# 669 "../btcore/inc/rfcomm.h"
unsigned char RF_CreditFlowEnabled(RfChannel *Channel);
# 683 "../btcore/inc/rfcomm.h"
BtRemoteDevice *RF_RemoteDevice(RfChannel *Channel);
# 693 "../btcore/inc/rfcomm.h"
BtStatus RF_SendAggregateFlow(RfChannel *Channel, kal_uint8 state);
BtStatus RF_SendAggregateFlowOff(RfChannel *Channel);


BtStatus RF_SendAggregateFlowOn(RfChannel *Channel);


BtStatus RF_SendBadCommand(RfChannel *Channel);
BtStatus RF_SendBadMSC(RfChannel *Channel, RfModemStatus *ModemStatus);
BtStatus RF_SendPN(RfChannel *Channel);

void RF_DisableCFC(RfChannel *Channel);


void RF_EnableCFC(RfChannel *Channel);




BtStatus RF_JSR82RegisterServerChannel(RfChannel *Channel, RfService *Service, kal_uint8 Credit, kal_uint8 security);
void RF_JSR82_DeRegisterServerChannel(void);
BtStatus RF_OpenJSR82ClientChannel(BtRemoteDevice *RemDev, kal_uint8 ServerId, RfChannel *Channel, kal_uint8 Credit, kal_uint8 security);
# 72 "../btcore/inc/sys/rfc.h" 2
# 1 "../btcore/inc/l2cap.h" 1
# 829 "../btcore/inc/l2cap.h"
kal_uint8 L2CAP_IsHeavyLoading(void);
# 73 "../btcore/inc/sys/rfc.h" 2
# 127 "../btcore/inc/sys/rfc.h"
typedef void (*RfState) (RfChannel *Channel, RfEvent Event);
# 193 "../btcore/inc/sys/rfc.h"
typedef struct _RF_DLC
{

    ListEntry node;
    kal_uint8 flags;


    RfChannel *channel;

} RF_DLC;


typedef struct _RF_MUX
{

    ListEntry priorityList;


    RF_DLC dlc[(29 * 2)];
    kal_uint8 dlcCount;


    RF_DLC *cDlc;
    kal_uint16 numTxPackets;


    kal_uint8 cDlcId;
    L2capChannelId l2ChannelId;
    BtRemoteDevice *remDev;
    BtPacket *txPacket;
    BtStatus l2Status;
    kal_uint8 *rxBuff;
    kal_uint16 rxLen;
    kal_uint8 flags;
    kal_uint8 state;
    EvmTimer timer;
    kal_uint8 packetsInTransit;





    ListEntry freeList;
    BtPacket packets[(29 * 2) + 3];
    kal_uint8 reqBuff[11 *((29 * 2) + 3)];

    ListEntry cmdQueue;
# 248 "../btcore/inc/sys/rfc.h"
    BtPacket testRspPacket;
    kal_uint8 testRspData[127 + 2];

    ListEntry rxPacketsBufferList;
    ListEntry receivedPacketsList;
    BtRxPacket rfcRxPackets[10];
    kal_uint8 l2capRawData[10][(((1480 - 5) > 990) ? 990 : 1480 - 5)+20];
    kal_uint8 txMaxCountPerIFrame[64];

} RF_MUX;


typedef struct _RF_SERVER
{
    ListEntry channelList;
    RfService *service;
    kal_uint8 inUseCnt;
    kal_uint8 flags;
} RF_SERVER;


typedef struct _BtRfcContext
{
    L2capPsm psm;
    RF_MUX mux[3];


    RfState state[8];





    RF_SERVER servers[29];






} BtRfcContext;







void RfL2Callback(kal_uint16 ChannelId, L2capCallbackParms *Info);


BtStatus RfAllocService(RfChannel *Channel, RfService *Service);
BtStatus RfFreeServerChannel(RfChannel *Channel, RfService *Service);
BtStatus RfFreeService(RfService *Service);
BtStatus RfGetFreeServiceChannel(kal_uint8 MuxId, kal_uint8 ServiceId, RfChannel **Channel);


BtStatus RfAllocMux(BtRemoteDevice *RemDev, L2capChannelId L2ChannelId, kal_uint8 *MuxId);
void RfFreeMux(kal_uint8 MuxId);
BtStatus RfFindMuxIdByRemDev(BtRemoteDevice *RemDev, kal_uint8 *MuxId);
BtStatus RfAllocDLC(kal_uint8 MuxId, kal_uint8 Dlci, RfChannel *Channel, kal_uint8 *DlcId);
void RfFreeDLC(kal_uint8 MuxId, kal_uint8 DlcId);
BtStatus RfFindDlcIdByDlci(kal_uint8 MuxId, kal_uint8 Dlci, kal_uint8 *DlcId);
BtStatus RfSendCommand(kal_uint8 Command, kal_uint8 MuxId, kal_uint8 DlcId);
BtStatus RfSendAck(kal_uint8 Response, kal_uint8 MuxId, kal_uint8 Dlci);
BtStatus RfSendDiscUAAck(kal_uint8 MuxId, kal_uint8 Dlci);
void RfCommandSent(kal_uint8 MuxId);
void RfAppCallback(RfChannel *channel, BtStatus status, kal_uint8 Event, void *data);
kal_uint8 RfCalcFCS(kal_uint8 *Buffer, kal_uint8 len);
unsigned char RfIsValidFCS(kal_uint8 *Buffer, kal_uint8 len, kal_uint8 RxFCS);
void RfDisconnectL2CAP(kal_uint8 MuxId);
void RfTimeoutHandler(EvmTimer *timer);
void RfAdvanceNegPending(RfChannel *Channel, unsigned char negOK);
void RfControlChannel(kal_uint8 MuxId, kal_uint8 Event);
BtPacket *RfCtlGetControlPacket(kal_uint8 MuxId);
BtStatus RfDisconnectDLC(kal_uint8 MuxId, kal_uint8 DlcId);
BtStatus RfSendDataInternal(kal_uint8 MuxId, kal_uint8 Dlci, BtPacket *Packet, kal_uint8 priority);
BtStatus RfSendParmNegotiation(RfChannel *channel, kal_uint8 CR);
BtStatus RfSendModemStatus(RfChannel *Channel, kal_uint8 Status, kal_uint8 Break, kal_uint8 CR);
BtStatus RfSendLineStatus(RfChannel *Channel, RfLineStatus Status, kal_uint8 CR);
BtStatus RfSendRemotePortNeg(RfChannel *Channel, RfPortSettings *Rpn, kal_uint8 CR);
BtStatus RfSendAggregateFlow(kal_uint8 MuxId, unsigned char Flow, kal_uint8 CR);
BtStatus RfSendTest(kal_uint8 MuxId, kal_uint8 length, kal_uint8 CR);
void RfMUXCheckTxQueues(kal_uint8 MuxId);
void RfMUXCheckNextTxQueue(kal_uint8 MuxId);
unsigned char RfIsValidChannel(RfChannel *Channel);
unsigned char RfIsChannelAllocated(RfChannel *Channel);
void RfFreeUsePendingChannel(RfChannel *channel);
void RfCheckForCreditToSend(RfChannel *Channel);


void RfDlcStateDisconnected(RfChannel *Channel, kal_uint8 Event);
void RfDlcStateConnected(RfChannel *Channel, kal_uint8 Event);
void RfDlcStateConnPending(RfChannel *Channel, kal_uint8 Event);
void RfDlcStateConnIncoming(RfChannel *Channel, kal_uint8 Event);
void RfDlcStateDiscPending(RfChannel *Channel, kal_uint8 Event);
void RfDlcStateDiscIncoming(RfChannel *Channel, kal_uint8 Event);
void RfDlcStateNegPending(RfChannel *Channel, kal_uint8 Event);


void RfDlcStateSecPending(RfChannel *Channel, kal_uint8 Event);
# 84 "../btadp_int/include/bt_adp_debug.h" 2

# 1 "../btcore/inc/sys/sdpi.h" 1
# 69 "../btcore/inc/sys/sdpi.h"
# 1 "../btcore/inc/sdp_adp.h" 1
# 70 "../btcore/inc/sys/sdpi.h" 2
# 83 "../btcore/inc/sys/sdpi.h"
typedef kal_uint8 SdpQueryResp;
# 192 "../btcore/inc/sys/sdpi.h"
typedef kal_uint8 BtSdpType;
# 246 "../btcore/inc/sys/sdpi.h"
typedef struct _SdpServerInfo
{

    BtPacket txPacket;

    SdpAttribute *sdpAttrib;
    SdpRecord *sdpRecord;

    unsigned char busy;


    kal_uint32 totalAttribSize;


    kal_uint32 totalServAttribSize;

    kal_uint16 channel;
    kal_uint16 recMask;
    kal_uint16 totalMatches;
    kal_uint16 matchesSent;
    kal_uint16 curAttribTotal;
    kal_uint16 curAttribOff;
    kal_uint8 scratchLeft;
    kal_uint8 scratchOff;
    kal_uint8 attribState;
    kal_uint8 contState;
    kal_uint8 txPacketBusy;
    kal_uint8 attribScratch[8];
    kal_uint8 txBuff[(128 - 5)];
} SdpServerInfo;






typedef struct
{
    ListEntry records;
    kal_uint32 nextHandle;
    kal_uint8 numClients;
    kal_uint8 contState;

    L2capPsm SdpServPsm;


    SdpAttribute record0Attribs[3];
    SdpRecord record0;


    kal_uint8 ZeroServiceDatabaseState[5];


    SdpServerInfo serverInfos[(3)];
    SdpRecord DIDSdpRecord;


    unsigned char sdpLocked;
} BtSdpServContext;
# 313 "../btcore/inc/sys/sdpi.h"
typedef struct
{
    L2capPsm SdpClientPsm;

    kal_uint16 transID;
    kal_uint8 contState;
    BtEvent btEvent;
} BtSdpClientContext;
# 329 "../btcore/inc/sys/sdpi.h"
BtStatus SDP_Init(void);
void SDP_Deinit(void);
unsigned char SdpValidateQueryParms(
        SdpQueryType type,
        const kal_uint8 *parms,
        kal_uint16 len,
        kal_uint8 *contState,
        kal_uint16 contStateLen,
        SdpQueryMode mode);
BtRemoteDevice *SdpFindRemDevWithSdpChannel(kal_uint16 channel, BtSdpType type);


BtStatus SdpInitClient(void);
void SdpDeinitClient(void);


kal_uint8 SdpParseElementHeader(kal_uint8 dataElem);




void SdpDeinitServer(void);
BtStatus SdpInitServer(void);
SdpAttribute *SdpServFindMarkedAttribute(SdpRecord *record, kal_uint16 mask);
void SdpServUpdateClassOfDevice(void);
# 86 "../btadp_int/include/bt_adp_debug.h" 2
# 1 "../btcore/inc/sys/a2mp.h" 1
# 42 "../btcore/inc/sys/a2mp.h"
# 1 "../btcore/inc/sys/a2mp.h" 1
# 43 "../btcore/inc/sys/a2mp.h" 2
# 1 "../btcore/inc/l2cap.h" 1
# 829 "../btcore/inc/l2cap.h"
kal_uint8 L2CAP_IsHeavyLoading(void);
# 44 "../btcore/inc/sys/a2mp.h" 2
# 69 "../btcore/inc/sys/a2mp.h"
typedef struct _A2MP_CONN
{
    kal_uint8 state;
    kal_uint16 psm;
    L2capChannelId l2ChannelId;
    BtRemoteDevice *remDev;
    kal_uint8 waitPhysicalLinkCompleted;
} A2MP_CONN;

typedef struct _BtA2MPPacket
{
    ListEntry node;
    BtPacket btPacket;
    kal_uint8 data_buff[670];
}BtA2MPPacket;

typedef struct _A2MP_MAIN_CONN
{
    kal_uint8 state;
    kal_uint8 localIdent;
    kal_uint8 remoteIdent;
    kal_uint8 last_opcode;
    kal_uint8 last_rxCmdopcode;
    kal_uint8 localControllerId;
    kal_uint8 ampNeedToCreatePhysicalLink;
    kal_uint8 stopCreatePhysicalLink;
    kal_uint8 ampPhysicalLinkCreating;
    kal_uint8 discoverDone;
    kal_uint8 waitAmpPhysicalLinkResponse;
    kal_uint8 physicalLinkHandler;
    kal_uint16 tx_mtu;
    kal_uint16 localCid;
    BtRemoteDevice *remDev;
    EvmTimer timer;
    A2MP_CONN a2mp_channel[1];
    ListEntry rxPacketsBufferList;
    ListEntry receivedPacketsList;
    BtRxPacket RxPackets[2];
    kal_uint8 l2capRawData[2][670 +20];
    kal_uint8 txMaxCountPerIFrame[128];
    kal_uint32 txSrejList[1];
    BtA2MPPacket a2mp_txPacket[0x03];
    ListEntry freeTtxPacketsList;
    kal_uint8 local_amp_assoc[670];
    kal_uint16 local_amp_assoc_size;
    kal_uint8 remote_amp_assoc[670];
    kal_uint16 remote_amp_assoc_size;

} A2MP_MAIN_CONN;



typedef struct _BtA2mpContext
{
    L2capPsm psm;

 BtSecurityRecord secRecord;

 A2MP_MAIN_CONN a2mp_main_channel[3];
 BtHandler a2mpMeHandler;
 kal_uint8 nextIdent;
    kal_uint8 controllerListSize;
    kal_uint8 *controllerList;
} BtA2mpContext;







BtStatus A2MP_Init(void);
kal_uint8 A2MP_GetLogicalIndex(BtRemoteDevice *link);
void A2MP_FreePSMChannel(A2MP_CONN *a2mp_channel);
unsigned char A2MP_HandleCreatePhysicalLinkCollision(BtRemoteDevice *link);
kal_uint16 A2MP_GetExtendedFeatureMaskLength(kal_uint8 *data);
BtStatus A2MP_SendData(BtRemoteDevice *link, BtPacket *Packet);
void A2MP_FreeMainChannel(A2MP_MAIN_CONN *a2mp_main_channel);
void A2MP_StopTimer(A2MP_MAIN_CONN *channel);
void A2MP_ChangeAMPControllerStatus(kal_uint8 controllerId, kal_uint8 status);
BtStatus A2MP_AllocateL2CAPFixChannel(BtRemoteDevice *link);
# 87 "../btadp_int/include/bt_adp_debug.h" 2
# 1 "../btcore/inc/sys/att_i.h" 1
# 84 "../btcore/inc/sys/att_i.h"
# 1 "../btcore/inc/me_adp.h" 1
# 85 "../btcore/inc/sys/att_i.h" 2
# 1 "../btcore/inc/sec_adp.h" 1
# 86 "../btcore/inc/sys/att_i.h" 2
# 1 "../btcore/inc/l2cap_adp.h" 1
# 87 "../btcore/inc/sys/att_i.h" 2
# 111 "../btcore/inc/sys/att_i.h"
typedef struct _BtAttEvent
{
    kal_uint8 eType;
    BtRemoteDevice *link;
    void *parms;
}BtAttEvent;

typedef void (*GattCallBack) (BtAttEvent *);

typedef struct _BtAttPrepareWrite
{
    kal_uint8 available;
    kal_uint16 handle;
    kal_uint16 offset;
    kal_uint16 length;
    kal_uint8 writeBuffer[60 -5];
} BtAttPrepareWrite;


typedef struct _BtAttConn
{
    kal_uint8 state;
    BtRemoteDevice *link;
    BtPacket pkt[7];
    BtPacket *bufferPkt;
    kal_uint8 txBuffer[7][60];
    ListEntry freePacketList;
    kal_uint16 mtu;
    kal_uint16 l2cap_id;
    kal_uint16 local_desired_mtu;
    EvmTimer txWaitTimer;
    EvmTimer rxWaitTimer;
    kal_uint8 tx_transaction_ongoing;
    kal_uint8 rx_transaction_ongoing;
    BtAttPrepareWrite prepareWriteBuffer[3];
    BtSecurityToken secToken;
    BtSecurityRecord secRecord;
    EvmTimer securityCheckTimer;
    kal_uint8 rxTempBuffer[60];
    kal_uint8 rxTempLength;
    kal_uint8 securityCheckCount;
    kal_uint8 waitApplicationResponse;
} BtAttConn;


typedef struct _BtAttContext
{
    BtAttConn conn[3];
    BtAttEvent att_event;
    GattCallBack callback;
    kal_uint8 tempBuffer[60];
    L2capPsm psm;
} BtAttContext;
# 88 "../btadp_int/include/bt_adp_debug.h" 2
# 1 "../btcore/inc/sys/gatt_i.h" 1
# 41 "../btcore/inc/sys/gatt_i.h"
# 1 "../btcore/inc/gatt.h" 1
# 48 "../btcore/inc/gatt.h"
typedef struct _BtGattEvent
{
    kal_uint8 eType;
    BtRemoteDevice *link;
    void *parms;
    void *pGattOp;
}BtGattEvent;

typedef struct _BtGattDiscoveryAllPrimaryService
{
 kal_uint16 startHandle;
 kal_uint16 endHandle;
}BtGattDiscoveryAllPrimaryService;

typedef struct _BtGattDiscoveryPrimaryServiceByUUID
{
 kal_uint16 startHandle;
 kal_uint16 endHandle;
 kal_uint8 type;
 kal_uint8 uuid16[2];
 kal_uint8 uuid128[16];
}BtGattDiscoveryPrimaryServiceByUUID;

typedef struct _BtGattFindIncludeServices
{
 kal_uint16 startHandle;
 kal_uint16 endHandle;
 kal_uint16 tempData1;
 kal_uint16 tempData2;
 kal_uint16 tempData3;
}BtGattFindIncludeServices;


typedef struct _BtGattDiscoveryAllCharacteristicOfService
{
 kal_uint16 startHandle;
 kal_uint16 endHandle;
}BtGattDiscoveryAllCharacteristicOfService;

typedef struct _BtGattDiscoveryCharacteristicByUUID
{
 kal_uint16 startHandle;
 kal_uint16 endHandle;
 kal_uint8 type;
 kal_uint8 uuid16[2];
 kal_uint8 uuid128[16];
}BtGattDiscoveryCharacteristicByUUID;

typedef struct _BtGattDiscoveryAllCharacteristicDescriptors
{
 kal_uint16 startHandle;
 kal_uint16 endHandle;
}BtGattDiscoveryAllCharacteristicDescriptors;

typedef struct _BtGattReadCharacteristicValue
{
 kal_uint16 handle;
}BtGattReadCharacteristicValue;

typedef struct _BtGattReadCharacteristicUUID
{
 kal_uint16 startHandle;
 kal_uint16 endHandle;
 kal_uint8 type;
 kal_uint16 uuid16;
 kal_uint8 uuid128[16];
}BtGattReadCharacteristicUUID;

typedef struct _BtGattReadLongCharacteristicValue
{
 kal_uint16 handle;
 kal_uint16 offset;
}BtGattReadLongCharacteristicValue;

typedef struct _BtGattReadMultipleCharacteristicValue
{

 kal_uint8 handleSetNo;
 kal_uint16 handle[7];
}BtGattReadMultipleCharacteristicValue;

typedef struct _BtGattWriteWithoutResponse
{
 kal_uint16 handle;
 kal_uint16 size;
 kal_uint8 *data;
}BtGattWriteWithoutResponse;

typedef struct _BtGattSignedWriteWithoutResponse
{
 kal_uint16 handle;
 kal_uint16 size;
 kal_uint8 *data;
}BtGattSignedWriteWithoutResponse;

typedef struct _BtGattWriteCharValueRequest
{
 kal_uint16 handle;
 kal_uint16 size;
 kal_uint8 *data;
}BtGattWriteCharValueRequest;

typedef struct _BtGattWriteLongCharacteristicValues
{
 kal_uint16 handle;
 kal_uint16 offset;
 kal_uint16 size;
 kal_uint8 *data;
}BtGattWriteLongCharacteristicValues;


typedef struct _BtGattReliableWrite
{
 kal_uint16 handle;
 kal_uint16 offset;
 kal_uint16 excuteFlag;
 kal_uint16 size;
 kal_uint8 *data;
}BtGattReliableWrite;

typedef struct _BtGattValueNotifications
{
 kal_uint16 handle;
 kal_uint16 size;
 kal_uint8 *data;
}BtGattValueNotifications;

typedef struct _BtGattValueIndications
{
 kal_uint16 handle;
 kal_uint16 size;
 kal_uint8 *data;
}BtGattValueIndications;

typedef struct _BtGattReadCharacteristicDescriptors
{
 kal_uint16 handle;
}BtGattReadCharacteristicDescriptors;

typedef struct BtGattReadLongCharacteristicDescriptors
{
 kal_uint16 handle;
 kal_uint16 offset;
}BtGattReadLongCharacteristicDescriptors;

typedef struct _BtGattWriteDescriptors
{
 kal_uint16 handle;
 kal_uint16 size;
 kal_uint8 *data;
}BtGattWriteDescriptors;

typedef struct _BtGattWriteLongDescriptors
{
 kal_uint16 handle;
 kal_uint16 offset;
 kal_uint16 size;
 kal_uint8 *data;
}BtGattWriteLongDescriptors;

typedef struct _BtGattReadByType
{
 kal_uint16 startHandle;
 kal_uint16 endHandle;
 kal_uint16 uuid16;
}BtGattReadByType;


typedef struct
{
    union
    {
  BtGattDiscoveryAllPrimaryService *allPrimaryService;
  BtGattDiscoveryPrimaryServiceByUUID *primaryServiceByUUID;
  BtGattFindIncludeServices *findIncludeServices;
  BtGattDiscoveryAllCharacteristicOfService *allCharOfServices;
  BtGattDiscoveryCharacteristicByUUID *charByUUID;
  BtGattDiscoveryAllCharacteristicDescriptors *allCharDescriptors;
  BtGattReadCharacteristicValue *readCharValue;
  BtGattReadCharacteristicUUID *readCharUUID;
  BtGattReadLongCharacteristicValue *readLongCharValue;
  BtGattReadMultipleCharacteristicValue *readMultipleCharValue;
  BtGattWriteWithoutResponse *writeWithoutResponse;
  BtGattSignedWriteWithoutResponse *signedWriteWithoutResponse;
  BtGattWriteCharValueRequest *writeRequest;
  BtGattWriteLongCharacteristicValues *writeLongCharValues;
  BtGattReliableWrite *reliableWrite;
  BtGattValueNotifications *valueNotifications;
  BtGattValueIndications *valueIndications;
  BtGattReadCharacteristicDescriptors *readCharDescriptors;
  BtGattReadLongCharacteristicDescriptors *readLongCharDescriptors;
  BtGattWriteDescriptors *writeDescriptors;
  BtGattWriteLongDescriptors *writeLongDescriptors;
        BtGattReadByType *readByType;
 }p;
}btGattOperationData;


typedef void (*GattOpHandler) (kal_uint8 event, BtRemoteDevice *link);
typedef void (*GattAPCallBack) (void *, BtGattEvent *);

typedef struct
{
 BtOperation op;
 btGattOperationData parms;
 GattAPCallBack apCb;
} BtGattOp;


typedef struct _BtGattHandler
{
    ListEntry node;
    GattAPCallBack callback;
} BtGattHandler;

void GATT_Init(void);
void BT_GattRegisterConnectedEvent(BtGattHandler *hdl, GattAPCallBack cb);
BtStatus BT_GATT_ExchangeMTU(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_DiscoveryAllPrimaryService(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_DiscoveryPrimaryServiceByUUID(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_FindIncludeService(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_DiscoveryAllCharacteristicOfService(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_DiscoveryCharacteristicByUUID(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_DiscoveryAllCharacteristicDescriptors(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_ReadCharacteristicValue(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_ReadLongCharacteristicValues(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_WriteWithoutResponse(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_ReadMultipleCharacteristicValues(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_SignedWriteWithoutResponse(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_ReadCharacteristicDescriptors(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_ReadUsingCharacteristicUUID(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_ReadLongCharacteristicDescriptors(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_WriteCharacteristicValue(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_WriteLongCharacteristicValues(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_ReliableWrites(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_WriteCharacteristicDescriptors(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_WriteLongCharacteristicDescriptors(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_Notifications(BtRemoteDevice *link, BtGattOp *op);
BtStatus BT_GATT_Indications(BtRemoteDevice *link, BtGattOp *op);
kal_uint16 BT_GATT_GetNegotiationMTU(BtRemoteDevice *link);
BtStatus BT_GATT_SetDisconnectTimeout(BtRemoteDevice *link, kal_uint32 value);
# 42 "../btcore/inc/sys/gatt_i.h" 2
# 52 "../btcore/inc/sys/gatt_i.h"
typedef struct _BtGattConn
{
    kal_uint8 state;
    BtRemoteDevice *link;
    BtAttEvent *attEvent;
    BtGattEvent gattEvent;
    ListEntry gattRequestOpList;
    ListEntry gattNotificationOpList;
    ListEntry gattIndicationOpList;
    BtOperation *gattRequestCurOp;
    BtOperation *gattNotificationCurOp;
    BtOperation *gattIndicationCurOp;
    GattOpHandler gattRequestHandler;
    GattOpHandler gattNotificationHandler;
    GattOpHandler gattIndicationHandler;
    kal_uint16 att_mtu;
    BtGattOp mtuOp;
    kal_uint32 disconnectTimerValue;
    EvmTimer disconnectTimer;
} BtGattConn;


typedef struct _BtGattContext
{
    BtGattConn conn[3];
 ListEntry regList;
} BtGattContext;
# 89 "../btadp_int/include/bt_adp_debug.h" 2
# 112 "../btadp_int/include/bt_adp_debug.h"
typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 filter;
} bt_dbg_query_context_req_struct;


typedef struct
{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint32 filter;
} bt_dbg_query_context_cnf_struct;

typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 context[1];
}bt_dbg_context_ind_struct;


typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtHciContext hci;
}bt_dbg_hci_context_ind_struct;


typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtMeContext me;
}bt_dbg_me_context_ind_struct;


typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtRmgContext rmg;
}bt_dbg_rmg_context_ind_struct;


typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtL2CapContext l2cap;
}bt_dbg_l2cap_context_ind_struct;


typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtRxbuffContext rxbuf;
}bt_dbg_rxbuf_context_ind_struct;


typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtSdpServContext sdps;
}bt_dbg_sdps_context_ind_struct;


typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtSdpClientContext sdpc;
}bt_dbg_sdpc_context_ind_struct;


typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtRfcContext rfc;
}bt_dbg_rfc_context_ind_struct;



typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtA2mpContext a2mp;
}bt_dbg_a2mp_context_ind_struct;




typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtAttContext att;
}bt_dbg_att_context_ind_struct;


typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
    BtGattContext gatt;
}bt_dbg_gatt_context_ind_struct;
# 214 "../btadp_int/include/bt_adp_debug.h"
typedef struct{
    kal_uint8 ref_count; kal_uint16 msg_len;
}bt_dbg_manual_dump_req_struct;
# 132 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_time_struct.h" 1
# 91 "../include/profiles/bluetooth_time_struct.h"
typedef kal_uint8 TimeSEventType;
# 108 "../include/profiles/bluetooth_time_struct.h"
typedef kal_uint8 TimeCEventType;
# 176 "../include/profiles/bluetooth_time_struct.h"
typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_timec_register_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_timec_register_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_timec_deregister_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_timec_deregister_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 addr[6];
} bt_timec_connect_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_timec_connect_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_timec_disconnect_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
    kal_uint8 rspcode;
} bt_timec_disconnect_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_timec_get_cttime_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
 kal_uint8 rspcode;
    kal_uint16 year;
 kal_uint8 month;
 kal_uint8 day;
 kal_uint8 hours;
 kal_uint8 minutes;
 kal_uint8 seconds;
 kal_uint8 day_of_week;
 kal_uint8 frac256;
 kal_uint8 adjust_reason;
} bt_timec_get_cttime_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
} bt_timec_get_cttime_notify_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
    kal_uint8 index;
 kal_uint8 rspcode;
 kal_uint16 notify_config;
} bt_timec_get_cttime_notify_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint16 notify_config;
} bt_timec_set_cttime_notify_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_timec_set_cttime_notify_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint16 year;
 kal_uint8 month;
 kal_uint8 day;
 kal_uint8 hours;
 kal_uint8 minutes;
 kal_uint8 seconds;
 kal_uint8 day_of_week;
 kal_uint8 frac256;
 kal_uint8 adjust_reason;
} bt_timec_update_cttime_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_timec_update_cttime_rsp_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_timec_get_local_time_info_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
 char time_zone;
 kal_uint8 dst;
} bt_timec_get_local_time_info_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_timec_get_ref_time_info_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
 kal_uint8 time_source;
 kal_uint8 accuracy;
 kal_uint8 days_since_update;
 kal_uint8 hours_since_update;
} bt_timec_get_ref_time_info_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_timec_get_dst_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
 kal_uint16 year;
 kal_uint8 month;
 kal_uint8 day;
 kal_uint8 hours;
 kal_uint8 minutes;
 kal_uint8 seconds;
 kal_uint8 dst;
} bt_timec_get_dst_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_timec_request_server_update_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_timec_request_server_update_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_timec_cancel_server_update_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_timec_cancel_server_update_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_timec_get_server_update_status_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
 kal_uint8 cur_state;
 kal_uint8 result;
} bt_timec_get_server_update_status_cnf_struct;





typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_times_register_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_register_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_times_deregister_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_deregister_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 addr[6];
} bt_times_authorize_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_authorize_rsp_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 addr[6];
} bt_times_connect_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 addr[6];
 kal_uint8 rspcode;
} bt_times_connect_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_times_disconnect_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_disconnect_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_times_get_cttime_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
 kal_uint16 year;
 kal_uint8 month;
 kal_uint8 day;
 kal_uint8 hours;
 kal_uint8 minutes;
 kal_uint8 seconds;
 kal_uint8 day_of_week;
 kal_uint8 frac256;
 kal_uint8 adjust_reason;
} bt_times_get_cttime_rsp_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_times_get_cttime_notify_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
 kal_uint8 notify_config;
} bt_times_get_cttime_notify_rsp_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 notify_config;
} bt_times_set_cttime_notify_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_set_cttime_notify_rsp_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint16 year;
 kal_uint8 month;
 kal_uint8 day;
 kal_uint8 hours;
 kal_uint8 minutes;
 kal_uint8 seconds;
 kal_uint8 day_of_week;
 kal_uint8 frac256;
 kal_uint8 adjust_reason;
} bt_times_update_cttime_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_update_cttime_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 char time_zone;
 kal_uint8 dst;
} bt_times_set_local_time_info_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_set_local_time_info_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 time_source;
 kal_uint8 accuracy;
 kal_uint8 days_since_update;
 kal_uint8 hours_since_update;
} bt_times_set_ref_time_info_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_set_ref_time_info_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint16 year;
 kal_uint8 month;
 kal_uint8 day;
 kal_uint8 hours;
 kal_uint8 minutes;
 kal_uint8 seconds;
 kal_uint8 dst;
} bt_times_set_dst_req_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_set_dst_cnf_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_times_request_server_update_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_request_server_update_rsp_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_times_cancel_server_update_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
} bt_times_cancel_server_update_rsp_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
} bt_times_get_server_update_status_ind_struct;


typedef struct {
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 index;
 kal_uint8 rspcode;
 kal_uint8 cur_state;
 kal_uint8 result;
} bt_times_get_server_update_status_rsp_struct;
# 133 "database/parse_db.c" 2
# 1 "../include/profiles/bluetooth_hdp_struct.h" 1
# 51 "../include/profiles/bluetooth_hdp_struct.h"
typedef enum
{
 BT_HDP_SUCCESS,
 BT_HDP_FAIL,
 BT_HDP_FAIL_BUSY,
 BT_HDP_FAIL_NOT_ALLOW,
 BT_HDP_FAIL_TIMEOUT,
 BT_HDP_FAIL_REMOTE_REJECT,
 BT_HDP_FAIL_NO_RESOURCE,
} bt_hdp_status;


typedef enum
{
 BT_HDP_ROLE_SOURCE = 0x00,
 BT_HDP_ROLE_SINK = 0x01,
 BT_HDP_ROLE_INVALID = 0xFF,
} bt_hdp_role;

typedef enum
{
 BT_HDP_CHANNEL_TYPE_NO_PREFERENCE = 0x00,
 BT_HDP_CHANNEL_TYPE_RELIABLE = 0x01,
 BT_HDP_CHANNEL_TYPE_STREAMING = 0x02,
} bt_hdp_channel_type;


typedef enum
{
 BT_HDP_REOPEN_TYPE_DEFAULT = 0x00,
 BT_HDP_REOPEN_TYPE_INDEX = 0x01,
 BT_HDP_REOPEN_TYPE_MDL_ID = 0x02,
} bt_hdp_reopen_type;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 role;
 kal_uint16 dataType;
 kal_uint8 channelType;
 char description[255];
 int app_id;
} bt_hdp_register_instance_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 result;
 int app_id;
 kal_uint8 mdepId;
} bt_hdp_register_instance_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 mdepId;
} bt_hdp_deregister_instance_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 result;
 kal_uint8 mdepId;
} bt_hdp_deregister_instance_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint8 mdepId;
 kal_uint8 config;
 kal_uint32 index;
} bt_hdp_connect_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 result;
 bt_addr_struct bdaddr;
 kal_uint8 mdepId;
 kal_uint16 mdlId;
 unsigned char mainChannel;
 kal_uint32 index;
} bt_hdp_connect_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint16 mdlId;
 kal_uint32 index;
} bt_hdp_disconnect_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 result;
 bt_addr_struct bdaddr;
 kal_uint16 mdlId;
 kal_uint32 index;
} bt_hdp_disconnect_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint16 mdlId;
} bt_hdp_remove_connection_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 result;
 bt_addr_struct bdaddr;
} bt_hdp_remove_connection_cnf_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint8 mdepId;
 kal_uint16 mdlId;
 unsigned char mainChannel;
 kal_uint16 l2capId;
} bt_hdp_channel_opened_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint16 mdlId;
 kal_uint32 sessionId;
} bt_hdp_channel_opened_rsp_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint16 mdlId;
} bt_hdp_channel_closed_ind_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
} bt_hdp_get_main_channel_req_struct;


typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 result;
 bt_addr_struct bdaddr;
 kal_uint16 mdlId;
} bt_hdp_get_main_channel_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint16 mdlId;
} bt_hdp_get_instance_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 result;
 kal_uint8 mdepId;
} bt_hdp_get_instance_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint16 mdlId;
} bt_hdp_get_l2cap_channel_req_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 result;
 bt_addr_struct bdaddr;
 kal_uint16 mdlId;
 kal_uint16 l2capId;
} bt_hdp_get_l2cap_channel_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint8 role;
} bt_hdp_echo_req_struct;
typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 kal_uint8 result;
 bt_addr_struct bdaddr;
 kal_uint8 role;
} bt_hdp_echo_cnf_struct;

typedef struct
{
 kal_uint8 ref_count; kal_uint16 msg_len;
 bt_addr_struct bdaddr;
 kal_uint8 type;
 kal_uint16 value;
} bt_hdp_reopen_connection_req_struct;
# 134 "database/parse_db.c" 2
# 1 "../btcore/inc/sys/hfgi.h" 1
# 103 "../btcore/inc/sys/hfgi.h"
# 1 "../btcore/btprofiles/include/hfg.h" 1
# 69 "../btcore/btprofiles/include/hfg.h"
# 1 "../btcore/btprofiles/include/hfg_struct.h" 1
# 69 "../btcore/btprofiles/include/hfg_struct.h"
# 1 "../btcore/inc/rfcomm_adp.h" 1
# 70 "../btcore/btprofiles/include/hfg_struct.h" 2
# 1 "../btcore/inc/atp.h" 1
# 66 "../btcore/inc/atp.h"
# 1 "../btcore/inc/atconfig.h" 1
# 67 "../btcore/inc/atp.h" 2
# 118 "../btcore/inc/atp.h"
typedef kal_uint16 AtCommand;
# 206 "../btcore/inc/atp.h"
typedef kal_uint8 AtResultFlag;
# 224 "../btcore/inc/atp.h"
typedef kal_uint8 AtStatus;
# 255 "../btcore/inc/atp.h"
typedef kal_uint8 AtError;
# 290 "../btcore/inc/atp.h"
typedef kal_uint8 AtNumberFormat;
# 313 "../btcore/inc/atp.h"
# 1 "../btcore/inc/at_hs.h" 1
# 122 "../btcore/inc/at_hs.h"
typedef union _AtHeadsetCmd {


    struct {
        kal_uint8 gain;
    } mic;


    struct {
        kal_uint8 gain;
    } speaker;


    struct {
        kal_uint8 button;
    } keypad;

} AtHeadsetCmd;
# 150 "../btcore/inc/at_hs.h"
typedef union _AtHeadsetResult {


    struct {
        kal_uint8 gain;
    } mic;


    struct {
        kal_uint8 gain;
    } speaker;

} AtHeadsetResult;
# 314 "../btcore/inc/atp.h" 2
# 1 "../btcore/inc/at_hf.h" 1
# 246 "../btcore/inc/at_hf.h"
typedef kal_uint8 AtHoldAction;
# 281 "../btcore/inc/at_hf.h"
typedef kal_uint32 AtHfFeatures;
# 304 "../btcore/inc/at_hf.h"
typedef kal_uint32 AtAgFeatures;
# 331 "../btcore/inc/at_hf.h"
typedef kal_uint8 AtHoldFlag;
# 368 "../btcore/inc/at_hf.h"
typedef kal_uint8 AtResponseHold;
# 388 "../btcore/inc/at_hf.h"
typedef kal_uint8 AtCallState;
# 414 "../btcore/inc/at_hf.h"
typedef kal_uint8 AtOperFormat;
# 441 "../btcore/inc/at_hf.h"
typedef union _AtHandsfreeCmd {


    struct {
        const char *number;
    } dial;


    struct {



        kal_uint8 notify;
    } wait;


    struct {

        AtHoldAction action;





        kal_uint8 call;
    } hold;


    struct {
        unsigned char enabled;
    } callId;


    struct {
        kal_uint8 mode;
        kal_uint8 ind;
    } report;


    struct {
        kal_uint8 tone;
    } dtmf;


    struct {
        unsigned char enabled;
    } vrec;

    struct {
        AtHfFeatures bitmap;
    } features;


    struct {
        AtResponseHold setting;
    } btrh;


    struct {



        kal_uint8 mode;


        AtOperFormat format;
    } networkOper;


    struct {
        kal_uint8 num;
        unsigned char enabled[9];
        unsigned char changed[9];
    } indActivation;


    struct {
        kal_uint8 id;
    } codecSelection;


    struct {
        kal_uint8 num;
        kal_uint8 id[2];
    } availCodec;
} AtHandsfreeCmd;
# 537 "../btcore/inc/at_hf.h"
typedef union _AtHandsfreeResult {


    struct {
        const char *number;
        kal_uint8 classmap;
        AtNumberFormat type;
    } wait;


    struct {
        AtHoldFlag flags;
    } hold_test;


    struct {

        kal_uint8 num;

        struct {

            const char *description;



            const char *range;
        } ind[9];

    } indicators_test;


    struct {

        kal_uint8 num;
        struct {

            kal_uint8 value;
        } ind[9];
    } indicators_read;


    struct {
        const char *number;
        AtNumberFormat type;
    } callId;


    struct {

        kal_uint8 indicator;

        kal_uint8 value;
    } event;


    struct {
        const char *number;
    } voiceTag;


    struct {
        unsigned char enabled;
    } vrec;


    struct {
        AtAgFeatures bitmap;
    } features;


    struct {
        unsigned char enabled;
    } inBandRing;


    struct {
        AtResponseHold setting;
    } btrh;


    struct {

        const char *number;


        AtNumberFormat type;


        kal_uint8 service;
    } subscribeNum;


    struct {





        kal_uint8 index;




        kal_uint8 dir;


        AtCallState state;


        kal_uint8 mode;


        kal_uint8 multiParty;


        const char *number;


        AtNumberFormat type;
    } currentCalls;


    struct {



        kal_uint8 mode;


        AtOperFormat format;


        const char *oper;

    } networkOper_read;


    struct {
        kal_uint8 id;
    } codecSelection;
} AtHandsfreeResult;
# 717 "../btcore/inc/at_hf.h"
void AT_MapHfIndicators(const char *Known[],
                        kal_uint8 Map[],
                        const kal_uint8 maxNumInd,
                        AtHandsfreeResult *Remote);
# 315 "../btcore/inc/atp.h" 2
# 1 "../btcore/inc/at_pb.h" 1
# 137 "../btcore/inc/at_pb.h"
typedef kal_uint16 AtPbStorageType;
# 175 "../btcore/inc/at_pb.h"
typedef union _AtPhonebookCmd {


    struct {

        AtPbStorageType select;
    } storage;


    struct {

        kal_uint16 first;




        kal_uint16 last;
    } read;


    struct {

        const char *text;
    } find;


    struct {

        kal_uint16 index;


        AtNumberFormat type;


        const char *number;




        const char *text;
    } write;

} AtPhonebookCmd;





typedef union _AtPhonebookResult {


    struct {

        AtPbStorageType selected;


        kal_uint16 used;


        kal_uint16 total;

    } storage_read;


    struct {

        AtPbStorageType supported;
    } storage_test;



    struct {

        kal_uint16 index;


        AtNumberFormat type;


        const char *number;




        const char *text;
    } read, find;


    struct {



        const char *range;


        kal_uint16 numLength;


        kal_uint16 textLength;
    } read_test;


    struct {

        kal_uint16 numLength;


        kal_uint16 textLength;
    } find_test;


    struct {



        const char *range;


        kal_uint16 numLength;




  const char *types;


        kal_uint16 textLength;
    } write_test;

} AtPhonebookResult;
# 316 "../btcore/inc/atp.h" 2
# 1 "../btcore/inc/at_sms.h" 1
# 67 "../btcore/inc/at_sms.h"
# 1 "../include/profiles/bluetooth_hfg_common.h" 1
# 68 "../btcore/inc/at_sms.h" 2
# 203 "../btcore/inc/at_sms.h"
typedef kal_uint8 AtSmsStorage;
# 230 "../btcore/inc/at_sms.h"
typedef kal_uint8 AtSmsStatus;
# 258 "../btcore/inc/at_sms.h"
typedef kal_uint8 AtSMSType;
# 291 "../btcore/inc/at_sms.h"
typedef union _AtSmsCmd
{

 HfgSMSService_cmd service;


 HfgSMSPrefStorage_cmd preferred;


 HfgSMSFormat_cmd format;


 HfgSMSSrviceCentre_cmd SCA;


 HfgSMSTextModeParam_cmd textModeParam;


     HfgSMSShowParams_cmd show;


 HfgSMSIndSetting_cmd newMsgIndSetting;


 HfgSMSList_cmd status;


 HfgSMSRead_cmd readMsgIndex;




 HfgSMSSend_cmd sendMsg;


 HfgSMSSendStored_cmd storedMsg;




 HfgSMSWrite_cmd writeMsg;


 HfgSMSDelete_cmd delMsgIndex;

    struct {
        kal_uint8 mode;
        const char *mids;
        const char *dcss;
    }CBMTypes;
} AtSmsCmd;
# 504 "../btcore/inc/at_sms.h"
typedef union _AtSmsResult {


 const char *supportedServices;



 HfgSMSService_read service;



 HfgSMSService_result service_result;



 HfgSMSPrefStorage_test preferred_test;



 HfgSMSPrefStorage_read preferred_read;



 HfgSMSPrefStorage_result preferred_result;



    const char *supportedMsgFormat;



 HfgSMSFormat_read msgFormat;



 HfgSMSSrviceCentre_read SCA;



 HfgSMSTextModeParam_read textModeParams;



 const char *showModes;



 HfgSMSShowParams_read show;



 const char *newMsgInd_test;



 HfgSMSIndSetting_read newMsgIndSetting;



 HfgSMSNewMsgInd newMsgIndication;



    const char *supportedStatus;
# 581 "../btcore/inc/at_sms.h"
 HfgSMSList_result listMsg;
# 600 "../btcore/inc/at_sms.h"
 HfgSMSRead_result readMsg;




 HfgSMSSend_result sendMsg_rsp;




 HfgSMSSendStored_result sendStoredMsg_rsp;



 HfgSMSWrite_result index;



 struct {
     kal_uint8 mode;
     const char *mids;
     const char *dcss;
 }CBMTypes;



 const char *supportedCBMMode;
# 636 "../btcore/inc/at_sms.h"
    struct {
        AtError type;
    } error;
} AtSmsResult;
# 317 "../btcore/inc/atp.h" 2
# 1 "../btcore/inc/at_dun.h" 1
# 131 "../btcore/inc/at_dun.h"
typedef kal_uint8 AtDunCmd;
typedef kal_uint8 AtDunResult;
# 318 "../btcore/inc/atp.h" 2
# 331 "../btcore/inc/atp.h"
typedef struct _AtContext {
    kal_uint8 lastCmd[3];
} AtContext;
# 343 "../btcore/inc/atp.h"
typedef struct _AtCommands {


    ListEntry node;





    AtCommand type;

 unsigned char bContinue;

    union {

        AtHeadsetCmd hs;


        AtHandsfreeCmd hf;


        AtPhonebookCmd pb;


        AtSmsCmd sms;


        AtDunCmd dun;


        struct {

            kal_uint8 mode;
        } error;



        struct {

            const char *type;
        } charSet;

    } p;
} AtCommands;
# 396 "../btcore/inc/atp.h"
typedef struct _AtResults {


    ListEntry node;




    AtCommand type;

    AtResultFlag flag;

    union {

        AtHeadsetResult hs;


        AtHandsfreeResult hf;


        AtPhonebookResult pb;


        AtSmsResult sms;


        AtDunResult dun;


        kal_uint8 *data;


        kal_uint8 parm8;


        kal_uint16 parm16;


        kal_uint32 parm32;


        unsigned char parmB;


  const char *manufactureID;


  const char *modelID;


   const char *charset_test;


  const char *charset;


        struct {
            AtError type;
        } error;

    } p;

} AtResults;
# 480 "../btcore/inc/atp.h"
AtStatus AT_Init(AtContext *Atc);
# 504 "../btcore/inc/atp.h"
AtStatus TE_Encode(AtContext *Atc, const AtCommands *Command, XaBufferDesc *Output);
# 525 "../btcore/inc/atp.h"
AtStatus TE_Decode(AtContext *Atc, AtResults *Result, XaBufferDesc *Input);
# 551 "../btcore/inc/atp.h"
AtStatus ME_Encode(AtContext *Atc, const AtResults *Result, XaBufferDesc *Output);
# 572 "../btcore/inc/atp.h"
AtStatus ME_Decode(AtContext *Atc, AtCommands *Command, XaBufferDesc *Input);
# 591 "../btcore/inc/atp.h"
void AT_Range2MinMax(const char *Range, kal_uint16 *Min, kal_uint16 *Max);
# 71 "../btcore/btprofiles/include/hfg_struct.h" 2
# 1 "../btcore/inc/conmgr.h" 1
# 197 "../btcore/inc/conmgr.h"
typedef kal_uint8 CmgrEvent;
# 273 "../btcore/inc/conmgr.h"
typedef kal_uint8 CmgrSniffExitPolicy;
# 294 "../btcore/inc/conmgr.h"
typedef enum{
    CMGR_AUDIO_CODEC_MSBC = 0,
    NUM_OF_CMGR_CODEC,
}CmgrAudioCodec;
# 309 "../btcore/inc/conmgr.h"
typedef kal_uint8 CmgrAudioParms;
# 319 "../btcore/inc/conmgr.h"
typedef struct _CmgrHandler CmgrHandler;






typedef void (*CmgrCallback) (CmgrHandler *Handler, CmgrEvent Event, BtStatus Status);
# 341 "../btcore/inc/conmgr.h"
typedef struct _CmgrAudioData
{
    kal_uint16 len;
    kal_uint8 *data;
} CmgrAudioData;






struct _CmgrHandler
{
    ListEntry node;

    CmgrCallback callback;
    BtDeviceContext *bdc;
    BtErrorCode errCode;
    BtRemoteDevice *remDev;
    kal_uint8 sniffSubratingEnabled;
# 369 "../btcore/inc/conmgr.h"
    BtHandler btHandler;


    BtScoConnect *scoConnect;


    BtSelectDeviceToken devQuery;
    kal_uint8 flags;


    CmgrSniffExitPolicy sniffPolicy;
    EvmTimer sniffTimer;
    kal_uint8 sniffTimerActivated;
    TimeT sniffTimeout;
    BtSniffInfo sniffInfo;
};
# 399 "../btcore/inc/conmgr.h"
unsigned char CMGR_Init(void);

void CMGR_Deinit(void);
# 424 "../btcore/inc/conmgr.h"
BtStatus CMGR_RegisterHandler(CmgrHandler *Handler, CmgrCallback Callback);
# 443 "../btcore/inc/conmgr.h"
BtStatus CMGR_DeregisterHandler(CmgrHandler *Handler);
# 481 "../btcore/inc/conmgr.h"
BtStatus CMGR_CreateDataLink(CmgrHandler *Handler, BD_ADDR *Addr);
# 505 "../btcore/inc/conmgr.h"
BtStatus CMGR_RemoveDataLink(CmgrHandler *Handler);
void CMGR_RemoveCmgrWithDevice(CmgrHandler *Handler);
# 521 "../btcore/inc/conmgr.h"
unsigned char CMGR_IsLinkUp(CmgrHandler *Handler);
# 534 "../btcore/inc/conmgr.h"
BtRemDevState CMGR_GetLinkState(CmgrHandler *Handler);
# 550 "../btcore/inc/conmgr.h"
BtRemoteDevice *CMGR_GetRemoteDevice(CmgrHandler *Handler);


BtRemoteDevice *CMGR_GetRemoteLink(CmgrHandler *Handler);






BtStatus CmgrRegisterAudioHandler(CmgrHandler *Handler, unsigned char flag);
BtStatus CmgrDeregisterAudioHandler(CmgrHandler *Handler);


BtStatus CMGR_RegisterScoHandler(CmgrHandler *Handler);


BtStatus CMGR_RegisterScoRequestHandler(CmgrHandler *Handler);


BtStatus CMGR_DeregisterScoHandler(CmgrHandler *Handler);
# 590 "../btcore/inc/conmgr.h"
BtStatus CMGR_RegisterAudioHandler(CmgrHandler *Handler);
# 610 "../btcore/inc/conmgr.h"
BtStatus CMGR_RegisterAudioRequestHandler(CmgrHandler *Handler);
# 629 "../btcore/inc/conmgr.h"
BtStatus CMGR_DeregisterAudioHandler(CmgrHandler *Handler);
# 653 "../btcore/inc/conmgr.h"
BtStatus CMGR_CreateAudioLink(CmgrHandler *Handler);
# 676 "../btcore/inc/conmgr.h"
BtStatus CMGR_CreateAudioLink_Ex(CmgrHandler *Handler, CmgrAudioCodec codec);
# 695 "../btcore/inc/conmgr.h"
BtStatus CMGR_RemoveAudioLink(CmgrHandler *Handler);
# 732 "../btcore/inc/conmgr.h"
unsigned char CMGR_IsAudioUp(CmgrHandler *Handler);
# 744 "../btcore/inc/conmgr.h"
CmgrAudioParms CMGR_GetAudioDefaultParms(void);
# 754 "../btcore/inc/conmgr.h"
void CMGR_SetAudioVoiceSettings(BtScoAudioSettings settings);
# 764 "../btcore/inc/conmgr.h"
BtScoAudioSettings CMGR_GetAudioVoiceSettings(void);
# 782 "../btcore/inc/conmgr.h"
BtStatus CMGR_SetAudioCustomParms(BtScoTxParms *customParms);

kal_uint8 CMGR_GetProfileSupportAudioType(void);
# 824 "../btcore/inc/conmgr.h"
BtStatus CMGR_SetSniffTimer(CmgrHandler *Handler, BtSniffInfo *SniffInfo, TimeT Time);
BtStatus CMGR_ActivateSniffTimer(CmgrHandler *Handler);
# 836 "../btcore/inc/conmgr.h"
TimeT CMGR_GetSniffTimer(CmgrHandler *Handler);
# 856 "../btcore/inc/conmgr.h"
BtStatus CMGR_ClearSniffTimer(CmgrHandler *Handler);
# 867 "../btcore/inc/conmgr.h"
void CMGR_IndicateLinkActivity(CmgrHandler *Handler);
# 884 "../btcore/inc/conmgr.h"
BtStatus CMGR_DisableSniffTimer(CmgrHandler *Handler);
# 900 "../btcore/inc/conmgr.h"
BtStatus CMGR_EnableSniffSubratingMode(CmgrHandler *Handler);
# 913 "../btcore/inc/conmgr.h"
void CMGR_DisableSniffSubratingMode(CmgrHandler *Handler);
# 936 "../btcore/inc/conmgr.h"
BtStatus CMGR_SetSniffExitPolicy(CmgrHandler *Handler, CmgrSniffExitPolicy Policy);
# 950 "../btcore/inc/conmgr.h"
CmgrSniffExitPolicy CMGR_GetSniffExitPolicy(CmgrHandler *Handler);
BtStatus CMGR_SetDeviceAsMaster(CmgrHandler *Handler);
BtStatus CMGR_SetRemoteAsMaster(BtRemoteDevice *link);
void CMGR_HidNoRoleSwitch(kal_uint8 on_off);

BtStatus CMGR_ReadRSSI(BtRemoteDevice *remDev);
unsigned char ConnMgrIsLinkConnected(CmgrHandler *Handler);


BtStatus CMGR_SetQoS(CmgrHandler *Handler, int level);
# 72 "../btcore/btprofiles/include/hfg_struct.h" 2

# 1 "../btcore/inc/at_hf.h" 1
# 74 "../btcore/btprofiles/include/hfg_struct.h" 2
# 310 "../btcore/btprofiles/include/hfg_struct.h"
typedef kal_uint8 HfgEvent;
# 787 "../btcore/btprofiles/include/hfg_struct.h"
typedef kal_uint8 HfgSniffExitPolicy;
# 803 "../btcore/btprofiles/include/hfg_struct.h"
typedef AtError HfgCmeError;
# 835 "../btcore/btprofiles/include/hfg_struct.h"
typedef AtResults HfgResponse;
# 845 "../btcore/btprofiles/include/hfg_struct.h"
typedef kal_uint8 HfgAtMode;
# 868 "../btcore/btprofiles/include/hfg_struct.h"
typedef kal_uint8 HfgAtReport;
# 885 "../btcore/btprofiles/include/hfg_struct.h"
typedef kal_uint8 HfgRejectFeature;
# 902 "../btcore/btprofiles/include/hfg_struct.h"
typedef kal_uint32 HfgAvailCodecs;
# 916 "../btcore/btprofiles/include/hfg_struct.h"
typedef enum
{
    HFG_CODEC_NONE = 0x00,
    HFG_CODEC_CVSD = 0x01,
    HFG_CODEC_MSBC = 0x02,
}HfgCodec;





typedef struct _HfgChannel HfgChannel;
# 974 "../btcore/btprofiles/include/hfg_struct.h"
typedef struct _HfgCallbackParms HfgCallbackParms;
struct _HfgCallbackParms
{
    HfgEvent event;
    unsigned short status;
    kal_uint8 errCode;




    union {
        void *ptr;
        void *context;
        HfgHandsFreeFeatures features;
        unsigned char enabled;
        const char *phoneNumber;
        const char *memory;
        kal_uint16 index;
        kal_uint8 dtmf;
        kal_uint8 gain;
        kal_uint8 button;
        HfgHold *hold;
        HfgHandsFreeVersion version;
        void *response;
        BD_ADDR *addr;
        HfgResponseHold respHold;





        HfgAtData *data;
        const char *charset;

        kal_uint16 pbStorage;
        HfgPbRead *pbRead;
        HfgPbFind *pbFind;
        HfgPbWrite *pbWrite;

        HfgSMSService_cmd service;
        HfgSMSPrefStorage_cmd *prefStorage;
        HfgSMSFormat_cmd format;
        HfgSMSSrviceCentre_cmd *serviceCentre;
        HfgSMSTextModeParam_cmd *textParams;
        HfgSMSShowParams_cmd show;
        HfgSMSIndSetting_cmd *newMsgInd;
        HfgSMSList_cmd stat;
        HfgSMSRead_cmd readMsgIndex;
        HfgSMSDelete_cmd delMsgIndex;
        HfgSMSSend_cmd *sendMsg;
        HfgSMSSendStored_cmd *storedMsg;
        HfgSMSWrite_cmd *writeMsg;
    } p;
};







typedef void (*HfgCallback)(HfgChannel *Channel, HfgCallbackParms *Parms);
# 1074 "../btcore/btprofiles/include/hfg_struct.h"
struct _HfgChannel
{




    ListEntry node;
    kal_uint8 type;
    HfgCallback callback;
    RfChannel *rfChannel;
    ListEntry rspQueue;


    kal_uint8 state;
    kal_uint16 flags;
    kal_uint8 linkFlags;


    HfgHandsFreeVersion version;
    HfgHandsFreeFeatures hfFeatures;


    unsigned char bRemoteVolControl;


    kal_uint8 IndIndex[7];
    kal_uint16 IndicatorValue[7];
    unsigned char IndActivation[7];


    unsigned char indEnabled;
    unsigned char service;
    unsigned char call;
    HfgCallSetupState callSetup;
    HfgHoldState held;
    kal_uint8 battery;
    kal_uint8 signal;
    kal_uint8 roaming;


    unsigned char callWaiting;
    unsigned char callId;
    unsigned char extendedErrors;
    unsigned char nrecDisable;
    unsigned char voiceRec;
    unsigned char ibRing;


    SdpQueryToken sdpQueryToken;
    kal_uint8 queryFlags;
    kal_uint8 rfServerChannel;

    HfgCHarsetType charset;

    CmgrHandler cmgrHandler;
    BD_ADDR bdAddr;
    AtCommands atParms;
    AtResults atResults;
    AtResults *currentAtResults;
    AtResults *lastAtResults;
    XaBufferDesc atBuffer;
    XaBufferDesc atRxBufDesc;
    BtPacket atTxPacket;
    kal_uint8 *atTxData;
    kal_uint16 bytesToSend;
    kal_uint8 *atRxBuffer;
    kal_uint16 atRxLen;

    kal_bool bSuspended;


    HfgDiscReason reason;
    kal_uint8 codecState;
    kal_uint8 codecRetryCount;
    HfgCodec codecSelected;
    HfgCodec targetCodec;
    unsigned char bCodecNegSupported;
    kal_uint32 availCodecs;
};
# 70 "../btcore/btprofiles/include/hfg.h" 2
# 119 "../btcore/btprofiles/include/hfg.h"
typedef enum _BtFileEnum
{
    BT_FILE_HFG,
    BT_FILE_HFG_AT,
    BT_FILE_HFG_SDP,
    BT_FILE_HFG_SEQ,
    BT_FILE_HFG_SM,
    BT_FILE_HFG_UTIL,
}BtFileEnum;
# 148 "../btcore/btprofiles/include/hfg.h"
unsigned char hfg_init(void);
# 176 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_register(HfgChannel *Channel, HfgCallback Callback, unsigned char bHeadset);
# 199 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_deregister(HfgChannel *Channel);
# 237 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_create_service_link(HfgChannel *Channel, BD_ADDR *Addr);
# 264 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_disconnect_service_link(HfgChannel *Channel);
# 294 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_create_audio_link(HfgChannel *Channel);
# 319 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_disconnect_audio_link(HfgChannel *Channel);
# 341 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_accept_connect(HfgChannel *Channel);
# 362 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_reject_connect(HfgChannel *Channel);
# 438 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_set_indicator_value(HfgChannel *Channel, HfgIndicator Indicator,
                               kal_uint8 value, HfgResponse *Response);


BtStatus hfg_send_hf_results(HfgChannel *Channel, AtCommand Command,
                           kal_uint32 Parms, kal_uint16 ParmLen, HfgResponse *Response,
                           unsigned char done);
# 468 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_ok(HfgChannel *Channel, HfgResponse *Response);
# 498 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_error(HfgChannel *Channel, HfgCmeError Error,
                       HfgResponse *Response);
# 525 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_ring(HfgChannel *Channel, HfgResponse *Response);
# 564 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_call_list_rsp(HfgChannel *Channel, HfgCallListParms *Parms,
                             HfgResponse *Response, unsigned char FinalFlag);
# 599 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_caller_id(HfgChannel *Channel, HfgCallerIdParms *CallId, HfgResponse *Response);
# 627 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_subscriber_number_rsp(HfgChannel *Channel, HfgSubscriberNum *SubNum,
                                     HfgResponse *Response, unsigned char FinalFlag);
# 655 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_network_operator_rsp(HfgChannel *Channel, HfgNetworkOperator *Oper, HfgResponse *Response);
# 681 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_mic_volume(HfgChannel *Channel, kal_uint8 Gain, HfgResponse *Response);
# 707 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_speaker_volume(HfgChannel *Channel, kal_uint8 Gain, HfgResponse *Response);
# 733 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_ringtone_status(HfgChannel *Channel, unsigned char Enabled, HfgResponse *Response);
# 770 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_response_hold_state(HfgChannel *Channel, HfgResponseHold State, HfgResponse *Response);
# 799 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_call_waiting(HfgChannel *Channel, HfgCallWaitParms *CallWait, HfgResponse *Response);
# 826 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_read_indicator(HfgChannel *Channel, HfgReadIndicatorParms *ReadIndicator, HfgResponse *Response);
# 853 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_enable_vr(HfgChannel *Channel, unsigned char Enabled, HfgResponse *Response);
# 882 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_voice_tag_rsp(HfgChannel *Channel, const char *number, HfgResponse *Response);
# 907 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_no_carrier_rsp(HfgChannel *Channel, HfgResponse *Response);
# 932 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_busy_rsp(HfgChannel *Channel, HfgResponse *Response);
# 957 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_no_answer_rsp(HfgChannel *Channel, HfgResponse *Response);
# 982 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_delayed_rsp(HfgChannel *Channel, HfgResponse *Response);
# 1007 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_blacklisted_rsp(HfgChannel *Channel, HfgResponse *Response);



BtStatus hfg_send_supported_charset_rsp(HfgChannel *Channel, const char *supported, HfgResponse *Response);


BtStatus hfg_send_selected_charset_rsp(HfgChannel *Channel, const char *selected, HfgResponse *Response);


BtStatus hfg_send_model_id_rsp(HfgChannel *Channel, const char *modelId, HfgResponse *Response);


BtStatus hfg_send_manufacture_id_rsp(HfgChannel *Channel, const char *manufactureId, HfgResponse *Response);
# 1054 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_send_at_response(HfgChannel *Channel, const char *AtString, HfgResponse *Response, unsigned char bDone);
# 1157 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_enable_sniff_mode(HfgChannel *Channel, unsigned char Enable);
# 1175 "../btcore/btprofiles/include/hfg.h"
unsigned char hfg_is_sniff_mode_enabled(HfgChannel *Channel);
# 1199 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_set_sniff_exit_policy(HfgChannel *Channel, HfgSniffExitPolicy Policy);
# 1214 "../btcore/btprofiles/include/hfg.h"
HfgSniffExitPolicy hfg_get_sniff_exit_policy(HfgChannel *Channel);
# 1231 "../btcore/btprofiles/include/hfg.h"
BtStatus hfg_set_master_role(HfgChannel *Channel, unsigned char Flag);





BtStatus hfg_send_pb_supported_storage_rsp(HfgChannel *Channel, HfgPbStorageSupported *supported, HfgResponse *Response);


BtStatus hfg_send_pb_selected_storage_rsp(HfgChannel *Channel, HfgPbStorageSelected *selected, HfgResponse *Response);


BtStatus hfg_send_pb_read_info_rsp(HfgChannel *Channel, HfgPbReadInfo *info, HfgResponse *Response);


BtStatus hfg_send_pb_read_rsp(HfgChannel *Channel, HfgPbEntry *entry, HfgResponse *Response, unsigned char FinalFlag);


BtStatus hfg_send_pb_find_info_rsp(HfgChannel *Channel, HfgPbFindInfo *info, HfgResponse *Response);


BtStatus hfg_send_pb_find_rsp(HfgChannel *Channel, HfgPbEntry *entry, HfgResponse *Response, unsigned char FinalFlag);


BtStatus hfg_send_pb_write_info_rsp(HfgChannel *Channel, HfgPbWriteInfo *info, HfgResponse *Response);






BtStatus hfg_send_sms_supported_service_rsp(HfgChannel *Channel, const char *supported, HfgResponse *Response);



BtStatus hfg_send_sms_selected_service_rsp(HfgChannel *Channel, HfgSMSService_read *selected, HfgResponse *Response);



BtStatus hfg_send_sms_select_service_rsp(HfgChannel *Channel, HfgSMSService_result *service, HfgResponse *Response);



BtStatus hfg_send_sms_supported_pref_storage_rsp(HfgChannel *Channel, HfgSMSPrefStorage_test *supported, HfgResponse *Response);



BtStatus hfg_send_sms_selected_pref_storage_rsp(HfgChannel *Channel, HfgSMSPrefStorage_read *selected, HfgResponse *Response);



BtStatus hfg_send_sms_select_pref_storage_rsp(HfgChannel *Channel, HfgSMSPrefStorage_result *pref, HfgResponse *Response);



BtStatus hfg_send_sms_supported_format_rsp(HfgChannel *Channel, const char *supported, HfgResponse *Response);



BtStatus hfg_send_sms_selected_format_rsp(HfgChannel *Channel, kal_uint8 format, HfgResponse *Response);



BtStatus hfg_send_sms_service_centre_rsp(HfgChannel *Channel, HfgSMSSrviceCentre_read *sc, HfgResponse *Response);



BtStatus hfg_send_sms_text_mode_params_rsp(HfgChannel *Channel, HfgSMSTextModeParam_read *params, HfgResponse *Response);



BtStatus hfg_send_sms_supported_show_params_rsp(HfgChannel *Channel, const char *supported, HfgResponse *Response);



BtStatus hfg_send_sms_selected_show_params_rsp(HfgChannel *Channel, kal_uint8 show, HfgResponse *Response);



BtStatus hfg_send_sms_supported_new_msg_indication_rsp(HfgChannel *Channel, const char *supported, HfgResponse *Response);



BtStatus hfg_send_sms_selected_new_msg_indication_rsp(HfgChannel *Channel, HfgSMSIndSetting_read *selected, HfgResponse *Response);



BtStatus hfg_send_sms_new_msg_indication(HfgChannel *Channel, HfgSMSNewMsgInd *newMsg, HfgResponse *Response);



BtStatus hfg_send_sms_supported_list_status_rsp(HfgChannel *Channel, const char *supported, HfgResponse *Response);



BtStatus hfg_send_sms_list_msg_rsp(HfgChannel *Channel, HfgSMSList_result *info, HfgResponse *Response, unsigned char FinalFlag);



BtStatus hfg_send_sms_read_msg_rsp(HfgChannel *Channel, HfgSMSRead_result *info, HfgResponse *Response);



BtStatus hfg_send_sms_send_msg_rsp(HfgChannel *Channel, HfgSMSSend_result *rsp, HfgResponse *Response);



BtStatus hfg_send_sms_send_stored_msg_rsp(HfgChannel *Channel, HfgSMSSendStored_result *rsp, HfgResponse *Response);



BtStatus hfg_send_sms_write_msg_rsp(HfgChannel *Channel, kal_uint16 index, HfgResponse *Response);



BtStatus hfg_send_sms_error(HfgChannel *Channel, kal_uint16 error, HfgResponse *Response);
# 104 "../btcore/inc/sys/hfgi.h" 2



typedef enum
{
    AG_TYPE_HS = 0x00,
    AG_TYPE_HF = 0x01,
}AgType;


typedef enum
{
    HFG_STATE_CLOSED = 0x00,
    HFG_STATE_CONN_PENDING = 0x01,
    HFG_STATE_CONN_INCOMING = 0x02,
    HFG_STATE_DISCONNECTING = 0x03,
    HFG_STATE_OPEN = 0x04,
    HFG_STATE_SLC = 0x05,
}HfgStateType;




typedef enum
{

    HFG_SUBSTATE_CLOSED = HFG_STATE_CLOSED,





    HFG_SUBSTATE_CONN_OUT_W4ACL = HFG_STATE_CONN_PENDING,
    HFG_SUBSTATE_CONN_OUT_W4SDP = HFG_STATE_CONN_PENDING | 0x10,
    HFG_SUBSTATE_CONN_OUT_W4RFCOMM = HFG_STATE_CONN_PENDING | 0x20,




    HFG_SUBSTATE_CONN_IN_W4RSP = HFG_STATE_CONN_INCOMING,
    HFG_SUBSTATE_CONN_IN_W4RFCOMM = HFG_STATE_CONN_INCOMING | 0x10,


    HFG_SUBSTATE_DISC = HFG_STATE_DISCONNECTING,




    HFG_SUBSTATE_OPEN = HFG_STATE_OPEN,
    HFG_SUBSTATE_OPEN_W4SDP = HFG_STATE_OPEN | 0x10,




    HFG_SUBSTATE_SLC = HFG_STATE_SLC,
    HFG_SUBSTATE_SLC_W4SCO = HFG_STATE_SLC | 0x10,
}HfgSubStateType;
# 175 "../btcore/inc/sys/hfgi.h"
typedef enum
{
    HFG_CODEC_STATE_INIT = 0x00,
    HFG_CODEC_STATE_CODEC_SELECTING = 0x01,
    HFG_CODEC_STATE_CODEC_DECIDED = 0x02,
}HfgCodecStateType;
# 360 "../btcore/inc/sys/hfgi.h"
extern const kal_uint8 g_indicatorRange[7][3];
extern const char *g_indicators[7][2];


typedef void (*HfgState)(HfgChannel *Channel, kal_uint8 Event, AtCommands *Command);
# 390 "../btcore/inc/sys/hfgi.h"
BtStatus HfgHfgFlushRespQueue(HfgChannel *Channel);
# 400 "../btcore/inc/sys/hfgi.h"
BtStatus HfgDisconnecting(HfgChannel *Channel);
# 410 "../btcore/inc/sys/hfgi.h"
void HfgChangeSubstate(HfgChannel *Channel, kal_uint8 newState);
BtStatus HfgRegisterServerChannel(HfgChannel *Channel);
BtStatus HfgDeregisterServerChannel(HfgChannel *Channel);
# 423 "../btcore/inc/sys/hfgi.h"
BtStatus HfgCloseChannel(HfgChannel *Channel);
BtStatus HfgOpenChannel(HfgChannel *Channel, BD_ADDR *Addr);
BtStatus HfgParseRfcommData(HfgChannel *channel, RfCallbackParms *parms, kal_uint16 *offset, AtCommands *atParms);
void HfgAppCallback(HfgChannel *Channel, HfgEvent Event, BtStatus Status, kal_uint32 data);
HfgChannel * HfgFindChannel(BtRemoteDevice *remDev);
HfgChannel * HfgFindRegisteredChannel(RfChannel *rfChannel);
RfChannel *HfgAllocRfChannel(void);
void HfgFreeRfChannel(RfChannel *rfChannel);
HfgChannel * HfgGetClosedChannel(void);


BtStatus HfgDecodeCharset(HfgChannel *Channel, const char *charset, HfgCHarsetType *charsetType);
BtStatus HfgSetupCharsetTestRsp(HfgChannel *Channel);
const char* HfgGetCharsetDesc(HfgChannel *Channel, HfgCHarsetType charset);

HfgResponse *HfgAllocResponse(void);
void HfgFreeResponse(HfgResponse* rsp);


BtStatus HfgRegisterSdpServices(unsigned char bHeadset);
BtStatus HfgDeregisterSdpServices(unsigned char bHeadset);
BtStatus HfgStartServiceQuery(HfgChannel *Channel, SdpQueryMode mode);
BtStatus HfgVerifySdpQueryRsp(HfgChannel *Channel, SdpQueryToken *token);
void HfgReportPacketCompleted(HfgChannel *Channel, BtStatus status);
void HfgReportServiceConnected(HfgChannel *Channel);
unsigned char HfgCheckIndUpdate(HfgChannel *Channel, HfgIndicator Ind, kal_uint8 Value);
void HfgSetupIndicatorTestRsp(HfgChannel *Channel);
void HfgSetupIndicatorReadRsp(HfgChannel *Channel);
void HfgSetupCallHoldReadRsp(HfgChannel *Channel);
void HfgSetupErrorRsp(HfgChannel *Channel);
void HfgSendOK(HfgChannel *Channel);


BtStatus HfgCreateAclLink(BD_ADDR *Addr, CmgrHandler *Handler);
void HfgRfCallback(RfChannel *Channel, RfCallbackParms *Parms);
void HfgServiceConnectionCallback(CmgrHandler *Handler, CmgrEvent Event, BtStatus Status);
void HfgInitStateMachine(void);
BtStatus HfgEnableSniffTimerMode(CmgrHandler *Handler) ;
BtStatus HfgDisableSniffTimerMode(CmgrHandler *Handler) ;
void HfgCheckNegotiateDone(HfgChannel *Channel);


BtStatus sendResults(HfgChannel *Channel, AtResults *Results);
BtStatus AtSendResults(HfgChannel *Channel, AtResults *Results, unsigned char bAutoOK);
BtStatus AtSendRfPacket(HfgChannel *Channel, BtPacket *Packet);
BtStatus AtSendComplete(HfgChannel *Channel, BtPacket *Packet);
AtStatus AtParseCommand(HfgChannel *Channel, kal_uint8 *input,
                    kal_uint16 inputLen, AtCommands *Command);


const char* HfgGetModelID(HfgChannel *Channel);
const char* HfgGetManufactureID(HfgChannel *Channel);


kal_uint32 HfgCheckSuspend(void);



void HfgSetCodecState(HfgChannel *Channel, int state);
void HfgResetCodecState(HfgChannel *Channel);
unsigned char HfgIsInCodecSelecting(HfgChannel *Channel);
unsigned char HfgIsInCodecDecided(HfgChannel *Channel);
unsigned char HfgCheckSelectedCodec(HfgChannel *Channel, HfgCodec codecId);
void HfgSetSelectedCodec(HfgChannel *Channel, HfgCodec codecId);
unsigned char HfgCheckTargetCodec(HfgChannel *Channel, HfgCodec codecId);
void HfgSetTargetCodec(HfgChannel *Channel, HfgCodec codecId);
kal_uint32 HfgGetAvailCodecMask(HfgCodec codecId);
unsigned char HfgCheckAvailCodec(HfgChannel *Channel, HfgCodec codecId);
void HfgSetAvailCodec(HfgChannel *Channel, HfgCodec codecId);
void HfgClearAvailCodec(HfgChannel *Channel);
void HfgAddCodecRetryCount(HfgChannel *Channel);
void HfgResetCodecRetryCount(HfgChannel *Channel);
void HfgConfigureSpeechChannel(HfgCodec codecId);
unsigned char HfgCodecNegotiation(HfgChannel *Channel);
BtStatus HfgCodecConnection(HfgChannel *Channel);
# 134 "database/parse_db.c" 2
